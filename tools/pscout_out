Permission:android.permission.CHANGE_WIFI_STATE

472 Callers:

com.android.server.WifiService.enforceChangePermission()V
com.android.server.WifiService.getWifiServiceMessenger()Landroid/os/Messenger;
com.android.server.WifiService.getWifiStateMachineMessenger()Landroid/os/Messenger;
com.android.server.WifiService.disableNetwork(I)Z
com.android.server.WifiService.enableNetwork(IZ)Z
com.android.server.WifiService.removeNetwork(I)Z
com.android.server.WifiService.saveConfiguration()Z
com.android.server.WifiService.setWifiEnabled(Z)Z
com.android.server.WifiService.addOrUpdateNetwork(Landroid/net/wifi/WifiConfiguration;)I
com.android.server.WifiService.addToBlacklist(Ljava/lang/String;)V
com.android.server.WifiService.clearBlacklist()V
com.android.server.WifiService.disconnect()V
com.android.server.WifiService.reassociate()V
com.android.server.WifiService.reconnect()V
com.android.server.WifiService.setCountryCode(Ljava/lang/String;Z)V
com.android.server.WifiService.setFrequencyBand(IZ)V
com.android.server.WifiService.setWifiApConfiguration(Landroid/net/wifi/WifiConfiguration;)V
com.android.server.WifiService.setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)V
com.android.server.WifiService.startScan(Z)V
com.android.server.WifiService.startWifi()V
com.android.server.WifiService.stopWifi()V
android.net.wifi.IWifiManager$Stub$Proxy.getWifiServiceMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager$Stub.getWifiServiceMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager$Stub$Proxy.getWifiStateMachineMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager$Stub.getWifiStateMachineMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager$Stub$Proxy.disableNetwork(I)Z
android.net.wifi.IWifiManager$Stub.disableNetwork(I)Z
android.net.wifi.IWifiManager$Stub$Proxy.enableNetwork(IZ)Z
android.net.wifi.IWifiManager$Stub.enableNetwork(IZ)Z
android.net.wifi.IWifiManager$Stub$Proxy.removeNetwork(I)Z
android.net.wifi.IWifiManager$Stub.removeNetwork(I)Z
android.net.wifi.IWifiManager$Stub$Proxy.saveConfiguration()Z
android.net.wifi.IWifiManager$Stub.saveConfiguration()Z
android.net.wifi.IWifiManager$Stub$Proxy.setWifiEnabled(Z)Z
android.net.wifi.IWifiManager$Stub.setWifiEnabled(Z)Z
com.android.server.WifiService.checkAndStartWifi()V
android.net.wifi.IWifiManager$Stub$Proxy.addOrUpdateNetwork(Landroid/net/wifi/WifiConfiguration;)I
android.net.wifi.IWifiManager$Stub.addOrUpdateNetwork(Landroid/net/wifi/WifiConfiguration;)I
android.net.wifi.IWifiManager$Stub$Proxy.addToBlacklist(Ljava/lang/String;)V
android.net.wifi.IWifiManager$Stub.addToBlacklist(Ljava/lang/String;)V
android.net.wifi.IWifiManager$Stub$Proxy.clearBlacklist()V
android.net.wifi.IWifiManager$Stub.clearBlacklist()V
android.net.wifi.IWifiManager$Stub$Proxy.disconnect()V
android.net.wifi.IWifiManager$Stub.disconnect()V
android.net.wifi.IWifiManager$Stub$Proxy.reassociate()V
android.net.wifi.IWifiManager$Stub.reassociate()V
android.net.wifi.IWifiManager$Stub$Proxy.reconnect()V
android.net.wifi.IWifiManager$Stub.reconnect()V
android.net.wifi.IWifiManager$Stub$Proxy.setCountryCode(Ljava/lang/String;Z)V
android.net.wifi.IWifiManager$Stub.setCountryCode(Ljava/lang/String;Z)V
android.net.wifi.IWifiManager$Stub$Proxy.setFrequencyBand(IZ)V
android.net.wifi.IWifiManager$Stub.setFrequencyBand(IZ)V
android.net.wifi.IWifiManager$Stub$Proxy.setWifiApConfiguration(Landroid/net/wifi/WifiConfiguration;)V
android.net.wifi.IWifiManager$Stub.setWifiApConfiguration(Landroid/net/wifi/WifiConfiguration;)V
android.net.wifi.IWifiManager$Stub$Proxy.setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)V
android.net.wifi.IWifiManager$Stub.setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)V
android.net.wifi.IWifiManager$Stub$Proxy.startScan(Z)V
android.net.wifi.IWifiManager$Stub.startScan(Z)V
android.net.wifi.IWifiManager$Stub$Proxy.startWifi()V
android.net.wifi.IWifiManager$Stub.startWifi()V
android.net.wifi.IWifiManager$Stub$Proxy.stopWifi()V
android.net.wifi.IWifiManager$Stub.stopWifi()V
android.net.wifi.IWifiManager.getWifiServiceMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.IWifiManager.getWifiStateMachineMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager.disableNetwork(I)Z
android.net.wifi.IWifiManager.enableNetwork(IZ)Z
android.net.wifi.IWifiManager.removeNetwork(I)Z
android.net.wifi.IWifiManager.saveConfiguration()Z
android.net.wifi.IWifiManager.setWifiEnabled(Z)Z
com.android.server.ServerThread.run()V
android.net.wifi.IWifiManager.addOrUpdateNetwork(Landroid/net/wifi/WifiConfiguration;)I
android.net.wifi.IWifiManager.addToBlacklist(Ljava/lang/String;)V
android.net.wifi.IWifiManager.clearBlacklist()V
android.net.wifi.IWifiManager.disconnect()V
android.net.wifi.IWifiManager.reassociate()V
android.net.wifi.IWifiManager.reconnect()V
android.net.wifi.IWifiManager.setCountryCode(Ljava/lang/String;Z)V
android.net.wifi.IWifiManager.setFrequencyBand(IZ)V
android.net.wifi.IWifiManager.setWifiApConfiguration(Landroid/net/wifi/WifiConfiguration;)V
android.net.wifi.IWifiManager.setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)V
android.net.wifi.IWifiManager.startScan(Z)V
android.net.wifi.IWifiManager.startWifi()V
android.net.wifi.IWifiManager.stopWifi()V
android.net.wifi.WifiManager.getWifiServiceMessenger()Landroid/os/Messenger;
com.android.server.WifiService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.WifiManager.getWifiStateMachineMessenger()Landroid/os/Messenger;
android.net.wifi.WifiManager.disableNetwork(I)Z
android.net.wifi.WifiManager.enableNetwork(IZ)Z
android.net.wifi.WifiManager.removeNetwork(I)Z
android.net.wifi.WifiManager.saveConfiguration()Z
android.net.wifi.WifiManager.setWifiEnabled(Z)Z
com.android.commands.svc.WifiCommand.run([Ljava/lang/String;)V
android.net.wifi.WifiManager.addOrUpdateNetwork(Landroid/net/wifi/WifiConfiguration;)I
android.net.wifi.WifiManager.addToBlacklist(Ljava/lang/String;)Z
android.net.wifi.WifiManager.clearBlacklist()Z
android.net.wifi.WifiManager.disconnect()Z
android.net.wifi.WifiManager.reassociate()Z
android.net.wifi.WifiManager.reconnect()Z
android.net.wifi.WifiManager.setCountryCode(Ljava/lang/String;Z)V
android.net.wifi.WifiManager.setFrequencyBand(IZ)V
android.net.wifi.WifiManager.setWifiApConfiguration(Landroid/net/wifi/WifiConfiguration;)Z
android.net.wifi.WifiManager.setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)Z
android.net.wifi.WifiManager.startScanActive()Z
android.net.wifi.WifiManager.startScan()Z
android.net.wifi.WifiManager.startWifi()Z
android.net.wifi.WifiManager.stopWifi()Z
android.net.wifi.WifiManager.initialize(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/WifiManager$ChannelListener;)Landroid/net/wifi/WifiManager$Channel;
com.android.systemui.statusbar.policy.NetworkController.<init>(Landroid/content/Context;)V
android.net.wifi.WifiWatchdogStateMachine.<init>(Landroid/content/Context;)V
com.android.settings.wifi.WifiAPITest$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.wifi.WifiAPITest$3.onClick(Landroid/content/DialogInterface;I)V
android.net.wifi.WifiStateTracker.setRadio(Z)Z
com.android.development.Connectivity$3.onClick(Landroid/view/View;)V
com.android.providers.settings.SettingsBackupAgent.enableWifi(Z)I
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.settings.wifi.WifiApEnabler.setSoftapEnabled(Z)V
com.android.settings.wifi.WifiEnabler.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.onClick(Landroid/view/View;)V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.onCreate(Landroid/os/Bundle;)V
com.android.development.Connectivity.onStartDelayedCycle()V
com.android.commands.svc.Svc$Command.run([Ljava/lang/String;)V
android.net.wifi.WifiManager.addNetwork(Landroid/net/wifi/WifiConfiguration;)I
android.net.wifi.WifiManager.updateNetwork(Landroid/net/wifi/WifiConfiguration;)I
com.android.settings.wifi.WifiAPITest.onPreferenceClick(Landroid/preference/Preference;)Z
com.android.settings.wifi.WifiSettingsForSetupWizardXL.refreshAccessPoints(Z)V
com.android.internal.telephony.MccTable.setWifiCountryCodeFromMcc(Landroid/content/Context;I)V
com.android.internal.telephony.PhoneBase.setPropertiesByCarrier()V
com.android.settings.wifi.AdvancedWifiSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.TetherSettings.onClick(Landroid/content/DialogInterface;I)V
android.net.wifi.WifiStateTracker.reconnect()Z
android.net.wifi.WifiStateTracker.teardown()Z
com.android.settings.wifi.WifiSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.WpsDialog.onCreate(Landroid/os/Bundle;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.makeStatusBarView()Lcom/android/systemui/statusbar/phone/PhoneStatusBarView;
com.android.systemui.statusbar.tablet.TabletStatusBar.makeStatusBarView()Landroid/view/View;
android.net.wifi.WifiWatchdogStateMachine.makeWifiWatchdogStateMachine(Landroid/content/Context;)Landroid/net/wifi/WifiWatchdogStateMachine;
android.net.NetworkStateTracker.setRadio(Z)Z
com.android.providers.settings.SettingsBackupAgent.onRestore(Landroid/app/backup/BackupDataInput;ILandroid/os/ParcelFileDescriptor;)V
com.android.providers.settings.SettingsBackupAgent.onRestoreFile(Landroid/os/ParcelFileDescriptor;JILjava/lang/String;Ljava/lang/String;JJ)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.settings.TetherSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.TetherSettings.startTethering()V
com.android.development.Connectivity.access$1300(Lcom/android/development/Connectivity;)V
com.android.commands.svc.Svc.main([Ljava/lang/String;)V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.onBackButtonPressed()V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.updateConnectionState(Landroid/net/NetworkInfo$DetailedState;)V
com.android.internal.telephony.MccTable.updateMccMncConfiguration(Landroid/content/Context;Ljava/lang/String;)V
com.android.internal.telephony.cdma.CDMALTEPhone.setPropertiesByCarrier()V
com.android.internal.telephony.cdma.CDMAPhone.setPropertiesByCarrier()V
com.android.internal.telephony.gsm.GSMPhone.setPropertiesByCarrier()V
com.android.internal.telephony.PhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.sip.SipPhoneBase.setPropertiesByCarrier()V
com.android.internal.telephony.sip.SipPhone.setPropertiesByCarrier()V
android.net.NetworkStateTracker.reconnect()Z
android.net.NetworkStateTracker.teardown()Z
com.android.settings.SettingsPreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.addStatusBarWindow()V
com.android.systemui.statusbar.tablet.TabletStatusBar.addStatusBarWindow()V
com.android.server.ConnectivityService.setRadio(IZ)Z
com.android.server.ConnectivityService.setRadios(Z)Z
com.android.settings.TetherSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.startProvisioningIfNecessary(I)V
com.android.internal.telephony.cdma.CDMAPhone.updateCurrentCarrierInProvider(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.PhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhoneBase.<init>(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.sip.SipPhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.sip.SipPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.server.ConnectivityService.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
com.android.server.ConnectivityService.<init>(Landroid/content/Context;Landroid/os/INetworkManagementService;Landroid/net/INetworkStatsService;Landroid/net/INetworkPolicyManager;)V
com.android.server.ConnectivityService.tryFailover(I)V
com.android.server.ConnectivityService.teardown(Landroid/net/NetworkStateTracker;)Z
com.android.server.ConnectivityService.stopUsingNetworkFeature(Lcom/android/server/ConnectivityService$FeatureUser;Z)I
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountPreferenceBase.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DeviceInfoSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.net.DataUsageMeteredSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.TetherSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.WirelessSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.createAndAddWindows()V
com.android.systemui.statusbar.tablet.TabletStatusBar.createAndAddWindows()V
android.net.IConnectivityManager$Stub$Proxy.setRadio(IZ)Z
android.net.IConnectivityManager$Stub.setRadio(IZ)Z
android.net.IConnectivityManager$Stub$Proxy.setRadios(Z)Z
android.net.IConnectivityManager$Stub.setRadios(Z)Z
com.android.settings.SettingsPreferenceFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.internal.telephony.cdma.CDMALTEPhone.updateCurrentCarrierInProvider(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CDMAPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.PhoneFactory.getCdmaPhone()Lcom/android/internal/telephony/Phone;
com.android.internal.telephony.PhoneFactory.makeDefaultPhone(Landroid/content/Context;)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;Landroid/net/sip/SipProfile;)V
com.android.internal.telephony.sip.SipPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager$Stub.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
com.android.server.ConnectivityService.handleConnectionFailure(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.handleDisconnect(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.enforcePreference()V
com.android.server.ConnectivityService.handleConnect(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.access$200(Lcom/android/server/ConnectivityService;Lcom/android/server/ConnectivityService$FeatureUser;Z)I
com.android.server.ConnectivityService.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.settings.accounts.AccountSyncSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.accounts.SyncSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.systemui.statusbar.BaseStatusBar.createAndAddWindows()V
android.net.IConnectivityManager.setRadio(IZ)Z
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager.setRadios(Z)Z
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.LocationSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.SecuritySettings.onActivityResult(IILandroid/content/Intent;)V
com.android.internal.telephony.cdma.CDMALTEPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.PhoneProxy.deleteAndCreatePhone(I)V
com.android.internal.telephony.PhoneFactory.makeDefaultPhones(Landroid/content/Context;)V
com.android.internal.telephony.PhoneFactory.getGsmPhone()Lcom/android/internal/telephony/Phone;
com.android.internal.telephony.sip.SipPhoneFactory.makePhone(Ljava/lang/String;Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)Lcom/android/internal/telephony/sip/SipPhone;
android.net.IConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
com.android.server.ConnectivityService.access$900(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.access$1000(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.handleSetNetworkPreference(I)V
com.android.server.ConnectivityService.access$1100(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService$FeatureUser.binderDied()V
com.android.server.ConnectivityService$FeatureUser.expire()V
android.net.IConnectivityManager$Stub$Proxy.stopUsingNetworkFeature(ILjava/lang/String;)I
android.net.IConnectivityManager$Stub.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.systemui.statusbar.BaseStatusBar.start()V
android.net.ConnectivityManager.setRadio(IZ)Z
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.ConnectivityManager.setRadios(Z)Z
com.android.internal.telephony.PhoneProxy.updatePhoneObject(I)V
com.android.phone.PhoneApp.onCreate()V
com.android.internal.telephony.PhoneFactory.makeSipPhone(Ljava/lang/String;)Lcom/android/internal/telephony/sip/SipPhone;
android.net.ConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOnUpstreamMobileConnection(I)Z
com.android.server.ConnectivityService.access$1800(Lcom/android/server/ConnectivityService;I)V
com.android.server.ConnectivityService$FeatureUser.<init>(Lcom/android/server/ConnectivityService;ILjava/lang/String;Landroid/os/IBinder;)V
android.net.IConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.systemui.statusbar.phone.PhoneStatusBar.start()V
com.android.systemui.statusbar.tablet.TabletStatusBar.start()V
com.android.systemui.SystemUI.start()V
com.android.phone.SipBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler.createSipPhoneIfNeeded(Landroid/net/sip/SipProfile;)V
com.android.development.Connectivity.onCrash()V
com.android.mms.transaction.TransactionService.beginMmsConnectivity()I
com.android.server.location.GpsLocationProvider.reportAGpsStatus(III)V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOnUpstreamMobileConnection(I)Z
com.android.server.ConnectivityService.setNetworkPreference(I)V
android.net.ConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOffUpstreamMobileConnection()Z
com.android.systemui.SystemUIService.onCreate()V
com.android.phone.SipCallOptionHandler.access$300(Lcom/android/phone/SipCallOptionHandler;Landroid/net/sip/SipProfile;)V
com.android.development.Connectivity.access$2600(Lcom/android/development/Connectivity;)V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.processMessage(Landroid/os/Message;)Z
android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(I)V
android.net.IConnectivityManager$Stub.setNetworkPreference(I)V
com.android.mms.transaction.TransactionService.endMmsConnectivity()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOffUpstreamMobileConnection()Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOffUpstreamMobileConnection()Z
com.android.phone.SipCallOptionHandler$1.run()V
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.enter()V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.processMessage(Landroid/os/Message;)Z
android.net.IConnectivityManager.setNetworkPreference(I)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.exit()V
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.internal.util.State.enter()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
android.net.ConnectivityManager.setNetworkPreference(I)V
com.android.commands.svc.DataCommand.run([Ljava/lang/String;)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
com.android.internal.util.State.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.exit()V
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
com.android.mms.transaction.Observable.notifyObservers()V
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.exit()V
android.bluetooth.BluetoothProfileState$PendingCommandState.exit()V
android.bluetooth.BluetoothProfileState$StableState.exit()V
android.net.DhcpStateMachine$DefaultState.exit()V
android.net.DhcpStateMachine$RunningState.exit()V
android.net.DhcpStateMachine$StoppedState.exit()V
android.net.DhcpStateMachine$WaitBeforeStartState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState.exit()V
android.net.wifi.SupplicantStateTracker$CompletedState.exit()V
android.net.wifi.SupplicantStateTracker$DefaultState.exit()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.exit()V
android.net.wifi.SupplicantStateTracker$DormantState.exit()V
android.net.wifi.SupplicantStateTracker$HandshakeState.exit()V
android.net.wifi.SupplicantStateTracker$InactiveState.exit()V
android.net.wifi.SupplicantStateTracker$ScanState.exit()V
android.net.wifi.SupplicantStateTracker$UninitializedState.exit()V
android.net.wifi.WifiApConfigStore$ActiveState.exit()V
android.net.wifi.WifiApConfigStore$DefaultState.exit()V
android.net.wifi.WifiApConfigStore$InactiveState.exit()V
android.net.wifi.WifiStateMachine$ConnectModeState.exit()V
android.net.wifi.WifiStateMachine$DefaultState.exit()V
android.net.wifi.WifiStateMachine$DisconnectingState.exit()V
android.net.wifi.WifiStateMachine$DriverFailedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadingState.exit()V
android.net.wifi.WifiStateMachine$DriverStartingState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppedState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppingState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadedState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadingState.exit()V
android.net.wifi.WifiStateMachine$InitialState.exit()V
android.net.wifi.WifiStateMachine$ObtainingIpState.exit()V
android.net.wifi.WifiStateMachine$ScanModeState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartedState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartingState.exit()V
android.net.wifi.WifiStateMachine$SoftApStoppingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStartingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStoppingState.exit()V
android.net.wifi.WifiStateMachine$TetheredState.exit()V
android.net.wifi.WifiStateMachine$TetheringState.exit()V
android.net.wifi.WifiStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$ConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$DefaultState.exit()V
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState.exit()V
android.net.wifi.WifiWatchdogStateMachine$RssiMonitoringState.exit()V
android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WalledGardenCheckState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState.exit()V
android.server.BluetoothAdapterStateMachine$BluetoothOn.exit()V
android.server.BluetoothAdapterStateMachine$HotOff.exit()V
android.server.BluetoothAdapterStateMachine$PerProcessState.exit()V
android.server.BluetoothAdapterStateMachine$PowerOff.exit()V
android.server.BluetoothAdapterStateMachine$Switching.exit()V
android.server.BluetoothAdapterStateMachine$WarmUp.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.exit()V
com.android.internal.telephony.DataConnection$DcActivatingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.exit()V
com.android.internal.util.IState.exit()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.exit()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.exit()V
com.android.internal.util.StateMachine$SmHandler.invokeExitMethods(Lcom/android/internal/util/StateMachine$SmHandler$StateInfo;)V
com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState.exit()V
com.android.server.NsdService$NsdStateMachine$DefaultState.exit()V
com.android.server.NsdService$NsdStateMachine$DisabledState.exit()V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.transaction.SendTransaction.run()V
com.android.mms.transaction.Transaction.process()V
android.net.wifi.p2p.WifiP2pService.enforceChangePermission()V
android.net.wifi.p2p.WifiP2pService.getMessenger()Landroid/os/Messenger;
android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy.getMessenger()Landroid/os/Messenger;
android.net.wifi.p2p.IWifiP2pManager$Stub.getMessenger()Landroid/os/Messenger;
android.net.wifi.p2p.IWifiP2pManager.getMessenger()Landroid/os/Messenger;
android.net.wifi.p2p.IWifiP2pManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.p2p.WifiP2pManager.getMessenger()Landroid/os/Messenger;
android.net.wifi.p2p.WifiP2pService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.p2p.WifiP2pManager.initialize(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager$ChannelListener;)Landroid/net/wifi/p2p/WifiP2pManager$Channel;
android.net.wifi.WifiStateMachine$InitialState.enter()V
Permission:android.permission.READ_SMS

435 Callers:

com.android.mms.transaction.RetrieveTransaction.isDuplicateMessage(Landroid/content/Context;Lcom/google/android/mms/pdu/RetrieveConf;)Z
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.transaction.MessagingNotification.addSmsNotificationInfos(Landroid/content/Context;Ljava/util/Set;)V
com.android.mms.transaction.MessagingNotification.blockingUpdateNewMessageIndicator(Landroid/content/Context;JZ)V
com.android.mms.transaction.MessageStatusService.onHandleIntent(Landroid/content/Intent;)V
com.android.mms.transaction.MessagingNotification$1.run()V
com.android.mms.transaction.SmsReceiverService.handleBootCompleted()V
com.android.mms.transaction.SmsReceiverService.handleSmsReceived(Landroid/content/Intent;I)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.SmsReceiverService.access$200(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.mms.transaction.SmsReceiverService.access$100(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.Observable.notifyObservers()V
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.SendTransaction.run()V
com.android.mms.transaction.Transaction.process()V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
android.provider.Telephony$Mms.query(Landroid/content/ContentResolver;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
android.provider.Telephony$Threads.getOrCreateThreadId(Landroid/content/Context;Ljava/util/Set;)J
android.provider.Telephony$Threads.getOrCreateThreadId(Landroid/content/Context;Ljava/lang/String;)J
com.android.mms.data.Conversation.getOrCreateThreadId(Landroid/content/Context;Lcom/android/mms/data/ContactList;)J
com.google.android.mms.pdu.PduPersister.persist(Lcom/google/android/mms/pdu/GenericPdu;Landroid/net/Uri;)Landroid/net/Uri;
com.google.android.mms.pdu.PduPersister.updateHeaders(Landroid/net/Uri;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.Conversation.getOrCreateThreadId(Landroid/content/Context;Ljava/lang/String;)J
com.android.providers.telephony.MmsProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.telephony.SmsProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.mms.data.Conversation.get(Landroid/content/Context;Lcom/android/mms/data/ContactList;Z)Lcom/android/mms/data/Conversation;
com.android.mms.data.Conversation.ensureThreadId()J
com.android.mms.data.WorkingMessage.createDraftMmsMessage(Lcom/google/android/mms/pdu/PduPersister;Lcom/google/android/mms/pdu/SendReq;Lcom/android/mms/model/SlideshowModel;Landroid/net/Uri;)Landroid/net/Uri;
com.android.mms.transaction.MmsMessageSender.sendReadRec(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;I)V
com.android.mms.transaction.NotificationTransaction.<init>(Landroid/content/Context;ILcom/android/mms/transaction/TransactionSettings;Lcom/google/android/mms/pdu/NotificationInd;)V
com.android.mms.transaction.PushReceiver$ReceivePushTask.doInBackground([Landroid/content/Intent;)Ljava/lang/Void;
com.android.mms.ui.ComposeMessageActivity$11.run()V
com.android.mms.data.WorkingMessage.updateDraftMmsMessage(Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.transaction.MmsMessageSender.sendMessage(J)Z
com.android.mms.transaction.SmsReceiverService.storeMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.data.Conversation.get(Landroid/content/Context;Landroid/net/Uri;Z)Lcom/android/mms/data/Conversation;
com.android.mms.data.WorkingMessage$4.run()V
com.android.mms.data.WorkingMessage$5.run()V
com.android.mms.data.WorkingMessage.saveAsMms(Z)Landroid/net/Uri;
com.android.mms.data.WorkingMessage.preSendSmsWorker(Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage.sendMmsWorker(Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.access$1300(Lcom/google/android/mms/pdu/PduPersister;Lcom/google/android/mms/pdu/SendReq;Lcom/android/mms/model/SlideshowModel;Landroid/net/Uri;)Landroid/net/Uri;
com.android.mms.ui.MessageUtils$4.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.transaction.PushReceiver$ReceivePushTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.data.WorkingMessage.access$1400(Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.transaction.MessageSender.sendMessage(J)Z
com.android.mms.transaction.SmsReceiverService.insertMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;ILjava/lang/String;)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.replaceMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.data.Conversation.sameRecipient(Landroid/net/Uri;Landroid/content/Context;)Z
com.android.mms.ui.ComposeMessageActivity.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity$1.run()V
com.android.mms.ui.ComposeMessageActivity$30.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivity$4.run()V
com.android.mms.data.WorkingMessage.access$900(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage.access$700(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.sendSmsWorker(Ljava/lang/String;Ljava/lang/String;J)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.MessageUtils$ResizeImageResultCallback.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.data.WorkingMessage$3.run()V
com.android.mms.data.WorkingMessage$2.run()V
com.android.mms.ui.MessageUtils$3$1.run()V
com.android.mms.data.Conversation.getUri()Landroid/net/Uri;
com.android.mms.data.Conversation.markAsRead()V
com.android.mms.ui.ComposeMessageActivity.startMsgListQuery(I)V
com.android.mms.data.Conversation.blockMarkAsRead(Z)V
com.android.mms.ui.ComposeMessageActivity.checkPendingNotification()V
com.android.mms.ui.ComposeMessageActivity.loadMessageContent()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.startMsgListQuery(I)V
com.android.mms.ui.ComposeMessageActivity.access$7000(Lcom/android/mms/ui/ComposeMessageActivity;I)V
com.android.mms.ui.ComposeMessageActivity.startMsgListQuery()V
com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.mms.ui.ComposeMessageActivity.onStop()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.checkPendingNotification()V
com.android.mms.ui.ComposeMessageActivity.onUserInteraction()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.loadMessageContent()V
com.android.mms.ui.ComposeMessageActivity.onStart()V
com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$7000(Lcom/android/mms/ui/ComposeMessageActivity;I)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.startMsgListQuery()V
com.android.mms.ui.ComposeMessageActivity.access$5000(Lcom/android/mms/ui/ComposeMessageActivity;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onStop()V
com.android.mms.ui.ComposeMessageActivity$36.onTextChanged(Ljava/lang/CharSequence;III)V
com.android.mms.ui.ComposeMessageActivity$8.onTextChanged(Ljava/lang/CharSequence;III)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onUserInteraction()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onStart()V
com.android.mms.data.Conversation$ConversationQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivity$23.run()V
com.android.mms.ui.ComposeMessageActivity$41.onContentChanged(Lcom/android/mms/ui/MessageListAdapter;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5000(Lcom/android/mms/ui/ComposeMessageActivity;)V
com.android.mms.ui.ConversationList$ThreadListQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.MessageListAdapter$OnDataSetChangedListener.onContentChanged(Lcom/android/mms/ui/MessageListAdapter;)V
com.android.mms.ui.MessageListAdapter.onContentChanged()V
com.android.mms.ui.ComposeMessageActivity.isDrmRingtoneWithRights(J)Z
com.android.mms.ui.ComposeMessageActivity.access$3000(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivity.getDrmMimeMenuStringRsrc(J)I
com.android.mms.ui.ComposeMessageActivity.getDrmMimeSavedStringRsrc(JZ)I
com.android.mms.ui.ComposeMessageActivityNoLockScreen.isDrmRingtoneWithRights(J)Z
com.android.mms.ui.ComposeMessageActivity$10.onCreateContextMenu(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$3000(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivity.access$3100(Lcom/android/mms/ui/ComposeMessageActivity;J)I
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getDrmMimeMenuStringRsrc(J)I
com.android.mms.ui.ComposeMessageActivity.access$3900(Lcom/android/mms/ui/ComposeMessageActivity;JZ)I
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getDrmMimeSavedStringRsrc(JZ)I
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$3100(Lcom/android/mms/ui/ComposeMessageActivity;J)I
com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$3900(Lcom/android/mms/ui/ComposeMessageActivity;JZ)I
com.android.mms.ui.ComposeMessageActivity.saveRingtone(J)Z
com.android.mms.ui.ComposeMessageActivity.access$3800(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.saveRingtone(J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$3800(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.data.Conversation.verifySingleRecipient(Landroid/content/Context;JLjava/lang/String;)Ljava/lang/String;
com.android.mms.transaction.SmsSingleRecipientSender.sendMessage(J)Z
com.android.mms.transaction.SmsMessageSender.sendMessage(J)Z
com.android.mms.transaction.SmsReceiverService.sendFirstQueuedMessage()V
com.android.mms.ui.NoConfirmationSendService.onHandleIntent(Landroid/content/Intent;)V
com.android.mms.transaction.SmsReceiverService.handleSendMessage()V
com.android.mms.transaction.SmsReceiverService.handleServiceStateChanged(Landroid/content/Intent;)V
com.android.mms.transaction.SmsReceiverService.handleSmsSent(Landroid/content/Intent;I)V
com.android.mms.transaction.SmsReceiverService.access$400(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.mms.transaction.SmsReceiverService.access$300(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;)V
com.android.mms.transaction.SmsReceiverService.access$000(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
com.android.mms.util.DraftCache.rebuildCache()V
com.android.mms.util.DraftCache.access$000(Lcom/android/mms/util/DraftCache;)V
com.android.mms.util.DraftCache$1.run()V
com.android.mms.transaction.MessagingNotification.getSmsNewDeliveryInfo(Landroid/content/Context;)Lcom/android/mms/transaction/MessagingNotification$MmsSmsDeliveryInfo;
com.android.mms.util.AddressUtils.getFrom(Landroid/content/Context;Landroid/net/Uri;)Ljava/lang/String;
com.android.mms.transaction.MessagingNotification.addMmsNotificationInfos(Landroid/content/Context;Ljava/util/Set;)V
com.android.mms.ui.MessageItem.interpretFrom(Lcom/google/android/mms/pdu/EncodedStringValue;Landroid/net/Uri;)V
com.android.mms.ui.MessageUtils.handleReadReport(Landroid/content/Context;Ljava/util/Collection;ILjava/lang/Runnable;)V
com.android.mms.ui.MessageItem.access$100(Lcom/android/mms/ui/MessageItem;Lcom/google/android/mms/pdu/EncodedStringValue;Landroid/net/Uri;)V
com.android.mms.ui.ConversationList$DeleteThreadListener.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.util.ItemLoadedCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Lcom/android/mms/util/ThumbnailManager$ImageLoaded;Ljava/lang/Throwable;)V
com.android.mms.util.PduLoaderManager.getPdu(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.PduLoaderManager$PduTask$1.run()V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager$ThumbnailTask$1.run()V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MessageItem.<init>(Landroid/content/Context;Ljava/lang/String;Landroid/database/Cursor;Lcom/android/mms/ui/MessageListAdapter$ColumnsMap;Ljava/util/regex/Pattern;)V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager.getVideoThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.MessageListAdapter.getCachedMessageItem(Ljava/lang/String;JLandroid/database/Cursor;)Lcom/android/mms/ui/MessageItem;
com.android.mms.model.ImageModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.model.VideoModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.ComposeMessageActivity.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.ui.MessageListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.data.WorkingMessage.setAttachment(ILandroid/net/Uri;Z)I
com.android.mms.ui.MmsThumbnailPresenter.presentImageThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/ImageModel;)V
com.android.mms.ui.MmsThumbnailPresenter.presentVideoThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/VideoModel;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.ui.ComposeMessageActivity.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivity.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.presentFirstSlide(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/SlideModel;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.ComposeMessageActivity$32.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity$33.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.Presenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.ComposeMessageActivity$34.run()V
com.android.mms.ui.ComposeMessageActivity$35.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.AttachmentEditor.update(Lcom/android/mms/data/WorkingMessage;)Z
com.android.mms.ui.MessageListItem.bindCommonMessage()V
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.createViewFromResource(ILandroid/view/View;I)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivity.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.onRestart()V
com.android.mms.ui.MessageListItem.access$500(Lcom/android/mms/ui/MessageListItem;)V
com.android.mms.ui.MessageListItem.bind(Lcom/android/mms/ui/MessageItem;ZI)V
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivity.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onRestart()V
com.android.mms.ui.MessageListItem$2.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity$20.run()V
com.android.mms.ui.ComposeMessageActivity$40.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.MessageItem$PduLoadedCallback.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessagesInSameThreadAsMessage(Landroid/content/Context;Landroid/net/Uri;)V
com.android.mms.data.WorkingMessage.readDraftSmsMessage(Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.data.WorkingMessage.access$000(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Void;)Landroid/util/Pair;
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.ui.ComposeMessageActivity.isForwardable(J)Z
com.android.mms.ui.ComposeMessageActivity.access$2800(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.isForwardable(J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$2800(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
android.provider.Telephony$Sms.query(Landroid/content/ContentResolver;[Ljava/lang/String;)Landroid/database/Cursor;
com.android.mms.data.Conversation.blockingMarkAllSmsMessagesAsSeen(Landroid/content/Context;)V
com.android.mms.data.Conversation.access$800(Landroid/content/Context;)V
com.android.mms.data.Conversation$3.run()V
com.android.mms.data.Conversation.getUri(J)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.createIntent(Landroid/content/Context;J)Landroid/content/Intent;
com.android.mms.transaction.MessagingNotification.getNewMessageNotificationInfo(Landroid/content/Context;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;JJLandroid/graphics/Bitmap;Lcom/android/mms/data/Contact;I)Lcom/android/mms/transaction/MessagingNotification$NotificationInfo;
com.android.mms.ui.ComposeMessageActivity$12.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.createIntent(Landroid/content/Context;J)Landroid/content/Intent;
com.android.mms.ui.ConversationList.createNewMessage()V
com.android.mms.ui.ConversationList.openThread(J)V
com.android.mms.ui.ConversationList.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationList.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.mms.util.Recycler$MmsRecycler.getAllThreads(Landroid/content/Context;)Landroid/database/Cursor;
com.android.mms.util.Recycler.getAllThreads(Landroid/content/Context;)Landroid/database/Cursor;
com.android.mms.util.Recycler$MmsRecycler.anyThreadOverLimit(Landroid/content/Context;)Z
com.android.mms.util.Recycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler.anyThreadOverLimit(Landroid/content/Context;)Z
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler.checkForThreadsOverLimit(Landroid/content/Context;)Z
com.android.mms.ui.ConversationList$2.run()V
com.android.mms.util.Recycler$MmsRecycler.checkForThreadsOverLimit(Landroid/content/Context;)Z
com.android.mms.util.Recycler$SmsRecycler.checkForThreadsOverLimit(Landroid/content/Context;)Z
android.provider.Telephony$Sms.query(Landroid/content/ContentResolver;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.mms.data.WorkingMessage.readDraftMmsMessage(Landroid/content/Context;Lcom/android/mms/data/Conversation;Ljava/lang/StringBuilder;)Landroid/net/Uri;
com.android.mms.data.WorkingMessage.access$200(Landroid/content/Context;Lcom/android/mms/data/Conversation;Ljava/lang/StringBuilder;)Landroid/net/Uri;
com.android.providers.telephony.SmsProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.mms.data.Conversation.cacheAllThreads(Landroid/content/Context;)V
com.android.mms.data.Conversation.access$700(Landroid/content/Context;)V
com.android.mms.data.Conversation$2.run()V
android.provider.Telephony$Sms$Outbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;ZJ)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.storeMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.replaceMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.saveMessage()V
com.android.mms.ui.ClassZeroActivity.access$200(Lcom/android/mms/ui/ClassZeroActivity;)V
com.android.mms.ui.ClassZeroActivity$3.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.data.Conversation.blockingMarkAllMmsMessagesAsSeen(Landroid/content/Context;)V
com.android.mms.data.Conversation.access$900(Landroid/content/Context;)V
com.android.mms.ui.MessageUtils.getNotificationIndDetails(Landroid/content/Context;Landroid/database/Cursor;)Ljava/lang/String;
com.android.mms.ui.MessageUtils.getMessageDetails(Landroid/content/Context;Landroid/database/Cursor;I)Ljava/lang/String;
com.android.mms.ui.MessageUtils.getMultimediaMessageDetails(Landroid/content/Context;Landroid/database/Cursor;I)Ljava/lang/String;
com.android.mms.ui.ComposeMessageActivity.showMessageDetails(Lcom/android/mms/ui/MessageItem;)Z
com.android.mms.ui.ComposeMessageActivity.access$700(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.showMessageDetails(Lcom/android/mms/ui/MessageItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$700(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)Z
com.android.mms.data.Conversation.dumpThreadsTable(Landroid/content/Context;)V
com.android.mms.LogTag$1.run()V
com.android.mms.transaction.MessagingNotification.getDownloadFailedMessageCount(Landroid/content/Context;)I
com.android.mms.transaction.MessagingNotification.updateDownloadFailedNotification(Landroid/content/Context;)V
com.android.mms.transaction.MessagingNotification.blockingUpdateAllNotifications(Landroid/content/Context;)V
com.android.mms.data.Conversation$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.mms.data.Conversation$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.transaction.PushReceiver.isDuplicateNotification(Landroid/content/Context;Lcom/google/android/mms/pdu/NotificationInd;)Z
com.android.mms.transaction.PushReceiver.access$100(Landroid/content/Context;Lcom/google/android/mms/pdu/NotificationInd;)Z
com.android.mms.ui.SearchActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.data.Conversation.dumpSmsTable(Landroid/content/Context;)V
com.android.mms.util.Recycler$SmsRecycler.anyThreadOverLimit(Landroid/content/Context;)Z
com.android.mms.util.Recycler$SmsRecycler.getAllThreads(Landroid/content/Context;)Landroid/database/Cursor;
com.android.mms.ui.DeliveryReportActivity.getMmsReportStatus()Ljava/util/Map;
com.android.mms.ui.DeliveryReportActivity.getMmsReportItems()Ljava/util/List;
com.android.mms.ui.DeliveryReportActivity.getReportItems()Ljava/util/List;
com.android.mms.ui.DeliveryReportActivity.initListAdapter()V
com.android.mms.ui.DeliveryReportActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.transaction.RetryScheduler.getRetrieveStatus(J)I
com.android.mms.transaction.RetryScheduler.scheduleRetry(Landroid/net/Uri;)V
com.android.mms.transaction.RetryScheduler.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.RetryScheduler.getResponseStatus(J)I
com.android.mms.ui.ComposeMessageActivity.haveSomethingToCopyToSDCard(J)Z
com.android.mms.ui.ComposeMessageActivity.access$2900(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.haveSomethingToCopyToSDCard(J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$2900(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ManageSimMessages.startQuery()V
com.android.mms.ui.ManageSimMessages.init()V
com.android.mms.ui.ManageSimMessages.refreshMessageList()V
com.android.mms.ui.ManageSimMessages.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ManageSimMessages.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ManageSimMessages.access$000(Lcom/android/mms/ui/ManageSimMessages;)V
com.android.mms.ui.ManageSimMessages$1.onChange(Z)V
com.google.android.mms.util.PduCache.normalizeKey(Landroid/net/Uri;)Landroid/net/Uri;
com.google.android.mms.util.PduCache.put(Landroid/net/Uri;Lcom/google/android/mms/util/PduCacheEntry;)Z
com.google.android.mms.pdu.PduPersister.load(Landroid/net/Uri;)Lcom/google/android/mms/pdu/GenericPdu;
com.google.android.mms.util.PduCache.put(Ljava/lang/Object;Ljava/lang/Object;)Z
com.android.mms.model.SlideshowModel.getPduBody(Landroid/content/Context;Landroid/net/Uri;)Lcom/google/android/mms/pdu/PduBody;
com.android.mms.transaction.NotificationTransaction.<init>(Landroid/content/Context;ILcom/android/mms/transaction/TransactionSettings;Ljava/lang/String;)V
com.android.mms.util.DownloadManager.getMessage(Landroid/net/Uri;)Ljava/lang/String;
com.android.mms.util.DownloadManager.markState(Landroid/net/Uri;I)V
com.android.mms.util.PduLoaderManager$PduTask.run()V
com.google.android.mms.util.AbstractCache.put(Ljava/lang/Object;Ljava/lang/Object;)Z
com.android.mms.model.SlideshowModel.createFromMessageUri(Landroid/content/Context;Landroid/net/Uri;)Lcom/android/mms/model/SlideshowModel;
com.android.mms.ui.ComposeMessageActivity.copyMedia(J)Z
com.android.mms.util.DownloadManager.access$400(Lcom/android/mms/util/DownloadManager;Landroid/net/Uri;)Ljava/lang/String;
com.android.mms.data.WorkingMessage.loadFromUri(Landroid/net/Uri;)Z
com.android.mms.ui.SlideEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.SlideshowActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.SlideshowEditActivity.initSlideList()V
com.android.mms.ui.ComposeMessageActivity.access$3700(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.copyMedia(J)Z
com.android.mms.util.DownloadManager$4.run()V
com.android.mms.data.WorkingMessage.access$300(Lcom/android/mms/data/WorkingMessage;Landroid/net/Uri;)Z
com.android.mms.data.WorkingMessage.load(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;)Lcom/android/mms/data/WorkingMessage;
com.android.mms.data.WorkingMessage.readStateFromBundle(Landroid/os/Bundle;)V
com.android.mms.ui.SlideshowEditActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$3700(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivity.handleForwardedMessage()Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.handleForwardedMessage()Z
com.android.mms.util.RateController.isLimitSurpassed()Z
android.provider.Telephony$Sms$Sent.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.ui.ManageSimMessages.copyToPhoneMemory(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.internal.telephony.SMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.SMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processCdmaWapPdu([BILjava/lang/String;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.SMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.mms.widget.MmsWidgetService$MmsFactory.queryAllConversations()Landroid/database/Cursor;
com.android.mms.widget.MmsWidgetService$MmsFactory.onDataSetChanged()V
com.android.mms.widget.MmsWidgetService$MmsFactory.queryUnreadCount()I
com.android.mms.util.Recycler$MmsRecycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.data.Conversation.startQuery(Landroid/content/AsyncQueryHandler;ILjava/lang/String;)V
com.android.mms.data.Conversation.startQueryForAll(Landroid/content/AsyncQueryHandler;I)V
com.android.mms.ui.ConversationList.startAsyncQuery()V
com.android.mms.ui.ConversationList.access$100(Lcom/android/mms/ui/ConversationList;)V
com.android.mms.ui.ConversationList.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ConversationList.onStart()V
com.android.mms.ui.ConversationList$1.onContentChanged(Lcom/android/mms/ui/ConversationListAdapter;)V
com.android.mms.ui.ConversationListAdapter$OnContentChangedListener.onContentChanged(Lcom/android/mms/ui/ConversationListAdapter;)V
com.android.mms.ui.ConversationListAdapter.onContentChanged()V
android.provider.Telephony$Sms$Draft.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.ui.DeliveryReportActivity.getSmsReportItems()Ljava/util/List;
com.android.mms.util.Recycler$SmsRecycler.deleteMessagesForThread(Landroid/content/Context;JI)V
android.provider.Telephony$Mms.query(Landroid/content/ContentResolver;[Ljava/lang/String;)Landroid/database/Cursor;
com.android.mms.transaction.SmsMessageSender.getOutgoingServiceCenter(J)Ljava/lang/String;
com.android.mms.transaction.SmsMessageSender.<init>(Landroid/content/Context;[Ljava/lang/String;Ljava/lang/String;J)V
com.android.mms.transaction.SmsSingleRecipientSender.getOutgoingServiceCenter(J)Ljava/lang/String;
com.android.mms.transaction.SmsSingleRecipientSender.<init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;JZLandroid/net/Uri;)V
com.android.mms.transaction.SmsSingleRecipientSender.<init>(Landroid/content/Context;[Ljava/lang/String;Ljava/lang/String;J)V
com.google.android.mms.pdu.PduPersister.getPendingMessages(J)Landroid/database/Cursor;
com.android.mms.transaction.RetryScheduler.setRetryAlarm(Landroid/content/Context;)V
com.android.mms.data.Conversation.loadFromThreadId(JZ)Z
com.android.mms.data.Conversation.<init>(Landroid/content/Context;JZ)V
com.android.mms.data.Conversation.get(Landroid/content/Context;JZ)Lcom/android/mms/data/Conversation;
com.android.mms.ui.DeliveryReportActivity.getMmsReportRequests()Ljava/util/List;
com.android.mms.data.Conversation.startQueryHaveLockedMessages(Landroid/content/AsyncQueryHandler;Ljava/util/Collection;I)V
com.android.mms.data.Conversation.startQueryHaveLockedMessages(Landroid/content/AsyncQueryHandler;JI)V
com.android.mms.ui.ConversationList.confirmDeleteThreads(Ljava/util/Collection;Landroid/content/AsyncQueryHandler;)V
com.android.mms.ui.ComposeMessageActivity.confirmDeleteThread(J)V
com.android.mms.ui.ConversationList$ModeCallback.onActionItemClicked(Landroid/view/ActionMode;Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationList.confirmDeleteThread(JLandroid/content/AsyncQueryHandler;)V
com.android.mms.ui.ComposeMessageActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.confirmDeleteThread(J)V
com.android.mms.ui.ConversationList$7.onKey(Landroid/view/View;ILandroid/view/KeyEvent;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.transaction.MessagingNotification.getUndeliveredMessageCount(Landroid/content/Context;[J)I
com.android.mms.transaction.MessagingNotification.access$300(Landroid/content/Context;[J)I
com.android.mms.transaction.MessagingNotification.notifyFailed(Landroid/content/Context;ZJZ)V
com.android.mms.transaction.MessagingNotification.updateSendFailedNotificationForThread(Landroid/content/Context;J)V
com.android.mms.transaction.MessagingNotification$3.doInBackground([Ljava/lang/Void;)Ljava/lang/Integer;
com.android.mms.transaction.MessagingNotification.notifyDownloadFailed(Landroid/content/Context;J)V
com.android.mms.transaction.MessagingNotification.notifySendFailed(Landroid/content/Context;Z)V
com.android.mms.transaction.MessagingNotification.notifySendFailed(Landroid/content/Context;)V
com.android.mms.ui.ComposeMessageActivity$17.run()V
com.android.mms.transaction.MessagingNotification$3.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.transaction.SmsReceiverService.messageFailedToSend(Landroid/net/Uri;I)V
com.android.mms.transaction.MessagingNotification$3.onPostExecute(Ljava/lang/Integer;)V
com.android.mms.transaction.MessagingNotification$3.onPostExecute(Ljava/lang/Object;)V
com.android.providers.telephony.MmsSmsProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.mms.transaction.PushReceiver.findThreadId(Landroid/content/Context;Lcom/google/android/mms/pdu/GenericPdu;I)J
com.android.mms.transaction.PushReceiver.access$000(Landroid/content/Context;Lcom/google/android/mms/pdu/GenericPdu;I)J
android.provider.Telephony$Sms$Inbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;Z)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.providers.telephony.MmsSmsProvider.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.mms.data.Conversation.asyncDeleteObsoleteThreads(Landroid/content/AsyncQueryHandler;I)V
com.android.mms.ui.ConversationList$8.run()V
com.android.mms.data.WorkingMessage.deleteDraftSmsMessage(J)V
com.android.mms.transaction.MessageStatusService.updateMessageStatus(Landroid/content/Context;Landroid/net/Uri;[BLjava/lang/String;)Landroid/telephony/SmsMessage;
com.android.mms.data.Conversation.startDeleteAll(Lcom/android/mms/data/Conversation$ConversationQueryHandler;IZ)V
com.android.mms.ui.ConversationList$DeleteThreadListener$1.run()V
com.android.mms.util.Recycler$MmsRecycler.deleteMessagesOlderThanDate(Landroid/content/Context;JJ)V
com.android.mms.ui.ManageSimMessages.deleteFromSim(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.access$500(Lcom/android/mms/ui/ManageSimMessages;Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.deleteAllFromSim()V
com.android.mms.ui.ManageSimMessages$2.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ManageSimMessages.access$600(Lcom/android/mms/ui/ManageSimMessages;)V
com.android.mms.ui.ManageSimMessages$3.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.data.WorkingMessage.asyncDeleteDraftSmsMessage(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage.discard()V
com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ComposeMessageActivity.saveDraft(Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.saveDraft(Z)V
com.android.mms.ui.ComposeMessageActivity.onMaxPendingMessagesReached()V
com.android.mms.data.WorkingMessage$MessageStatusListener.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onMaxPendingMessagesReached()V
com.android.mms.data.WorkingMessage.asyncDeleteDraftMmsMessage(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage.saveDraft(Z)V
com.android.mms.data.WorkingMessage.updateDraftSmsMessage(Lcom/android/mms/data/Conversation;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage.access$1500(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Ljava/lang/String;)V
com.android.mms.data.Conversation.startDelete(Lcom/android/mms/data/Conversation$ConversationQueryHandler;IZJ)V
com.android.mms.transaction.SmsReceiverService.moveOutboxMessagesToFailedBox()I
com.android.providers.telephony.MmsSmsProvider.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
Permission:android.permission.NFC

565 Callers:

com.android.nfc.NfcService$NfcAdapterService.setForegroundDispatch(Landroid/app/PendingIntent;[Landroid/content/IntentFilter;Landroid/nfc/TechListParcel;)V
android.nfc.INfcAdapter$Stub$Proxy.setForegroundDispatch(Landroid/app/PendingIntent;[Landroid/content/IntentFilter;Landroid/nfc/TechListParcel;)V
android.nfc.INfcAdapter$Stub.setForegroundDispatch(Landroid/app/PendingIntent;[Landroid/content/IntentFilter;Landroid/nfc/TechListParcel;)V
android.nfc.INfcAdapter$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.INfcAdapter.setForegroundDispatch(Landroid/app/PendingIntent;[Landroid/content/IntentFilter;Landroid/nfc/TechListParcel;)V
com.android.nfc.NfcService$NfcAdapterService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.NfcAdapter.disableForegroundDispatchInternal(Landroid/app/Activity;Z)V
android.nfc.NfcAdapter.enableForegroundDispatch(Landroid/app/Activity;Landroid/app/PendingIntent;[Landroid/content/IntentFilter;[Ljava/lang/String;)V
android.nfc.NfcAdapter$1.onPaused(Landroid/app/Activity;)V
android.nfc.NfcAdapter.disableForegroundDispatch(Landroid/app/Activity;)V
com.android.nfc.NfcService$NfcAdapterService.setNdefPushCallback(Landroid/nfc/INdefPushCallback;)V
android.nfc.INfcAdapter$Stub$Proxy.setNdefPushCallback(Landroid/nfc/INdefPushCallback;)V
android.nfc.INfcAdapter$Stub.setNdefPushCallback(Landroid/nfc/INdefPushCallback;)V
android.nfc.INfcAdapter.setNdefPushCallback(Landroid/nfc/INdefPushCallback;)V
android.nfc.NfcActivityManager.requestNfcServiceCallback(Z)V
android.nfc.NfcActivityManager.setNdefPushContentUri(Landroid/app/Activity;[Landroid/net/Uri;)V
android.nfc.NfcActivityManager.setNdefPushContentUriCallback(Landroid/app/Activity;Landroid/nfc/NfcAdapter$CreateBeamUrisCallback;)V
android.nfc.NfcActivityManager.setNdefPushMessage(Landroid/app/Activity;Landroid/nfc/NdefMessage;)V
android.nfc.NfcActivityManager.setNdefPushMessageCallback(Landroid/app/Activity;Landroid/nfc/NfcAdapter$CreateNdefMessageCallback;)V
android.nfc.NfcActivityManager.setOnNdefPushCompleteCallback(Landroid/app/Activity;Landroid/nfc/NfcAdapter$OnNdefPushCompleteCallback;)V
android.nfc.NfcAdapter.setBeamPushUris([Landroid/net/Uri;Landroid/app/Activity;)V
android.nfc.NfcAdapter.setBeamPushUrisCallback(Landroid/nfc/NfcAdapter$CreateBeamUrisCallback;Landroid/app/Activity;)V
android.nfc.NfcAdapter.disableForegroundNdefPush(Landroid/app/Activity;)V
android.nfc.NfcAdapter.enableForegroundNdefPush(Landroid/app/Activity;Landroid/nfc/NdefMessage;)V
android.nfc.NfcAdapter.setNdefPushMessage(Landroid/nfc/NdefMessage;Landroid/app/Activity;[Landroid/app/Activity;)V
android.nfc.NfcAdapter.setNdefPushMessageCallback(Landroid/nfc/NfcAdapter$CreateNdefMessageCallback;Landroid/app/Activity;[Landroid/app/Activity;)V
android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(Landroid/nfc/NfcAdapter$OnNdefPushCompleteCallback;Landroid/app/Activity;[Landroid/app/Activity;)V
com.android.gallery3d.app.PhotoPage.updateShareURI(Lcom/android/gallery3d/data/Path;)V
com.android.gallery3d.ui.ActionModeHandler.computeSharingIntent(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/content/Intent;
com.android.browser.NfcHandler.register(Landroid/app/Activity;Lcom/android/browser/Controller;)V
com.android.contacts.NfcHandler.register(Landroid/app/Activity;Lcom/android/contacts/detail/ContactDetailFragment;)V
com.android.email.activity.NfcHandler.register(Lcom/android/email/activity/UIControllerBase;Landroid/app/Activity;)Lcom/android/email/activity/NfcHandler;
com.android.gallery3d.app.PhotoPage.onCreateActionBar(Landroid/view/Menu;)Z
com.android.gallery3d.app.PhotoPage.updateCurrentPhoto(Lcom/android/gallery3d/data/MediaItem;)V
com.android.gallery3d.ui.ActionModeHandler.access$200(Lcom/android/gallery3d/ui/ActionModeHandler;Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/content/Intent;
com.android.browser.Controller.onResume()V
com.android.browser.NfcHandler.unregister(Landroid/app/Activity;)V
com.android.contacts.detail.ContactDetailLayoutController.initialize(Landroid/os/Bundle;)V
com.android.email.activity.UIControllerBase.onActivityCreated()V
com.android.gallery3d.app.ActivityState.onCreateActionBar(Landroid/view/Menu;)Z
com.android.gallery3d.app.PhotoPage.access$800(Lcom/android/gallery3d/app/PhotoPage;Lcom/android/gallery3d/data/MediaItem;)V
com.android.gallery3d.app.PhotoPage.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.ui.ActionModeHandler$3.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.browser.ActivityController.onResume()V
com.android.browser.Controller.onPause()V
com.android.contacts.detail.ContactDetailLayoutController.<init>(Landroid/app/Activity;Landroid/os/Bundle;Landroid/app/FragmentManager;Lcom/android/contacts/widget/TransitionAnimationView;Landroid/view/View;Lcom/android/contacts/detail/ContactDetailFragment$Listener;)V
com.android.email.activity.EmailActivity.onCreate(Landroid/os/Bundle;)V
com.android.email.activity.UIControllerOnePane.onActivityCreated()V
com.android.email.activity.UIControllerTwoPane.onActivityCreated()V
com.android.gallery3d.app.ManageCachePage.onCreateActionBar(Landroid/view/Menu;)Z
com.android.gallery3d.app.SlideshowPage.onCreateActionBar(Landroid/view/Menu;)Z
com.android.gallery3d.app.StateManager.createOptionsMenu(Landroid/view/Menu;)Z
com.android.gallery3d.app.PhotoPage$2.onLoadingFinished()V
com.android.gallery3d.app.PhotoPage$2.onPhotoChanged(ILcom/android/gallery3d/data/Path;)V
com.android.gallery3d.app.ActivityState.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.ui.ActionModeHandler$3.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.browser.BrowserActivity.onResume()V
com.android.browser.ActivityController.onPause()V
com.android.contacts.activities.ContactDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.createViewsAndFragments(Landroid/os/Bundle;)V
com.android.email.activity.UIControllerSearchTwoPane.onActivityCreated()V
com.android.camera.ActivityBase.onCreateOptionsMenu(Landroid/view/Menu;)Z
com.android.gallery3d.app.Gallery.onCreateOptionsMenu(Landroid/view/Menu;)Z
com.android.gallery3d.app.LoadingListener.onLoadingFinished()V
com.android.gallery3d.app.PhotoDataAdapter$DataListener.onLoadingFinished()V
com.android.gallery3d.app.PhotoDataAdapter$DataListener.onPhotoChanged(ILcom/android/gallery3d/data/Path;)V
com.android.gallery3d.app.StateManager.restoreFromState(Landroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.startStateForResult(Ljava/lang/Class;ILandroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.startState(Ljava/lang/Class;Landroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.switchState(Lcom/android/gallery3d/app/ActivityState;Ljava/lang/Class;Landroid/os/Bundle;)V
com.android.gallery3d.util.ThreadPool$Job.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.browser.BrowserActivity.onPause()V
com.android.contacts.activities.TransactionSafeActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.ContactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.onCreate(Landroid/os/Bundle;)V
com.android.camera.Camera.onCreateOptionsMenu(Landroid/view/Menu;)Z
com.android.camera.PanoramaActivity.onCreateOptionsMenu(Landroid/view/Menu;)Z
com.android.camera.VideoCamera.onCreateOptionsMenu(Landroid/view/Menu;)Z
com.android.gallery3d.app.AlbumSetDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.updateCurrentIndex(I)V
com.android.gallery3d.app.Gallery.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage.doCluster(I)V
com.android.gallery3d.app.AlbumPage.pickPhoto(I)V
com.android.gallery3d.app.AlbumSetPage.pickAlbum(I)V
com.android.gallery3d.app.PhotoPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.ActivityBase.createCameraScreenNail(Z)V
com.android.gallery3d.app.AlbumPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumSetPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.DialogPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.startDefaultPage()V
com.android.gallery3d.app.Gallery.startGetContent(Landroid/content/Intent;)V
com.android.gallery3d.app.Gallery.startViewAction(Landroid/content/Intent;)V
com.android.gallery3d.ui.ImportCompleteListener.goToImportedAlbum()V
com.android.gallery3d.app.AlbumPage.onUpPressed()V
com.android.gallery3d.app.AlbumSetPage.doCluster(I)V
com.android.gallery3d.app.PhotoPage.onUpPressed()V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/Bitmap;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Lcom/android/gallery3d/ui/ScreenNail;
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.gallery3d.gadget.WidgetUtils.createWidgetBitmap(Lcom/android/gallery3d/data/MediaItem;)Landroid/graphics/Bitmap;
com.android.gallery3d.ui.AlbumSetSlidingWindow.getLoadingTexture()Lcom/android/gallery3d/ui/BitmapTexture;
com.android.gallery3d.util.JobLimiter$JobWrapper.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.util.ThreadPool$Worker.run()V
com.android.contacts.activities.DialtactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.AttachPhotoActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactSelectionActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupBrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.JoinContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.NonPhoneActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ShowOrCreateActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.CallContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.AccountFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.CustomContactListFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.test.FragmentTestActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.ImportVCardActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.SelectAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumSetDataLoader.access$1900(Lcom/android/gallery3d/app/AlbumSetDataLoader;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.access$2500(Lcom/android/gallery3d/app/PhotoDataAdapter;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumDataLoader.access$1700(Lcom/android/gallery3d/app/AlbumDataLoader;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.moveTo(I)V
com.android.gallery3d.app.AbstractGalleryActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.ActivityState.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage$5.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.GalleryActionBar$ClusterRunner.doCluster(I)V
com.android.gallery3d.app.AlbumPage.access$900(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumSetPage.access$1000(Lcom/android/gallery3d/app/AlbumSetPage;I)V
com.android.camera.Camera.createCameraScreenNail(Z)V
com.android.camera.PanoramaActivity.createCameraScreenNail(Z)V
com.android.camera.VideoCamera.createCameraScreenNail(Z)V
com.android.gallery3d.app.PickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumSetPage$4.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.Gallery.initializeByIntent()V
com.android.gallery3d.ui.ImportCompleteListener.onProgressComplete(I)V
com.android.gallery3d.app.AlbumPage.onBackPressed()V
com.android.gallery3d.app.PhotoPage.onBackPressed()V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.gadget.LocalPhotoSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.gadget.MediaSetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask.run()V
com.android.gallery3d.app.PhotoDataAdapter$ReloadTask.run()V
com.android.gallery3d.app.AlbumDataLoader$ReloadTask.run()V
com.android.gallery3d.ui.PhotoView$Model.moveTo(I)V
com.android.camera.ActivityBase.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.CropImage.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.ManageCachePage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.SlideshowPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.StateManager.itemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.ActionModeHandler$ActionModeListener.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.GalleryActionBar$1.onClick(Landroid/content/DialogInterface;I)V
com.android.gallery3d.app.GalleryActionBar.onNavigationItemSelected(IJ)Z
com.android.camera.Camera.onCreate(Landroid/os/Bundle;)V
com.android.camera.PanoramaActivity.onCreate(Landroid/os/Bundle;)V
com.android.camera.VideoCamera.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.ui.MenuExecutor$ProgressListener.onProgressComplete(I)V
com.android.gallery3d.app.ActivityState.onBackPressed()V
com.android.gallery3d.gadget.WidgetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.app.AlbumSetDataLoader.resume()V
com.android.gallery3d.app.PhotoDataAdapter.resume()V
com.android.gallery3d.app.AlbumDataLoader.resume()V
com.android.gallery3d.ui.PhotoView.resetToFirstPicture()V
com.android.gallery3d.ui.PhotoView.switchToFirstImage()V
com.android.gallery3d.ui.PhotoView.switchToNextImage()V
com.android.gallery3d.ui.PhotoView.switchToPrevImage()V
com.android.gallery3d.app.AbstractGalleryActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.ActionModeHandler.onActionItemClicked(Landroid/view/ActionMode;Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.MenuExecutor.onProgressComplete(ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.gallery3d.app.AlbumSetPage.onBackPressed()V
com.android.gallery3d.app.ManageCachePage.onBackPressed()V
com.android.gallery3d.app.SlideshowPage.onBackPressed()V
com.android.gallery3d.app.StateManager.onBackPressed()V
com.android.gallery3d.gadget.WidgetService$PhotoRVFactory.getViewAt(I)Landroid/widget/RemoteViews;
com.android.gallery3d.app.AlbumSetPage.onResume()V
com.android.gallery3d.app.ManageCachePage.onResume()V
com.android.gallery3d.app.PhotoPage$Model.resume()V
com.android.gallery3d.app.AlbumPage.onResume()V
com.android.gallery3d.app.PhotoPage.onResume()V
com.android.gallery3d.ui.PhotoView.switchWithCaptureAnimationLocked(I)Z
com.android.gallery3d.ui.PhotoView.slideToNextPicture()Z
com.android.gallery3d.ui.PhotoView.switchFocus()V
com.android.gallery3d.ui.PhotoView.slideToPrevPicture()Z
com.android.camera.ActivityBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.Camera.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.PanoramaActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.VideoCamera.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.Gallery.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.PickerActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.ActionModeHandler$1.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.MenuExecutor.access$700(Lcom/android/gallery3d/ui/MenuExecutor;ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.gallery3d.app.ManageCachePage.onClick(Landroid/view/View;)V
com.android.gallery3d.app.ManageCachePage.onProgressComplete(I)V
com.android.gallery3d.app.SlideshowPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AbstractGalleryActivity.onBackPressed()V
com.android.gallery3d.app.ActivityState.onResume()V
com.android.gallery3d.ui.PhotoView.switchWithCaptureAnimation(I)Z
com.android.gallery3d.ui.PhotoView.snapToNeighborImage()Z
com.android.gallery3d.ui.PhotoView.swipeImages(FF)Z
com.android.gallery3d.ui.PhotoView.switchToHitPicture(II)V
com.android.gallery3d.ui.PhotoView.access$800(Lcom/android/gallery3d/ui/PhotoView;)V
com.android.gallery3d.app.AlbumPicker.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.DialogPicker.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.MenuExecutor$MediaOperation.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.gallery3d.ui.GLView.onTouch(Landroid/view/MotionEvent;)Z
com.android.camera.ActivityBase.onBackPressed()V
com.android.gallery3d.app.AlbumPicker.onBackPressed()V
com.android.gallery3d.app.DialogPicker.onBackPressed()V
com.android.gallery3d.app.Gallery.onBackPressed()V
com.android.gallery3d.app.PickerActivity.onBackPressed()V
com.android.gallery3d.app.ActivityState.resume()V
com.android.gallery3d.app.SlideshowPage.onResume()V
com.android.gallery3d.app.PhotoPage.switchWithCaptureAnimation(I)Z
com.android.gallery3d.ui.PhotoView.snapback()V
com.android.gallery3d.ui.PhotoView.access$3600(Lcom/android/gallery3d/ui/PhotoView;FF)Z
com.android.gallery3d.ui.PhotoView.access$3300(Lcom/android/gallery3d/ui/PhotoView;II)V
com.android.gallery3d.ui.MenuExecutor$MediaOperation.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumPage$2.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumSetPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ManageCachePage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.PhotoPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.EdgeView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.ScrollBarView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlideshowView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.TileImageView.onTouch(Landroid/view/MotionEvent;)Z
com.android.camera.Camera.onBackPressed()V
com.android.camera.PanoramaActivity.onBackPressed()V
com.android.camera.VideoCamera.onBackPressed()V
com.android.gallery3d.app.AlbumPage.resume()V
com.android.gallery3d.app.AlbumSetPage.resume()V
com.android.gallery3d.app.ManageCachePage.resume()V
com.android.gallery3d.app.PhotoPage.resume()V
com.android.gallery3d.app.SlideshowPage.resume()V
com.android.gallery3d.app.StateManager.finishState(Lcom/android/gallery3d/app/ActivityState;)V
com.android.gallery3d.app.StateManager.resume()V
com.android.gallery3d.app.AppBridge$Server.switchWithCaptureAnimation(I)Z
com.android.gallery3d.ui.PhotoView.access$1500(Lcom/android/gallery3d/ui/PhotoView;)V
com.android.gallery3d.ui.PhotoView.captureAnimationDone(I)V
com.android.gallery3d.ui.PhotoView$MyGestureListener.onFling(FF)Z
com.android.gallery3d.ui.PhotoView$MyGestureListener.onSingleTapUp(FF)Z
com.android.gallery3d.app.AlbumPage$2.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumSetPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ManageCachePage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.PhotoPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.SlideshowPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.EdgeView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLRootView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLRootView.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.GLView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.GLView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.ScrollBarView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlideshowView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlotView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.TileImageView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.UndoBarView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumPage.clearLoadingBit(I)V
com.android.gallery3d.app.AlbumSetPage.clearLoadingBit(I)V
com.android.gallery3d.app.SlideshowPage.showPendingBitmap()V
com.android.gallery3d.app.AbstractGalleryActivity.onResume()V
com.android.camera.ActivityBase$MyAppBridge.switchWithCaptureAnimation(I)V
com.android.gallery3d.ui.PhotoView$MyGestureListener.onUp()V
com.android.gallery3d.ui.PhotoView.access$900(Lcom/android/gallery3d/ui/PhotoView;I)V
com.android.gallery3d.ui.GestureRecognizer$Listener.onFling(FF)Z
com.android.gallery3d.ui.GestureRecognizer$Listener.onSingleTapUp(FF)Z
com.android.gallery3d.ui.GLRoot.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage$2.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.AlbumSetPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.ManageCachePage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.PhotoPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.SlideshowPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.EdgeView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.PhotoView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.ScrollBarView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.SlideshowView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.SlotView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.TileImageView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.UndoBarView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.AlbumPage$2.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$FaceHighlightView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$HighlightRectangle.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.EdgeView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.GLView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.GLView.removeAllComponents()V
com.android.gallery3d.ui.PhotoView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.ScrollBarView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlideshowView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlotView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.TileImageView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.UndoBarView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage.access$1600(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumPage.onPause()V
com.android.gallery3d.app.AlbumSetPage.access$1600(Lcom/android/gallery3d/app/AlbumSetPage;I)V
com.android.gallery3d.app.AlbumSetPage.onPause()V
com.android.gallery3d.app.SlideshowPage.access$100(Lcom/android/gallery3d/app/SlideshowPage;)V
com.android.camera.ActivityBase.onResume()V
com.android.gallery3d.app.AlbumPicker.onResume()V
com.android.gallery3d.app.CropImage.onResume()V
com.android.gallery3d.app.DialogPicker.onResume()V
com.android.gallery3d.app.Gallery.onResume()V
com.android.gallery3d.app.PickerActivity.onResume()V
com.android.camera.ActivityBase$MyAppBridge.access$100(Lcom/android/camera/ActivityBase$MyAppBridge;I)V
com.android.gallery3d.ui.GestureRecognizer$Listener.onUp()V
com.android.gallery3d.ui.GestureRecognizer$MyGestureListener.onFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z
com.android.gallery3d.ui.GestureRecognizer$MyGestureListener.onSingleTapUp(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ActivityState.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage$2.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.AlbumSetPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.ManageCachePage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.PhotoPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.SlideshowPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.EdgeView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.PhotoView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.ScrollBarView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.SlideshowView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.SlotView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.TileImageView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.UndoBarView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.AlbumPage$2.removeAllComponents()V
com.android.gallery3d.app.AlbumSetPage$1.removeAllComponents()V
com.android.gallery3d.app.ManageCachePage$1.removeAllComponents()V
com.android.gallery3d.app.PhotoPage$1.removeAllComponents()V
com.android.gallery3d.app.SlideshowPage$1.removeAllComponents()V
com.android.gallery3d.ui.CropView$FaceHighlightView.removeAllComponents()V
com.android.gallery3d.ui.CropView$HighlightRectangle.removeAllComponents()V
com.android.gallery3d.ui.CropView.removeAllComponents()V
com.android.gallery3d.ui.EdgeView.removeAllComponents()V
com.android.gallery3d.ui.PhotoView.removeAllComponents()V
com.android.gallery3d.ui.ScrollBarView.removeAllComponents()V
com.android.gallery3d.ui.SlideshowView.removeAllComponents()V
com.android.gallery3d.ui.SlotView.removeAllComponents()V
com.android.gallery3d.ui.TileImageView.removeAllComponents()V
com.android.gallery3d.ui.UndoBarView.removeAllComponents()V
com.android.gallery3d.app.AlbumPage$7.run()V
com.android.gallery3d.app.AlbumPage$MyLoadingListener.onLoadingFinished()V
com.android.gallery3d.app.ActivityState.onPause()V
com.android.gallery3d.app.AlbumSetPage$6.run()V
com.android.gallery3d.app.AlbumSetPage$MyLoadingListener.onLoadingFinished()V
com.android.camera.Camera.onResume()V
com.android.camera.PanoramaActivity.onResume()V
com.android.camera.VideoCamera.onResume()V
com.android.camera.ActivityBase.gotoGallery()V
com.android.gallery3d.ui.GestureRecognizer$MyDownUpListener.onUp(Landroid/view/MotionEvent;)V
com.android.gallery3d.app.AlbumPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage.onPause()V
com.android.gallery3d.app.PhotoPage.onPause()V
com.android.gallery3d.app.SlideshowPage.onPause()V
com.android.gallery3d.app.StateManager.pause()V
com.android.camera.Camera.gotoGallery()V
com.android.camera.PanoramaActivity.gotoGallery()V
com.android.camera.VideoCamera.gotoGallery()V
com.android.gallery3d.ui.DownUpDetector$DownUpListener.onUp(Landroid/view/MotionEvent;)V
com.android.gallery3d.app.SlideshowPage.initializeViews()V
com.android.gallery3d.app.AbstractGalleryActivity.onPause()V
com.android.camera.Camera.onThumbnailClicked(Landroid/view/View;)V
com.android.camera.PanoramaActivity.onThumbnailClicked(Landroid/view/View;)V
com.android.camera.VideoCamera.onThumbnailClicked(Landroid/view/View;)V
com.android.gallery3d.ui.DownUpDetector.setState(ZLandroid/view/MotionEvent;)V
com.android.gallery3d.app.SlideshowPage.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.camera.ActivityBase.onPause()V
com.android.gallery3d.app.AlbumPicker.onPause()V
com.android.gallery3d.app.CropImage.onPause()V
com.android.gallery3d.app.DialogPicker.onPause()V
com.android.gallery3d.app.Gallery.onPause()V
com.android.gallery3d.app.PickerActivity.onPause()V
com.android.gallery3d.ui.DownUpDetector.onTouchEvent(Landroid/view/MotionEvent;)V
com.android.camera.Camera.onPause()V
com.android.camera.PanoramaActivity.onPause()V
com.android.camera.VideoCamera.onPause()V
com.android.gallery3d.ui.GestureRecognizer.onTouchEvent(Landroid/view/MotionEvent;)V
com.android.gallery3d.ui.PhotoView.onTouch(Landroid/view/MotionEvent;)Z
com.android.nfc.NfcService$TagService.close(I)I
android.nfc.INfcTag$Stub$Proxy.close(I)I
android.nfc.INfcTag$Stub.close(I)I
android.nfc.INfcTag.close(I)I
android.nfc.INfcTag$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.nfc.NfcService$TagService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.nfc.NfcService$TagService.connect(II)I
android.nfc.INfcTag$Stub$Proxy.connect(II)I
android.nfc.INfcTag$Stub.connect(II)I
android.nfc.INfcTag.connect(II)I
android.nfc.tech.BasicTagTechnology.connect()V
android.nfc.tech.IsoDep.connect()V
android.nfc.tech.MifareClassic.connect()V
android.nfc.tech.MifareUltralight.connect()V
android.nfc.tech.NdefFormatable.connect()V
android.nfc.tech.Ndef.connect()V
android.nfc.tech.NfcA.connect()V
android.nfc.tech.NfcB.connect()V
android.nfc.tech.NfcF.connect()V
android.nfc.tech.NfcV.connect()V
com.android.nfc.NfcService$TagService.reconnect(I)I
android.nfc.INfcTag$Stub$Proxy.reconnect(I)I
android.nfc.INfcTag$Stub.reconnect(I)I
android.nfc.INfcTag.reconnect(I)I
android.nfc.tech.BasicTagTechnology.close()V
android.nfc.tech.BasicTagTechnology.reconnect()V
android.nfc.tech.IsoDep.close()V
android.nfc.tech.MifareClassic.close()V
android.nfc.tech.MifareUltralight.close()V
android.nfc.tech.NdefFormatable.close()V
android.nfc.tech.Ndef.close()V
android.nfc.tech.NfcA.close()V
android.nfc.tech.NfcB.close()V
android.nfc.tech.NfcF.close()V
android.nfc.tech.NfcV.close()V
android.nfc.tech.IsoDep.reconnect()V
android.nfc.tech.MifareClassic.reconnect()V
android.nfc.tech.MifareUltralight.reconnect()V
android.nfc.tech.NdefFormatable.reconnect()V
android.nfc.tech.Ndef.reconnect()V
android.nfc.tech.NfcA.reconnect()V
android.nfc.tech.NfcB.reconnect()V
android.nfc.tech.NfcF.reconnect()V
android.nfc.tech.NfcV.reconnect()V
com.android.nfc.NfcService$TagService.getTechList(I)[I
android.nfc.INfcTag$Stub$Proxy.getTechList(I)[I
android.nfc.INfcTag$Stub.getTechList(I)[I
android.nfc.INfcTag.getTechList(I)[I
com.android.nfc.NfcService$TagService.isNdef(I)Z
android.nfc.INfcTag$Stub$Proxy.isNdef(I)Z
android.nfc.INfcTag$Stub.isNdef(I)Z
android.nfc.INfcTag.isNdef(I)Z
android.nfc.tech.Ndef.getNdefMessage()Landroid/nfc/NdefMessage;
android.nfc.tech.Ndef.makeReadOnly()Z
android.nfc.tech.NdefFormatable.format(Landroid/nfc/NdefMessage;Z)V
android.nfc.tech.Ndef.writeNdefMessage(Landroid/nfc/NdefMessage;)V
android.nfc.tech.NdefFormatable.format(Landroid/nfc/NdefMessage;)V
android.nfc.tech.NdefFormatable.formatReadOnly(Landroid/nfc/NdefMessage;)V
com.android.nfc.NfcService$TagService.transceive(I[BZ)Landroid/nfc/TransceiveResult;
android.nfc.INfcTag$Stub$Proxy.transceive(I[BZ)Landroid/nfc/TransceiveResult;
android.nfc.INfcTag$Stub.transceive(I[BZ)Landroid/nfc/TransceiveResult;
android.nfc.INfcTag.transceive(I[BZ)Landroid/nfc/TransceiveResult;
android.nfc.tech.BasicTagTechnology.transceive([BZ)[B
android.nfc.tech.IsoDep.transceive([BZ)[B
android.nfc.tech.MifareClassic.transceive([BZ)[B
android.nfc.tech.MifareUltralight.transceive([BZ)[B
android.nfc.tech.Ndef.transceive([BZ)[B
android.nfc.tech.NdefFormatable.transceive([BZ)[B
android.nfc.tech.NfcA.transceive([BZ)[B
android.nfc.tech.NfcB.transceive([BZ)[B
android.nfc.tech.NfcF.transceive([BZ)[B
android.nfc.tech.NfcV.transceive([BZ)[B
android.nfc.tech.IsoDep.transceive([B)[B
android.nfc.tech.MifareClassic.authenticate(I[BZ)Z
android.nfc.tech.MifareClassic.readBlock(I)[B
android.nfc.tech.MifareClassic.transceive([B)[B
android.nfc.tech.MifareClassic.decrement(II)V
android.nfc.tech.MifareClassic.increment(II)V
android.nfc.tech.MifareClassic.restore(I)V
android.nfc.tech.MifareClassic.transfer(I)V
android.nfc.tech.MifareClassic.writeBlock(I[B)V
android.nfc.tech.MifareUltralight.readPages(I)[B
android.nfc.tech.MifareUltralight.transceive([B)[B
android.nfc.tech.MifareUltralight.writePage(I[B)V
android.nfc.tech.NfcA.transceive([B)[B
android.nfc.tech.NfcB.transceive([B)[B
android.nfc.tech.NfcF.transceive([B)[B
android.nfc.tech.NfcV.transceive([B)[B
android.nfc.tech.MifareClassic.authenticateSectorWithKeyA(I[B)Z
android.nfc.tech.MifareClassic.authenticateSectorWithKeyB(I[B)Z
com.android.nfc.NfcService$TagService.ndefRead(I)Landroid/nfc/NdefMessage;
android.nfc.INfcTag$Stub$Proxy.ndefRead(I)Landroid/nfc/NdefMessage;
android.nfc.INfcTag$Stub.ndefRead(I)Landroid/nfc/NdefMessage;
android.nfc.INfcTag.ndefRead(I)Landroid/nfc/NdefMessage;
com.android.nfc.NfcService$TagService.ndefWrite(ILandroid/nfc/NdefMessage;)I
android.nfc.INfcTag$Stub$Proxy.ndefWrite(ILandroid/nfc/NdefMessage;)I
android.nfc.INfcTag$Stub.ndefWrite(ILandroid/nfc/NdefMessage;)I
android.nfc.INfcTag.ndefWrite(ILandroid/nfc/NdefMessage;)I
com.android.nfc.NfcService$TagService.ndefMakeReadOnly(I)I
android.nfc.INfcTag$Stub$Proxy.ndefMakeReadOnly(I)I
android.nfc.INfcTag$Stub.ndefMakeReadOnly(I)I
android.nfc.INfcTag.ndefMakeReadOnly(I)I
com.android.nfc.NfcService$TagService.formatNdef(I[B)I
android.nfc.INfcTag$Stub$Proxy.formatNdef(I[B)I
android.nfc.INfcTag$Stub.formatNdef(I[B)I
android.nfc.INfcTag.formatNdef(I[B)I
com.android.nfc.NfcService$TagService.rediscover(I)Landroid/nfc/Tag;
android.nfc.INfcTag$Stub$Proxy.rediscover(I)Landroid/nfc/Tag;
android.nfc.INfcTag$Stub.rediscover(I)Landroid/nfc/Tag;
android.nfc.INfcTag.rediscover(I)Landroid/nfc/Tag;
android.nfc.Tag.rediscover()Landroid/nfc/Tag;
com.android.nfc.NfcService$TagService.setTimeout(II)I
android.nfc.INfcTag$Stub$Proxy.setTimeout(II)I
android.nfc.INfcTag$Stub.setTimeout(II)I
android.nfc.INfcTag.setTimeout(II)I
android.nfc.tech.IsoDep.setTimeout(I)V
android.nfc.tech.MifareClassic.setTimeout(I)V
android.nfc.tech.MifareUltralight.setTimeout(I)V
android.nfc.tech.NfcA.setTimeout(I)V
android.nfc.tech.NfcF.setTimeout(I)V
com.android.nfc.NfcService$TagService.getTimeout(I)I
android.nfc.INfcTag$Stub$Proxy.getTimeout(I)I
android.nfc.INfcTag$Stub.getTimeout(I)I
android.nfc.INfcTag.getTimeout(I)I
android.nfc.tech.IsoDep.getTimeout()I
android.nfc.tech.MifareClassic.getTimeout()I
android.nfc.tech.MifareUltralight.getTimeout()I
android.nfc.tech.NfcA.getTimeout()I
android.nfc.tech.NfcF.getTimeout()I
com.android.nfc.NfcService$TagService.resetTimeouts()V
android.nfc.INfcTag$Stub$Proxy.resetTimeouts()V
android.nfc.INfcTag$Stub.resetTimeouts()V
android.nfc.INfcTag.resetTimeouts()V
com.android.nfc.NfcService.enforceNfceeAdminPerm(Ljava/lang/String;)V
com.android.nfc.NfcService$NfcAdapterExtrasService.close(Ljava/lang/String;Landroid/os/IBinder;)Landroid/os/Bundle;
com.android.nfc.NfcService$NfcAdapterExtrasService.open(Ljava/lang/String;Landroid/os/IBinder;)Landroid/os/Bundle;
com.android.nfc.NfcService$NfcAdapterExtrasService.transceive(Ljava/lang/String;[B)Landroid/os/Bundle;
com.android.nfc.NfcService$NfcAdapterExtrasService.getCardEmulationRoute(Ljava/lang/String;)I
com.android.nfc.NfcService$NfcAdapterExtrasService.authenticate(Ljava/lang/String;[B)V
com.android.nfc.NfcService$NfcAdapterExtrasService.setCardEmulationRoute(Ljava/lang/String;I)V
com.android.nfc.NfcService$NfcAdapterService.getNfcAdapterExtrasInterface(Ljava/lang/String;)Landroid/nfc/INfcAdapterExtras;
android.nfc.INfcAdapterExtras$Stub$Proxy.close(Ljava/lang/String;Landroid/os/IBinder;)Landroid/os/Bundle;
android.nfc.INfcAdapterExtras$Stub.close(Ljava/lang/String;Landroid/os/IBinder;)Landroid/os/Bundle;
android.nfc.INfcAdapterExtras$Stub$Proxy.open(Ljava/lang/String;Landroid/os/IBinder;)Landroid/os/Bundle;
android.nfc.INfcAdapterExtras$Stub.open(Ljava/lang/String;Landroid/os/IBinder;)Landroid/os/Bundle;
android.nfc.INfcAdapterExtras$Stub$Proxy.transceive(Ljava/lang/String;[B)Landroid/os/Bundle;
android.nfc.INfcAdapterExtras$Stub.transceive(Ljava/lang/String;[B)Landroid/os/Bundle;
android.nfc.INfcAdapterExtras$Stub$Proxy.getCardEmulationRoute(Ljava/lang/String;)I
android.nfc.INfcAdapterExtras$Stub.getCardEmulationRoute(Ljava/lang/String;)I
android.nfc.INfcAdapterExtras$Stub$Proxy.authenticate(Ljava/lang/String;[B)V
android.nfc.INfcAdapterExtras$Stub.authenticate(Ljava/lang/String;[B)V
android.nfc.INfcAdapterExtras$Stub$Proxy.setCardEmulationRoute(Ljava/lang/String;I)V
android.nfc.INfcAdapterExtras$Stub.setCardEmulationRoute(Ljava/lang/String;I)V
android.nfc.INfcAdapter$Stub$Proxy.getNfcAdapterExtrasInterface(Ljava/lang/String;)Landroid/nfc/INfcAdapterExtras;
android.nfc.INfcAdapter$Stub.getNfcAdapterExtrasInterface(Ljava/lang/String;)Landroid/nfc/INfcAdapterExtras;
android.nfc.INfcAdapterExtras.close(Ljava/lang/String;Landroid/os/IBinder;)Landroid/os/Bundle;
android.nfc.INfcAdapterExtras$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.INfcAdapterExtras.open(Ljava/lang/String;Landroid/os/IBinder;)Landroid/os/Bundle;
android.nfc.INfcAdapterExtras.transceive(Ljava/lang/String;[B)Landroid/os/Bundle;
android.nfc.INfcAdapterExtras.getCardEmulationRoute(Ljava/lang/String;)I
android.nfc.INfcAdapterExtras.authenticate(Ljava/lang/String;[B)V
android.nfc.INfcAdapterExtras.setCardEmulationRoute(Ljava/lang/String;I)V
android.nfc.INfcAdapter.getNfcAdapterExtrasInterface(Ljava/lang/String;)Landroid/nfc/INfcAdapterExtras;
com.android.nfc.NfcService$NfcAdapterExtrasService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.NfcAdapter.getNfcAdapterExtrasInterface()Landroid/nfc/INfcAdapterExtras;
Permission:android.permission.CHANGE_WIFI_MULTICAST_STATE

19 Callers:

com.android.server.WifiService.enforceMulticastChangePermission()V
com.android.server.WifiService.acquireMulticastLock(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.WifiService.initializeMulticastFiltering()V
com.android.server.WifiService.releaseMulticastLock()V
android.net.wifi.IWifiManager$Stub$Proxy.acquireMulticastLock(Landroid/os/IBinder;Ljava/lang/String;)V
android.net.wifi.IWifiManager$Stub.acquireMulticastLock(Landroid/os/IBinder;Ljava/lang/String;)V
android.net.wifi.IWifiManager$Stub$Proxy.initializeMulticastFiltering()V
android.net.wifi.IWifiManager$Stub.initializeMulticastFiltering()V
android.net.wifi.IWifiManager$Stub$Proxy.releaseMulticastLock()V
android.net.wifi.IWifiManager$Stub.releaseMulticastLock()V
android.net.wifi.IWifiManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.IWifiManager.acquireMulticastLock(Landroid/os/IBinder;Ljava/lang/String;)V
android.net.wifi.IWifiManager.initializeMulticastFiltering()V
android.net.wifi.IWifiManager.releaseMulticastLock()V
com.android.server.WifiService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.WifiManager$MulticastLock.acquire()V
android.net.wifi.WifiManager.initializeMulticastFiltering()Z
android.net.wifi.WifiManager$MulticastLock.release()V
android.net.wifi.WifiManager$MulticastLock.finalize()V
Permission:android.permission.GET_TASKS

97 Callers:

com.android.server.am.ActivityManagerService.getTasks(IILandroid/app/IThumbnailReceiver;)Ljava/util/List;
android.app.ActivityManagerNative.getTasks(IILandroid/app/IThumbnailReceiver;)Ljava/util/List;
android.app.ActivityManagerNative.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IActivityManager.getTasks(IILandroid/app/IThumbnailReceiver;)Ljava/util/List;
com.android.server.am.ActivityManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ActivityManager.getRunningTasks(IILandroid/app/IThumbnailReceiver;)Ljava/util/List;
android.app.ActivityManager.getRunningTasks(I)Ljava/util/List;
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.isForegroundApp(Ljava/lang/String;)Z
com.android.nfc.P2pLinkManager.prepareMessageToSend()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.sendConnectNoticeToApp(Landroid/net/wifi/p2p/WifiP2pDevice;Landroid/net/wifi/p2p/WifiP2pConfig;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.sendShowPinReqToFrontApp(Ljava/lang/String;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.setDialogListenerApp(Landroid/os/Messenger;Ljava/lang/String;Z)Z
com.android.nfc.P2pLinkManager.onLlcpActivated()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$5300(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;Landroid/net/wifi/p2p/WifiP2pDevice;Landroid/net/wifi/p2p/WifiP2pConfig;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$6900(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;Ljava/lang/String;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.p2pConnectWithPinDisplay(Landroid/net/wifi/p2p/WifiP2pConfig;Z)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$900(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;Landroid/os/Messenger;Ljava/lang/String;Z)Z
com.android.nfc.NfcService$NfcServiceHandler.llcpActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingInvitationState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState.processMessage(Landroid/os/Message;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$4400(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;Landroid/net/wifi/p2p/WifiP2pConfig;Z)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.processMessage(Landroid/os/Message;)Z
com.android.nfc.NfcService.sendMessage(ILjava/lang/Object;)V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
com.android.internal.util.State.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingInvitationState.processMessage(Landroid/os/Message;)Z
com.android.nfc.NfcService.onCardEmulationAidSelected([B)V
com.android.nfc.NfcService.onCardEmulationDeselected()V
com.android.nfc.NfcService.onLlcpLinkActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.NfcService.onLlcpLinkDeactivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.NfcService.onRemoteEndpointDiscovered(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.NfcService.onRemoteFieldActivated()V
com.android.nfc.NfcService.onRemoteFieldDeactivated()V
com.android.nfc.NfcService.onSeApduReceived([B)V
com.android.nfc.NfcService.onSeEmvCardRemoval()V
com.android.nfc.NfcService.onSeMifareAccess([B)V
com.android.nfc.NfcService.sendMockNdefTag(Landroid/nfc/NdefMessage;)V
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
com.android.nfc.DeviceHost$DeviceHostListener.onCardEmulationAidSelected([B)V
com.android.nfc.DeviceHost$DeviceHostListener.onCardEmulationDeselected()V
com.android.nfc.DeviceHost$DeviceHostListener.onLlcpLinkActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onLlcpLinkDeactivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteEndpointDiscovered(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteFieldActivated()V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteFieldDeactivated()V
com.android.nfc.DeviceHost$DeviceHostListener.onSeApduReceived([B)V
com.android.nfc.DeviceHost$DeviceHostListener.onSeEmvCardRemoval()V
com.android.nfc.DeviceHost$DeviceHostListener.onSeMifareAccess([B)V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
com.android.nfc.nxp.NativeNfcManager.notifyTransactionListeners([B)V
com.android.nfc.nxp.NativeNfcManager.notifyTargetDeselected()V
com.android.nfc.nxp.NativeNfcManager.notifyLlcpLinkActivation(Lcom/android/nfc/nxp/NativeP2pDevice;)V
com.android.nfc.nxp.NativeNfcManager.notifyLlcpLinkDeactivated(Lcom/android/nfc/nxp/NativeP2pDevice;)V
com.android.nfc.nxp.NativeNfcManager.notifyNdefMessageListeners(Lcom/android/nfc/nxp/NativeNfcTag;)V
com.android.nfc.nxp.NativeNfcManager.notifySeFieldActivated()V
com.android.nfc.nxp.NativeNfcManager.notifySeFieldDeactivated()V
com.android.nfc.nxp.NativeNfcManager.notifySeApduReceived([B)V
com.android.nfc.nxp.NativeNfcManager.notifySeEmvCardRemoval()V
com.android.nfc.nxp.NativeNfcManager.notifySeMifareAccess([B)V
com.android.server.am.ActivityManagerService.getRecentTasks(II)Ljava/util/List;
android.app.ActivityManagerNative.getRecentTasks(II)Ljava/util/List;
android.app.IActivityManager.getRecentTasks(II)Ljava/util/List;
android.app.ActivityManager.getRecentTasks(II)Ljava/util/List;
com.android.internal.policy.impl.RecentApplicationsDialog.reloadButtons()V
com.android.systemui.recent.RecentTasksLoader$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.internal.policy.impl.RecentApplicationsDialog.onStart()V
com.android.systemui.recent.RecentTasksLoader$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
Permission:android.permission.ACCESS_WIFI_STATE

473 Callers:

com.android.server.WifiService.enforceAccessPermission()V
com.android.server.WifiService.getDhcpInfo()Landroid/net/DhcpInfo;
com.android.server.WifiService.getWifiApConfiguration()Landroid/net/wifi/WifiConfiguration;
com.android.server.WifiService.getConnectionInfo()Landroid/net/wifi/WifiInfo;
com.android.server.WifiService.getWifiServiceMessenger()Landroid/os/Messenger;
com.android.server.WifiService.getWifiStateMachineMessenger()Landroid/os/Messenger;
com.android.server.WifiService.isMulticastEnabled()Z
com.android.server.WifiService.pingSupplicant()Z
com.android.server.WifiService.getFrequencyBand()I
com.android.server.WifiService.getWifiApEnabledState()I
com.android.server.WifiService.getWifiEnabledState()I
com.android.server.WifiService.getConfigFile()Ljava/lang/String;
com.android.server.WifiService.getConfiguredNetworks()Ljava/util/List;
com.android.server.WifiService.getScanResults()Ljava/util/List;
android.net.wifi.IWifiManager$Stub$Proxy.getDhcpInfo()Landroid/net/DhcpInfo;
android.net.wifi.IWifiManager$Stub.getDhcpInfo()Landroid/net/DhcpInfo;
android.net.wifi.IWifiManager$Stub$Proxy.getWifiApConfiguration()Landroid/net/wifi/WifiConfiguration;
android.net.wifi.IWifiManager$Stub.getWifiApConfiguration()Landroid/net/wifi/WifiConfiguration;
android.net.wifi.IWifiManager$Stub$Proxy.getConnectionInfo()Landroid/net/wifi/WifiInfo;
android.net.wifi.IWifiManager$Stub.getConnectionInfo()Landroid/net/wifi/WifiInfo;
android.net.wifi.IWifiManager$Stub$Proxy.getWifiServiceMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager$Stub.getWifiServiceMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager$Stub$Proxy.getWifiStateMachineMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager$Stub.getWifiStateMachineMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager$Stub$Proxy.isMulticastEnabled()Z
android.net.wifi.IWifiManager$Stub.isMulticastEnabled()Z
android.net.wifi.IWifiManager$Stub$Proxy.pingSupplicant()Z
android.net.wifi.IWifiManager$Stub.pingSupplicant()Z
android.net.wifi.IWifiManager$Stub$Proxy.getFrequencyBand()I
android.net.wifi.IWifiManager$Stub.getFrequencyBand()I
android.net.wifi.IWifiManager$Stub$Proxy.getWifiApEnabledState()I
android.net.wifi.IWifiManager$Stub.getWifiApEnabledState()I
android.net.wifi.IWifiManager$Stub$Proxy.getWifiEnabledState()I
android.net.wifi.IWifiManager$Stub.getWifiEnabledState()I
android.net.wifi.IWifiManager$Stub$Proxy.getConfigFile()Ljava/lang/String;
android.net.wifi.IWifiManager$Stub.getConfigFile()Ljava/lang/String;
android.net.wifi.IWifiManager$Stub$Proxy.getConfiguredNetworks()Ljava/util/List;
android.net.wifi.IWifiManager$Stub.getConfiguredNetworks()Ljava/util/List;
android.net.wifi.IWifiManager$Stub$Proxy.getScanResults()Ljava/util/List;
android.net.wifi.IWifiManager$Stub.getScanResults()Ljava/util/List;
android.net.wifi.IWifiManager.getDhcpInfo()Landroid/net/DhcpInfo;
android.net.wifi.IWifiManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.IWifiManager.getWifiApConfiguration()Landroid/net/wifi/WifiConfiguration;
android.net.wifi.IWifiManager.getConnectionInfo()Landroid/net/wifi/WifiInfo;
android.net.wifi.IWifiManager.getWifiServiceMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager.getWifiStateMachineMessenger()Landroid/os/Messenger;
android.net.wifi.IWifiManager.isMulticastEnabled()Z
android.net.wifi.IWifiManager.pingSupplicant()Z
android.net.wifi.IWifiManager.getFrequencyBand()I
android.net.wifi.IWifiManager.getWifiApEnabledState()I
android.net.wifi.IWifiManager.getWifiEnabledState()I
android.net.wifi.IWifiManager.getConfigFile()Ljava/lang/String;
android.net.wifi.IWifiManager.getConfiguredNetworks()Ljava/util/List;
android.net.wifi.IWifiManager.getScanResults()Ljava/util/List;
android.net.wifi.WifiManager.getDhcpInfo()Landroid/net/DhcpInfo;
com.android.server.WifiService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.WifiManager.getWifiApConfiguration()Landroid/net/wifi/WifiConfiguration;
android.net.wifi.WifiManager.getConnectionInfo()Landroid/net/wifi/WifiInfo;
android.net.wifi.WifiManager.getWifiServiceMessenger()Landroid/os/Messenger;
android.net.wifi.WifiManager.getWifiStateMachineMessenger()Landroid/os/Messenger;
android.net.wifi.WifiManager.isMulticastEnabled()Z
android.net.wifi.WifiManager.pingSupplicant()Z
android.net.wifi.WifiManager.getFrequencyBand()I
android.net.wifi.WifiManager.getWifiApState()I
android.net.wifi.WifiManager.getWifiState()I
android.net.wifi.WifiManager.getConfigFile()Ljava/lang/String;
android.net.wifi.WifiManager.getConfiguredNetworks()Ljava/util/List;
android.net.wifi.WifiManager.getScanResults()Ljava/util/List;
com.android.settings.TetherSettings.initWifiTethering()V
com.android.settings.wifi.WifiApEnabler.updateTetherState([Ljava/lang/Object;[Ljava/lang/Object;[Ljava/lang/Object;)V
android.net.NetworkIdentity.buildNetworkIdentity(Landroid/content/Context;Landroid/net/NetworkState;)Landroid/net/NetworkIdentity;
android.net.sip.SipAudioCall.isWifiOn()Z
com.android.settings.deviceinfo.Status.setWifiStatus()V
com.android.settings.wifi.AdvancedWifiSettings.refreshWifiInfo()V
com.android.settings.wifi.WifiSettings.updateConnectionState(Landroid/net/NetworkInfo$DetailedState;)V
com.android.settings.wifi.WifiStatusTest$3.onClick(Landroid/view/View;)V
com.android.settings.wifi.WifiStatusTest.handleNetworkStateChanged(Landroid/net/NetworkInfo;)V
com.android.settings.wifi.WpsDialog.handleEvent(Landroid/content/Context;Landroid/content/Intent;)V
com.android.systemui.statusbar.policy.NetworkController.updateWifiState(Landroid/content/Intent;)V
android.net.wifi.WifiManager.initialize(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/WifiManager$ChannelListener;)Landroid/net/wifi/WifiManager$Channel;
com.android.systemui.statusbar.policy.NetworkController.<init>(Landroid/content/Context;)V
android.net.wifi.WifiWatchdogStateMachine.<init>(Landroid/content/Context;)V
com.android.settings.wifi.AdvancedWifiSettings.initPreferences()V
android.net.wifi.WifiManager.isWifiApEnabled()Z
com.android.settings.TetherSettings.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.settings.wifi.WifiEnabler.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
android.net.wifi.WifiManager.isWifiEnabled()Z
com.android.providers.settings.SettingsBackupAgent.enableWifi(Z)I
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.getActualState(Landroid/content/Context;)I
com.android.settings.wifi.WifiApEnabler.setSoftapEnabled(Z)V
com.android.settings.wifi.WifiEnabler.setSwitch(Landroid/widget/Switch;)V
com.android.settings.wifi.WifiSettings.updateAccessPoints()V
com.android.development.Connectivity.onStartDelayedCycle()V
com.android.providers.settings.SettingsBackupAgent.onCreate()V
com.android.settings.net.DataUsageMeteredSettings.updateNetworks(Landroid/content/Context;)V
com.android.settings.wifi.WifiConfigInfo.onResume()V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.onBackButtonPressed()V
com.android.settings.wifi.WifiSettings.constructAccessPoints()Ljava/util/List;
com.android.systemui.statusbar.policy.NetworkController.huntForSsid(Landroid/net/wifi/WifiInfo;)Ljava/lang/String;
com.android.settings.wifi.WifiStatusTest.handleScanResultsAvailable()V
com.android.settings.TetherSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiApEnabler.access$100(Lcom/android/settings/wifi/WifiApEnabler;[Ljava/lang/Object;[Ljava/lang/Object;[Ljava/lang/Object;)V
com.android.server.net.NetworkPolicyManagerService.getNetworkQuotaInfoUnchecked(Landroid/net/NetworkState;)Landroid/net/NetworkQuotaInfo;
com.android.server.net.NetworkPolicyManagerService.isNetworkMetered(Landroid/net/NetworkState;)Z
com.android.server.net.NetworkPolicyManagerService.updateNetworkRulesLocked()V
com.android.server.net.NetworkStatsService.updateIfacesLocked()V
android.net.sip.SipAudioCall.startAudioInternal()V
com.android.settings.deviceinfo.Status.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onResume()V
com.android.settings.wifi.WifiSettings.handleEvent(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.wifi.WifiStatusTest.access$100(Lcom/android/settings/wifi/WifiStatusTest;Landroid/net/NetworkInfo;)V
com.android.settings.wifi.WpsDialog.access$200(Lcom/android/settings/wifi/WpsDialog;Landroid/content/Context;Landroid/content/Intent;)V
com.android.systemui.statusbar.policy.NetworkController.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.WpsDialog.onCreate(Landroid/os/Bundle;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.makeStatusBarView()Lcom/android/systemui/statusbar/phone/PhoneStatusBarView;
com.android.systemui.statusbar.tablet.TabletStatusBar.makeStatusBarView()Landroid/view/View;
android.net.wifi.WifiWatchdogStateMachine.makeWifiWatchdogStateMachine(Landroid/content/Context;)Landroid/net/wifi/WifiWatchdogStateMachine;
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.settings.wifi.WifiSettings$2.onClick(Landroid/view/View;)V
com.android.settings.wifi.WifiSettings$3.onClick(Landroid/view/View;)V
com.android.settings.wifi.WifiSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.wifi.WifiSettings.getAccessPointsCount()I
com.android.settings.wifi.WifiSettings.forget()V
com.android.settings.wifi.WifiSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.wifi.WifiSettings.pauseWifiScan()V
com.android.settings.wifi.WifiSettings.refreshAccessPoints()V
com.android.settings.wifi.WifiSettings.resumeWifiScan()V
com.android.settings.wifi.WifiSettings.submit(Lcom/android/settings/wifi/WifiConfigController;)V
com.android.providers.settings.SettingsBackupAgent.onRestore(Landroid/app/backup/BackupDataInput;ILandroid/os/ParcelFileDescriptor;)V
com.android.providers.settings.SettingsBackupAgent.onRestoreFile(Landroid/os/ParcelFileDescriptor;JILjava/lang/String;Ljava/lang/String;JJ)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.getActualState(Landroid/content/Context;)I
com.android.settings.TetherSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.TetherSettings.startTethering()V
com.android.settings.Settings$HeaderAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.settings.wifi.WifiSettings.onResume()V
com.android.development.Connectivity.access$1300(Lcom/android/development/Connectivity;)V
com.android.settings.net.DataUsageMeteredSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.onClick(Landroid/view/View;)V
com.android.settings.wifi.WifiStatusTest.access$200(Lcom/android/settings/wifi/WifiStatusTest;)V
com.android.settings.SettingsPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiApEnabler$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.INetworkPolicyManager$Stub$Proxy.isNetworkMetered(Landroid/net/NetworkState;)Z
android.net.INetworkPolicyManager$Stub.isNetworkMetered(Landroid/net/NetworkState;)Z
com.android.server.net.NetworkPolicyManagerService.access$1100(Lcom/android/server/net/NetworkPolicyManagerService;)V
com.android.server.net.NetworkPolicyManagerService.addNetworkPolicyLocked(Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkPolicyManagerService.dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
com.android.server.net.NetworkPolicyManagerService.performSnooze(Landroid/net/NetworkTemplate;I)V
com.android.server.net.NetworkPolicyManagerService.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkStatsService.updateIfaces()V
android.net.sip.SipAudioCall.startAudio()V
com.android.settings.SettingsPreferenceFragment.onResume()V
com.android.settings.wifi.WifiSettings.access$000(Lcom/android/settings/wifi/WifiSettings;Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.wifi.WifiStatusTest$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.wifi.WpsDialog$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.SettingsPreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.addStatusBarWindow()V
com.android.systemui.statusbar.tablet.TabletStatusBar.addStatusBarWindow()V
com.android.server.WifiService.checkAndStartWifi()V
com.android.settings.SettingsPreferenceFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.wifi.WifiSettingsForSetupWizardXL.showDisconnectedState(Ljava/lang/String;)V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.updateConnectionState(Landroid/net/NetworkInfo$DetailedState;)V
com.android.settings.wifi.WifiSettings.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.SettingsPreferenceFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.showConfigUi(Lcom/android/settings/wifi/AccessPoint;Z)V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.refreshAccessPoints(Z)V
com.android.settings.wifi.WifiSettingsForSetupWizardXL.onConnectButtonPressed()V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.TetherSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.startProvisioningIfNecessary(I)V
com.android.development.Connectivity$3.onClick(Landroid/view/View;)V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountPreferenceBase.onCreate(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onCreate(Landroid/os/Bundle;)V
com.android.settings.DeviceInfoSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onCreate(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WirelessSettings.onCreate(Landroid/os/Bundle;)V
android.net.INetworkPolicyManager.isNetworkMetered(Landroid/net/NetworkState;)Z
android.net.INetworkPolicyManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.net.NetworkPolicyManagerService$10.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkPolicyManagerService$8.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkPolicyManagerService.access$1000(Lcom/android/server/net/NetworkPolicyManagerService;Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkPolicyManagerService.ensureActiveMobilePolicyLocked()V
com.android.server.net.NetworkPolicyManagerService.access$800(Lcom/android/server/net/NetworkPolicyManagerService;Landroid/net/NetworkTemplate;I)V
android.net.INetworkPolicyManager$Stub$Proxy.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
android.net.INetworkPolicyManager$Stub.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkStatsService.access$600(Lcom/android/server/net/NetworkStatsService;)V
android.net.sip.SipAudioCall.transferToNewSession()V
com.android.internal.telephony.sip.SipPhone$SipConnection$1.onCallEstablished(Landroid/net/sip/SipAudioCall;)V
com.android.internal.telephony.sip.SipPhone$SipConnection$1.onCallHeld(Landroid/net/sip/SipAudioCall;)V
com.android.internal.telephony.sip.SipPhone$SipConnection.separate()V
com.android.settings.AccessibilitySettings.onResume()V
com.android.settings.accounts.AccountPreferenceBase.onResume()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onResume()V
com.android.settings.bluetooth.DeviceProfilesSettings.onResume()V
com.android.settings.DateTimeSettings.onResume()V
com.android.settings.deviceinfo.Memory.onResume()V
com.android.settings.deviceinfo.UsbSettings.onResume()V
com.android.settings.DisplaySettings.onResume()V
com.android.settings.DockSettings.onResume()V
com.android.settings.DreamSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onResume()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onResume()V
com.android.settings.inputmethod.SpellCheckersSettings.onResume()V
com.android.settings.inputmethod.UserDictionaryList.onResume()V
com.android.settings.LocationSettings.onResume()V
com.android.settings.PrivacySettings.onResume()V
com.android.settings.SecuritySettings.onResume()V
com.android.settings.SoundSettings.onResume()V
com.android.settings.users.UserDetailsSettings.onResume()V
com.android.settings.users.UserSettings.onResume()V
com.android.settings.vpn2.VpnSettings.onResume()V
com.android.settings.wifi.p2p.WifiP2pSettings.onResume()V
com.android.settings.WirelessSettings.onResume()V
com.android.settings.wifi.WifiSettings$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountPreferenceBase.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DeviceInfoSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.net.DataUsageMeteredSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.TetherSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.WirelessSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.createAndAddWindows()V
com.android.systemui.statusbar.tablet.TabletStatusBar.createAndAddWindows()V
com.android.server.ServerThread.run()V
com.android.settings.deviceinfo.Memory.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.users.UserDetailsSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.users.UserSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.wifi.p2p.WifiP2pSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.AccessibilitySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.accounts.AccountPreferenceBase.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.accounts.SyncSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.ApplicationSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.DevicePickerFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DateTimeSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DeviceInfoSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.deviceinfo.UsbSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DisplaySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DockSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DreamSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.SpellCheckersSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.UserDictionaryList.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.LocationSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.net.DataUsageMeteredSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.PrivacySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.SecuritySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.SoundSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.TetherSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.tts.TextToSpeechSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.tts.TtsEngineSettingsFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.vpn2.VpnSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.WallpaperTypeSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.wifi.AdvancedWifiSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.WirelessSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.SettingsPreferenceFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.accounts.AccountSyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.SyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.server.ConnectivityService.isNetworkMeteredUnchecked(I)Z
com.android.server.net.NetworkPolicyManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.net.NetworkPolicyManagerService.access$1300(Lcom/android/server/net/NetworkPolicyManagerService;)V
com.android.server.net.NetworkPolicyManagerService$6.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.INetworkPolicyManager.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkStatsService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.sip.SipAudioCall.access$700(Landroid/net/sip/SipAudioCall;)V
com.android.internal.telephony.Connection.separate()V
com.android.settings.accounts.AccountSyncSettings.onResume()V
com.android.settings.accounts.ManageAccountsSettings.onResume()V
com.android.settings.accounts.SyncSettings.onResume()V
com.android.settings.bluetooth.BluetoothSettings.onResume()V
com.android.settings.bluetooth.DevicePickerFragment.onResume()V
com.android.settings.accounts.AccountSyncSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.accounts.SyncSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.systemui.statusbar.BaseStatusBar.createAndAddWindows()V
com.android.settings.accounts.AccountSyncSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.accounts.ManageAccountsSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.BluetoothSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider.updateButtons(Landroid/widget/RemoteViews;Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.LocationSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.SecuritySettings.onActivityResult(IILandroid/content/Intent;)V
com.android.server.ConnectivityService.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.NetworkPolicyManager.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
android.net.sip.SipAudioCall$1.onCallEstablished(Landroid/net/sip/SipSession;Ljava/lang/String;)V
com.android.phone.PhoneUtils.separateCall(Lcom/android/internal/telephony/Connection;)V
com.android.systemui.statusbar.BaseStatusBar.start()V
com.android.settings.widget.SettingsAppWidgetProvider.buildUpdate(Landroid/content/Context;)Landroid/widget/RemoteViews;
android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager$Stub.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
com.android.settings.net.NetworkPolicyEditor.write([Landroid/net/NetworkPolicy;)V
com.android.phone.ManageConferenceUtils.separateConferenceConnection(ILcom/android/internal/telephony/Connection;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.start()V
com.android.systemui.statusbar.tablet.TabletStatusBar.start()V
com.android.systemui.SystemUI.start()V
com.android.settings.widget.SettingsAppWidgetProvider.onUpdate(Landroid/content/Context;Landroid/appwidget/AppWidgetManager;[I)V
com.android.settings.widget.SettingsAppWidgetProvider.updateWidget(Landroid/content/Context;)V
android.net.IConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.net.NetworkPolicyEditor$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.phone.ManageConferenceUtils$2.onClick(Landroid/view/View;)V
com.android.systemui.SystemUIService.onCreate()V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.onPostExecute(Ljava/lang/Boolean;)V
com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver.onChange(Z)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.onPostExecute(Ljava/lang/Boolean;)V
android.net.ConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOnUpstreamMobileConnection(I)Z
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.net.NetworkPolicyEditor$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.onPostExecute(Ljava/lang/Object;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.onPostExecute(Ljava/lang/Object;)V
com.android.development.Connectivity.onCrash()V
com.android.mms.transaction.TransactionService.beginMmsConnectivity()I
com.android.server.location.GpsLocationProvider.reportAGpsStatus(III)V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOnUpstreamMobileConnection(I)Z
com.android.development.Connectivity.access$2600(Lcom/android/development/Connectivity;)V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.processMessage(Landroid/os/Message;)Z
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.enter()V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.processMessage(Landroid/os/Message;)Z
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.internal.util.State.enter()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
com.android.mms.transaction.Observable.notifyObservers()V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.transaction.SendTransaction.run()V
com.android.mms.transaction.Transaction.process()V
android.net.wifi.p2p.WifiP2pService.enforceAccessPermission()V
android.net.wifi.p2p.WifiP2pService.getMessenger()Landroid/os/Messenger;
android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy.getMessenger()Landroid/os/Messenger;
android.net.wifi.p2p.IWifiP2pManager$Stub.getMessenger()Landroid/os/Messenger;
android.net.wifi.p2p.IWifiP2pManager.getMessenger()Landroid/os/Messenger;
android.net.wifi.p2p.IWifiP2pManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.p2p.WifiP2pManager.getMessenger()Landroid/os/Messenger;
android.net.wifi.p2p.WifiP2pService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.p2p.WifiP2pManager.initialize(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager$ChannelListener;)Landroid/net/wifi/p2p/WifiP2pManager$Channel;
android.net.wifi.WifiStateMachine$InitialState.enter()V
Permission:android.permission.ACCESS_MOCK_LOCATION

43 Callers:

com.android.server.LocationManagerService.checkMockPermissionsSafe()V
com.android.server.LocationManagerService.addTestProvider(Ljava/lang/String;ZZZZZZZII)V
com.android.server.LocationManagerService.clearTestProviderEnabled(Ljava/lang/String;)V
com.android.server.LocationManagerService.clearTestProviderLocation(Ljava/lang/String;)V
com.android.server.LocationManagerService.clearTestProviderStatus(Ljava/lang/String;)V
com.android.server.LocationManagerService.removeTestProvider(Ljava/lang/String;)V
com.android.server.LocationManagerService.setTestProviderEnabled(Ljava/lang/String;Z)V
com.android.server.LocationManagerService.setTestProviderLocation(Ljava/lang/String;Landroid/location/Location;)V
com.android.server.LocationManagerService.setTestProviderStatus(Ljava/lang/String;ILandroid/os/Bundle;J)V
android.location.ILocationManager$Stub$Proxy.addTestProvider(Ljava/lang/String;ZZZZZZZII)V
android.location.ILocationManager$Stub.addTestProvider(Ljava/lang/String;ZZZZZZZII)V
android.location.ILocationManager$Stub$Proxy.clearTestProviderEnabled(Ljava/lang/String;)V
android.location.ILocationManager$Stub.clearTestProviderEnabled(Ljava/lang/String;)V
android.location.ILocationManager$Stub$Proxy.clearTestProviderLocation(Ljava/lang/String;)V
android.location.ILocationManager$Stub.clearTestProviderLocation(Ljava/lang/String;)V
android.location.ILocationManager$Stub$Proxy.clearTestProviderStatus(Ljava/lang/String;)V
android.location.ILocationManager$Stub.clearTestProviderStatus(Ljava/lang/String;)V
android.location.ILocationManager$Stub$Proxy.removeTestProvider(Ljava/lang/String;)V
android.location.ILocationManager$Stub.removeTestProvider(Ljava/lang/String;)V
android.location.ILocationManager$Stub$Proxy.setTestProviderEnabled(Ljava/lang/String;Z)V
android.location.ILocationManager$Stub.setTestProviderEnabled(Ljava/lang/String;Z)V
android.location.ILocationManager$Stub$Proxy.setTestProviderLocation(Ljava/lang/String;Landroid/location/Location;)V
android.location.ILocationManager$Stub.setTestProviderLocation(Ljava/lang/String;Landroid/location/Location;)V
android.location.ILocationManager$Stub$Proxy.setTestProviderStatus(Ljava/lang/String;ILandroid/os/Bundle;J)V
android.location.ILocationManager$Stub.setTestProviderStatus(Ljava/lang/String;ILandroid/os/Bundle;J)V
android.location.ILocationManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.location.ILocationManager.addTestProvider(Ljava/lang/String;ZZZZZZZII)V
android.location.ILocationManager.clearTestProviderEnabled(Ljava/lang/String;)V
android.location.ILocationManager.clearTestProviderLocation(Ljava/lang/String;)V
android.location.ILocationManager.clearTestProviderStatus(Ljava/lang/String;)V
android.location.ILocationManager.removeTestProvider(Ljava/lang/String;)V
android.location.ILocationManager.setTestProviderEnabled(Ljava/lang/String;Z)V
android.location.ILocationManager.setTestProviderLocation(Ljava/lang/String;Landroid/location/Location;)V
android.location.ILocationManager.setTestProviderStatus(Ljava/lang/String;ILandroid/os/Bundle;J)V
com.android.server.LocationManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.location.LocationManager.addTestProvider(Ljava/lang/String;ZZZZZZZII)V
android.location.LocationManager.clearTestProviderEnabled(Ljava/lang/String;)V
android.location.LocationManager.clearTestProviderLocation(Ljava/lang/String;)V
android.location.LocationManager.clearTestProviderStatus(Ljava/lang/String;)V
android.location.LocationManager.removeTestProvider(Ljava/lang/String;)V
android.location.LocationManager.setTestProviderEnabled(Ljava/lang/String;Z)V
android.location.LocationManager.setTestProviderLocation(Ljava/lang/String;Landroid/location/Location;)V
android.location.LocationManager.setTestProviderStatus(Ljava/lang/String;ILandroid/os/Bundle;J)V
Permission:android.permission.EXPAND_STATUS_BAR

18 Callers:

com.android.server.StatusBarManagerService.enforceExpandStatusBar()V
com.android.server.StatusBarManagerService.collapse()V
com.android.server.StatusBarManagerService.expand()V
com.android.internal.statusbar.IStatusBarService$Stub$Proxy.collapse()V
com.android.internal.statusbar.IStatusBarService$Stub.collapse()V
com.android.server.StatusBarManagerService$7.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.statusbar.IStatusBarService$Stub$Proxy.expand()V
com.android.internal.statusbar.IStatusBarService$Stub.expand()V
com.android.internal.statusbar.IStatusBarService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.statusbar.IStatusBarService.collapse()V
com.android.internal.statusbar.IStatusBarService.expand()V
com.android.server.StatusBarManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.StatusBarManager.collapse()V
com.android.internal.policy.impl.PhoneWindowManager$8.run()V
android.app.StatusBarManager.expand()V
com.android.systemui.statusbar.tablet.SettingsView.onClickNetwork()V
com.android.systemui.statusbar.tablet.SettingsView.onClickSettings()V
com.android.systemui.statusbar.tablet.SettingsView.onClick(Landroid/view/View;)V
Permission:android.permission.BLUETOOTH_ADMIN

1387 Callers:

android.server.BluetoothService.disable(Z)Z
android.bluetooth.IBluetooth$Stub$Proxy.disable(Z)Z
android.bluetooth.IBluetooth$Stub.disable(Z)Z
android.server.BluetoothService.disable()Z
android.bluetooth.IBluetooth.disable(Z)Z
android.bluetooth.IBluetooth$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.BluetoothAdapter.disable()Z
com.android.server.pm.ShutdownThread$5.run()V
android.server.BluetoothService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.bluetooth.opp.BluetoothOppManager.disableBluetooth()V
com.android.settings.bluetooth.LocalBluetoothAdapter.disable()Z
com.android.settings.bluetooth.LocalBluetoothAdapter.setBluetoothEnabled(Z)V
com.android.settings.bluetooth.DockService.msgTypeDisableBluetooth(I)Z
com.android.settings.bluetooth.DockService.handleBluetoothStateOn(I)V
com.android.settings.bluetooth.BluetoothEnabler.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.settings.bluetooth.DockService.processMessage(Landroid/os/Message;)V
com.android.settings.bluetooth.DockService.handleBtStateChange(Landroid/content/Intent;I)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.settings.bluetooth.DockService.onStartCommand(Landroid/content/Intent;II)I
com.android.settings.bluetooth.DockService.access$100(Lcom/android/settings/bluetooth/DockService;Landroid/os/Message;)V
android.server.BluetoothService.enable(ZZ)Z
android.server.BluetoothService.enableNoAutoConnect()Z
android.server.BluetoothService.enable()Z
android.bluetooth.IBluetooth$Stub$Proxy.enableNoAutoConnect()Z
android.bluetooth.IBluetooth$Stub.enableNoAutoConnect()Z
android.bluetooth.IBluetooth$Stub$Proxy.enable()Z
android.bluetooth.IBluetooth$Stub.enable()Z
com.android.server.ServerThread.run()V
android.bluetooth.IBluetooth.enableNoAutoConnect()Z
android.bluetooth.IBluetooth.enable()Z
android.bluetooth.BluetoothAdapter.enableNoAutoConnect()Z
android.bluetooth.BluetoothAdapter.enable()Z
com.android.nfc.handover.HandoverManager$HandoverPowerManager.enableBluetooth()Z
com.android.bluetooth.opp.BluetoothOppManager.enableBluetooth()V
com.android.settings.bluetooth.LocalBluetoothAdapter.enable()Z
com.android.settings.TetherSettings.startTethering()V
com.android.nfc.handover.BluetoothHeadsetHandover.nextStepConnect()V
com.android.nfc.handover.BluetoothOppHandover.start()V
com.android.nfc.handover.HandoverManager.tryHandoverRequest(Landroid/nfc/NdefMessage;)Landroid/nfc/NdefMessage;
com.android.bluetooth.opp.BluetoothOppBtEnableActivity.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.applyBtSettings(Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.bluetooth.RequestPermissionHelperActivity.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.TetherSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.startProvisioningIfNecessary(I)V
com.android.nfc.handover.BluetoothHeadsetHandover.handleIntent(Landroid/content/Intent;)V
com.android.nfc.handover.BluetoothHeadsetHandover.nextStep()V
com.android.nfc.handover.HandoverManager.doHandoverUri([Landroid/net/Uri;Landroid/nfc/NdefMessage;)V
com.android.nfc.P2pLinkManager$2.doGet(ILandroid/nfc/NdefMessage;)Lcom/android/nfc/snep/SnepMessage;
com.android.settings.bluetooth.DockService.access$700(Lcom/android/settings/bluetooth/DockService;Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.bluetooth.DockService.handleDocked(Landroid/bluetooth/BluetoothDevice;II)V
com.android.settings.bluetooth.RequestPermissionHelperActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.SettingsPreferenceFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.TetherSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.nfc.handover.BluetoothHeadsetHandover$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.nfc.handover.BluetoothHeadsetHandover.start()V
com.android.nfc.P2pLinkManager.doSnepProtocol(Lcom/android/nfc/handover/HandoverManager;Landroid/nfc/NdefMessage;[Landroid/net/Uri;)I
com.android.nfc.snep.SnepServer$Callback.doGet(ILandroid/nfc/NdefMessage;)Lcom/android/nfc/snep/SnepMessage;
com.android.settings.bluetooth.DockService$5.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.msgTypeDocked(Landroid/bluetooth/BluetoothDevice;II)Z
com.android.settings.bluetooth.DockService.access$200(Lcom/android/settings/bluetooth/DockService;Landroid/bluetooth/BluetoothDevice;II)V
com.android.internal.app.AlertActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.LocationSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.SecuritySettings.onActivityResult(IILandroid/content/Intent;)V
com.android.nfc.handover.HandoverManager.tryHandover(Landroid/nfc/NdefMessage;)Z
com.android.nfc.P2pLinkManager$SendTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.nfc.snep.SnepServer.handleRequest(Lcom/android/nfc/snep/SnepMessenger;Lcom/android/nfc/snep/SnepServer$Callback;)Z
com.android.settings.bluetooth.DockService$1.run()V
com.android.bluetooth.opp.BluetoothOppBtEnableActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppBtEnablingActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppBtErrorActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppTransferActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.pbap.BluetoothPbapActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.ExternalMediaFormatActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.NetInitiatedActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.ResolverActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.musicfx.ControlPanelPicker.onCreate(Landroid/os/Bundle;)V
com.android.providers.media.RingtonePickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.ActivityPicker.onCreate(Landroid/os/Bundle;)V
com.android.settings.AllowBindAppWidgetActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothPairingDialog.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothPermissionActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.SettingsSafetyLegalActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbAccessoryUriActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbConfirmActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbPermissionActivity.onCreate(Landroid/os/Bundle;)V
com.android.vpndialogs.ConfirmDialog.onCreate(Landroid/os/Bundle;)V
com.android.vpndialogs.ManageDialog.onCreate(Landroid/os/Bundle;)V
com.android.nfc.NfcDispatcher.dispatchTag(Landroid/nfc/Tag;)Z
com.android.nfc.P2pLinkManager$SendTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.nfc.snep.SnepServer$ConnectionThread.run()V
com.android.internal.app.ChooserActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.internal.app.ChooserActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.ResolverActivity.onCreate(Landroid/os/Bundle;)V
com.android.nfc.TechListChooserActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.nfc.TechListChooserActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbResolverActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.systemui.usb.UsbResolverActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.AppWidgetPickActivity.onCreate(Landroid/os/Bundle;)V
com.android.nfc.NfcService$NfcAdapterService.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.NfcService$NfcServiceHandler.dispatchTagEndpoint(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.NfcService.sendMessage(ILjava/lang/Object;)V
com.android.nfc.snep.SnepServer$ServerThread.run()V
android.nfc.INfcAdapter$Stub$Proxy.dispatch(Landroid/nfc/Tag;)V
android.nfc.INfcAdapter$Stub.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.NfcService.onCardEmulationAidSelected([B)V
com.android.nfc.NfcService.onCardEmulationDeselected()V
com.android.nfc.NfcService.onLlcpLinkActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.NfcService.onLlcpLinkDeactivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.NfcService.onRemoteEndpointDiscovered(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.NfcService.onRemoteFieldActivated()V
com.android.nfc.NfcService.onRemoteFieldDeactivated()V
com.android.nfc.NfcService.onSeApduReceived([B)V
com.android.nfc.NfcService.onSeEmvCardRemoval()V
com.android.nfc.NfcService.onSeMifareAccess([B)V
com.android.nfc.NfcService.sendMockNdefTag(Landroid/nfc/NdefMessage;)V
com.android.nfc.snep.SnepServer.start()V
android.nfc.INfcAdapter$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.INfcAdapter.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.DeviceHost$DeviceHostListener.onCardEmulationAidSelected([B)V
com.android.nfc.DeviceHost$DeviceHostListener.onCardEmulationDeselected()V
com.android.nfc.DeviceHost$DeviceHostListener.onLlcpLinkActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onLlcpLinkDeactivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteEndpointDiscovered(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteFieldActivated()V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteFieldDeactivated()V
com.android.nfc.DeviceHost$DeviceHostListener.onSeApduReceived([B)V
com.android.nfc.DeviceHost$DeviceHostListener.onSeEmvCardRemoval()V
com.android.nfc.DeviceHost$DeviceHostListener.onSeMifareAccess([B)V
com.android.nfc.P2pLinkManager.enableDisable(ZZ)V
com.android.nfc.NfcService$NfcAdapterService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.NfcAdapter.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.nxp.NativeNfcManager.notifyTransactionListeners([B)V
com.android.nfc.nxp.NativeNfcManager.notifyTargetDeselected()V
com.android.nfc.nxp.NativeNfcManager.notifyLlcpLinkActivation(Lcom/android/nfc/nxp/NativeP2pDevice;)V
com.android.nfc.nxp.NativeNfcManager.notifyLlcpLinkDeactivated(Lcom/android/nfc/nxp/NativeP2pDevice;)V
com.android.nfc.nxp.NativeNfcManager.notifyNdefMessageListeners(Lcom/android/nfc/nxp/NativeNfcTag;)V
com.android.nfc.nxp.NativeNfcManager.notifySeFieldActivated()V
com.android.nfc.nxp.NativeNfcManager.notifySeFieldDeactivated()V
com.android.nfc.nxp.NativeNfcManager.notifySeApduReceived([B)V
com.android.nfc.nxp.NativeNfcManager.notifySeEmvCardRemoval()V
com.android.nfc.nxp.NativeNfcManager.notifySeMifareAccess([B)V
com.android.nfc.NfcService$EnableDisableTask.disableInternal()Z
com.android.nfc.NfcService$EnableDisableTask.enableInternal()Z
com.android.nfc.NfcService$NfcAdapterService.disableNdefPush()Z
com.android.nfc.NfcService$NfcAdapterService.enableNdefPush()Z
com.android.nfc.NfcService$EnableDisableTask.doInBackground([Ljava/lang/Integer;)Ljava/lang/Void;
com.android.nfc.NfcService$EnableDisableTask.executeEeWipe()V
android.nfc.INfcAdapter$Stub$Proxy.disableNdefPush()Z
android.nfc.INfcAdapter$Stub.disableNdefPush()Z
android.nfc.INfcAdapter$Stub$Proxy.enableNdefPush()Z
android.nfc.INfcAdapter$Stub.enableNdefPush()Z
com.android.nfc.NfcService$EnableDisableTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.nfc.INfcAdapter.disableNdefPush()Z
android.nfc.INfcAdapter.enableNdefPush()Z
android.nfc.NfcAdapter.disableNdefPush()Z
android.nfc.NfcAdapter.enableNdefPush()Z
com.android.settings.nfc.AndroidBeam.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
android.server.BluetoothService.setName(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.setName(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.setName(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.setName(Ljava/lang/String;)Z
android.bluetooth.BluetoothAdapter.setName(Ljava/lang/String;)Z
com.android.settings.bluetooth.LocalBluetoothAdapter.setName(Ljava/lang/String;)V
com.android.settings.bluetooth.BluetoothNameDialogFragment.setDeviceName(Ljava/lang/String;)V
com.android.settings.bluetooth.BluetoothNameDialogFragment.access$000(Lcom/android/settings/bluetooth/BluetoothNameDialogFragment;Ljava/lang/String;)V
com.android.settings.bluetooth.BluetoothNameDialogFragment$2.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.BluetoothNameDialogFragment$3.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
android.server.BluetoothService.setDiscoverableTimeout(I)Z
android.bluetooth.IBluetooth$Stub$Proxy.setDiscoverableTimeout(I)Z
android.bluetooth.IBluetooth$Stub.setDiscoverableTimeout(I)Z
android.bluetooth.IBluetooth.setDiscoverableTimeout(I)Z
android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(I)V
com.android.settings.bluetooth.LocalBluetoothAdapter.setDiscoverableTimeout(I)V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.setEnabled(Z)V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.onPreferenceClick(Landroid/preference/Preference;)Z
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.setDiscoverableTimeout(I)V
com.android.settings.bluetooth.BluetoothVisibilityTimeoutFragment.onClick(Landroid/content/DialogInterface;I)V
android.server.BluetoothService.startDiscovery()Z
android.bluetooth.IBluetooth$Stub$Proxy.startDiscovery()Z
android.bluetooth.IBluetooth$Stub.startDiscovery()Z
android.bluetooth.IBluetooth.startDiscovery()Z
android.bluetooth.BluetoothAdapter.startDiscovery()Z
com.android.settings.bluetooth.LocalBluetoothAdapter.startScanning(Z)V
com.android.settings.bluetooth.BluetoothSettings.startScanning()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DevicePickerFragment.onBluetoothStateChanged(I)V
com.android.settings.bluetooth.DevicePickerFragment.onResume()V
com.android.settings.bluetooth.BluetoothSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.bluetooth.BluetoothSettings.updateContent(IZ)V
com.android.settings.bluetooth.BluetoothSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DevicePickerFragment.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DeviceListPreferenceFragment.onBluetoothStateChanged(I)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onResume()V
com.android.settings.SettingsPreferenceFragment.onResume()V
com.android.settings.SettingsPreferenceFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.bluetooth.BluetoothSettings.onBluetoothStateChanged(I)V
com.android.settings.bluetooth.BluetoothSettings.onDeviceBondStateChanged(Lcom/android/settings/bluetooth/CachedBluetoothDevice;I)V
com.android.settings.bluetooth.BluetoothSettings.onResume()V
com.android.settings.bluetooth.BluetoothCallback.onBluetoothStateChanged(I)V
com.android.settings.AccessibilitySettings.onResume()V
com.android.settings.accounts.AccountPreferenceBase.onResume()V
com.android.settings.bluetooth.DeviceProfilesSettings.onResume()V
com.android.settings.DateTimeSettings.onResume()V
com.android.settings.deviceinfo.Memory.onResume()V
com.android.settings.deviceinfo.UsbSettings.onResume()V
com.android.settings.DisplaySettings.onResume()V
com.android.settings.DockSettings.onResume()V
com.android.settings.DreamSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onResume()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onResume()V
com.android.settings.inputmethod.SpellCheckersSettings.onResume()V
com.android.settings.inputmethod.UserDictionaryList.onResume()V
com.android.settings.LocationSettings.onResume()V
com.android.settings.PrivacySettings.onResume()V
com.android.settings.SecuritySettings.onResume()V
com.android.settings.SoundSettings.onResume()V
com.android.settings.users.UserDetailsSettings.onResume()V
com.android.settings.users.UserSettings.onResume()V
com.android.settings.vpn2.VpnSettings.onResume()V
com.android.settings.wifi.AdvancedWifiSettings.onResume()V
com.android.settings.wifi.p2p.WifiP2pSettings.onResume()V
com.android.settings.wifi.WifiSettings.onResume()V
com.android.settings.WirelessSettings.onResume()V
com.android.settings.deviceinfo.Memory.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.users.UserDetailsSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.users.UserSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.wifi.p2p.WifiP2pSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.wifi.WifiSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.bluetooth.BluetoothEventManager$AdapterStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.accounts.AccountSyncSettings.onResume()V
com.android.settings.accounts.ManageAccountsSettings.onResume()V
com.android.settings.accounts.SyncSettings.onResume()V
com.android.settings.bluetooth.BluetoothEventManager$Handler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEventManager$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.server.BluetoothService.cancelDiscovery()Z
android.bluetooth.IBluetooth$Stub$Proxy.cancelDiscovery()Z
android.bluetooth.IBluetooth$Stub.cancelDiscovery()Z
android.server.BluetoothAdapterStateMachine$BluetoothOn.processMessage(Landroid/os/Message;)Z
android.server.BluetoothEventLoop.onPropertyChanged([Ljava/lang/String;)V
android.bluetooth.IBluetooth.cancelDiscovery()Z
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothAdapter.cancelDiscovery()Z
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
com.android.phone.BluetoothHeadsetService.getSdpRecordsAndConnect(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.LocalBluetoothAdapter.cancelDiscovery()V
com.android.settings.bluetooth.LocalBluetoothAdapter.stopScanning()V
com.android.phone.BluetoothHeadsetService.access$1500(Lcom/android/phone/BluetoothHeadsetService;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDevice.startPairing()Z
com.android.settings.bluetooth.BluetoothSettings.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.removeAllDevices()V
com.android.settings.bluetooth.DevicePickerFragment.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.phone.BluetoothHeadsetService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.BluetoothHeadsetService$6.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.BluetoothDevicePreference.pair()V
com.android.settings.bluetooth.CachedBluetoothDevice.ensurePaired()Z
com.android.settings.bluetooth.DeviceListPreferenceFragment.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.BluetoothSettings.removeAllDevices()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onPause()V
com.android.settings.bluetooth.DevicePickerFragment.removeAllDevices()V
android.bluetooth.IBluetoothHeadset$Stub$Proxy.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.BluetoothDevicePreference.onClicked()V
com.android.settings.bluetooth.CachedBluetoothDevice.connectAutoConnectableProfiles()V
com.android.settings.bluetooth.CachedBluetoothDevice.connect(Z)V
com.android.settings.bluetooth.CachedBluetoothDevice.connectInt(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.BluetoothSettings.onPause()V
com.android.settings.bluetooth.DevicePickerFragment.onPause()V
com.android.settings.SettingsPreferenceFragment.onPause()V
android.bluetooth.IBluetoothHeadset.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.bluetooth.CachedBluetoothDevice.connectWithoutResettingTimer(Z)V
com.android.settings.bluetooth.CachedBluetoothDevice.onBondingDockConnect()V
com.android.settings.bluetooth.CachedBluetoothDevice.onBondingStateChanged(I)V
com.android.settings.bluetooth.DockService.connectIfEnabled(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDevice.connectProfile(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.AccessibilitySettings.onPause()V
com.android.settings.accounts.AccountPreferenceBase.onPause()V
com.android.settings.bluetooth.DeviceProfilesSettings.onPause()V
com.android.settings.DateTimeSettings.onPause()V
com.android.settings.deviceinfo.Memory.onPause()V
com.android.settings.deviceinfo.UsbSettings.onPause()V
com.android.settings.DisplaySettings.onPause()V
com.android.settings.DockSettings.onPause()V
com.android.settings.DreamSettings.onPause()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onPause()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onPause()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onPause()V
com.android.settings.inputmethod.SpellCheckersSettings.onPause()V
com.android.settings.tts.TextToSpeechSettings.onPause()V
com.android.settings.vpn2.VpnSettings.onPause()V
com.android.settings.wifi.p2p.WifiP2pSettings.onPause()V
com.android.settings.wifi.WifiSettings.onPause()V
com.android.settings.WirelessSettings.onPause()V
android.bluetooth.BluetoothHeadset.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.bluetooth.CachedBluetoothDevice.onUuidChanged()V
com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onProfileClicked(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.DockService.handleUnexpectedDisconnect(Landroid/bluetooth/BluetoothDevice;Lcom/android/settings/bluetooth/LocalBluetoothProfile;I)V
com.android.settings.accounts.AccountSyncSettings.onPause()V
com.android.settings.accounts.ManageAccountsSettings.onPause()V
com.android.settings.accounts.SyncSettings.onPause()V
android.bluetooth.BluetoothDeviceProfileState.processCommand(I)Z
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onUuidChanged(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.enter()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.enter()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.enter()V
com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.internal.util.State.enter()V
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
android.server.BluetoothService.isBondingFeasible(Ljava/lang/String;)Z
android.server.BluetoothService.createBond(Ljava/lang/String;)Z
android.server.BluetoothService.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth$Stub$Proxy.createBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.createBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth$Stub.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth.createBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.BluetoothDevice.createBond()Z
android.bluetooth.BluetoothDevice.createBondOutOfBand([B[B)Z
com.android.nfc.handover.BluetoothHeadsetHandover.startBonding()V
android.server.BluetoothService.setDeviceOutOfBandData(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth$Stub$Proxy.setDeviceOutOfBandData(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth$Stub.setDeviceOutOfBandData(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth.setDeviceOutOfBandData(Ljava/lang/String;[B[B)Z
android.bluetooth.BluetoothDevice.setDeviceOutOfBandData([B[B)Z
android.server.BluetoothService.cancelBondProcess(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.cancelBondProcess(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.cancelBondProcess(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.cancelBondProcess(Ljava/lang/String;)Z
android.bluetooth.BluetoothDevice.cancelBondProcess()Z
com.android.settings.bluetooth.CachedBluetoothDevice.unpair()V
com.android.settings.bluetooth.DeviceProfilesSettings.unpairDevice()V
com.android.settings.bluetooth.DeviceProfilesSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
android.server.BluetoothService.removeBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.removeBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.removeBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.removeBond(Ljava/lang/String;)Z
android.bluetooth.BluetoothDevice.removeBond()Z
android.server.BluetoothService.setTrust(Ljava/lang/String;Z)Z
android.bluetooth.IBluetooth$Stub$Proxy.setTrust(Ljava/lang/String;Z)Z
android.bluetooth.IBluetooth$Stub.setTrust(Ljava/lang/String;Z)Z
android.server.BluetoothService.removeBondInternal(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.setTrust(Ljava/lang/String;Z)Z
android.bluetooth.BluetoothDevice.setTrust(Z)Z
com.android.bluetooth.pbap.BluetoothPbapService.parseIntent(Landroid/content/Intent;)V
com.android.phone.BluetoothAtPhonebook.handleAccessPermissionResult(Landroid/content/Intent;)V
com.android.bluetooth.pbap.BluetoothPbapService.onStartCommand(Landroid/content/Intent;II)I
com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.server.BluetoothService.setPin(Ljava/lang/String;[B)Z
android.bluetooth.IBluetooth$Stub$Proxy.setPin(Ljava/lang/String;[B)Z
android.bluetooth.IBluetooth$Stub.setPin(Ljava/lang/String;[B)Z
android.server.BluetoothEventLoop.onRequestPinCode(Ljava/lang/String;I)V
android.server.BluetoothService.attemptAutoPair(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.setPin(Ljava/lang/String;[B)Z
android.bluetooth.BluetoothDevice.setPin([B)Z
com.android.settings.bluetooth.BluetoothPairingDialog.createDisplayPasskeyOrPinDialog(Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;)V
com.android.settings.bluetooth.BluetoothPairingDialog.onPair(Ljava/lang/String;)V
com.android.settings.bluetooth.BluetoothPairingDialog.onClick(Landroid/content/DialogInterface;I)V
android.server.BluetoothService.setPasskey(Ljava/lang/String;I)Z
android.bluetooth.IBluetooth$Stub$Proxy.setPasskey(Ljava/lang/String;I)Z
android.bluetooth.IBluetooth$Stub.setPasskey(Ljava/lang/String;I)Z
android.bluetooth.IBluetooth.setPasskey(Ljava/lang/String;I)Z
android.bluetooth.BluetoothDevice.setPasskey(I)Z
android.server.BluetoothService.setPairingConfirmation(Ljava/lang/String;Z)Z
android.bluetooth.IBluetooth$Stub$Proxy.setPairingConfirmation(Ljava/lang/String;Z)Z
android.bluetooth.IBluetooth$Stub.setPairingConfirmation(Ljava/lang/String;Z)Z
android.server.BluetoothEventLoop.onRequestPairingConsent(Ljava/lang/String;I)V
android.bluetooth.IBluetooth.setPairingConfirmation(Ljava/lang/String;Z)Z
android.bluetooth.BluetoothDevice.setPairingConfirmation(Z)Z
android.server.BluetoothService.setRemoteOutOfBandData(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.setRemoteOutOfBandData(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.setRemoteOutOfBandData(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.setRemoteOutOfBandData(Ljava/lang/String;)Z
android.bluetooth.BluetoothDevice.setRemoteOutOfBandData()Z
android.server.BluetoothService.cancelPairingUserInput(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.cancelPairingUserInput(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.cancelPairingUserInput(Ljava/lang/String;)Z
android.server.BluetoothEventLoop.checkPairingRequestAndGetAddress(Ljava/lang/String;I)Ljava/lang/String;
android.bluetooth.IBluetooth.cancelPairingUserInput(Ljava/lang/String;)Z
android.server.BluetoothEventLoop.onDisplayPasskey(Ljava/lang/String;II)V
android.server.BluetoothEventLoop.onRequestOobData(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onRequestPasskeyConfirmation(Ljava/lang/String;II)V
android.server.BluetoothEventLoop.onRequestPasskey(Ljava/lang/String;I)V
android.bluetooth.BluetoothDevice.cancelPairingUserInput()Z
com.android.settings.bluetooth.BluetoothPairingDialog.onCancel()V
com.android.settings.bluetooth.BluetoothPairingDialog.onKeyDown(ILandroid/view/KeyEvent;)Z
android.server.BluetoothService.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub$Proxy.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothPan.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.PanProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.LocalBluetoothProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub$Proxy.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectDevices()V
android.bluetooth.IBluetooth.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothAdapterStateMachine$PerProcessState.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothPan.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothTetheringDataTracker.teardown()Z
com.android.settings.bluetooth.PanProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.net.NetworkStateTracker.teardown()Z
com.android.settings.bluetooth.LocalBluetoothProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.server.ConnectivityService.teardown(Landroid/net/NetworkStateTracker;)Z
com.android.server.ConnectivityService.stopUsingNetworkFeature(Lcom/android/server/ConnectivityService$FeatureUser;Z)I
com.android.settings.bluetooth.CachedBluetoothDevice.disconnect(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.server.ConnectivityService.enforcePreference()V
com.android.server.ConnectivityService.handleConnect(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.access$200(Lcom/android/server/ConnectivityService;Lcom/android/server/ConnectivityService$FeatureUser;Z)I
com.android.server.ConnectivityService.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.settings.bluetooth.CachedBluetoothDevice.disconnect()V
com.android.settings.bluetooth.DeviceProfilesSettings$1.onClick(Landroid/content/DialogInterface;I)V
com.android.server.ConnectivityService.handleSetNetworkPreference(I)V
com.android.server.ConnectivityService.access$1100(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService$FeatureUser.binderDied()V
com.android.server.ConnectivityService$FeatureUser.expire()V
android.net.IConnectivityManager$Stub$Proxy.stopUsingNetworkFeature(ILjava/lang/String;)I
android.net.IConnectivityManager$Stub.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.settings.bluetooth.BluetoothDevicePreference$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.handleUndocked(Landroid/bluetooth/BluetoothDevice;)V
com.android.server.ConnectivityService.access$1800(Lcom/android/server/ConnectivityService;I)V
com.android.server.ConnectivityService$FeatureUser.<init>(Lcom/android/server/ConnectivityService;ILjava/lang/String;Landroid/os/IBinder;)V
com.android.server.ConnectivityService.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.bluetooth.DockService.msgTypeUndockedPermanent(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.server.ConnectivityService.setNetworkPreference(I)V
android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager$Stub.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.ConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOffUpstreamMobileConnection()Z
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(I)V
android.net.IConnectivityManager$Stub.setNetworkPreference(I)V
android.net.IConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
com.android.development.Connectivity$3.onClick(Landroid/view/View;)V
com.android.mms.transaction.TransactionService.endMmsConnectivity()V
com.android.server.location.GpsLocationProvider.reportAGpsStatus(III)V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOffUpstreamMobileConnection()Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOffUpstreamMobileConnection()Z
android.net.IConnectivityManager.setNetworkPreference(I)V
android.net.ConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;)I
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.exit()V
android.net.ConnectivityManager.setNetworkPreference(I)V
com.android.commands.svc.DataCommand.run([Ljava/lang/String;)V
com.android.commands.svc.WifiCommand.run([Ljava/lang/String;)V
com.android.development.Connectivity.onCrash()V
com.android.mms.transaction.TransactionService.beginMmsConnectivity()I
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.enter()V
com.android.internal.util.State.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.exit()V
com.android.commands.svc.Svc$Command.run([Ljava/lang/String;)V
com.android.development.Connectivity.access$2600(Lcom/android/development/Connectivity;)V
com.android.mms.transaction.Observable.notifyObservers()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.exit()V
android.bluetooth.BluetoothProfileState$PendingCommandState.exit()V
android.bluetooth.BluetoothProfileState$StableState.exit()V
android.net.DhcpStateMachine$DefaultState.exit()V
android.net.DhcpStateMachine$RunningState.exit()V
android.net.DhcpStateMachine$StoppedState.exit()V
android.net.DhcpStateMachine$WaitBeforeStartState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState.exit()V
android.net.wifi.SupplicantStateTracker$CompletedState.exit()V
android.net.wifi.SupplicantStateTracker$DefaultState.exit()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.exit()V
android.net.wifi.SupplicantStateTracker$DormantState.exit()V
android.net.wifi.SupplicantStateTracker$HandshakeState.exit()V
android.net.wifi.SupplicantStateTracker$InactiveState.exit()V
android.net.wifi.SupplicantStateTracker$ScanState.exit()V
android.net.wifi.SupplicantStateTracker$UninitializedState.exit()V
android.net.wifi.WifiApConfigStore$ActiveState.exit()V
android.net.wifi.WifiApConfigStore$DefaultState.exit()V
android.net.wifi.WifiApConfigStore$InactiveState.exit()V
android.net.wifi.WifiStateMachine$ConnectModeState.exit()V
android.net.wifi.WifiStateMachine$DefaultState.exit()V
android.net.wifi.WifiStateMachine$DisconnectingState.exit()V
android.net.wifi.WifiStateMachine$DriverFailedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadingState.exit()V
android.net.wifi.WifiStateMachine$DriverStartingState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppedState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppingState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadedState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadingState.exit()V
android.net.wifi.WifiStateMachine$InitialState.exit()V
android.net.wifi.WifiStateMachine$ObtainingIpState.exit()V
android.net.wifi.WifiStateMachine$ScanModeState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartedState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartingState.exit()V
android.net.wifi.WifiStateMachine$SoftApStoppingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStartingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStoppingState.exit()V
android.net.wifi.WifiStateMachine$TetheredState.exit()V
android.net.wifi.WifiStateMachine$TetheringState.exit()V
android.net.wifi.WifiStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$ConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$DefaultState.exit()V
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState.exit()V
android.net.wifi.WifiWatchdogStateMachine$RssiMonitoringState.exit()V
android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WalledGardenCheckState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState.exit()V
android.server.BluetoothAdapterStateMachine$BluetoothOn.exit()V
android.server.BluetoothAdapterStateMachine$HotOff.exit()V
android.server.BluetoothAdapterStateMachine$PerProcessState.exit()V
android.server.BluetoothAdapterStateMachine$PowerOff.exit()V
android.server.BluetoothAdapterStateMachine$Switching.exit()V
android.server.BluetoothAdapterStateMachine$WarmUp.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.exit()V
com.android.internal.telephony.DataConnection$DcActivatingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.exit()V
com.android.internal.util.IState.exit()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.exit()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.exit()V
com.android.internal.util.StateMachine$SmHandler.invokeExitMethods(Lcom/android/internal/util/StateMachine$SmHandler$StateInfo;)V
com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState.exit()V
com.android.server.NsdService$NsdStateMachine$DefaultState.exit()V
com.android.server.NsdService$NsdStateMachine$DisabledState.exit()V
com.android.commands.svc.Svc.main([Ljava/lang/String;)V
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.transaction.SendTransaction.run()V
com.android.mms.transaction.Transaction.process()V
android.server.BluetoothService.connectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub$Proxy.connectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.connectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth.connectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothInputDevice.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.HidProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub$Proxy.disconnectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.disconnectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth.disconnectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothInputDevice.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.HidProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.setInputDevicePriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetooth$Stub$Proxy.setInputDevicePriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetooth$Stub.setInputDevicePriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetooth.setInputDevicePriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.BluetoothInputDevice.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.settings.bluetooth.HidProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
com.android.settings.bluetooth.LocalBluetoothProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
android.server.BluetoothService.allowIncomingProfileConnect(Landroid/bluetooth/BluetoothDevice;Z)Z
android.bluetooth.IBluetooth$Stub$Proxy.allowIncomingProfileConnect(Landroid/bluetooth/BluetoothDevice;Z)Z
android.bluetooth.BluetoothDeviceProfileState.handleIncomingConnection(IZ)Z
android.bluetooth.IBluetooth$Stub.allowIncomingProfileConnect(Landroid/bluetooth/BluetoothDevice;Z)Z
android.server.BluetoothEventLoop.onAgentAuthorize(Ljava/lang/String;Ljava/lang/String;I)V
android.bluetooth.BluetoothDeviceProfileState.access$6700(Landroid/bluetooth/BluetoothDeviceProfileState;IZ)Z
android.bluetooth.BluetoothDeviceProfileState.processIncomingConnectCommand(I)V
android.bluetooth.IBluetooth.allowIncomingProfileConnect(Landroid/bluetooth/BluetoothDevice;Z)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.processMessage(Landroid/os/Message;)Z
android.server.BluetoothA2dpService.isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp.isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.BluetoothA2dp.isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.bluetooth.A2dpProfile.isA2dpPlaying()Z
android.server.BluetoothA2dpService.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothA2dp.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.A2dpProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothA2dp.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.nfc.handover.BluetoothHeadsetHandover.nextStepDisconnect()V
com.android.settings.bluetooth.A2dpProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothA2dp.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree.audioOn()Z
com.android.phone.BluetoothHandsfree$16.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.handlePreciseCallStateChange(ZLcom/android/internal/telephony/Connection;)V
com.android.phone.BluetoothHandsfree.initiateScoUsingVirtualVoiceCall()Z
com.android.phone.BluetoothHandsfree.startVoiceRecognition()Z
com.android.phone.BluetoothHandsfree$DebugThread.run()V
com.android.phone.BluetoothHandsfree.connectHeadset(Landroid/bluetooth/HeadsetBase;I)V
com.android.phone.BluetoothHandsfree.userWantsAudioOn()V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.scoClosed()V
android.bluetooth.AtCommandHandler.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.access$1800(Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState;ZLcom/android/internal/telephony/Connection;)V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.<init>(Lcom/android/phone/BluetoothHandsfree;)V
com.android.phone.BluetoothHeadsetService$6.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree.startDebug()V
com.android.phone.BluetoothHeadsetService$6.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen.connectBluetoothAudio()V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.access$4300(Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState;)V
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleTestCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.<init>(Lcom/android/phone/BluetoothHandsfree;Lcom/android/phone/BluetoothHandsfree$1;)V
android.bluetooth.IBluetoothHeadset$Stub$Proxy.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen.switchInCallAudio(Lcom/android/phone/InCallScreen$InCallAudioMode;)V
com.android.phone.InCallScreen.toggleBluetooth()V
com.android.phone.BluetoothHandsfree$SignalScoCloseThread.run()V
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CallManager;)V
android.bluetooth.IBluetoothHeadset.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallTouchUi.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread.connectSco()V
com.android.phone.BluetoothHandsfree$ScoSocketConnectThread.connectSco()V
android.bluetooth.HeadsetBase$1.run()V
com.android.phone.BluetoothHandsfree.init(Landroid/content/Context;Lcom/android/internal/telephony/CallManager;)Lcom/android/phone/BluetoothHandsfree;
android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread.run()V
com.android.phone.BluetoothHandsfree$ScoSocketConnectThread.run()V
com.android.phone.PhoneApp.onCreate()V
android.media.AudioService$2.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
android.media.AudioService$ScoClient.requestScoState(I)V
com.android.voicedialer.VoiceDialerActivity.updateBluetoothParameters(Z)V
com.android.phone.BluetoothHandsfree.onBluetoothEnabled()V
com.android.phone.BluetoothHandsfree.connectScoThread()V
android.media.AudioService$ScoClient.clearCount(Z)V
android.media.AudioService$ScoClient.decCount()V
android.media.AudioService$ScoClient.incCount()V
com.android.voicedialer.VoiceDialerActivity.access$2200(Lcom/android/voicedialer/VoiceDialerActivity;Z)V
com.android.phone.BluetoothHeadsetService.onStart(Landroid/content/Intent;I)V
com.android.phone.BluetoothHandsfree.access$3200(Lcom/android/phone/BluetoothHandsfree;)V
android.media.AudioService$ScoClient.binderDied()V
android.media.AudioService.clearAllScoClients(IZ)V
android.media.AudioService.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.AudioService.startBluetoothSco(Landroid/os/IBinder;)V
com.android.voicedialer.VoiceDialerActivity$1.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
com.android.voicedialer.VoiceDialerActivity$VoiceDialerBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.media.AudioService$AudioServiceBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.media.AudioService.disconnectBluetoothSco(I)V
android.media.AudioService.resetBluetoothSco()V
android.media.IAudioService$Stub$Proxy.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub$Proxy.startBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub.startBluetoothSco(Landroid/os/IBinder;)V
android.media.AudioService.access$1300(Landroid/media/AudioService;I)V
android.media.AudioService.setMode(ILandroid/os/IBinder;)V
android.media.AudioService.access$5900(Landroid/media/AudioService;)V
android.media.IAudioService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.IAudioService.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService.startBluetoothSco(Landroid/os/IBinder;)V
android.media.AudioService$SetModeDeathHandler.binderDied()V
android.media.IAudioService$Stub$Proxy.setMode(ILandroid/os/IBinder;)V
android.media.IAudioService$Stub.setMode(ILandroid/os/IBinder;)V
android.media.AudioService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.AudioManager.stopBluetoothSco()V
android.media.AudioManager.startBluetoothSco()V
android.media.IAudioService.setMode(ILandroid/os/IBinder;)V
android.media.AudioManager.setMode(I)V
com.android.internal.telephony.CallManager.setAudioMode()V
com.android.phone.PhoneUtils.setAudioMode(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.resetAudioStateAfterDisconnect()V
com.android.phone.PhoneUtils.setAudioMode()V
com.android.phone.PhoneUtils.switchHoldingAndActive(Lcom/android/internal/telephony/Call;)V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.access$1000(Lcom/android/phone/CallNotifier;)V
com.android.phone.CallNotifier.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.PhoneUtils.answerCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.placeCall(Landroid/content/Context;Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/net/Uri;ZLandroid/net/Uri;)I
com.android.phone.Ringer.stopRing()V
com.android.phone.BluetoothHandsfree$16.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.InCallScreen.internalResolveIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.PhoneUtils.mergeCalls(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.PhoneUtils.sendEmptyFlash(Lcom/android/internal/telephony/Phone;)V
com.android.phone.CallNotifier$InCallTonePlayer.run()V
com.android.phone.BluetoothHandsfree$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalAnswerCall()V
com.android.phone.PhoneInterfaceManager.answerRingingCallInternal()V
com.android.phone.PhoneUtils.answerAndEndActive(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.answerAndEndHolding(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.handleHeadsetHook(Lcom/android/internal/telephony/Phone;Landroid/view/KeyEvent;)Z
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OtaUtils.startNonInteractiveOtasp(Landroid/content/Context;)I
com.android.phone.CallNotifier.silenceRinger()V
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.onNewIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.phone.PhoneUtils.mergeCalls()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.CallNotifier.onNewRingingConnection(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onRingbackTone(Landroid/os/AsyncResult;)V
android.bluetooth.AtCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.PhoneInterfaceManager.access$000(Lcom/android/phone/PhoneInterfaceManager;)V
com.android.phone.InCallScreen.internalAnswerAndEnd()V
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.InCallScreenShowActivation.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.internalSilenceRinger()V
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneInterfaceManager.silenceRingerInternal()V
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.phone.BluetoothAtPhonebook$1.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$7.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$9.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.phone.InCallScreen.internalRespondViaSms()V
com.android.phone.PhoneInterfaceManager.access$100(Lcom/android/phone/PhoneInterfaceManager;)V
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
android.server.BluetoothA2dpService.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothA2dp.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree.audioOff()V
com.android.phone.BluetoothHandsfree$26.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.stopVoiceRecognition()Z
com.android.phone.BluetoothHandsfree.terminateScoUsingVirtualVoiceCall()Z
com.android.phone.BluetoothHandsfree.disconnectHeadset()V
com.android.phone.BluetoothHandsfree.onBluetoothDisabled()V
com.android.phone.BluetoothHandsfree.userWantsAudioOff()V
com.android.phone.BluetoothHeadsetService$6.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree$4.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.redial()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHeadsetService$6.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService.setState(Landroid/bluetooth/BluetoothDevice;I)V
com.android.phone.BluetoothHeadsetService.onDestroy()V
com.android.phone.InCallScreen.disconnectBluetoothAudio()V
android.bluetooth.IBluetoothHeadset$Stub$Proxy.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree.access$6000(Lcom/android/phone/BluetoothHandsfree;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.IBluetoothHeadset$Stub$Proxy.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService.access$2000(Lcom/android/phone/BluetoothHeadsetService;Landroid/bluetooth/BluetoothDevice;I)V
com.android.phone.InCallScreen.toggleSpeaker()V
com.android.phone.OtaUtils.setSpeaker(Z)V
android.bluetooth.IBluetoothHeadset.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree$10.handleActionCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.IBluetoothHeadset.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallTouchUi.handleAudioButtonClick()V
com.android.phone.OtaUtils.cleanOtaScreen(Z)V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.OtaUtils.onClickOtaSpeakerButton()V
android.bluetooth.BluetoothHeadset.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen.checkOtaspStateOnResume()Z
com.android.phone.InCallScreen.onStop()V
com.android.phone.InCallScreen.setInCallScreenMode(Lcom/android/phone/InCallUiState$InCallScreenMode;)V
com.android.phone.PhoneApp.clearOtaState()V
com.android.voicedialer.VoiceDialerActivity.onDestroy()V
android.bluetooth.IBluetoothHeadset.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen.onResume()V
com.android.phone.InCallScreen.endInCallScreenSession(Z)V
com.android.phone.InCallScreen.handleOtaCallEnd()V
com.android.phone.InCallScreen.onBackPressed()V
com.android.phone.InCallScreen.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.resetInCallScreenMode()V
com.android.phone.InCallScreen.updateManageConferencePanelIfNecessary()V
com.android.phone.CallNotifier.ignoreAllIncomingCalls(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.doReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.initForNewRadioTechnology()V
android.bluetooth.BluetoothHeadset.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen.bailOutAfterErrorDialog()V
com.android.phone.InCallScreen.endInCallScreenSession()V
com.android.phone.PhoneApp.dismissCallScreen()V
com.android.phone.InCallScreen.access$500(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.updateAfterRadioTechnologyChange()V
com.android.phone.PhoneApp.clearInCallScreenMode()V
com.android.phone.InCallScreen.updateScreen()V
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.access$1100(Lcom/android/phone/PhoneApp;)V
com.android.phone.InCallScreen.access$2300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.addVoiceMailNumberPanel()V
com.android.phone.InCallScreen.delayedCleanupAfterDisconnect()V
com.android.phone.InCallScreen.dontAddVoiceMailNumber()V
com.android.phone.InCallScreen.onMMICancel()V
com.android.phone.InCallScreen.onMMIComplete(Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.InCallScreen.onPause()V
com.android.phone.OtaUtils.otaShowHome()V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.InCallScreen.syncWithPhoneState()Lcom/android/phone/InCallScreen$SyncWithPhoneStateStatus;
com.android.phone.InCallScreen.access$600(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen$12.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$13.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.InCallScreen.access$1100(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1200(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$800(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$900(Lcom/android/phone/InCallScreen;Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.onClickOtaActivateNextButton()V
com.android.phone.OtaUtils.otaShowActivateScreen()V
com.android.phone.InCallScreen.showPausePromptDialog(Lcom/android/internal/telephony/Connection;Ljava/lang/String;)V
com.android.phone.InCallScreen.requestUpdateScreen()V
com.android.phone.InCallScreen.requestUpdateBluetoothIndication()V
com.android.phone.InCallScreen.requestCloseOtaFailureNotice(J)V
com.android.phone.InCallScreen.requestCloseSpcErrorNotice(J)V
com.android.phone.InCallScreen.requestRemoveProviderInfoWithDelay()V
com.android.phone.InCallScreen$14.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$15.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.OtaUtils.onClickOtaTryAgainButton()V
com.android.phone.OtaUtils.onOtaCloseFailureNotice()V
com.android.phone.OtaUtils.otaShowProperScreen()V
com.android.phone.InCallScreen.handlePostOnDialChars(Landroid/os/AsyncResult;C)V
com.android.phone.InCallScreen.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp.updateInCallScreen()V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureNotice(I)V
com.android.phone.OtaUtils.otaShowSpcErrorNotice(I)V
com.android.phone.CallCard.updateCallStateWidgets(Lcom/android/internal/telephony/Call;)V
com.android.phone.InCallScreen.onDialerClose(Z)V
com.android.phone.InCallScreen.access$1000(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;C)V
com.android.phone.InCallScreen.access$400(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.EmergencyCallHelper.cleanup()V
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowProgramFailure(I)V
com.android.phone.OtaUtils.onOtaProvisionStatusChanged(Landroid/os/AsyncResult;)V
com.android.phone.CallCard.displayMainCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.DTMFTwelveKeyDialer.onDialerClose(Z)V
com.android.phone.OtaUtils.otaShowSuccessFailure()V
com.android.phone.PhoneApp.handleOtaspEvent(Landroid/os/Message;)V
com.android.phone.CallCard.updateForegroundCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateNoCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateRingingCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.DTMFTwelveKeyDialer.closeDialer(Z)V
com.android.phone.CallCard.updateState(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.DTMFTwelveKeyDialer.clearInCallScreenReference()V
com.android.phone.InCallScreen.closeDialpadInternal(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureDialog()V
com.android.phone.OtaUtils.otaShowProgramSuccessDialog()V
com.android.phone.InCallScreen.updateIncomingCallWidgetHint(II)V
com.android.phone.InCallScreen.onDestroy()V
com.android.phone.InCallScreen.onOpenCloseDialpad()V
com.android.phone.InCallTouchUi.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
android.server.BluetoothA2dpService.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetoothA2dp$Stub.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.server.BluetoothA2dpService.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.adjustOtherSinkPriorities(Landroid/bluetooth/BluetoothDevice;)V
android.server.BluetoothA2dpService.handleSinkStateChange(Landroid/bluetooth/BluetoothDevice;II)V
android.bluetooth.IBluetoothA2dp.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.access$300(Landroid/server/BluetoothA2dpService;Landroid/bluetooth/BluetoothDevice;II)V
android.server.BluetoothA2dpService.onBluetoothDisable()V
android.server.BluetoothA2dpService.onConnectSinkResult(Ljava/lang/String;Z)V
android.server.BluetoothA2dpService.onSinkPropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.bluetooth.BluetoothA2dp.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetoothA2dp.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.server.BluetoothA2dpService.access$100(Landroid/server/BluetoothA2dpService;)V
android.server.BluetoothBondState.setProfilePriorities(Ljava/lang/String;I)V
com.android.settings.bluetooth.A2dpProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
android.bluetooth.IBluetoothA2dp.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothBondState.setBondState(Ljava/lang/String;II)V
android.server.BluetoothBondState.setBondState(Ljava/lang/String;I)V
android.server.BluetoothService.setBondState(Ljava/lang/String;II)Z
android.server.BluetoothService.finishDisable()V
android.server.BluetoothEventLoop.onDeviceRemoved(Ljava/lang/String;)V
android.server.BluetoothService.setBondState(Ljava/lang/String;I)Z
android.server.BluetoothService.onCreatePairedDeviceResult(Ljava/lang/String;I)V
android.server.BluetoothService.pairingAttempt(Ljava/lang/String;I)V
android.server.BluetoothAdapterStateMachine$Switching.processMessage(Landroid/os/Message;)Z
android.server.BluetoothAdapterStateMachine.finishSwitchingOff()V
android.server.BluetoothEventLoop.onDevicePropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothEventLoop.onCreatePairedDeviceResult(Ljava/lang/String;I)V
android.server.BluetoothAdapterStateMachine.access$5300(Landroid/server/BluetoothAdapterStateMachine;)V
android.server.BluetoothA2dpService.allowIncomingConnect(Landroid/bluetooth/BluetoothDevice;Z)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.allowIncomingConnect(Landroid/bluetooth/BluetoothDevice;Z)Z
android.bluetooth.IBluetoothA2dp$Stub.allowIncomingConnect(Landroid/bluetooth/BluetoothDevice;Z)Z
android.bluetooth.IBluetoothA2dp.allowIncomingConnect(Landroid/bluetooth/BluetoothDevice;Z)Z
android.bluetooth.BluetoothA2dp.allowIncomingConnect(Landroid/bluetooth/BluetoothDevice;Z)Z
com.android.bluetooth.pbap.BluetoothPbapService$2.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothPbap$Stub$Proxy.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothPbap$Stub.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothPbap.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothPbap$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.bluetooth.pbap.BluetoothPbapService$2.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.bluetooth.pbap.BluetoothPbapService$2.disconnect()V
android.bluetooth.IBluetoothPbap$Stub$Proxy.disconnect()V
android.bluetooth.IBluetoothPbap$Stub.disconnect()V
android.bluetooth.IBluetoothPbap.disconnect()V
android.bluetooth.BluetoothPbap.disconnect()Z
com.android.phone.BluetoothHeadsetService$6.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.HeadsetProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.HeadsetProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothHeadset$Stub.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothHeadset.getPriority(Landroid/bluetooth/BluetoothDevice;)I
com.android.phone.BluetoothHeadsetService.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothHeadset.getPriority(Landroid/bluetooth/BluetoothDevice;)I
com.android.phone.BluetoothHeadsetService.access$100(Lcom/android/phone/BluetoothHeadsetService;Landroid/bluetooth/BluetoothDevice;)I
com.android.phone.BluetoothHeadsetService.adjustOtherHeadsetPriorities(Landroid/bluetooth/BluetoothDevice;)V
android.bluetooth.BluetoothDeviceProfileState.handleConnectionOfOtherProfiles(I)V
android.server.BluetoothService.notifyIncomingA2dpConnection(Ljava/lang/String;Z)Z
com.android.settings.bluetooth.HeadsetProfile.isPreferred(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.HeadsetProfile.getPreferred(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.HeadsetProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
com.android.settings.bluetooth.LocalBluetoothProfile.isPreferred(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.LocalBluetoothProfile.getPreferred(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.BluetoothDevicePreference.getConnectionSummary()I
com.android.settings.bluetooth.DeviceProfilesSettings.getAutoConnect(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)Z
com.android.settings.bluetooth.DeviceProfilesSettings.refreshProfilePreference(Landroid/preference/CheckBoxPreference;Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.DockService.initBtSettings(Landroid/bluetooth/BluetoothDevice;IZ)[Ljava/lang/CharSequence;
com.android.settings.bluetooth.BluetoothDevicePreference.onDeviceAttributesChanged()V
com.android.settings.bluetooth.DeviceProfilesSettings.createProfilePreference(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)Landroid/preference/CheckBoxPreference;
com.android.settings.bluetooth.DeviceProfilesSettings.refreshProfiles()V
com.android.settings.bluetooth.DockService.createDialog(Landroid/bluetooth/BluetoothDevice;II)V
com.android.settings.bluetooth.BluetoothDevicePreference.<init>(Landroid/content/Context;Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDevice$Callback.onDeviceAttributesChanged()V
com.android.settings.bluetooth.DeviceProfilesSettings.addPreferencesForProfiles()V
com.android.settings.bluetooth.DeviceProfilesSettings.refresh()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.createDevicePreference(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDevice.dispatchAttributesChanged()V
com.android.settings.bluetooth.DeviceProfilesSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onDeviceAttributesChanged()V
com.android.settings.bluetooth.BluetoothSettings.createDevicePreference(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onDeviceAdded(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.DevicePickerFragment.createDevicePreference(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDevice.fillData()V
com.android.settings.bluetooth.CachedBluetoothDevice.refreshBtClass()V
com.android.settings.bluetooth.CachedBluetoothDevice.refreshName()V
com.android.settings.bluetooth.CachedBluetoothDevice.refresh()V
com.android.settings.bluetooth.CachedBluetoothDevice.setBtClass(Landroid/bluetooth/BluetoothClass;)V
com.android.settings.bluetooth.CachedBluetoothDevice.setName(Ljava/lang/String;)V
com.android.settings.bluetooth.CachedBluetoothDevice.setRssi(S)V
com.android.settings.bluetooth.CachedBluetoothDevice.setVisible(Z)V
com.android.settings.SettingsPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothCallback.onDeviceAdded(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.BluetoothSettings.onDeviceAdded(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.addCachedDevices()V
com.android.settings.bluetooth.DevicePickerFragment.onDeviceAdded(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDevice.<init>(Landroid/content/Context;Lcom/android/settings/bluetooth/LocalBluetoothAdapter;Lcom/android/settings/bluetooth/LocalBluetoothProfileManager;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onBtClassChanged(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onDeviceNameUpdated(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.LocalBluetoothProfileManager$StateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEventManager$DeviceFoundHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEventManager$DockEventHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onDeviceDisappeared(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)Z
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onScanningStateChanged(Z)V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountPreferenceBase.onCreate(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onCreate(Landroid/os/Bundle;)V
com.android.settings.DeviceInfoSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onCreate(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.net.DataUsageMeteredSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.TetherSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WirelessSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothEventManager.dispatchDeviceAdded(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.BluetoothSettings.addCachedDevices()V
com.android.settings.bluetooth.DevicePickerFragment.addCachedDevices()V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.addDevice(Lcom/android/settings/bluetooth/LocalBluetoothAdapter;Lcom/android/settings/bluetooth/LocalBluetoothProfileManager;Landroid/bluetooth/BluetoothDevice;)Lcom/android/settings/bluetooth/CachedBluetoothDevice;
com.android.settings.bluetooth.BluetoothEventManager$ClassChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEventManager$NameChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.LocalBluetoothProfileManager$PanStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEventManager$DeviceDisappearedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEventManager$ScanningStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.accounts.AccountSyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.SyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothEventManager.readPairedDevices()Z
com.android.settings.bluetooth.BluetoothEventManager.access$1400(Lcom/android/settings/bluetooth/BluetoothEventManager;Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.BluetoothSettings.addDeviceCategory(Landroid/preference/PreferenceGroup;ILcom/android/settings/bluetooth/BluetoothDeviceFilter$Filter;)V
com.android.settings.bluetooth.BluetoothPermissionRequest.checkUserChoice()Z
com.android.settings.bluetooth.DockService.getCachedBluetoothDevice(Landroid/bluetooth/BluetoothDevice;)Lcom/android/settings/bluetooth/CachedBluetoothDevice;
com.android.settings.bluetooth.HeadsetProfile$HeadsetServiceListener.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
com.android.settings.bluetooth.LocalBluetoothProfileManager.setBluetoothStateOn()V
com.android.settings.bluetooth.BluetoothPermissionRequest.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.bluetooth.LocalBluetoothAdapter.setBluetoothStateInt(I)V
com.android.settings.bluetooth.LocalBluetoothAdapter.syncBluetoothState()Z
com.android.settings.bluetooth.LocalBluetoothAdapter.getBluetoothState()I
com.android.settings.bluetooth.BluetoothEnabler.resume()V
com.android.settings.bluetooth.BluetoothEnabler.setSwitch(Landroid/widget/Switch;)V
com.android.settings.bluetooth.BluetoothSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.getActualState(Landroid/content/Context;)I
com.android.settings.Settings$HeaderAdapter.resume()V
com.android.settings.Settings$HeaderAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.settings.SettingsPreferenceFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.getActualState(Landroid/content/Context;)I
com.android.settings.Settings.onResume()V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.AccessibilitySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.accounts.AccountPreferenceBase.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.accounts.SyncSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.ApplicationSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.DevicePickerFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DateTimeSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DeviceInfoSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.deviceinfo.UsbSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DisplaySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DockSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DreamSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.SpellCheckersSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.UserDictionaryList.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.LocationSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.net.DataUsageMeteredSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.PrivacySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.SecuritySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.SoundSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.TetherSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.tts.TextToSpeechSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.tts.TtsEngineSettingsFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.vpn2.VpnSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.WallpaperTypeSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.wifi.AdvancedWifiSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.wifi.WifiSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.WirelessSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.Settings$AccessibilitySettingsActivity.onResume()V
com.android.settings.Settings$AccountSyncSettingsActivity.onResume()V
com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity.onResume()V
com.android.settings.Settings$AdvancedWifiSettingsActivity.onResume()V
com.android.settings.Settings$AndroidBeamSettingsActivity.onResume()V
com.android.settings.Settings$ApplicationSettingsActivity.onResume()V
com.android.settings.Settings$BluetoothSettingsActivity.onResume()V
com.android.settings.Settings$CryptKeeperSettingsActivity.onResume()V
com.android.settings.Settings$DataUsageSummaryActivity.onResume()V
com.android.settings.Settings$DateTimeSettingsActivity.onResume()V
com.android.settings.Settings$DevelopmentSettingsActivity.onResume()V
com.android.settings.Settings$DeviceAdminSettingsActivity.onResume()V
com.android.settings.Settings$DeviceInfoSettingsActivity.onResume()V
com.android.settings.Settings$DisplaySettingsActivity.onResume()V
com.android.settings.Settings$DockSettingsActivity.onResume()V
com.android.settings.Settings$InputMethodAndLanguageSettingsActivity.onResume()V
com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity.onResume()V
com.android.settings.Settings$KeyboardLayoutPickerActivity.onResume()V
com.android.settings.Settings$LocalePickerActivity.onResume()V
com.android.settings.Settings$LocationSettingsActivity.onResume()V
com.android.settings.Settings$ManageAccountsSettingsActivity.onResume()V
com.android.settings.Settings$ManageApplicationsActivity.onResume()V
com.android.settings.Settings$PowerUsageSummaryActivity.onResume()V
com.android.settings.Settings$PrivacySettingsActivity.onResume()V
com.android.settings.Settings$RunningServicesActivity.onResume()V
com.android.settings.Settings$SecuritySettingsActivity.onResume()V
com.android.settings.Settings$SoundSettingsActivity.onResume()V
com.android.settings.Settings$SpellCheckersSettingsActivity.onResume()V
com.android.settings.Settings$StorageSettingsActivity.onResume()V
com.android.settings.Settings$StorageUseActivity.onResume()V
com.android.settings.Settings$TetherSettingsActivity.onResume()V
com.android.settings.Settings$TextToSpeechSettingsActivity.onResume()V
com.android.settings.Settings$UserDictionarySettingsActivity.onResume()V
com.android.settings.Settings$VpnSettingsActivity.onResume()V
com.android.settings.Settings$WifiP2pSettingsActivity.onResume()V
com.android.settings.Settings$WifiSettingsActivity.onResume()V
com.android.settings.Settings$WirelessSettingsActivity.onResume()V
com.android.settings.SubSettings.onResume()V
com.android.settings.accounts.AccountSyncSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.accounts.ManageAccountsSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider.updateButtons(Landroid/widget/RemoteViews;Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider.buildUpdate(Landroid/content/Context;)Landroid/widget/RemoteViews;
com.android.settings.widget.SettingsAppWidgetProvider.onUpdate(Landroid/content/Context;Landroid/appwidget/AppWidgetManager;[I)V
com.android.settings.widget.SettingsAppWidgetProvider.updateWidget(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.onPostExecute(Ljava/lang/Boolean;)V
com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver.onChange(Z)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.onPostExecute(Ljava/lang/Boolean;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.onPostExecute(Ljava/lang/Object;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.onPostExecute(Ljava/lang/Object;)V
com.android.phone.BluetoothHeadsetService$6.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetoothHeadset$Stub.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetoothHeadset.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.phone.BluetoothHeadsetService.setPriority(Landroid/bluetooth/BluetoothDevice;I)V
android.bluetooth.BluetoothHeadset.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.bluetooth.opp.BluetoothOppTransfer.doOpushSdp()V
com.android.bluetooth.opp.BluetoothOppTransfer.startConnectSession()V
com.android.bluetooth.opp.BluetoothOppTransfer.start()V
com.android.bluetooth.opp.BluetoothOppService.insertShare(Landroid/database/Cursor;I)V
com.android.bluetooth.opp.BluetoothOppService.removeBatch(Lcom/android/bluetooth/opp/BluetoothOppBatch;)V
com.android.bluetooth.opp.BluetoothOppService.access$1800(Lcom/android/bluetooth/opp/BluetoothOppService;Landroid/database/Cursor;I)V
com.android.bluetooth.opp.BluetoothOppService.deleteShare(I)V
com.android.bluetooth.opp.BluetoothOppService.updateShare(Landroid/database/Cursor;IZ)V
com.android.bluetooth.opp.BluetoothOppService$UpdateThread.run()V
com.android.bluetooth.opp.BluetoothOppService.access$1700(Lcom/android/bluetooth/opp/BluetoothOppService;I)V
com.android.bluetooth.opp.BluetoothOppService.access$2200(Lcom/android/bluetooth/opp/BluetoothOppService;Landroid/database/Cursor;IZ)V
com.android.bluetooth.opp.BluetoothOppService.updateFromProvider()V
com.android.bluetooth.opp.BluetoothOppService.onStartCommand(Landroid/content/Intent;II)I
com.android.bluetooth.opp.BluetoothOppService.access$000(Lcom/android/bluetooth/opp/BluetoothOppService;)V
com.android.bluetooth.opp.BluetoothOppService.onCreate()V
com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver.onChange(Z)V
com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread.run()V
com.android.bluetooth.pbap.BluetoothPbapService.startRfcommSocketListener()V
com.android.bluetooth.pbap.BluetoothPbapService.access$900(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.stopObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.onCreate()V
com.android.bluetooth.pbap.BluetoothPbapService.access$1100(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.phone.BluetoothAtPhonebook.checkAccessPermission()Z
com.android.phone.BluetoothAtPhonebook.access$900(Lcom/android/phone/BluetoothAtPhonebook;)Z
com.android.phone.BluetoothAtPhonebook$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.bluetooth.pbap.BluetoothPbapService$1.handleMessage(Landroid/os/Message;)V
android.bluetooth.BluetoothDeviceProfileState.sendConnectionAccessIntent()V
android.bluetooth.BluetoothDeviceProfileState.sendConnectionAccessRemovalIntent()V
android.bluetooth.BluetoothDeviceProfileState.access$6800(Landroid/bluetooth/BluetoothDeviceProfileState;)V
Permission:android.permission.VIBRATE

1701 Callers:

com.android.server.VibratorService.vibrate(JLandroid/os/IBinder;)V
android.os.IVibratorService$Stub$Proxy.vibrate(JLandroid/os/IBinder;)V
android.os.IVibratorService$Stub.vibrate(JLandroid/os/IBinder;)V
android.os.IVibratorService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.os.IVibratorService.vibrate(JLandroid/os/IBinder;)V
com.android.server.VibratorService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.os.SystemVibrator.vibrate(J)V
android.os.Vibrator.vibrate(J)V
android.view.VolumePanel.onVibrate()V
com.android.gallery3d.app.AlbumPage.onSelectionModeChange(I)V
com.android.gallery3d.app.AlbumSetPage.onSelectionModeChange(I)V
com.android.inputmethod.latin.VibratorUtils.vibrate(J)V
com.android.internal.policy.impl.PhoneWindowManager.performHapticFeedbackLw(Landroid/view/WindowManagerPolicy$WindowState;IZ)Z
com.android.internal.widget.multiwaveview.GlowPadView.vibrate()V
com.android.internal.widget.multiwaveview.MultiWaveView.vibrate()V
com.android.internal.widget.RotarySelector.vibrate(J)V
com.android.internal.widget.SlidingTab.vibrate(J)V
com.android.internal.widget.WaveView.vibrate(J)V
com.android.launcher2.DragController.startDrag(Landroid/graphics/Bitmap;IILcom/android/launcher2/DragSource;Ljava/lang/Object;ILandroid/graphics/Point;Landroid/graphics/Rect;F)V
com.android.phone.HapticFeedback.vibrate()V
com.android.phone.Ringer$VibratorThread.run()V
com.android.server.pm.ShutdownThread.rebootOrShutdown(ZLjava/lang/String;)V
com.android.server.VibratorService.doVibratorOn(J)V
com.android.systemui.SearchPanelView.vibrate()V
com.android.systemui.statusbar.phone.PhoneStatusBar.vibrate()V
com.android.voicedialer.VoiceDialerActivity.playSound(I)I
android.view.VolumePanel.onShowVolumeChanged(II)V
com.android.gallery3d.ui.SelectionManager$SelectionListener.onSelectionModeChange(I)V
com.android.inputmethod.latin.AudioAndHapticFeedbackManager.vibrate(Landroid/view/View;)V
com.android.inputmethod.latin.Settings$5.onStopTrackingTouch(Landroid/widget/SeekBar;)V
android.view.WindowManagerPolicy.performHapticFeedbackLw(Landroid/view/WindowManagerPolicy$WindowState;IZ)Z
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.handleLongPressOnHome()V
com.android.internal.policy.impl.PhoneWindowManager.launchAssistLongPressAction()V
com.android.internal.policy.impl.PhoneWindowManager.setSafeMode(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.multiwaveview.MultiWaveView.dispatchTriggerEvent(I)V
com.android.internal.widget.multiwaveview.MultiWaveView.setGrabbedState(I)V
com.android.internal.widget.RotarySelector.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.RotarySelector.dispatchTriggerEvent(I)V
com.android.internal.widget.SlidingTab.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.dispatchTriggerEvent(I)V
com.android.internal.widget.WaveView.dispatchTriggerEvent(I)V
com.android.launcher2.DragController.startDrag(Landroid/view/View;Landroid/graphics/Bitmap;Lcom/android/launcher2/DragSource;Ljava/lang/Object;ILandroid/graphics/Rect;F)V
com.android.launcher2.Workspace.beginDragShared(Landroid/view/View;Lcom/android/launcher2/DragSource;)V
com.android.contacts.dialpad.DialpadFragment.keyPressed(I)V
com.android.contacts.dialpad.DialpadFragment.onClick(Landroid/view/View;)V
com.android.phone.EmergencyDialer.keyPressed(I)V
com.android.phone.EmergencyDialer.onClick(Landroid/view/View;)V
com.android.phone.Ringer.ring()V
com.android.server.pm.ShutdownThread.run()V
com.android.server.ServerThread.run()V
com.android.server.VibratorService.access$1200(Lcom/android/server/VibratorService;J)V
com.android.server.VibratorService.startVibrationLocked(Lcom/android/server/VibratorService$Vibration;)V
com.android.systemui.SearchPanelView.access$300(Lcom/android/systemui/SearchPanelView;)V
com.android.systemui.SearchPanelView.show(ZZ)V
com.android.systemui.statusbar.phone.PhoneStatusBar$22.run()V
com.android.systemui.statusbar.phone.PhoneStatusBar$23.run()V
com.android.voicedialer.VoiceDialerActivity.access$600(Lcom/android/voicedialer/VoiceDialerActivity;I)I
android.view.VolumePanel.onRemoteVolumeChanged(II)V
android.view.VolumePanel.onRemoteVolumeUpdateIfShown()V
android.view.VolumePanel.onVolumeChanged(II)V
com.android.gallery3d.ui.SelectionManager.enterSelectionMode()V
com.android.gallery3d.ui.SelectionManager.leaveSelectionMode()V
com.android.gallery3d.ui.SelectionManager.selectAll()V
com.android.inputmethod.latin.AudioAndHapticFeedbackManager.hapticAndAudioFeedback(ILandroid/view/View;)V
android.view.WindowManagerPolicy.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.interceptFallback(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Z
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
android.view.WindowManagerPolicy.setSafeMode(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.internal.widget.multiwaveview.MultiWaveView.doFinish()V
com.android.internal.widget.multiwaveview.MultiWaveView.switchToState(IFF)V
com.android.internal.widget.SlidingTab.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.WaveView.waveUpdateFrame(FFZ)V
com.android.launcher2.AppsCustomizePagedView.beginDraggingWidget(Landroid/view/View;)Z
com.android.launcher2.AppsCustomizePagedView.beginDraggingApplication(Landroid/view/View;)V
com.android.launcher2.Folder.onLongClick(Landroid/view/View;)Z
com.android.launcher2.Workspace.startDrag(Lcom/android/launcher2/CellLayout$CellInfo;)V
com.android.contacts.dialpad.DialpadFragment.onLongClick(Landroid/view/View;)Z
com.android.contacts.dialpad.DialpadFragment.onPressed(Landroid/view/View;Z)V
com.android.phone.EmergencyDialer.onLongClick(Landroid/view/View;)Z
com.android.phone.CallNotifier.onCustomRingQueryComplete()V
com.android.phone.CallNotifier.restartRinger()V
com.android.phone.CallNotifier.startIncomingCallQuery(Lcom/android/internal/telephony/Connection;)V
com.android.server.pm.ShutdownThread.beginShutdownSequence(Landroid/content/Context;)V
com.android.server.VibratorService$VibrateThread.run()V
com.android.server.VibratorService.startNextVibrationLocked()V
com.android.systemui.SearchPanelView$GlowPadTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.systemui.statusbar.BaseStatusBar.updateSearchPanel()V
com.android.systemui.statusbar.BaseStatusBar.showSearchPanel()V
com.android.systemui.statusbar.BaseStatusBar.hideSearchPanel()V
com.android.systemui.statusbar.phone.PhoneStatusBar.animateCollapse(IF)V
com.android.voicedialer.VoiceDialerActivity$2.run()V
com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient$2.run()V
com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient.onMicrophoneStart(Ljava/io/InputStream;)V
com.android.voicedialer.VoiceDialerActivity$ErrorRunnable.run()V
android.view.VolumePanel.onMuteChanged(II)V
com.android.gallery3d.app.AlbumPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumSetPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.ManageCachePage.initializeData(Landroid/os/Bundle;)V
com.android.gallery3d.ui.SelectionManager.toggle(Lcom/android/gallery3d/data/Path;)V
com.android.gallery3d.app.AlbumPage.onBackPressed()V
com.android.gallery3d.app.AlbumSetPage.onBackPressed()V
com.android.gallery3d.ui.ActionModeHandler$2.onShareTargetSelected(Landroid/widget/ShareActionProvider;Landroid/content/Intent;)Z
com.android.gallery3d.ui.ActionModeHandler.onActionItemClicked(Landroid/view/ActionMode;Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.ActionModeHandler.onDestroyActionMode(Landroid/view/ActionMode;)V
com.android.gallery3d.ui.SelectionManager.deSelectAll()V
com.android.gallery3d.ui.MenuExecutor.onProgressComplete(ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.gallery3d.app.AlbumPage.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.ui.MenuExecutor.onMenuClicked(ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;ZZ)V
com.android.inputmethod.latin.LatinIME.hapticAndAudioFeedback(I)V
com.android.server.wm.InputMonitor.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
android.view.WindowManagerPolicy.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
com.android.server.wm.WindowManagerService.detectSafeMode()Z
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.MultiWaveView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.MultiWaveView.access$300(Lcom/android/internal/widget/multiwaveview/MultiWaveView;IFF)V
com.android.internal.widget.multiwaveview.MultiWaveView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.MultiWaveView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.MultiWaveView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.MultiWaveView.handleUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.WaveView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.WaveView.onDraw(Landroid/graphics/Canvas;)V
com.android.launcher2.AppsCustomizePagedView.beginDragging(Landroid/view/View;)Z
com.android.launcher2.Launcher.onLongClick(Landroid/view/View;)Z
com.android.contacts.dialpad.DialpadImageButton$OnPressedListener.onPressed(Landroid/view/View;Z)V
com.android.phone.CallNotifier.onCustomRingtoneQueryTimeout(Ljava/lang/String;)V
com.android.phone.CallNotifier.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.CallNotifier.onNewRingingConnection(Landroid/os/AsyncResult;)V
com.android.server.pm.ShutdownThread.access$000(Landroid/content/Context;)V
com.android.server.pm.ShutdownThread.shutdownInner(Landroid/content/Context;Z)V
com.android.server.VibratorService.access$300(Lcom/android/server/VibratorService;)V
com.android.server.VibratorService.updateInputDeviceVibrators()V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.systemui.statusbar.phone.PhoneStatusBar.updateSearchPanel()V
com.android.systemui.statusbar.tablet.TabletStatusBar.updateSearchPanel()V
com.android.systemui.statusbar.CommandQueue$Callbacks.showSearchPanel()V
com.android.systemui.statusbar.DelegateViewHelper.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.phone.PhoneStatusBar.showSearchPanel()V
com.android.systemui.statusbar.tablet.TabletStatusBar.showSearchPanel()V
com.android.systemui.SearchPanelView$1.run()V
com.android.systemui.SearchPanelView$GlowPadTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.systemui.statusbar.CommandQueue$Callbacks.hideSearchPanel()V
com.android.systemui.statusbar.phone.PhoneStatusBar.hideSearchPanel()V
com.android.systemui.statusbar.tablet.TabletStatusBar.hideSearchPanel()V
com.android.systemui.statusbar.phone.PhoneStatusBar.animateCollapse(I)V
com.android.voicedialer.RecognizerClient.onMicrophoneStart(Ljava/io/InputStream;)V
com.android.gallery3d.app.ActivityState.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage$5.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumSetPage$4.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.ManageCachePage.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumPage.onLongTap(I)V
com.android.gallery3d.app.AlbumPage.onSingleTapUp(I)V
com.android.gallery3d.app.AlbumSetPage.onLongTap(I)V
com.android.gallery3d.app.AlbumSetPage.onSingleTapUp(I)V
com.android.gallery3d.app.ManageCachePage.onSingleTapUp(I)V
com.android.gallery3d.app.PhotoPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.PhotoPage.onCommitDeleteImage()V
com.android.gallery3d.app.ActivityState.onBackPressed()V
com.android.gallery3d.ui.ActionModeHandler$1.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.MenuExecutor.access$700(Lcom/android/gallery3d/ui/MenuExecutor;ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.gallery3d.app.ActivityState.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.ui.MenuExecutor.onMenuClicked(ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.inputmethod.keyboard.KeyboardSwitcher.hapticAndAudioFeedback(I)V
com.android.inputmethod.keyboard.KeyboardSwitcher.onPressKey(I)V
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
android.view.WindowManagerPolicy.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.wm.InputMonitor.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.multiwaveview.MultiWaveView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.MultiWaveView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.MultiWaveView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.WaveView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.launcher2.PagedViewWithDraggableItems.beginDragging(Landroid/view/View;)Z
com.android.contacts.dialpad.DialpadImageButton.setPressed(Z)V
com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.server.pm.ShutdownThread$1.onClick(Landroid/content/DialogInterface;I)V
com.android.server.pm.ShutdownThread.reboot(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.server.pm.ShutdownThread.rebootSafeMode(Landroid/content/Context;Z)V
com.android.server.pm.ShutdownThread.shutdown(Landroid/content/Context;Z)V
com.android.server.VibratorService$2.run()V
com.android.server.VibratorService$Vibration.binderDied()V
com.android.server.VibratorService.access$400(Lcom/android/server/VibratorService;)V
com.android.server.VibratorService.onInputDeviceAdded(I)V
com.android.server.VibratorService.onInputDeviceChanged(I)V
com.android.server.VibratorService.onInputDeviceRemoved(I)V
com.android.server.VibratorService.systemReady()V
com.android.systemui.statusbar.phone.PhoneStatusBar.prepareNavigationBarView()V
com.android.systemui.statusbar.tablet.TabletStatusBar.addPanelWindows()V
com.android.systemui.statusbar.tablet.TabletStatusBar.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.systemui.statusbar.phone.NavigationBarView.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.phone.NavigationBarView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.tablet.TabletStatusBarView.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.tablet.TabletStatusBarView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.phone.PhoneStatusBar$9.run()V
com.android.systemui.statusbar.tablet.TabletStatusBar$1.run()V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.systemui.statusbar.BaseStatusBar.animateCollapse(I)V
com.android.systemui.statusbar.phone.PhoneStatusBar$19$1$3.run()V
com.android.systemui.statusbar.phone.PhoneStatusBar$19.onClick(Landroid/view/View;)V
com.android.systemui.statusbar.phone.PhoneStatusBar$21.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.animateCollapse()V
com.android.voicedialer.RecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.gallery3d.app.ManageCachePage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.SlideshowPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.StateManager.itemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.ActionModeHandler$ActionModeListener.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage$4.onLongTap(I)V
com.android.gallery3d.app.AlbumPage.access$1200(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumSetPage$3.onLongTap(I)V
com.android.gallery3d.app.AlbumSetPage$3.onSingleTapUp(I)V
com.android.gallery3d.app.ManageCachePage$4.onSingleTapUp(I)V
com.android.gallery3d.app.PhotoPage.onDeleteImage(Lcom/android/gallery3d/data/Path;I)V
com.android.gallery3d.app.PhotoPage.onPause()V
com.android.gallery3d.ui.PhotoView$Listener.onCommitDeleteImage()V
com.android.gallery3d.app.AlbumPage.onUpPressed()V
com.android.gallery3d.app.ManageCachePage.onBackPressed()V
com.android.gallery3d.app.PhotoPage.onBackPressed()V
com.android.gallery3d.app.PhotoPage.onUpPressed()V
com.android.gallery3d.app.SlideshowPage.onBackPressed()V
com.android.gallery3d.app.StateManager.onBackPressed()V
com.android.gallery3d.ui.MenuExecutor$MediaOperation.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.gallery3d.app.StateManager.restoreFromState(Landroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.startStateForResult(Ljava/lang/Class;ILandroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.startState(Ljava/lang/Class;Landroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.switchState(Lcom/android/gallery3d/app/ActivityState;Ljava/lang/Class;Landroid/os/Bundle;)V
com.android.gallery3d.ui.MenuExecutor.access$400(Lcom/android/gallery3d/ui/MenuExecutor;ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.gallery3d.ui.MenuExecutor.onMenuClicked(Landroid/view/MenuItem;Ljava/lang/String;Lcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions.hapticAndAudioFeedback(I)V
com.android.inputmethod.keyboard.LatinKeyboardView.onLongPress(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.latin.LatinIME.onPressKey(I)V
com.android.server.input.InputManagerService.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.wm.InputMonitor.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.multiwaveview.MultiWaveView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.launcher2.PagedViewWithDraggableItems.onLongClick(Landroid/view/View;)Z
com.android.launcher2.PagedViewWithDraggableItems.determineDraggingStart(Landroid/view/MotionEvent;)V
com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.server.PowerManagerService$10.run()V
com.android.server.ShutdownActivity$1.run()V
com.android.server.wm.WindowManagerService.rebootSafeMode()V
com.android.server.wm.WindowManagerService.shutdown()V
com.android.server.VibratorService$1.onChange(Z)V
com.android.systemui.statusbar.phone.PhoneStatusBar.addNavigationBar()V
com.android.systemui.statusbar.phone.PhoneStatusBar.repositionNavigationBar()V
com.android.systemui.statusbar.tablet.TabletStatusBar.createAndAddWindows()V
com.android.systemui.SystemUI.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.systemui.recent.RecentsPanelView$3.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.systemui.recent.RecentsPanelView.hide(Z)V
com.android.systemui.SearchPanelView.hide(Z)V
com.android.systemui.SearchPanelView.startAssistActivity()V
com.android.systemui.statusbar.BaseStatusBar$2.onClickHandler(Landroid/view/View;Landroid/app/PendingIntent;Landroid/content/Intent;)Z
com.android.systemui.statusbar.BaseStatusBar$4$1.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.systemui.statusbar.BaseStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.systemui.statusbar.CommandQueue$Callbacks.animateCollapse(I)V
com.android.systemui.statusbar.phone.PhoneStatusBar$20.onClick(Landroid/view/View;)V
com.android.systemui.statusbar.phone.PhoneStatusBar$5.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.phone.PhoneStatusBar$ExpandedDialog.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.systemui.statusbar.phone.PhoneStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.disable(I)V
com.android.systemui.statusbar.phone.PhoneStatusBar.performDisableActions(I)V
com.android.systemui.statusbar.phone.PhoneStatusBar.removeNotification(Landroid/os/IBinder;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.setSystemUiVisibility(II)V
com.android.systemui.statusbar.phone.StatusBarWindowView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.voicedialer.CommandRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.PhoneTypeChoiceRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.gallery3d.app.AbstractGalleryActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.SlotView$SimpleListener.onLongTap(I)V
com.android.gallery3d.app.AlbumPage$4.onSingleTapUp(I)V
com.android.gallery3d.ui.SlotView$SimpleListener.onSingleTapUp(I)V
com.android.gallery3d.ui.PhotoView$Listener.onDeleteImage(Lcom/android/gallery3d/data/Path;I)V
com.android.gallery3d.app.ActivityState.onPause()V
com.android.gallery3d.ui.PhotoView$MyGestureListener.deleteAfterAnimation(I)V
com.android.gallery3d.ui.PhotoView.hideUndoBar()V
com.android.gallery3d.app.ManageCachePage.onClick(Landroid/view/View;)V
com.android.gallery3d.app.ManageCachePage.onProgressComplete(I)V
com.android.gallery3d.app.SlideshowPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AbstractGalleryActivity.onBackPressed()V
com.android.gallery3d.ui.MenuExecutor$MediaOperation.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.Gallery.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumPage.doCluster(I)V
com.android.gallery3d.app.AlbumPage.pickPhoto(I)V
com.android.gallery3d.app.AlbumSetPage.pickAlbum(I)V
com.android.camera.ActivityBase.createCameraScreenNail(Z)V
com.android.gallery3d.app.AlbumPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.DialogPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.startDefaultPage()V
com.android.gallery3d.app.Gallery.startGetContent(Landroid/content/Intent;)V
com.android.gallery3d.app.Gallery.startViewAction(Landroid/content/Intent;)V
com.android.gallery3d.ui.ImportCompleteListener.goToImportedAlbum()V
com.android.gallery3d.app.AlbumSetPage.doCluster(I)V
com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener.onClick(Landroid/content/DialogInterface;I)V
com.android.inputmethod.keyboard.internal.KeyboardState.onLongPressTimeout(I)V
com.android.inputmethod.keyboard.LatinKeyboardView.openMoreKeysKeyboardIfRequired(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.KeyboardActionListener.onPressKey(I)V
com.android.server.input.InputManagerService$Callbacks.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.input.InputManagerService.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.launcher2.AppsCustomizePagedView.onLongClick(Landroid/view/View;)Z
com.android.launcher2.PagedViewWithDraggableItems.handleTouchEvent(Landroid/view/MotionEvent;)V
android.view.WindowManagerPolicy$WindowManagerFuncs.rebootSafeMode()V
android.view.WindowManagerPolicy$WindowManagerFuncs.shutdown()V
com.android.systemui.statusbar.phone.PhoneStatusBar.start()V
com.android.systemui.statusbar.phone.PhoneStatusBar.access$2900(Lcom/android/systemui/statusbar/phone/PhoneStatusBar;)V
com.android.systemui.statusbar.BaseStatusBar.createAndAddWindows()V
com.android.systemui.media.RingtonePlayer.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.systemui.power.PowerUI.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.systemui.statusbar.BaseStatusBar.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.systemui.SystemUIService.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.systemui.recent.RecentsPanelView.dismiss()V
com.android.systemui.recent.RecentsPanelView.handleSwipe(Landroid/view/View;)V
com.android.systemui.SearchPanelView.access$200(Lcom/android/systemui/SearchPanelView;)V
com.android.systemui.statusbar.BaseStatusBar.disable(I)V
com.android.systemui.statusbar.BaseStatusBar.removeNotification(Landroid/os/IBinder;)V
com.android.systemui.statusbar.BaseStatusBar.setSystemUiVisibility(II)V
com.android.systemui.statusbar.phone.PhoneStatusBar.setLightsOn(Z)V
com.android.voicedialer.VoiceDialerActivity$3.run()V
com.android.voicedialer.VoiceDialerActivity$4.run()V
com.android.camera.ActivityBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.Camera.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.PanoramaActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.VideoCamera.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.Gallery.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.PickerActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.ManageCachePage$4.onLongTap(I)V
com.android.gallery3d.ui.SlotView$Listener.onLongTap(I)V
com.android.gallery3d.ui.SlotView$Listener.onSingleTapUp(I)V
com.android.gallery3d.app.AlbumPage.onPause()V
com.android.gallery3d.app.AlbumSetPage.onPause()V
com.android.gallery3d.app.ManageCachePage.onPause()V
com.android.gallery3d.app.SlideshowPage.onPause()V
com.android.gallery3d.app.StateManager.finishState(Lcom/android/gallery3d/app/ActivityState;)V
com.android.gallery3d.app.StateManager.pause()V
com.android.gallery3d.ui.PhotoView$MyGestureListener.flingImages(FF)Z
com.android.gallery3d.ui.PhotoView$MyGestureListener.onUp()V
com.android.gallery3d.ui.PhotoView.access$100(Lcom/android/gallery3d/ui/PhotoView;)V
com.android.gallery3d.ui.PhotoView.checkHideUndoBar(I)V
com.android.gallery3d.ui.PhotoView.notifyDataChange([III)V
com.android.gallery3d.ui.PhotoView.pause()V
com.android.gallery3d.ui.MenuExecutor$ProgressListener.onProgressComplete(I)V
com.android.gallery3d.ui.GLView.onTouch(Landroid/view/MotionEvent;)Z
com.android.camera.ActivityBase.onBackPressed()V
com.android.gallery3d.app.AlbumPicker.onBackPressed()V
com.android.gallery3d.app.DialogPicker.onBackPressed()V
com.android.gallery3d.app.Gallery.onBackPressed()V
com.android.gallery3d.app.PickerActivity.onBackPressed()V
com.android.gallery3d.util.ThreadPool$Job.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.AbstractGalleryActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.GalleryActionBar$ClusterRunner.doCluster(I)V
com.android.gallery3d.app.AlbumPage.access$900(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumSetPage.access$1000(Lcom/android/gallery3d/app/AlbumSetPage;I)V
com.android.camera.Camera.createCameraScreenNail(Z)V
com.android.camera.PanoramaActivity.createCameraScreenNail(Z)V
com.android.camera.VideoCamera.createCameraScreenNail(Z)V
com.android.gallery3d.app.PickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.initializeByIntent()V
com.android.gallery3d.ui.ImportCompleteListener.onProgressComplete(I)V
com.android.inputmethod.keyboard.KeyboardSwitcher.onLongPressTimeout(I)V
com.android.inputmethod.keyboard.LatinKeyboardView.access$000(Lcom/android/inputmethod/keyboard/LatinKeyboardView;Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onPressKey(I)V
com.android.inputmethod.keyboard.PointerTracker.callListenerOnPressAndCheckKeyboardLayoutChange(Lcom/android/inputmethod/keyboard/Key;)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onPressKey(I)V
com.android.server.input.InputManagerService.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.launcher2.AppsCustomizePagedView.handleTouchEvent(Landroid/view/MotionEvent;)V
com.android.launcher2.PagedViewWithDraggableItems.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.launcher2.PagedViewWithDraggableItems.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.GlobalActions$2.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$2.onPress()V
com.android.systemui.statusbar.BaseStatusBar.start()V
com.android.systemui.SystemUI.start()V
com.android.systemui.recent.RecentsCallback.dismiss()V
com.android.systemui.recent.RecentsCallback.handleSwipe(Landroid/view/View;)V
com.android.systemui.statusbar.CommandQueue$Callbacks.disable(I)V
com.android.systemui.statusbar.BaseStatusBar.handleNotificationError(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;Ljava/lang/String;)V
com.android.systemui.statusbar.CommandQueue$Callbacks.removeNotification(Landroid/os/IBinder;)V
com.android.systemui.statusbar.CommandQueue$Callbacks.setSystemUiVisibility(II)V
com.android.systemui.statusbar.phone.PhoneStatusBar.interceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.phone.PhoneStatusBar.topAppWindowChanged(Z)V
com.android.gallery3d.app.AlbumPicker.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.DialogPicker.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.SlotView$MyGestureListener.onLongPress(Landroid/view/MotionEvent;)V
com.android.gallery3d.ui.SlotView$MyGestureListener.onSingleTapUp(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumPage.clearLoadingBit(I)V
com.android.gallery3d.app.AlbumSetPage.clearLoadingBit(I)V
com.android.gallery3d.app.PhotoPage$2.onLoadingFinished()V
com.android.gallery3d.app.SlideshowPage.showPendingBitmap()V
com.android.gallery3d.app.AbstractGalleryActivity.onPause()V
com.android.gallery3d.ui.PhotoView$MyGestureListener.onFling(FF)Z
com.android.gallery3d.ui.GestureRecognizer$Listener.onUp()V
com.android.gallery3d.ui.PhotoView$1.onClick(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView.access$1600(Lcom/android/gallery3d/ui/PhotoView;I)V
com.android.gallery3d.app.PhotoDataAdapter.fireDataChange()V
com.android.gallery3d.app.AlbumPage$2.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumSetPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ManageCachePage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.PhotoPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.EdgeView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.ScrollBarView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlideshowView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.TileImageView.onTouch(Landroid/view/MotionEvent;)Z
com.android.camera.Camera.onBackPressed()V
com.android.camera.PanoramaActivity.onBackPressed()V
com.android.camera.VideoCamera.onBackPressed()V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/Bitmap;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Lcom/android/gallery3d/ui/ScreenNail;
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.gallery3d.gadget.WidgetUtils.createWidgetBitmap(Lcom/android/gallery3d/data/MediaItem;)Landroid/graphics/Bitmap;
com.android.gallery3d.ui.AlbumSetSlidingWindow.getLoadingTexture()Lcom/android/gallery3d/ui/BitmapTexture;
com.android.gallery3d.util.JobLimiter$JobWrapper.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.util.ThreadPool$Worker.run()V
com.android.camera.ActivityBase.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.CropImage.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.GalleryActionBar$1.onClick(Landroid/content/DialogInterface;I)V
com.android.gallery3d.app.GalleryActionBar.onNavigationItemSelected(IJ)Z
com.android.camera.Camera.onCreate(Landroid/os/Bundle;)V
com.android.camera.PanoramaActivity.onCreate(Landroid/os/Bundle;)V
com.android.camera.VideoCamera.onCreate(Landroid/os/Bundle;)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startLongPressTimer(I)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startLongPressTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onPressKey(I)V
com.android.inputmethod.keyboard.PointerTracker.onDownEventInternal(IIJ)V
com.android.inputmethod.keyboard.PointerTracker.onMoveEvent(IIJ)V
com.android.launcher2.AppsCustomizePagedView.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.launcher2.PagedView.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.launcher2.AppsCustomizePagedView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.launcher2.PagedView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.GlobalActions$SinglePressAction.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$SinglePressAction.onPress()V
com.android.systemui.statusbar.tablet.TabletStatusBar.start()V
com.android.systemui.SystemUIService.onCreate()V
com.android.systemui.recent.RecentsHorizontalScrollView$2.onClick(Landroid/view/View;)V
com.android.systemui.recent.RecentsVerticalScrollView$2.onClick(Landroid/view/View;)V
com.android.systemui.recent.RecentsHorizontalScrollView.onChildDismissed(Landroid/view/View;)V
com.android.systemui.recent.RecentsVerticalScrollView.onChildDismissed(Landroid/view/View;)V
com.android.systemui.statusbar.BaseStatusBar.addNotificationViews(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)Lcom/android/systemui/statusbar/StatusBarIconView;
com.android.systemui.statusbar.BaseStatusBar.updateNotification(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.handleNotificationError(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;Ljava/lang/String;)V
com.android.systemui.statusbar.tablet.TabletStatusBar.handleNotificationError(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;Ljava/lang/String;)V
com.android.systemui.statusbar.phone.CloseDragHandle.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.phone.CloseDragHandle.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.phone.PhoneStatusBarView.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.phone.PhoneStatusBarView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.BaseStatusBar.topAppWindowChanged(Z)V
com.android.gallery3d.app.AlbumPage.access$1600(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumSetPage.access$1600(Lcom/android/gallery3d/app/AlbumSetPage;I)V
com.android.gallery3d.app.LoadingListener.onLoadingFinished()V
com.android.gallery3d.app.PhotoDataAdapter$DataListener.onLoadingFinished()V
com.android.gallery3d.app.SlideshowPage.access$100(Lcom/android/gallery3d/app/SlideshowPage;)V
com.android.gallery3d.app.SlideshowPage.onResume()V
com.android.camera.ActivityBase.onPause()V
com.android.gallery3d.app.AlbumPicker.onPause()V
com.android.gallery3d.app.CropImage.onPause()V
com.android.gallery3d.app.DialogPicker.onPause()V
com.android.gallery3d.app.Gallery.onPause()V
com.android.gallery3d.app.PickerActivity.onPause()V
com.android.gallery3d.ui.GestureRecognizer$Listener.onFling(FF)Z
com.android.gallery3d.ui.GestureRecognizer$MyDownUpListener.onUp(Landroid/view/MotionEvent;)V
com.android.gallery3d.ui.GLView$OnClickListener.onClick(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView$MyGestureListener.onDown(FF)V
com.android.gallery3d.app.PhotoDataAdapter.access$2300(Lcom/android/gallery3d/app/PhotoDataAdapter;)V
com.android.gallery3d.app.PhotoDataAdapter.resume()V
com.android.gallery3d.app.PhotoDataAdapter.setCurrentPhoto(Lcom/android/gallery3d/data/Path;I)V
com.android.gallery3d.app.PhotoDataAdapter.updateCurrentIndex(I)V
com.android.gallery3d.app.AlbumPage$2.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumSetPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ManageCachePage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.PhotoPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.SlideshowPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.EdgeView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLRootView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLRootView.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.GLView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.GLView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.ScrollBarView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlideshowView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlotView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.TileImageView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.UndoBarView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.gadget.LocalPhotoSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.gadget.MediaSetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startLongPressTimer(I)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startLongPressTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onPressKey(I)V
com.android.inputmethod.keyboard.PointerTracker.onDownEvent(IIJLcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.LatinKeyboardView.processMotionEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.PointerTracker.processMotionEvent(IIIJLcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.launcher2.SmoothPagedView.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.launcher2.SmoothPagedView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.launcher2.Workspace.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.GlobalActions$3.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$Action.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$Action.onPress()V
com.android.systemui.SwipeHelper$Callback.onChildDismissed(Landroid/view/View;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.addNotificationViews(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)Lcom/android/systemui/statusbar/StatusBarIconView;
com.android.systemui.statusbar.tablet.TabletStatusBar.addNotificationViews(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)Lcom/android/systemui/statusbar/StatusBarIconView;
com.android.systemui.statusbar.CommandQueue$Callbacks.updateNotification(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.updateNotification(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)V
com.android.systemui.statusbar.tablet.TabletStatusBar.updateNotification(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)V
com.android.systemui.statusbar.CommandQueue$Callbacks.topAppWindowChanged(Z)V
com.android.gallery3d.app.AlbumPage$7.run()V
com.android.gallery3d.app.AlbumPage$MyLoadingListener.onLoadingFinished()V
com.android.gallery3d.app.AlbumSetPage$6.run()V
com.android.gallery3d.app.AlbumSetPage$MyLoadingListener.onLoadingFinished()V
com.android.gallery3d.app.AlbumSetDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.ActivityState.onResume()V
com.android.camera.Camera.onPause()V
com.android.camera.PanoramaActivity.onPause()V
com.android.camera.VideoCamera.onPause()V
com.android.gallery3d.ui.GestureRecognizer$MyGestureListener.onFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z
com.android.gallery3d.ui.DownUpDetector$DownUpListener.onUp(Landroid/view/MotionEvent;)V
com.android.gallery3d.ui.UndoBarView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GestureRecognizer$Listener.onDown(FF)V
com.android.gallery3d.app.PhotoDataAdapter$UpdateContent.call()Ljava/lang/Void;
com.android.gallery3d.app.PhotoPage$Model.resume()V
com.android.gallery3d.app.PhotoPage$Model.setCurrentPhoto(Lcom/android/gallery3d/data/Path;I)V
com.android.gallery3d.app.PhotoDataAdapter.moveTo(I)V
com.android.gallery3d.ui.GLRoot.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage$2.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.AlbumSetPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.ManageCachePage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.PhotoPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.SlideshowPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.EdgeView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.PhotoView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.ScrollBarView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.SlideshowView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.SlotView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.TileImageView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.UndoBarView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.AlbumPage$2.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$FaceHighlightView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$HighlightRectangle.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.EdgeView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.GLView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.GLView.removeAllComponents()V
com.android.gallery3d.ui.PhotoView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.ScrollBarView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlideshowView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlotView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.TileImageView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.UndoBarView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.gadget.WidgetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.inputmethod.keyboard.KeyboardSwitcher.startLongPressTimer(I)V
com.android.inputmethod.keyboard.PointerTracker.startLongPressTimer(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.PointerTracker.onShowMoreKeysPanel(IILcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler$ProcessMotionEvent.processMotionEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.latin.suggestions.SuggestionsView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.launcher2.Workspace.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.GlobalActions$4.onItemLongClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)Z
com.android.internal.policy.impl.GlobalActions.onClick(Landroid/content/DialogInterface;I)V
com.android.systemui.SwipeHelper$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.addNotification(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)V
com.android.systemui.statusbar.tablet.TabletStatusBar.addNotification(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)V
com.android.gallery3d.app.AlbumSetDataLoader.access$1900(Lcom/android/gallery3d/app/AlbumSetDataLoader;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.access$2500(Lcom/android/gallery3d/app/PhotoDataAdapter;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumDataLoader.access$1700(Lcom/android/gallery3d/app/AlbumDataLoader;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.ActivityState.resume()V
com.android.gallery3d.app.AlbumPage.onResume()V
com.android.gallery3d.app.AlbumSetPage.onResume()V
com.android.gallery3d.app.ManageCachePage.onResume()V
com.android.gallery3d.app.PhotoPage.onResume()V
com.android.gallery3d.ui.DownUpDetector.setState(ZLandroid/view/MotionEvent;)V
com.android.gallery3d.ui.GestureRecognizer$MyDownUpListener.onDown(Landroid/view/MotionEvent;)V
com.android.gallery3d.app.PhotoDataAdapter$UpdateContent.call()Ljava/lang/Object;
com.android.gallery3d.app.PhotoPage.onStateResult(IILandroid/content/Intent;)V
com.android.gallery3d.app.PhotoPage.setCurrentPhotoByIntent(Landroid/content/Intent;)V
com.android.gallery3d.ui.PhotoView$Model.moveTo(I)V
com.android.gallery3d.app.ActivityState.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage$2.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.AlbumSetPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.ManageCachePage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.PhotoPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.SlideshowPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.EdgeView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.PhotoView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.ScrollBarView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.SlideshowView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.SlotView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.TileImageView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.UndoBarView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.AlbumPage$2.removeAllComponents()V
com.android.gallery3d.app.AlbumSetPage$1.removeAllComponents()V
com.android.gallery3d.app.ManageCachePage$1.removeAllComponents()V
com.android.gallery3d.app.PhotoPage$1.removeAllComponents()V
com.android.gallery3d.app.SlideshowPage$1.removeAllComponents()V
com.android.gallery3d.ui.CropView$FaceHighlightView.removeAllComponents()V
com.android.gallery3d.ui.CropView$HighlightRectangle.removeAllComponents()V
com.android.gallery3d.ui.CropView.removeAllComponents()V
com.android.gallery3d.ui.EdgeView.removeAllComponents()V
com.android.gallery3d.ui.PhotoView.removeAllComponents()V
com.android.gallery3d.ui.ScrollBarView.removeAllComponents()V
com.android.gallery3d.ui.SlideshowView.removeAllComponents()V
com.android.gallery3d.ui.SlotView.removeAllComponents()V
com.android.gallery3d.ui.TileImageView.removeAllComponents()V
com.android.gallery3d.ui.UndoBarView.removeAllComponents()V
com.android.gallery3d.gadget.WidgetService$PhotoRVFactory.getViewAt(I)Landroid/widget/RemoteViews;
com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions.startLongPressTimer(I)V
com.android.inputmethod.keyboard.LatinKeyboardView.openMoreKeysPanel(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler.handleSuddenJumping(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.systemui.statusbar.BaseStatusBar.addNotification(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)V
com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask.run()V
com.android.gallery3d.app.PhotoDataAdapter$ReloadTask.run()V
com.android.gallery3d.app.AlbumDataLoader$ReloadTask.run()V
com.android.gallery3d.app.AlbumPage.resume()V
com.android.gallery3d.app.AlbumSetPage.resume()V
com.android.gallery3d.app.ManageCachePage.resume()V
com.android.gallery3d.app.PhotoPage.resume()V
com.android.gallery3d.app.SlideshowPage.resume()V
com.android.gallery3d.app.StateManager.resume()V
com.android.gallery3d.ui.DownUpDetector.onTouchEvent(Landroid/view/MotionEvent;)V
com.android.gallery3d.ui.DownUpDetector$DownUpListener.onDown(Landroid/view/MotionEvent;)V
com.android.gallery3d.app.ActivityState.onStateResult(IILandroid/content/Intent;)V
com.android.gallery3d.ui.PhotoView.resetToFirstPicture()V
com.android.gallery3d.ui.PhotoView.switchToFirstImage()V
com.android.gallery3d.ui.PhotoView.switchToNextImage()V
com.android.gallery3d.ui.PhotoView.switchToPrevImage()V
com.android.gallery3d.app.AlbumPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.inputmethod.keyboard.internal.KeyboardState.onPressShift()V
com.android.inputmethod.keyboard.LatinKeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.accessibility.AccessibilityEntityProvider.simulateKeyPress(Lcom/android/inputmethod/keyboard/Key;)V
com.android.systemui.statusbar.CommandQueue$Callbacks.addNotification(Landroid/os/IBinder;Lcom/android/internal/statusbar/StatusBarNotification;)V
com.android.gallery3d.app.AlbumSetDataLoader.resume()V
com.android.gallery3d.app.AlbumDataLoader.resume()V
com.android.gallery3d.app.AbstractGalleryActivity.onResume()V
com.android.gallery3d.ui.GestureRecognizer.onTouchEvent(Landroid/view/MotionEvent;)V
com.android.gallery3d.app.ManageCachePage.onStateResult(IILandroid/content/Intent;)V
com.android.gallery3d.app.SlideshowPage.onStateResult(IILandroid/content/Intent;)V
com.android.gallery3d.app.StateManager.notifyActivityResult(IILandroid/content/Intent;)V
com.android.gallery3d.ui.PhotoView.switchWithCaptureAnimationLocked(I)Z
com.android.gallery3d.ui.PhotoView.slideToNextPicture()Z
com.android.gallery3d.ui.PhotoView.switchFocus()V
com.android.gallery3d.ui.PhotoView.slideToPrevPicture()Z
com.android.gallery3d.app.SlideshowPage.initializeViews()V
com.android.inputmethod.keyboard.internal.KeyboardState.onPressKey(IZI)V
com.android.inputmethod.accessibility.AccessibilityEntityProvider.performActionForKey(Lcom/android/inputmethod/keyboard/Key;ILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.dispatchHoverEvent(Landroid/view/MotionEvent;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.camera.ActivityBase.onResume()V
com.android.gallery3d.app.AlbumPicker.onResume()V
com.android.gallery3d.app.CropImage.onResume()V
com.android.gallery3d.app.DialogPicker.onResume()V
com.android.gallery3d.app.Gallery.onResume()V
com.android.gallery3d.app.PickerActivity.onResume()V
com.android.gallery3d.ui.PhotoView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.PhotoView.switchWithCaptureAnimation(I)Z
com.android.gallery3d.ui.PhotoView.snapToNeighborImage()Z
com.android.gallery3d.ui.PhotoView.swipeImages(FF)Z
com.android.gallery3d.ui.PhotoView.switchToHitPicture(II)V
com.android.gallery3d.ui.PhotoView.access$800(Lcom/android/gallery3d/ui/PhotoView;)V
com.android.gallery3d.app.SlideshowPage.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.inputmethod.accessibility.AccessibilityEntityProvider.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onHoverKey(Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.LatinKeyboardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.camera.Camera.onResume()V
com.android.camera.PanoramaActivity.onResume()V
com.android.camera.VideoCamera.onResume()V
com.android.gallery3d.app.PhotoPage.switchWithCaptureAnimation(I)Z
com.android.gallery3d.ui.PhotoView.snapback()V
com.android.gallery3d.ui.PhotoView.access$3600(Lcom/android/gallery3d/ui/PhotoView;FF)Z
com.android.gallery3d.ui.PhotoView.access$3300(Lcom/android/gallery3d/ui/PhotoView;II)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onTransitionKey(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AppBridge$Server.switchWithCaptureAnimation(I)Z
com.android.gallery3d.ui.PhotoView.access$1500(Lcom/android/gallery3d/ui/PhotoView;)V
com.android.gallery3d.ui.PhotoView.captureAnimationDone(I)V
com.android.gallery3d.ui.PhotoView$MyGestureListener.onSingleTapUp(FF)Z
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1.performAction(IILandroid/os/Bundle;)Z
com.android.camera.ActivityBase$MyAppBridge.switchWithCaptureAnimation(I)V
com.android.gallery3d.ui.PhotoView.access$900(Lcom/android/gallery3d/ui/PhotoView;I)V
com.android.gallery3d.ui.GestureRecognizer$Listener.onSingleTapUp(FF)Z
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge.performAction(IILandroid/os/Bundle;)Z
com.android.camera.ActivityBase$MyAppBridge.access$100(Lcom/android/camera/ActivityBase$MyAppBridge;I)V
com.android.gallery3d.ui.GestureRecognizer$MyGestureListener.onSingleTapUp(Landroid/view/MotionEvent;)Z
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1.performAction(IILandroid/os/Bundle;)Z
com.android.camera.ActivityBase.gotoGallery()V
com.android.camera.Camera.gotoGallery()V
com.android.camera.PanoramaActivity.gotoGallery()V
com.android.camera.VideoCamera.gotoGallery()V
com.android.camera.Camera.onThumbnailClicked(Landroid/view/View;)V
com.android.camera.PanoramaActivity.onThumbnailClicked(Landroid/view/View;)V
com.android.camera.VideoCamera.onThumbnailClicked(Landroid/view/View;)V
com.android.server.VibratorService.vibratePattern([JILandroid/os/IBinder;)V
android.os.IVibratorService$Stub$Proxy.vibratePattern([JILandroid/os/IBinder;)V
android.os.IVibratorService$Stub.vibratePattern([JILandroid/os/IBinder;)V
android.os.IVibratorService.vibratePattern([JILandroid/os/IBinder;)V
android.os.SystemVibrator.vibrate([JI)V
android.os.Vibrator.vibrate([JI)V
com.android.deskclock.AlarmKlaxon.play(Lcom/android/deskclock/Alarm;)V
com.android.inputmethod.pinyin.SoftKeyboardView.tryVibrate()V
com.android.nfc.P2pEventManager.onP2pHandoverNotSupported()V
com.android.nfc.P2pEventManager.onP2pInRange()V
com.android.nfc.P2pEventManager.onP2pReceiveComplete(Z)V
com.android.nfc.P2pEventManager.onP2pSendComplete()V
com.android.phone.CallNotifier$EmergencyTonePlayerVibrator.start()V
com.android.server.NotificationManagerService.enqueueNotificationInternal(Ljava/lang/String;IILjava/lang/String;ILandroid/app/Notification;[I)V
com.android.deskclock.AlarmKlaxon.onStartCommand(Landroid/content/Intent;II)I
com.android.inputmethod.pinyin.SoftKeyboardView.onKeyPress(IILcom/android/inputmethod/pinyin/SkbContainer$LongPressTimer;Z)Lcom/android/inputmethod/pinyin/SoftKey;
com.android.nfc.P2pEventListener.onP2pHandoverNotSupported()V
com.android.nfc.P2pEventListener.onP2pInRange()V
com.android.nfc.P2pEventListener.onP2pReceiveComplete(Z)V
com.android.nfc.P2pEventListener.onP2pSendComplete()V
com.android.phone.CallNotifier$EmergencyTonePlayerVibrator.access$200(Lcom/android/phone/CallNotifier$EmergencyTonePlayerVibrator;)V
com.android.server.am.ServiceRecord$1.run()V
com.android.server.NotificationManagerService.enqueueNotificationWithTag(Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;[I)V
com.android.inputmethod.pinyin.SkbContainer.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.pinyin.SoftKeyboardView.onKeyMove(II)Lcom/android/inputmethod/pinyin/SoftKey;
com.android.nfc.P2pLinkManager.onLlcpActivated()V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
android.app.INotificationManager$Stub$Proxy.enqueueNotificationWithTag(Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;[I)V
android.app.INotificationManager$Stub.enqueueNotificationWithTag(Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;[I)V
com.android.server.NotificationManagerService.enqueueNotification(Ljava/lang/String;ILandroid/app/Notification;[I)V
com.android.inputmethod.pinyin.SkbContainer.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.nfc.NfcService$NfcServiceHandler.llcpActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)Z
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
android.app.INotificationManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.INotificationManager.enqueueNotificationWithTag(Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;[I)V
android.app.INotificationManager$Stub$Proxy.enqueueNotification(Ljava/lang/String;ILandroid/app/Notification;[I)V
android.app.INotificationManager$Stub.enqueueNotification(Ljava/lang/String;ILandroid/app/Notification;[I)V
com.android.nfc.NfcService.sendMessage(ILjava/lang/Object;)V
com.android.server.NotificationManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.NotificationManager.notify(Ljava/lang/String;ILandroid/app/Notification;)V
com.android.server.net.NetworkPolicyManagerService.enqueueNotification(Landroid/net/NetworkPolicy;IJ)V
com.android.server.net.NetworkPolicyManagerService.enqueueRestrictedNotification(Ljava/lang/String;)V
com.android.systemui.statusbar.policy.LocationController.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.app.INotificationManager.enqueueNotification(Ljava/lang/String;ILandroid/app/Notification;[I)V
com.android.nfc.NfcService.onCardEmulationAidSelected([B)V
com.android.nfc.NfcService.onCardEmulationDeselected()V
com.android.nfc.NfcService.onLlcpLinkActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.NfcService.onLlcpLinkDeactivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.NfcService.onRemoteEndpointDiscovered(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.NfcService.onRemoteFieldActivated()V
com.android.nfc.NfcService.onRemoteFieldDeactivated()V
com.android.nfc.NfcService.onSeApduReceived([B)V
com.android.nfc.NfcService.onSeEmvCardRemoval()V
com.android.nfc.NfcService.onSeMifareAccess([B)V
com.android.nfc.NfcService.sendMockNdefTag(Landroid/nfc/NdefMessage;)V
android.app.NotificationManager.notify(ILandroid/app/Notification;)V
android.net.wifi.WifiWatchdogStateMachine.setWalledGardenNotificationVisible(Z)V
com.android.calendar.alerts.AlertService$NotificationMgrWrapper.notify(Ljava/lang/String;ILcom/android/calendar/alerts/AlertService$NotificationWrapper;)V
com.android.contacts.calllog.DefaultVoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.vcard.ExportProcessor.doCancelNotification()V
com.android.contacts.vcard.ExportProcessor.doFinishNotification(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.vcard.ExportProcessor.doProgressNotification(Landroid/net/Uri;II)V
com.android.contacts.vcard.ImportVCardActivity.showFailureNotification(I)V
com.android.contacts.vcard.NotificationImportExportListener.onCancelRequest(Lcom/android/contacts/vcard/CancelRequest;I)V
com.android.contacts.vcard.NotificationImportExportListener.onExportProcessed(Lcom/android/contacts/vcard/ExportRequest;I)V
com.android.contacts.vcard.NotificationImportExportListener.onImportCanceled(Lcom/android/contacts/vcard/ImportRequest;I)V
com.android.contacts.vcard.NotificationImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.vcard.NotificationImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.contacts.vcard.NotificationImportExportListener.onImportProcessed(Lcom/android/contacts/vcard/ImportRequest;II)V
com.android.server.net.NetworkPolicyManagerService.updateNotificationsLocked()V
com.android.nfc.DeviceHost$DeviceHostListener.onCardEmulationAidSelected([B)V
com.android.nfc.DeviceHost$DeviceHostListener.onCardEmulationDeselected()V
com.android.nfc.DeviceHost$DeviceHostListener.onLlcpLinkActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onLlcpLinkDeactivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteEndpointDiscovered(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteFieldActivated()V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteFieldDeactivated()V
com.android.nfc.DeviceHost$DeviceHostListener.onSeApduReceived([B)V
com.android.nfc.DeviceHost$DeviceHostListener.onSeEmvCardRemoval()V
com.android.nfc.DeviceHost$DeviceHostListener.onSeMifareAccess([B)V
android.accounts.AccountManagerService.installNotification(ILandroid/app/Notification;)V
android.content.SyncManager$SyncHandler.installHandleTooManyDeletesNotification(Landroid/accounts/Account;Ljava/lang/String;J)V
com.android.bluetooth.opp.BluetoothOppNotification.updateActiveNotification()V
com.android.bluetooth.opp.BluetoothOppNotification.updateCompletedNotification()V
com.android.bluetooth.opp.BluetoothOppNotification.updateIncomingFileConfirmNotification()V
com.android.bluetooth.pbap.BluetoothPbapService.createPbapNotification(Ljava/lang/String;)V
com.android.browser.WebStorageSizeManager.scheduleOutOfSpaceNotification()V
com.android.calendar.alerts.AlertService$NotificationMgrWrapper.notify(ILcom/android/calendar/alerts/AlertService$NotificationWrapper;)V
com.android.deskclock.AlarmAlertFullScreen.snooze()V
com.android.deskclock.AlarmReceiver.handleIntent(Landroid/content/Context;Landroid/content/Intent;)V
com.android.deskclock.AlarmReceiver.updateNotification(Landroid/content/Context;Lcom/android/deskclock/Alarm;I)V
com.android.email.NotificationController$MessageContentObserver.onChange(Z)V
com.android.email.NotificationController.showAccountNotification(Lcom/android/emailcommon/provider/Account;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;I)V
com.android.exchange.CalendarSyncEnabler.showNotificationForTest(Ljava/lang/String;)V
com.android.internal.location.GpsNetInitiatedHandler.setNiNotification(Lcom/android/internal/location/GpsNetInitiatedHandler$GpsNiNotification;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.setNotification(I)V
com.android.mms.transaction.MessagingNotification.notifyFailed(Landroid/content/Context;ZJZ)V
com.android.mms.transaction.MessagingNotification.updateNotification(Landroid/content/Context;ZI)V
com.android.mms.transaction.SimFullReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.SmsRejectedReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.nfc.handover.HandoverManager$HandoverTransfer.updateNotification()V
com.android.phone.EmergencyCallbackModeService.showNotification(J)V
com.android.phone.NotificationMgr.notifyMissedCall(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;J)V
com.android.phone.NotificationMgr.showDataDisconnectedRoaming()V
com.android.phone.NotificationMgr.showNetworkSelection(Ljava/lang/String;)V
com.android.phone.NotificationMgr.updateCfi(Z)V
com.android.phone.NotificationMgr.updateInCallNotification(Z)V
com.android.phone.NotificationMgr.updateMwi(Z)V
com.android.providers.downloads.RealSystemFacade.postNotification(JLandroid/app/Notification;)V
com.android.server.connectivity.Tethering.showTetheredNotification(I)V
com.android.server.connectivity.Vpn.showNotification(Lcom/android/internal/net/VpnConfig;Ljava/lang/String;Landroid/graphics/Bitmap;)V
com.android.server.DeviceStorageMonitorService.sendNotification()V
com.android.server.input.InputManagerService.showMissingKeyboardLayoutNotification()V
com.android.server.ThrottleService$MyHandler.postNotification(IIII)V
com.android.server.UiModeManagerService.adjustStatusBarCarModeLocked()V
com.android.server.usb.UsbDeviceManager$UsbHandler.updateAdbNotification()V
com.android.server.usb.UsbDeviceManager$UsbHandler.updateUsbNotification()V
com.android.server.WifiService.setNotificationVisible(ZIZI)V
com.android.settings.bluetooth.BluetoothPairingRequest.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.bluetooth.BluetoothPermissionRequest.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.systemui.screenshot.GlobalScreenshot.notifyScreenshotError(Landroid/content/Context;Landroid/app/NotificationManager;)V
com.android.systemui.screenshot.SaveImageInBackgroundTask.<init>(Landroid/content/Context;Lcom/android/systemui/screenshot/SaveImageInBackgroundData;Landroid/app/NotificationManager;I)V
com.android.systemui.screenshot.SaveImageInBackgroundTask.onPostExecute(Lcom/android/systemui/screenshot/SaveImageInBackgroundData;)V
com.android.systemui.usb.StorageNotification.setMediaStorageNotification(IIIZZLandroid/app/PendingIntent;)V
com.android.systemui.usb.StorageNotification.setUsbStorageNotification(IIIZZLandroid/app/PendingIntent;)V
android.net.wifi.WifiWatchdogStateMachine.access$2400(Landroid/net/wifi/WifiWatchdogStateMachine;Z)V
com.android.calendar.alerts.NotificationMgr.notify(Ljava/lang/String;ILcom/android/calendar/alerts/AlertService$NotificationWrapper;)V
com.android.contacts.calllog.CallLogNotificationsService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.calllog.VoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.vcard.ExportProcessor.run()V
com.android.contacts.vcard.ExportProcessor.runInternal()V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.run()V
com.android.contacts.vcard.VCardImportExportListener.onCancelRequest(Lcom/android/contacts/vcard/CancelRequest;I)V
com.android.contacts.vcard.VCardImportExportListener.onExportProcessed(Lcom/android/contacts/vcard/ExportRequest;I)V
com.android.contacts.vcard.VCardImportExportListener.onImportCanceled(Lcom/android/contacts/vcard/ImportRequest;I)V
com.android.contacts.vcard.VCardImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.vcard.VCardImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.contacts.vcard.VCardImportExportListener.onImportProcessed(Lcom/android/contacts/vcard/ImportRequest;II)V
com.android.server.net.NetworkPolicyManagerService.access$700(Lcom/android/server/net/NetworkPolicyManagerService;)V
com.android.server.net.NetworkPolicyManagerService.addNetworkPolicyLocked(Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkPolicyManagerService.dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
com.android.server.net.NetworkPolicyManagerService.performSnooze(Landroid/net/NetworkTemplate;I)V
com.android.server.net.NetworkPolicyManagerService.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkPolicyManagerService.setRestrictBackground(Z)V
com.android.server.net.NetworkPolicyManagerService.systemReady()V
com.android.nfc.nxp.NativeNfcManager.notifyTransactionListeners([B)V
com.android.nfc.nxp.NativeNfcManager.notifyTargetDeselected()V
com.android.nfc.nxp.NativeNfcManager.notifyLlcpLinkActivation(Lcom/android/nfc/nxp/NativeP2pDevice;)V
com.android.nfc.nxp.NativeNfcManager.notifyLlcpLinkDeactivated(Lcom/android/nfc/nxp/NativeP2pDevice;)V
com.android.nfc.nxp.NativeNfcManager.notifyNdefMessageListeners(Lcom/android/nfc/nxp/NativeNfcTag;)V
com.android.nfc.nxp.NativeNfcManager.notifySeFieldActivated()V
com.android.nfc.nxp.NativeNfcManager.notifySeFieldDeactivated()V
com.android.nfc.nxp.NativeNfcManager.notifySeApduReceived([B)V
com.android.nfc.nxp.NativeNfcManager.notifySeEmvCardRemoval()V
com.android.nfc.nxp.NativeNfcManager.notifySeMifareAccess([B)V
android.accounts.AccountManagerService.createNoCredentialsPermissionNotification(Landroid/accounts/Account;Landroid/content/Intent;)V
android.content.SyncManager$SyncHandler.runSyncFinishedOrCanceledLocked(Landroid/content/SyncResult;Landroid/content/SyncManager$ActiveSyncContext;)V
com.android.bluetooth.opp.BluetoothOppNotification.access$300(Lcom/android/bluetooth/opp/BluetoothOppNotification;)V
com.android.bluetooth.opp.BluetoothOppNotification.access$400(Lcom/android/bluetooth/opp/BluetoothOppNotification;)V
com.android.bluetooth.opp.BluetoothOppNotification.access$500(Lcom/android/bluetooth/opp/BluetoothOppNotification;)V
com.android.bluetooth.pbap.BluetoothPbapService.access$1400(Lcom/android/bluetooth/pbap/BluetoothPbapService;Ljava/lang/String;)V
com.android.browser.WebStorageSizeManager.onExceededDatabaseQuota(Ljava/lang/String;Ljava/lang/String;JJJLandroid/webkit/WebStorage$QuotaUpdater;)V
com.android.browser.WebStorageSizeManager.onReachedMaxAppCacheSize(JJLandroid/webkit/WebStorage$QuotaUpdater;)V
com.android.calendar.alerts.NotificationMgr.notify(ILcom/android/calendar/alerts/AlertService$NotificationWrapper;)V
com.android.deskclock.AlarmAlertFullScreen.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.deskclock.AlarmAlertFullScreen.access$000(Lcom/android/deskclock/AlarmAlertFullScreen;)V
com.android.deskclock.AlarmAlert.snooze()V
com.android.deskclock.AlarmReceiver.access$000(Lcom/android/deskclock/AlarmReceiver;Landroid/content/Context;Landroid/content/Intent;)V
com.android.email.NotificationController.showDownloadForwardFailedNotification(Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.email.NotificationController.showLoginFailedNotification(J)V
com.android.email.NotificationController.showPasswordExpiredNotification(J)V
com.android.email.NotificationController.showPasswordExpiringNotification(J)V
com.android.email.NotificationController.showSecurityNeededNotification(Lcom/android/emailcommon/provider/Account;)V
com.android.exchange.CalendarSyncEnabler.enableEasCalendarSync()V
com.android.internal.location.GpsNetInitiatedHandler.handleNiNotification(Lcom/android/internal/location/GpsNetInitiatedHandler$GpsNiNotification;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.onRestrictedStateChanged(Landroid/os/AsyncResult;)V
com.android.mms.transaction.MessagingNotification.notifyDownloadFailed(Landroid/content/Context;J)V
com.android.mms.transaction.MessagingNotification.notifySendFailed(Landroid/content/Context;Z)V
com.android.mms.transaction.MessagingNotification.notifySendFailed(Landroid/content/Context;)V
com.android.mms.transaction.MessagingNotification.blockingUpdateNewMessageIndicator(Landroid/content/Context;JZ)V
com.android.nfc.handover.HandoverManager.tryHandoverRequest(Landroid/nfc/NdefMessage;)Landroid/nfc/NdefMessage;
com.android.nfc.handover.HandoverManager$HandoverTransfer.updateStateAndNotification(I)V
com.android.phone.EmergencyCallbackModeService.access$200(Lcom/android/phone/EmergencyCallbackModeService;J)V
com.android.phone.EmergencyCallbackModeService.resetEcmTimer(Landroid/os/AsyncResult;)V
com.android.phone.EmergencyCallbackModeService.startTimerNotification()V
com.android.phone.CallNotifier.showMissedCallNotification(Lcom/android/internal/telephony/Connection;J)V
com.android.phone.NotificationMgr$QueryHandler.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.phone.NotificationMgr$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.phone.NotificationMgr.updateNetworkSelection(I)V
com.android.phone.CallNotifier.onCfiChanged(Z)V
com.android.phone.NotificationMgr.updateInCallNotification()V
com.android.phone.NotificationMgr.updateNotificationAndLaunchIncomingCallUi()V
com.android.phone.CallNotifier.onMwiChanged(Z)V
com.android.providers.downloads.SystemFacade.postNotification(JLandroid/app/Notification;)V
com.android.server.connectivity.Tethering.sendTetherStateChangedBroadcast()V
com.android.server.connectivity.Vpn.access$600(Lcom/android/server/connectivity/Vpn;Lcom/android/internal/net/VpnConfig;Ljava/lang/String;Landroid/graphics/Bitmap;)V
com.android.server.DeviceStorageMonitorService.checkMemory(Z)V
com.android.server.input.InputManagerService.deliverInputDevicesChanged([Landroid/view/InputDevice;)V
com.android.server.ThrottleService$MyHandler.checkThrottleAndPostNotification(J)V
com.android.server.usb.UsbDeviceManager$UsbHandler.setAdbEnabled(Z)V
com.android.server.usb.UsbDeviceManager$UsbHandler.updateState(Ljava/lang/String;)V
com.android.server.usb.UsbDeviceManager.systemReady()V
com.android.server.WifiService.checkAndSetNotification()V
com.android.server.WifiService.resetNotification()V
com.android.systemui.screenshot.GlobalScreenshot.takeScreenshot(Ljava/lang/Runnable;ZZ)V
com.android.systemui.screenshot.GlobalScreenshot.saveScreenshotInWorkerThread(Ljava/lang/Runnable;)V
com.android.systemui.screenshot.SaveImageInBackgroundTask.onPostExecute(Ljava/lang/Object;)V
com.android.systemui.usb.StorageNotification.onStorageStateChangedAsync(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.systemui.usb.StorageNotification.updateUsbMassStorageNotification(Z)V
android.net.wifi.WifiWatchdogStateMachine$WalledGardenCheckState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState.processMessage(Landroid/os/Message;)Z
com.android.contacts.vcard.ProcessorBase.run()V
com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
com.android.contacts.vcard.VCardService.handleCancelRequest(Lcom/android/contacts/vcard/CancelRequest;Lcom/android/contacts/vcard/VCardImportExportListener;)V
com.android.contacts.vcard.VCardService.handleExportRequest(Lcom/android/contacts/vcard/ExportRequest;Lcom/android/contacts/vcard/VCardImportExportListener;)V
com.android.contacts.vcard.ImportProcessor.run()V
com.android.contacts.vcard.ImportProcessor.runInternal()V
com.android.contacts.vcard.ImportProcessor.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.VCardService.handleImportRequest(Ljava/util/List;Lcom/android/contacts/vcard/VCardImportExportListener;)V
com.android.server.net.NetworkPolicyManagerService$10.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkPolicyManagerService$4.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkPolicyManagerService.access$1000(Lcom/android/server/net/NetworkPolicyManagerService;Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkPolicyManagerService.ensureActiveMobilePolicyLocked()V
com.android.server.net.NetworkPolicyManagerService.access$800(Lcom/android/server/net/NetworkPolicyManagerService;Landroid/net/NetworkTemplate;I)V
android.net.INetworkPolicyManager$Stub$Proxy.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
android.net.INetworkPolicyManager$Stub.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
android.net.INetworkPolicyManager$Stub$Proxy.setRestrictBackground(Z)V
android.net.INetworkPolicyManager$Stub.setRestrictBackground(Z)V
com.android.server.net.NetworkPolicyManagerService$5.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.ServerThread$1.run()V
android.content.SyncManager$SyncHandler.maybeStartNextSyncLocked()J
android.content.SyncManager$SyncHandler.cancelActiveSyncLocked(Landroid/accounts/Account;ILjava/lang/String;)V
android.content.SyncManager$ActiveSyncContext.onServiceDisconnected(Landroid/content/ComponentName;)V
com.android.bluetooth.opp.BluetoothOppNotification$NotificationUpdateThread.run()V
com.android.browser.Tab$3.onExceededDatabaseQuota(Ljava/lang/String;Ljava/lang/String;JJJLandroid/webkit/WebStorage$QuotaUpdater;)V
com.android.browser.Tab$3.onReachedMaxAppCacheSize(JJLandroid/webkit/WebStorage$QuotaUpdater;)V
com.android.calendar.alerts.AlertService.generateAlerts(Landroid/content/Context;Lcom/android/calendar/alerts/NotificationMgr;Landroid/content/SharedPreferences;Landroid/database/Cursor;JI)Z
com.android.calendar.alerts.AlertService.postNotification(Lcom/android/calendar/alerts/AlertService$NotificationInfo;Ljava/lang/String;Landroid/content/Context;ZLcom/android/calendar/alerts/AlertService$NotificationPrefs;Lcom/android/calendar/alerts/NotificationMgr;I)V
com.android.deskclock.AlarmAlert.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.deskclock.AlarmAlertFullScreen$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.deskclock.AlarmAlertFullScreen$2.onClick(Landroid/view/View;)V
com.android.deskclock.AlarmAlert.access$000(Lcom/android/deskclock/AlarmAlertFullScreen;)V
com.android.deskclock.AlarmReceiver$1.run()V
com.android.email.service.AttachmentDownloadService$DownloadSet.endDownload(JI)V
com.android.email.MessagingController.sendPendingMessagesSynchronous(Lcom/android/emailcommon/provider/Account;J)V
com.android.email.MessagingController.synchronizeMailboxSynchronous(Lcom/android/emailcommon/provider/Account;Lcom/android/emailcommon/provider/Mailbox;)V
com.android.email.service.AccountService$1.notifyLoginFailed(J)V
com.android.email.SecurityPolicy.onPasswordExpiring(Landroid/content/Context;)V
com.android.email.SecurityPolicy.policiesRequired(J)V
com.android.email.SecurityPolicy.setAccountPolicy(JLcom/android/emailcommon/provider/Policy;Ljava/lang/String;)V
com.android.server.location.GpsLocationProvider.reportNiNotification(IIIIILjava/lang/String;Ljava/lang/String;IILjava/lang/String;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.pollStateDone()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.mms.transaction.RetryScheduler.scheduleRetry(Landroid/net/Uri;)V
com.android.mms.transaction.SmsReceiverService.handleBootCompleted()V
com.android.mms.transaction.SmsReceiverService.messageFailedToSend(Landroid/net/Uri;I)V
com.android.mms.transaction.MessagingNotification$3.onPostExecute(Ljava/lang/Integer;)V
com.android.mms.transaction.MessageStatusService.onHandleIntent(Landroid/content/Intent;)V
com.android.mms.transaction.MessagingNotification$1.run()V
com.android.mms.transaction.SmsReceiverService.handleSmsReceived(Landroid/content/Intent;I)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.nfc.P2pLinkManager$2.doGet(ILandroid/nfc/NdefMessage;)Lcom/android/nfc/snep/SnepMessage;
com.android.nfc.handover.HandoverManager$HandoverTransfer.cancel()V
com.android.nfc.handover.HandoverManager$HandoverTransfer.finishTransfer(ZLandroid/net/Uri;Ljava/lang/String;)V
com.android.nfc.handover.HandoverManager$HandoverTransfer.onScanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
com.android.nfc.handover.HandoverManager$HandoverTransfer.processFiles()V
com.android.nfc.handover.HandoverManager$HandoverTransfer.updateFileProgress(F)V
com.android.phone.EmergencyCallbackModeService$3.onTick(J)V
com.android.phone.EmergencyCallbackModeService.access$000(Lcom/android/phone/EmergencyCallbackModeService;Landroid/os/AsyncResult;)V
com.android.phone.EmergencyCallbackModeService.onCreate()V
com.android.phone.CallNotifier.onCdmaCallWaitingReject()V
com.android.phone.CallNotifier.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.phone.PhoneApp.handleServiceStateChanged(Landroid/content/Intent;)V
com.android.phone.CallNotifier.access$100(Lcom/android/phone/CallNotifier;Z)V
com.android.phone.InCallScreen.onPause()V
com.android.phone.InCallScreen.onResume()V
com.android.phone.NotificationMgr.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.NotificationMgr.updateNotificationsAtStartup()V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.CallNotifier.showIncomingCall()V
com.android.phone.CallNotifier.access$000(Lcom/android/phone/CallNotifier;Z)V
com.android.phone.CallNotifier.sendMwiChangedDelayed(J)V
com.android.providers.downloads.DownloadNotification.notificationForCompletedDownload(JLjava/lang/String;IIJ)V
com.android.providers.downloads.DownloadNotification.updateActiveNotification(Ljava/util/Collection;)V
com.android.server.connectivity.Tethering.access$900(Lcom/android/server/connectivity/Tethering;)V
com.android.server.connectivity.Vpn$LegacyVpnRunner.execute()V
com.android.server.DeviceStorageMonitorService.access$000(Lcom/android/server/DeviceStorageMonitorService;Z)V
com.android.server.DeviceStorageMonitorService.<init>(Landroid/content/Context;)V
com.android.server.input.InputManagerService.access$400(Lcom/android/server/input/InputManagerService;[Landroid/view/InputDevice;)V
com.android.server.ThrottleService$MyHandler.onPollAlarm()V
com.android.server.usb.UsbDeviceManager$UsbHandler.<init>(Lcom/android/server/usb/UsbDeviceManager;Landroid/os/Looper;)V
com.android.server.usb.UsbDeviceManager$1.onUEvent(Landroid/os/UEventObserver$UEvent;)V
com.android.server.usb.UsbService.systemReady()V
com.android.server.WifiService.access$1500(Lcom/android/server/WifiService;)V
com.android.server.WifiService.access$1300(Lcom/android/server/WifiService;)V
com.android.systemui.screenshot.GlobalScreenshot.access$000(Lcom/android/systemui/screenshot/GlobalScreenshot;Ljava/lang/Runnable;)V
com.android.systemui.usb.StorageNotification.access$100(Lcom/android/systemui/usb/StorageNotification;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.systemui.usb.StorageNotification.onUsbMassStorageConnectionChangedAsync(Z)V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
com.android.contacts.vcard.CancelActivity.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
com.android.contacts.vcard.ExportVCardActivity$ExportConfirmationListener.onClick(Landroid/content/DialogInterface;I)V
com.android.vcard.VCardEntryHandler.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection.sendImportRequest(Ljava/util/List;)V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Lcom/android/contacts/vcard/VCardService;)Lcom/android/contacts/vcard/ImportRequest;
com.android.server.net.NetworkPolicyManagerService$8.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkPolicyManagerService.access$1300(Lcom/android/server/net/NetworkPolicyManagerService;)V
com.android.server.net.NetworkPolicyManagerService$6.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.INetworkPolicyManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.INetworkPolicyManager.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
android.net.INetworkPolicyManager.setRestrictBackground(Z)V
android.content.SyncManager.sendSyncAlarmMessage()V
android.content.SyncManager.sendCheckAlarmsMessage()V
android.content.SyncManager.sendCancelSyncsMessage(Landroid/accounts/Account;ILjava/lang/String;)V
com.android.calendar.alerts.AlertService.updateAlertNotification(Landroid/content/Context;)Z
com.android.email.service.AttachmentDownloadService$ServiceCallback.loadAttachmentStatus(JJII)V
com.android.email.MessagingController$12.run()V
com.android.email.MessagingController$13.run()V
com.android.email.MessagingController.access$400(Lcom/android/email/MessagingController;Lcom/android/emailcommon/provider/Account;Lcom/android/emailcommon/provider/Mailbox;)V
com.android.emailcommon.service.IAccountService$Stub$Proxy.notifyLoginFailed(J)V
com.android.emailcommon.service.IAccountService$Stub.notifyLoginFailed(J)V
com.android.email.SecurityPolicy.onDeviceAdminReceiverMessage(Landroid/content/Context;I)V
com.android.email.activity.setup.AccountSecurity$1.run()V
com.android.email.service.PolicyService$1.policiesRequired(J)V
com.android.email.service.PolicyService$1.setAccountPolicy(JLcom/android/emailcommon/provider/Policy;Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.pollState()V
com.android.mms.transaction.RetryScheduler.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.SmsReceiverService.access$200(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.mms.transaction.SmsReceiverService.handleSmsSent(Landroid/content/Intent;I)V
com.android.mms.transaction.SmsReceiverService.sendFirstQueuedMessage()V
com.android.mms.transaction.MessagingNotification$3.onPostExecute(Ljava/lang/Object;)V
com.android.mms.transaction.SmsReceiverService.access$100(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
com.android.nfc.snep.SnepServer$Callback.doGet(ILandroid/nfc/NdefMessage;)Lcom/android/nfc/snep/SnepMessage;
com.android.nfc.handover.HandoverManager$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.sendCdmaCallWaitingReject()V
com.android.phone.PhoneApp.access$1200(Lcom/android/phone/PhoneApp;Landroid/content/Intent;)V
com.android.phone.CallNotifier$1.onCallForwardingIndicatorChanged(Z)V
com.android.phone.NotificationMgr.init(Lcom/android/phone/PhoneApp;)Lcom/android/phone/NotificationMgr;
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallNotifier$1.onMessageWaitingIndicatorChanged(Z)V
com.android.providers.downloads.DownloadNotification.updateCompletedNotification(Ljava/util/Collection;)V
com.android.providers.downloads.DownloadProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.downloads.DownloadNotification.updateNotification(Ljava/util/Collection;)V
com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState.enter()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState.enter()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.enter()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState.enter()V
com.android.server.connectivity.Vpn$LegacyVpnRunner.run()V
com.android.server.ThrottleService$MyHandler.onPolicyChanged()V
com.android.server.ThrottleService$MyHandler.onResetAlarm()V
com.android.server.usb.UsbDeviceManager.<init>(Landroid/content/Context;Lcom/android/server/usb/UsbSettingsManager;)V
com.android.server.WifiService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.WifiService$NotificationEnabledSettingObserver.onChange(Z)V
com.android.systemui.screenshot.GlobalScreenshot$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.systemui.usb.StorageNotification$2.run()V
com.android.systemui.usb.StorageNotification.access$000(Lcom/android/systemui/usb/StorageNotification;Z)V
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
com.android.vcard.VCardEntryConstructor.onEntryEnded()V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.server.net.NetworkPolicyManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.NetworkPolicyManager.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
android.net.NetworkPolicyManager.setRestrictBackground(Z)V
android.content.SyncManager.access$900(Landroid/content/SyncManager;)V
android.content.SyncManager.access$100(Landroid/content/SyncManager;)V
android.content.SyncManager.onAccountsUpdated([Landroid/accounts/Account;)V
android.content.SyncManager.scheduleSyncOperation(Landroid/content/SyncOperation;)V
android.content.SyncManager.cancelActiveSync(Landroid/accounts/Account;ILjava/lang/String;)V
com.android.calendar.alerts.AlertActivity.onStop()V
com.android.calendar.alerts.AlertService.doTimeChanged()V
com.android.calendar.alerts.AlertService.processMessage(Landroid/os/Message;)V
com.android.calendar.alerts.SnoozeAlarmsService.onHandleIntent(Landroid/content/Intent;)V
com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy.loadAttachmentStatus(JJII)V
com.android.emailcommon.service.IEmailServiceCallback$Stub.loadAttachmentStatus(JJII)V
com.android.email.MessagingController$2.run()V
com.android.emailcommon.service.IAccountService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IAccountService.notifyLoginFailed(J)V
com.android.email.service.EmailBroadcastProcessorService.onHandleIntent(Landroid/content/Intent;)V
com.android.emailcommon.service.IPolicyService$Stub$Proxy.setAccountPolicy(JLcom/android/emailcommon/provider/Policy;Ljava/lang/String;)V
com.android.emailcommon.service.IPolicyService$Stub.setAccountPolicy(JLcom/android/emailcommon/provider/Policy;Ljava/lang/String;)V
com.android.internal.telephony.ServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.mms.transaction.SmsReceiverService.access$000(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
com.android.mms.transaction.SmsReceiverService.handleSendMessage()V
com.android.mms.transaction.SmsReceiverService.handleServiceStateChanged(Landroid/content/Intent;)V
com.android.mms.transaction.Observable.notifyObservers()V
com.android.nfc.snep.SnepServer.handleRequest(Lcom/android/nfc/snep/SnepMessenger;Lcom/android/nfc/snep/SnepServer$Callback;)Z
com.android.phone.PhoneUtils.hangupRingingCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneApp.onCreate()V
com.android.providers.downloads.DownloadService$UpdateThread.run()V
com.android.internal.util.State.enter()V
com.android.server.connectivity.Vpn.startLegacyVpn(Lcom/android/internal/net/VpnConfig;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.server.usb.UsbService.<init>(Landroid/content/Context;)V
com.android.systemui.usb.StorageNotification$1.run()V
com.android.vcard.VCardInterpreter.onEntryEnded()V
com.android.settings.net.NetworkPolicyEditor.write([Landroid/net/NetworkPolicy;)V
com.android.settings.DataUsageSummary.setRestrictBackground(Z)V
android.content.SyncManager$SyncAlarmIntentReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$4.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$9.onStatusChanged(I)V
android.content.SyncManager.<init>(Landroid/content/Context;Z)V
android.content.SyncManager.onUserRemoved(Landroid/content/Intent;)V
android.content.SyncManager$SyncHandler.scheduleReadyPeriodicSyncs()J
android.content.SyncManager$SyncHandler.runBoundToSyncAdapter(Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/ISyncAdapter;)V
android.content.SyncManager.maybeRescheduleSync(Landroid/content/SyncResult;Landroid/content/SyncOperation;)V
android.content.SyncManager.scheduleSync(Landroid/accounts/Account;ILjava/lang/String;Landroid/os/Bundle;JZ)V
com.android.emailcommon.service.IEmailServiceCallback$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IEmailServiceCallback.loadAttachmentStatus(JJII)V
com.android.email.Controller$ControllerService$1.loadAttachment(JZ)V
com.android.email.Controller$LegacyListener.loadAttachmentFailed(JJJLcom/android/emailcommon/mail/MessagingException;Z)V
com.android.email.Controller$LegacyListener.loadAttachmentFinished(JJJ)V
com.android.email.Controller$LegacyListener.loadAttachmentStarted(JJJZ)V
com.android.email.service.AccountService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.AccountServiceProxy$1.run()V
com.android.emailcommon.service.IPolicyService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IPolicyService.setAccountPolicy(JLcom/android/emailcommon/provider/Policy;Ljava/lang/String;)V
com.android.mms.transaction.SmsReceiverService.access$400(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.mms.transaction.SmsReceiverService.access$300(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;)V
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.nfc.snep.SnepServer$ConnectionThread.run()V
com.android.phone.BluetoothHandsfree$16.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.hangupRingingCall()V
com.android.phone.PhoneUtils.hangup(Lcom/android/internal/telephony/CallManager;)Z
com.android.phone.PhoneUtils.hangupRingingAndActive(Lcom/android/internal/telephony/Phone;)Z
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
com.android.server.ConnectivityService.startLegacyVpn(Lcom/android/internal/net/VpnConfig;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.vcard.VCardParserImpl_V21.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.handleNest()V
com.android.settings.net.NetworkPolicyEditor$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.settings.DataUsageSummary.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.DataUsageSummary$ConfirmRestrictFragment$1.onClick(Landroid/content/DialogInterface;I)V
android.content.ISyncStatusObserver$Stub$Proxy.onStatusChanged(I)V
android.content.ContentService.getSyncManager()Landroid/content/SyncManager;
android.content.SyncManager.access$700(Landroid/content/SyncManager;Landroid/content/Intent;)V
android.content.SyncManager$ActiveSyncContext.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
android.content.SyncManager.sendSyncFinishedOrCanceledMessage(Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/SyncResult;)V
android.content.SyncManager$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$7.onSyncRequest(Landroid/accounts/Account;ILjava/lang/String;Landroid/os/Bundle;)V
android.content.SyncManager$8.onServiceChanged(Landroid/content/SyncAdapterType;Z)V
android.content.SyncManager.scheduleLocalSync(Landroid/accounts/Account;ILjava/lang/String;)V
com.android.email.Controller$15.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.email.Controller$ServiceCallback.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.email.service.AttachmentDownloadService$ServiceCallback.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.exchange.ExchangeService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.EmailServiceProxy$1.run()V
com.android.email.Controller$15$1.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.exchange.adapter.AttachmentLoader.doProgressCallback(I)V
com.android.exchange.adapter.AttachmentLoader.doStatusCallback(I)V
com.android.exchange.ExchangeService$1$1.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.loadAttachment(JZ)V
com.android.emailcommon.service.IEmailService$Stub.loadAttachment(JZ)V
com.android.email.MessagingListener.loadAttachmentFailed(JJJLcom/android/emailcommon/mail/MessagingException;Z)V
com.android.email.MessagingListener.loadAttachmentFinished(JJJ)V
com.android.email.MessagingListener.loadAttachmentStarted(JJJZ)V
com.android.emailcommon.service.ServiceProxy$ProxyTask.run()V
com.android.email.service.PolicyService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.PolicyServiceProxy$2.run()V
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.transaction.SendTransaction.run()V
com.android.nfc.snep.SnepServer$ServerThread.run()V
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalHangup()V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.PhoneApp$NotificationBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneUtils.handleHeadsetHook(Lcom/android/internal/telephony/Phone;Landroid/view/KeyEvent;)Z
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
android.net.IConnectivityManager$Stub$Proxy.startLegacyVpn(Lcom/android/internal/net/VpnConfig;[Ljava/lang/String;[Ljava/lang/String;)V
android.net.IConnectivityManager$Stub.startLegacyVpn(Lcom/android/internal/net/VpnConfig;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.vcard.VCardParserImpl_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V40.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.parseItem()Z
com.android.vcard.VCardParserImpl_V30.handleNest()V
com.android.vcard.VCardParserImpl_V40.handleNest()V
com.android.settings.net.NetworkPolicyEditor$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.content.ContentService.<init>(Landroid/content/Context;Z)V
android.content.SyncManager$6.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager.access$1100(Landroid/content/SyncManager;Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/SyncResult;)V
android.content.SyncManager$8.onServiceChanged(Ljava/lang/Object;Z)V
com.android.email.Controller$ServiceCallbackWrapper.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.exchange.adapter.AttachmentLoader.loadAttachment()V
com.android.exchange.adapter.AttachmentLoader.readChunked(Ljava/io/InputStream;Ljava/io/OutputStream;I)V
com.android.exchange.adapter.AttachmentLoader.finishLoadAttachment()V
com.android.exchange.ExchangeService$ServiceCallbackWrapper.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.emailcommon.service.IEmailService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IEmailService.loadAttachment(JZ)V
com.android.email.GroupMessagingListener.loadAttachmentFailed(JJJLcom/android/emailcommon/mail/MessagingException;Z)V
com.android.email.GroupMessagingListener.loadAttachmentFinished(JJJ)V
com.android.email.GroupMessagingListener.loadAttachmentStarted(JJJZ)V
com.android.emailcommon.service.ServiceProxy$ProxyRunnable.run()V
com.android.mms.transaction.Transaction.process()V
com.android.nfc.snep.SnepServer.start()V
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager.startLegacyVpn(Lcom/android/internal/net/VpnConfig;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.vcard.VCardParserImpl_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseItems()V
com.android.vcard.VCardParserImpl_V30.parseItem()Z
com.android.vcard.VCardParserImpl_V40.parseItem()Z
android.content.ContentService.main(Landroid/content/Context;Z)Landroid/content/IContentService;
android.content.SyncManager$ActiveSyncContext.binderDied()V
android.content.SyncManager$ActiveSyncContext.onFinished(Landroid/content/SyncResult;)V
com.android.email.Controller$15.broadcastCallback(Lcom/android/email/Controller$ServiceCallbackWrapper;)V
com.android.exchange.EasSyncService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.adapter.ItemOperationsParser.parseProperties()V
com.android.exchange.ExchangeService$1.broadcastCallback(Lcom/android/exchange/ExchangeService$ServiceCallbackWrapper;)V
com.android.email.Controller$ControllerService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.exchange.ExchangeService$2.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.email.MessagingController$11.run()V
com.android.email.MessagingController.loadAttachment(JJJJLcom/android/email/MessagingListener;Z)V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.nfc.P2pLinkManager.enableDisable(ZZ)V
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.vpn2.VpnSettings.connect(Lcom/android/settings/vpn2/VpnProfile;)V
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseItems()V
com.android.vcard.VCardParserImpl_V40.parseItems()V
android.content.ISyncContext$Stub$Proxy.onFinished(Landroid/content/SyncResult;)V
com.android.email.Controller$15.loadAttachmentStatus(JJII)V
com.android.exchange.EasAccountService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasOutboxService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasSyncService.run()V
com.android.exchange.adapter.ItemOperationsParser.parseFetch()V
com.android.exchange.ExchangeService$1.loadAttachmentStatus(JJII)V
com.android.exchange.ExchangeService$1.sendMessageStatus(JLjava/lang/String;II)V
com.android.exchange.ExchangeService$1.syncMailboxListStatus(JII)V
com.android.exchange.ExchangeService$1.syncMailboxStatus(JII)V
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.nfc.NfcService$EnableDisableTask.disableInternal()Z
com.android.nfc.NfcService$EnableDisableTask.enableInternal()Z
com.android.nfc.NfcService$NfcAdapterService.disableNdefPush()Z
com.android.nfc.NfcService$NfcAdapterService.enableNdefPush()Z
android.bluetooth.HeadsetBase$1.run()V
com.android.settings.vpn2.VpnSettings.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.constructImportRequest([BLandroid/net/Uri;Ljava/lang/String;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.NfcImportVCardActivity.createImportRequest()Lcom/android/contacts/vcard/ImportRequest;
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.exchange.adapter.ItemOperationsParser.parseResponse()V
com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy.sendMessageStatus(JLjava/lang/String;II)V
com.android.emailcommon.service.IEmailServiceCallback$Stub.sendMessageStatus(JLjava/lang/String;II)V
com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy.syncMailboxListStatus(JII)V
com.android.emailcommon.service.IEmailServiceCallback$Stub.syncMailboxListStatus(JII)V
com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy.syncMailboxStatus(JII)V
com.android.emailcommon.service.IEmailServiceCallback$Stub.syncMailboxStatus(JII)V
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
com.android.nfc.NfcService$EnableDisableTask.doInBackground([Ljava/lang/Integer;)Ljava/lang/Void;
com.android.nfc.NfcService$EnableDisableTask.executeEeWipe()V
android.nfc.INfcAdapter$Stub$Proxy.disableNdefPush()Z
android.nfc.INfcAdapter$Stub.disableNdefPush()Z
android.nfc.INfcAdapter$Stub$Proxy.enableNdefPush()Z
android.nfc.INfcAdapter$Stub.enableNdefPush()Z
com.android.contacts.vcard.ImportProcessor.readOneVCard(Ljava/io/InputStream;ILjava/lang/String;Lcom/android/vcard/VCardInterpreter;[I)Z
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.exchange.adapter.ItemOperationsParser.parse()Z
com.android.emailcommon.service.IEmailServiceCallback.sendMessageStatus(JLjava/lang/String;II)V
com.android.emailcommon.service.IEmailServiceCallback.syncMailboxListStatus(JII)V
com.android.emailcommon.service.IEmailServiceCallback.syncMailboxStatus(JII)V
com.android.exchange.ExchangeService$2.startSync(JZ)V
com.android.exchange.ExchangeService.requestSync(Lcom/android/emailcommon/provider/Mailbox;ILcom/android/exchange/Request;)V
com.android.nfc.NfcService$EnableDisableTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.nfc.INfcAdapter.disableNdefPush()Z
android.nfc.INfcAdapter$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.INfcAdapter.enableNdefPush()Z
com.android.exchange.adapter.Parser.parse()Z
com.android.exchange.EasOutboxService.sendCallback(JLjava/lang/String;I)V
com.android.exchange.ExchangeService$1$2.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.exchange.EasAccountService.sync()V
com.android.exchange.ExchangeService$1$3.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.exchange.ExchangeService.reloadFolderListFailed(J)V
com.android.exchange.adapter.Search.searchMessages(Landroid/content/Context;JLcom/android/emailcommon/service/SearchParams;J)I
com.android.exchange.EasSyncService.setupService()Z
com.android.exchange.ExchangeService$1$4.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.startSync(JZ)V
com.android.emailcommon.service.IEmailService$Stub.startSync(JZ)V
com.android.exchange.ExchangeService.checkMailboxes()J
com.android.exchange.ExchangeService.startManualSync(JILcom/android/exchange/Request;)V
android.nfc.NfcAdapter.disableNdefPush()Z
com.android.nfc.NfcService$NfcAdapterService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.NfcAdapter.enableNdefPush()Z
com.android.exchange.EasOutboxService.sendMessage(Ljava/io/File;J)I
com.android.exchange.EasOutboxService.sendFailed(JI)V
com.android.exchange.EasAccountService.run()V
com.android.exchange.ExchangeService.reloadFolderList(Landroid/content/Context;JZ)V
com.android.exchange.ExchangeService$2.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.exchange.EasAccountService.setupService()Z
com.android.exchange.EasOutboxService.setupService()Z
com.android.emailcommon.service.IEmailService.startSync(JZ)V
com.android.exchange.ExchangeService.run()V
com.android.exchange.EasAccountService.parsePingResult(Ljava/io/InputStream;Landroid/content/ContentResolver;Ljava/util/HashMap;)I
com.android.exchange.ExchangeService.sendMessageRequest(Lcom/android/exchange/Request;)V
com.android.exchange.ExchangeService.serviceRequest(JJI)V
com.android.settings.nfc.AndroidBeam.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.exchange.EasOutboxService.run()V
com.android.exchange.adapter.AbstractSyncParser.parse()Z
com.android.exchange.ExchangeService$2.updateFolderList(J)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.emailcommon.service.IEmailService$Stub.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.emailcommon.service.EmailServiceProxy$2.run()V
com.android.email.Controller.sendPendingMessages(J)V
com.android.email.Controller.updateMailbox(JJZ)V
com.android.exchange.EasAccountService.runPingLoop()V
com.android.exchange.ExchangeService$2.loadAttachment(JZ)V
com.android.exchange.ExchangeService$2.sendMeetingResponse(JI)V
com.android.exchange.ExchangeService.serviceRequest(JI)V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.parse()Z
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser.parse()Z
com.android.emailcommon.service.IEmailService$Stub$Proxy.updateFolderList(J)V
com.android.emailcommon.service.IEmailService$Stub.updateFolderList(J)V
com.android.emailcommon.service.IEmailService.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.email.Controller.sendMessage(Lcom/android/emailcommon/provider/EmailContent$Message;)V
com.android.email.RefreshManager.sendPendingMessages(J)Z
com.android.email.service.MailService$4.run()V
com.android.email.RefreshManager.refreshMessageList(JJZZ)Z
com.android.email.service.PopImapSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.sendMeetingResponse(JI)V
com.android.emailcommon.service.IEmailService$Stub.sendMeetingResponse(JI)V
com.android.exchange.CalendarSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAlarmReceiver.handleReceive(Landroid/content/Context;)V
com.android.exchange.adapter.CalendarSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.ContactsSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.EmailSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.emailcommon.service.IEmailService.updateFolderList(J)V
com.android.emailcommon.service.EmailServiceProxy$13.run()V
com.android.email.Controller.searchMessages(JLcom/android/emailcommon/service/SearchParams;)I
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Long;
com.android.email.activity.MessageListFragment.onSendPendingMessages()V
com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl.performAction(J)V
com.android.email.RefreshManager.loadMoreMessages(JJ)Z
com.android.email.RefreshManager.refreshMessageList(JJZ)Z
com.android.email.service.PopImapSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.emailcommon.service.IEmailService.sendMeetingResponse(JI)V
com.android.exchange.CalendarSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAlarmReceiver.access$000(Lcom/android/exchange/EmailSyncAlarmReceiver;Landroid/content/Context;)V
com.android.exchange.adapter.AbstractSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.emailcommon.service.EmailServiceProxy$6.run()V
com.android.email.Controller$1.run()V
com.android.email.activity.MessagesAdapter$SearchCursorLoader.loadInBackground()Landroid/database/Cursor;
com.android.email.Controller.searchMore(J)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.emailcommon.utility.Utility$ForEachAccount.performAction(J)V
com.android.email.activity.MessageListFragment.onLoadMoreMessages()V
com.android.email.activity.MessageListFragment.onRefresh(Z)V
com.android.email.activity.setup.MailboxSettings$2.onSuccess(Ljava/lang/Void;)V
com.android.email.activity.UIControllerOnePane.onRefresh()V
com.android.email.activity.UIControllerTwoPane$RefreshTask.onSuccess(Ljava/lang/Boolean;)V
com.android.email.service.PopImapSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.emailcommon.service.EmailServiceProxy$10.run()V
com.android.email.Controller.sendMeetingResponse(JI)V
com.android.exchange.CalendarSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAlarmReceiver$1.run()V
com.android.email.activity.MessagesAdapter$MessagesCursorLoader.loadInBackground()Landroid/database/Cursor;
com.android.email.activity.MessagesAdapter$SearchCursorLoader.loadInBackground()Ljava/lang/Object;
com.android.email.Controller$7.run()V
com.android.emailcommon.utility.EmailAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.Utility$ForEachAccount.onPostExecute([Ljava/lang/Long;)V
com.android.email.activity.MessageListFragment.doFooterClick()V
com.android.email.activity.MessageListFragment.autoRefreshStaleMailbox()V
com.android.email.activity.setup.MailboxSettings$2.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.UIControllerBase.onRefresh()V
com.android.email.activity.UIControllerTwoPane$RefreshTask.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragment.onRespondToInvite(II)V
com.android.email.activity.MessagesAdapter$MessagesCursorLoader.loadInBackground()Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.Utility$ForEachAccount.onPostExecute(Ljava/lang/Object;)V
com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl.onPostExecute([Ljava/lang/Long;)V
com.android.email.activity.MessageListFragment.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.email.activity.MessageListFragment.access$2200(Lcom/android/email/activity/MessageListFragment;)V
com.android.emailcommon.utility.EmailAsyncTask.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.UIControllerBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.MessageViewFragment.onClick(Landroid/view/View;)V
com.android.emailcommon.utility.EmailAsyncTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl.onPostExecute(Ljava/lang/Object;)V
com.android.email.activity.MessageListFragment$4.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.emailcommon.utility.EmailAsyncTask$1.onSuccess(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.onPostExecute(Ljava/lang/Object;)V
com.android.email.activity.EmailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.UIControllerOnePane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.UIControllerTwoPane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.MessageViewFragmentBase.onClick(Landroid/view/View;)V
com.android.email.activity.MailboxFinder$FindMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$6.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$QuickResponseChecker.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageFileView$LoadFilenameTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageList$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment$MessageOpenTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSetupNames$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.UIControllerTwoPane$RefreshTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.UIControllerSearchTwoPane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.MessageFileViewFragment.onClick(Landroid/view/View;)V
com.android.email.activity.MailboxFinder$FindMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$6.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$LoadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$QuickResponseChecker.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageFileView$LoadFilenameTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageList$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageListFragment$MessageOpenTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSetupNames$2.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$2.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.UIControllerTwoPane$RefreshTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.server.VibratorService.cancelVibrate(Landroid/os/IBinder;)V
android.os.IVibratorService$Stub$Proxy.cancelVibrate(Landroid/os/IBinder;)V
android.os.IVibratorService$Stub.cancelVibrate(Landroid/os/IBinder;)V
android.os.IVibratorService.cancelVibrate(Landroid/os/IBinder;)V
android.os.SystemVibrator.cancel()V
android.os.Vibrator.cancel()V
com.android.deskclock.AlarmKlaxon.stop()V
com.android.phone.CallNotifier$EmergencyTonePlayerVibrator.stop()V
com.android.phone.Ringer.stopRing()V
com.android.server.VibratorService.doVibratorOff()V
com.android.deskclock.AlarmKlaxon.onDestroy()V
com.android.phone.CallNotifier$EmergencyTonePlayerVibrator.access$300(Lcom/android/phone/CallNotifier$EmergencyTonePlayerVibrator;)V
com.android.phone.CallNotifier.silenceRinger()V
com.android.phone.PhoneUtils.answerCall(Lcom/android/internal/telephony/Call;)Z
com.android.server.VibratorService.doCancelVibrateLocked()V
com.android.phone.InCallScreen.internalSilenceRinger()V
com.android.phone.PhoneInterfaceManager.silenceRingerInternal()V
com.android.phone.BluetoothHandsfree$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalAnswerCall()V
com.android.phone.PhoneInterfaceManager.answerRingingCallInternal()V
com.android.phone.PhoneUtils.answerAndEndActive(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.answerAndEndHolding(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.server.VibratorService.access$200(Lcom/android/server/VibratorService;)V
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.internalRespondViaSms()V
com.android.phone.PhoneInterfaceManager.access$100(Lcom/android/phone/PhoneInterfaceManager;)V
android.bluetooth.AtCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.PhoneInterfaceManager.access$000(Lcom/android/phone/PhoneInterfaceManager;)V
com.android.phone.InCallScreen.internalAnswerAndEnd()V
com.android.server.VibratorService$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.BluetoothAtPhonebook$1.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$7.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$9.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.providers.downloads.StorageManager.trimDatabase()V
com.android.providers.downloads.StorageManager.access$100(Lcom/android/providers/downloads/StorageManager;)V
com.android.providers.downloads.StorageManager$1.run()V
android.app.DownloadManager.getUriForDownloadedFile(J)Landroid/net/Uri;
com.android.browser.OpenDownloadReceiver.onReceiveAsync(Landroid/content/Context;J)V
com.android.emailcommon.utility.AttachmentUtilities.saveAttachment(Landroid/content/Context;Ljava/io/InputStream;Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.browser.OpenDownloadReceiver.access$000(Lcom/android/browser/OpenDownloadReceiver;Landroid/content/Context;J)V
com.android.browser.OpenDownloadReceiver$1.run()V
com.android.providers.downloads.DownloadService$1.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.IMediaScannerListener$Stub$Proxy.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.IMediaScannerListener$Stub.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.IMediaScannerListener$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.IMediaScannerListener.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.MediaScannerConnection$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.providers.downloads.DownloadService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.providers.downloads.StorageManager.discardPurgeableFiles(IJ)J
com.android.providers.downloads.StorageManager.findSpace(Ljava/io/File;JI)V
com.android.providers.downloads.StorageManager.verifySpace(ILjava/lang/String;J)V
com.android.providers.downloads.DownloadThread.writeDataToDestination(Lcom/android/providers/downloads/DownloadThread$State;[BI)V
com.android.providers.downloads.Helpers.generateSaveFile(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJZLcom/android/providers/downloads/StorageManager;)Ljava/lang/String;
com.android.providers.downloads.StorageManager.verifySpaceBeforeWritingToFile(ILjava/lang/String;J)V
com.android.providers.downloads.DownloadThread.transferData(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;[BLjava/io/InputStream;)V
com.android.providers.downloads.DownloadThread.processResponseHeaders(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;Lorg/apache/http/HttpResponse;)V
com.android.providers.downloads.DownloadThread.executeDownload(Lcom/android/providers/downloads/DownloadThread$State;Landroid/net/http/AndroidHttpClient;Lorg/apache/http/client/methods/HttpGet;)V
com.android.providers.downloads.DownloadThread.run()V
com.android.providers.downloads.DownloadInfo.getMyDownloadsUri()Landroid/net/Uri;
com.android.providers.downloads.DownloadInfo.sendIntentIfRequested()V
com.android.providers.downloads.DownloadThread.notifyDownloadCompleted(IZIZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
android.app.DownloadManager.addCompletedDownload(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;JZ)J
com.android.browser.Controller$Download.saveDataUri()V
com.android.email.activity.MessageViewFragmentBase.performAttachmentSave(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)Ljava/io/File;
com.android.browser.Controller$Download.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.email.activity.MessageFileViewFragment.performAttachmentSave(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)Ljava/io/File;
com.android.email.activity.MessageViewFragmentBase.onOpenAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragmentBase.onSaveAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragment.performAttachmentSave(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)Ljava/io/File;
com.android.email.activity.MessageFileViewFragment.onOpenAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragment.onOpenAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageFileViewFragment.onSaveAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragment.onSaveAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
android.app.DownloadManager.enqueue(Landroid/app/DownloadManager$Request;)J
com.android.browser.DownloadHandler$1.run()V
com.android.browser.FetchUrlMimeType.run()V
com.android.browser.DownloadHandler.onDownloadStartNoStream(Landroid/app/Activity;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
com.android.browser.DownloadHandler.onDownloadStart(Landroid/app/Activity;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
com.android.browser.Controller.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.WebViewController.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.Tab$4.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.Tab$7.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
android.provider.Downloads.removeAllDownloadsByPackage(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.BootReceiver.removeOldUpdatePackages(Landroid/content/Context;)V
com.android.server.BootReceiver.access$100(Lcom/android/server/BootReceiver;Landroid/content/Context;)V
com.android.server.BootReceiver$1.run()V
com.android.server.BootReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.providers.downloads.DownloadInfo.getAllDownloadsUri()Landroid/net/Uri;
com.android.providers.downloads.DownloadInfo$Reader.readRequestHeaders(Lcom/android/providers/downloads/DownloadInfo;)V
com.android.providers.downloads.DownloadInfo.notifyPauseDueToSize(Z)V
com.android.providers.downloads.DownloadInfo.startIfReady(JLcom/android/providers/downloads/StorageManager;)V
com.android.providers.downloads.DownloadService.scanFile(Lcom/android/providers/downloads/DownloadInfo;ZZ)Z
com.android.providers.downloads.DownloadThread.readFromResponse(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;[BLjava/io/InputStream;)I
com.android.providers.downloads.DownloadThread.handleEndOfStream(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;)V
com.android.providers.downloads.DownloadThread.notifyThroughDatabase(IZIZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.providers.downloads.DownloadThread.reportProgress(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;)V
com.android.providers.downloads.DownloadThread.updateDatabaseFromHeaders(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;)V
com.android.providers.downloads.DownloadInfo$Reader.newDownloadInfo(Landroid/content/Context;Lcom/android/providers/downloads/SystemFacade;)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadThread.checkConnectivity()V
com.android.providers.downloads.DownloadService.insertDownloadLocked(Lcom/android/providers/downloads/DownloadInfo$Reader;J)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadService.updateDownload(Lcom/android/providers/downloads/DownloadInfo$Reader;Lcom/android/providers/downloads/DownloadInfo;J)V
com.android.providers.downloads.DownloadService.access$700(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo;ZZ)Z
com.android.providers.downloads.DownloadService.deleteDownloadLocked(J)V
com.android.providers.downloads.DownloadThread.checkPausedOrCanceled(Lcom/android/providers/downloads/DownloadThread$State;)V
com.android.providers.downloads.DownloadService.access$600(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo$Reader;J)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadService.access$500(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo$Reader;Lcom/android/providers/downloads/DownloadInfo;J)V
com.android.providers.downloads.DownloadService.access$800(Lcom/android/providers/downloads/DownloadService;J)V
Permission:android.permission.READ_PROFILE

4 Callers:

com.android.providers.contacts.ProfileProvider.enforceReadPermission(Landroid/net/Uri;)V
com.android.providers.contacts.ProfileProvider.openAssetFile(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
com.android.providers.contacts.ProfileProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.ProfileProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
Permission:android.permission.MODIFY_AUDIO_SETTINGS

790 Callers:

android.media.AudioService.checkAudioSettingsPermission(Ljava/lang/String;)Z
android.media.AudioService.setBluetoothScoOn(Z)V
android.media.AudioService.setMode(ILandroid/os/IBinder;)V
android.media.AudioService.setSpeakerphoneOn(Z)V
android.media.AudioService.startBluetoothSco(Landroid/os/IBinder;)V
android.media.AudioService.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub$Proxy.setBluetoothScoOn(Z)V
android.media.IAudioService$Stub.setBluetoothScoOn(Z)V
android.media.IAudioService$Stub$Proxy.setMode(ILandroid/os/IBinder;)V
android.media.IAudioService$Stub.setMode(ILandroid/os/IBinder;)V
android.media.IAudioService$Stub$Proxy.setSpeakerphoneOn(Z)V
android.media.IAudioService$Stub.setSpeakerphoneOn(Z)V
android.media.IAudioService$Stub$Proxy.startBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub.startBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub$Proxy.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.IAudioService.setBluetoothScoOn(Z)V
android.media.IAudioService.setMode(ILandroid/os/IBinder;)V
android.media.IAudioService.setSpeakerphoneOn(Z)V
android.media.IAudioService.startBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.AudioService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.AudioManager.setBluetoothScoOn(Z)V
android.media.AudioManager.setMode(I)V
android.media.AudioManager.setSpeakerphoneOn(Z)V
android.media.AudioManager.startBluetoothSco()V
android.media.AudioManager.stopBluetoothSco()V
com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread.connectSco()V
com.android.phone.BluetoothHandsfree$ScoSocketConnectThread.connectSco()V
com.android.phone.BluetoothHandsfree.closeConnectedSco()V
com.android.internal.telephony.CallManager.setAudioMode()V
android.net.sip.SipAudioCall.setSpeakerMode(Z)V
com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl.setSpeakerPhoneOn(Z)V
com.android.phone.PhoneUtils.turnOnSpeaker(Landroid/content/Context;ZZ)V
com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread.run()V
com.android.phone.BluetoothHandsfree$ScoSocketConnectThread.run()V
com.android.phone.BluetoothHandsfree.access$1300(Lcom/android/phone/BluetoothHandsfree;)V
com.android.phone.BluetoothHandsfree.audioOff()V
com.android.phone.PhoneUtils.setAudioMode(Lcom/android/internal/telephony/CallManager;)V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$PlaybackView.setSpeakerPhoneOn(Z)V
com.android.phone.CallNotifier.resetAudioStateAfterDisconnect()V
com.android.phone.InCallScreen.switchInCallAudio(Lcom/android/phone/InCallScreen$InCallAudioMode;)V
com.android.phone.InCallScreen.toggleBluetooth()V
com.android.phone.InCallScreen.toggleSpeaker()V
com.android.phone.OtaUtils.setSpeaker(Z)V
com.android.phone.PhoneUtils.activateSpeakerIfDocked(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.PhoneUtils.answerCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.placeCall(Landroid/content/Context;Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/net/Uri;ZLandroid/net/Uri;)I
com.android.phone.PhoneUtils.restoreSpeakerMode(Landroid/content/Context;)V
com.android.phone.BluetoothHandsfree.onBluetoothEnabled()V
com.android.phone.BluetoothHandsfree.connectScoThread()V
com.android.phone.BluetoothHandsfree$ScoSocketConnectThread.shutdown()V
com.android.phone.BluetoothHandsfree$SignalScoCloseThread.shutdown()V
com.android.phone.BluetoothHandsfree$26.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.handlePreciseCallStateChange(ZLcom/android/internal/telephony/Connection;)V
com.android.phone.BluetoothHandsfree.stopVoiceRecognition()Z
com.android.phone.BluetoothHandsfree.terminateScoUsingVirtualVoiceCall()Z
com.android.phone.BluetoothHandsfree$DebugThread.run()V
com.android.phone.BluetoothHandsfree.disconnectHeadset()V
com.android.phone.BluetoothHandsfree.onBluetoothDisabled()V
com.android.phone.BluetoothHandsfree.userWantsAudioOff()V
com.android.phone.BluetoothHandsfree$SignalScoCloseThread.run()V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp.onCreate()V
com.android.phone.PhoneUtils.setAudioMode()V
com.android.phone.PhoneUtils.switchHoldingAndActive(Lcom/android/internal/telephony/Call;)V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$SpeakerphoneListener.onClick(Landroid/view/View;)V
com.android.contacts.voicemail.VoicemailPlaybackPresenter.postSuccessfulPrepareActions()V
com.android.phone.CallNotifier.access$1000(Lcom/android/phone/CallNotifier;)V
com.android.phone.CallNotifier.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallTouchUi.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.phone.InCallTouchUi.handleAudioButtonClick()V
com.android.phone.OtaUtils.cleanOtaScreen(Z)V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.OtaUtils.onClickOtaSpeakerButton()V
com.android.phone.BluetoothHandsfree$16.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalAnswerCall()V
com.android.phone.PhoneInterfaceManager.answerRingingCallInternal()V
com.android.phone.PhoneUtils.answerAndEndActive(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.answerAndEndHolding(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.handleHeadsetHook(Lcom/android/internal/telephony/Phone;Landroid/view/KeyEvent;)Z
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OtaUtils.startNonInteractiveOtasp(Landroid/content/Context;)I
com.android.phone.BluetoothHeadsetService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.BluetoothHeadsetService.onStart(Landroid/content/Intent;I)V
com.android.phone.BluetoothHandsfree.audioOn()Z
com.android.phone.BluetoothHandsfree.access$3200(Lcom/android/phone/BluetoothHandsfree;)V
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.access$1800(Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState;ZLcom/android/internal/telephony/Connection;)V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.<init>(Lcom/android/phone/BluetoothHandsfree;)V
com.android.phone.BluetoothHeadsetService$6.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree$4.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.redial()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.initiateScoUsingVirtualVoiceCall()Z
com.android.phone.BluetoothHeadsetService$6.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree.startDebug()V
com.android.phone.BluetoothHeadsetService.setState(Landroid/bluetooth/BluetoothDevice;I)V
com.android.phone.BluetoothHeadsetService.onDestroy()V
com.android.phone.InCallScreen.disconnectBluetoothAudio()V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.Ringer.stopRing()V
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.InCallScreen.internalResolveIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.PhoneUtils.mergeCalls(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.PhoneUtils.sendEmptyFlash(Lcom/android/internal/telephony/Phone;)V
com.android.contacts.voicemail.VoicemailPlaybackPresenter.access$700(Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter;)V
com.android.phone.CallNotifier$InCallTonePlayer.run()V
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.checkOtaspStateOnResume()Z
com.android.phone.InCallScreen.onStop()V
com.android.phone.InCallScreen.setInCallScreenMode(Lcom/android/phone/InCallUiState$InCallScreenMode;)V
com.android.phone.PhoneApp.clearOtaState()V
com.android.phone.OtaUtils.onClickHandler(I)V
android.bluetooth.AtCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.PhoneInterfaceManager.access$000(Lcom/android/phone/PhoneInterfaceManager;)V
com.android.phone.InCallScreen.internalAnswerAndEnd()V
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.InCallScreenShowActivation.onCreate(Landroid/os/Bundle;)V
com.android.phone.BluetoothHandsfree$16.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.startVoiceRecognition()Z
com.android.phone.BluetoothHandsfree.connectHeadset(Landroid/bluetooth/HeadsetBase;I)V
com.android.phone.BluetoothHandsfree.userWantsAudioOn()V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.scoClosed()V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.<init>(Lcom/android/phone/BluetoothHandsfree;Lcom/android/phone/BluetoothHandsfree$1;)V
android.bluetooth.IBluetoothHeadset$Stub$Proxy.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree.access$6000(Lcom/android/phone/BluetoothHandsfree;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHeadsetService$6.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService.access$2000(Lcom/android/phone/BluetoothHeadsetService;Landroid/bluetooth/BluetoothDevice;I)V
com.android.phone.BluetoothHeadsetService.getSdpRecordsAndConnect(Landroid/bluetooth/BluetoothDevice;)V
com.android.phone.CallNotifier.silenceRinger()V
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.onNewIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.phone.PhoneUtils.mergeCalls()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$2.onPostExecute(Ljava/lang/Exception;)V
com.android.phone.CallNotifier.onNewRingingConnection(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onRingbackTone(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.onResume()V
com.android.phone.InCallScreen.endInCallScreenSession(Z)V
com.android.phone.InCallScreen.handleOtaCallEnd()V
com.android.phone.InCallScreen.onBackPressed()V
com.android.phone.InCallScreen.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.resetInCallScreenMode()V
com.android.phone.InCallScreen.updateManageConferencePanelIfNecessary()V
com.android.phone.CallNotifier.ignoreAllIncomingCalls(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.doReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.initForNewRadioTechnology()V
com.android.phone.BluetoothAtPhonebook$1.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$7.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$9.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
android.bluetooth.AtCommandHandler.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHeadsetService$6.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen.connectBluetoothAudio()V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.access$4300(Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState;)V
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CallManager;)V
android.bluetooth.IBluetoothHeadset.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.phone.BluetoothHandsfree$10.handleActionCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.IBluetoothHeadset$Stub$Proxy.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService.access$1500(Lcom/android/phone/BluetoothHeadsetService;Landroid/bluetooth/BluetoothDevice;)V
com.android.phone.InCallScreen.internalSilenceRinger()V
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneInterfaceManager.silenceRingerInternal()V
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$2.onPostExecute(Ljava/lang/Object;)V
com.android.phone.InCallScreen.bailOutAfterErrorDialog()V
com.android.phone.InCallScreen.endInCallScreenSession()V
com.android.phone.PhoneApp.dismissCallScreen()V
com.android.phone.InCallScreen.access$500(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.updateAfterRadioTechnologyChange()V
com.android.phone.PhoneApp.clearInCallScreenMode()V
com.android.phone.InCallScreen.updateScreen()V
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.access$1100(Lcom/android/phone/PhoneApp;)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.phone.BluetoothHandsfree$10.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleTestCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.IBluetoothHeadset$Stub$Proxy.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.HeadsetBase$1.run()V
com.android.phone.BluetoothHandsfree.init(Landroid/content/Context;Lcom/android/internal/telephony/CallManager;)Lcom/android/phone/BluetoothHandsfree;
android.bluetooth.BluetoothHeadset.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.IBluetoothHeadset.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen.internalRespondViaSms()V
com.android.phone.PhoneInterfaceManager.access$100(Lcom/android/phone/PhoneInterfaceManager;)V
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.access$2300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.addVoiceMailNumberPanel()V
com.android.phone.InCallScreen.delayedCleanupAfterDisconnect()V
com.android.phone.InCallScreen.dontAddVoiceMailNumber()V
com.android.phone.InCallScreen.onMMICancel()V
com.android.phone.InCallScreen.onMMIComplete(Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.InCallScreen.onPause()V
com.android.phone.OtaUtils.otaShowHome()V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.InCallScreen.syncWithPhoneState()Lcom/android/phone/InCallScreen$SyncWithPhoneStateStatus;
com.android.phone.InCallScreen.access$600(Lcom/android/phone/InCallScreen;)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
android.bluetooth.IBluetoothHeadset.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.media.AudioService$2.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
android.media.AudioService.disconnectBluetoothSco(I)V
com.android.voicedialer.VoiceDialerActivity.onDestroy()V
android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.media.AudioService$ScoClient.requestScoState(I)V
android.bluetooth.IBluetoothHeadset.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen$12.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$13.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.InCallScreen.access$1100(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1200(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$800(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$900(Lcom/android/phone/InCallScreen;Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.onClickOtaActivateNextButton()V
com.android.phone.OtaUtils.otaShowActivateScreen()V
com.android.phone.InCallScreen.showPausePromptDialog(Lcom/android/internal/telephony/Connection;Ljava/lang/String;)V
com.android.phone.InCallScreen.requestUpdateScreen()V
com.android.phone.InCallScreen.requestUpdateBluetoothIndication()V
com.android.phone.InCallScreen.requestCloseOtaFailureNotice(J)V
com.android.phone.InCallScreen.requestCloseSpcErrorNotice(J)V
com.android.phone.InCallScreen.requestRemoveProviderInfoWithDelay()V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
android.bluetooth.BluetoothHeadset.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.media.AudioService.access$1300(Landroid/media/AudioService;I)V
android.media.AudioService$ScoClient.clearCount(Z)V
android.media.AudioService$ScoClient.decCount()V
android.media.AudioService$ScoClient.incCount()V
android.bluetooth.BluetoothHeadset.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen$14.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$15.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.OtaUtils.onClickOtaTryAgainButton()V
com.android.phone.OtaUtils.onOtaCloseFailureNotice()V
com.android.phone.OtaUtils.otaShowProperScreen()V
com.android.phone.InCallScreen.handlePostOnDialChars(Landroid/os/AsyncResult;C)V
com.android.phone.InCallScreen.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp.updateInCallScreen()V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureNotice(I)V
com.android.phone.OtaUtils.otaShowSpcErrorNotice(I)V
com.android.phone.CallCard.updateCallStateWidgets(Lcom/android/internal/telephony/Call;)V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.voicedialer.VoiceDialerActivity.updateBluetoothParameters(Z)V
android.bluetooth.BluetoothDeviceProfileState.handleIncomingConnection(IZ)Z
android.media.AudioService$SetModeDeathHandler.binderDied()V
android.media.AudioService$ScoClient.binderDied()V
android.media.AudioService.clearAllScoClients(IZ)V
android.bluetooth.BluetoothDeviceProfileState.processCommand(I)Z
com.android.phone.InCallScreen.onDialerClose(Z)V
com.android.phone.InCallScreen.access$1000(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;C)V
com.android.phone.InCallScreen.access$400(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.EmergencyCallHelper.cleanup()V
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowProgramFailure(I)V
com.android.phone.OtaUtils.onOtaProvisionStatusChanged(Landroid/os/AsyncResult;)V
com.android.phone.CallCard.displayMainCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.voicedialer.VoiceDialerActivity.access$2200(Lcom/android/voicedialer/VoiceDialerActivity;Z)V
android.bluetooth.BluetoothDeviceProfileState.access$6700(Landroid/bluetooth/BluetoothDeviceProfileState;IZ)Z
android.bluetooth.BluetoothDeviceProfileState.processIncomingConnectCommand(I)V
android.media.AudioService$AudioServiceBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.media.AudioService.resetBluetoothSco()V
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.enter()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.enter()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.enter()V
com.android.phone.DTMFTwelveKeyDialer.onDialerClose(Z)V
com.android.phone.OtaUtils.otaShowSuccessFailure()V
com.android.phone.PhoneApp.handleOtaspEvent(Landroid/os/Message;)V
com.android.phone.CallCard.updateForegroundCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateNoCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateRingingCall(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.voicedialer.VoiceDialerActivity$1.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
com.android.voicedialer.VoiceDialerActivity$VoiceDialerBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.processMessage(Landroid/os/Message;)Z
android.media.AudioService.access$5900(Landroid/media/AudioService;)V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
com.android.internal.util.State.enter()V
com.android.phone.DTMFTwelveKeyDialer.closeDialer(Z)V
com.android.phone.CallCard.updateState(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
com.android.phone.DTMFTwelveKeyDialer.clearInCallScreenReference()V
com.android.phone.InCallScreen.closeDialpadInternal(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureDialog()V
com.android.phone.OtaUtils.otaShowProgramSuccessDialog()V
com.android.phone.InCallScreen.updateIncomingCallWidgetHint(II)V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
com.android.phone.InCallScreen.onDestroy()V
com.android.phone.InCallScreen.onOpenCloseDialpad()V
com.android.phone.InCallTouchUi.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
android.media.AudioManager.isBluetoothA2dpOn()Z
android.inputmethodservice.KeyboardView.sendAccessibilityEventForUnicodeCharacter(II)V
com.android.musicfx.ActivityMusic$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.musicfx.ActivityMusic.onResume()V
android.inputmethodservice.KeyboardView.showPreview(I)V
com.android.internal.widget.PasswordEntryKeyboardView.sendAccessibilityEventForUnicodeCharacter(II)V
android.inputmethodservice.KeyboardView.onModifiedTouchEvent(Landroid/view/MotionEvent;Z)Z
android.inputmethodservice.KeyboardView.openPopupIfRequired(Landroid/view/MotionEvent;)Z
android.inputmethodservice.KeyboardView.setKeyboard(Landroid/inputmethodservice/Keyboard;)V
com.android.internal.widget.PasswordEntryKeyboardView.showPreview(I)V
android.inputmethodservice.KeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.PasswordEntryKeyboardView.onModifiedTouchEvent(Landroid/view/MotionEvent;Z)Z
android.inputmethodservice.KeyboardView.access$400(Landroid/inputmethodservice/KeyboardView;Landroid/view/MotionEvent;)Z
com.android.internal.widget.PasswordEntryKeyboardView.openPopupIfRequired(Landroid/view/MotionEvent;)Z
android.inputmethodservice.KeyboardView.onLongPress(Landroid/inputmethodservice/Keyboard$Key;)Z
com.android.internal.widget.PasswordEntryKeyboardHelper.handleModeChange()V
com.android.internal.widget.PasswordEntryKeyboardHelper.handleShift()V
com.android.internal.widget.PasswordEntryKeyboardHelper.setKeyboardMode(I)V
com.android.internal.widget.PasswordEntryKeyboardView.setKeyboard(Landroid/inputmethodservice/Keyboard;)V
android.inputmethodservice.KeyboardView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.PasswordEntryKeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.PasswordEntryKeyboardView.access$400(Landroid/inputmethodservice/KeyboardView;Landroid/view/MotionEvent;)Z
com.android.internal.widget.PasswordEntryKeyboardView.onLongPress(Landroid/inputmethodservice/Keyboard$Key;)Z
com.android.internal.widget.PasswordEntryKeyboardHelper.onKey(I[I)V
com.android.internal.policy.impl.PasswordUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;)V
com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.settings.ConfirmLockPassword$ConfirmLockPasswordFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.internal.widget.PasswordEntryKeyboardView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView.createUnlockScreenFor(Lcom/android/internal/policy/impl/LockPatternKeyguardView$UnlockMode;)Landroid/view/View;
com.android.internal.policy.impl.LockPatternKeyguardView.recreateUnlockScreen(Lcom/android/internal/policy/impl/LockPatternKeyguardView$UnlockMode;)V
com.android.internal.policy.impl.LockPatternKeyguardView.updateScreen(Lcom/android/internal/policy/impl/LockPatternKeyguardView$Mode;Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.access$200(Lcom/android/internal/policy/impl/LockPatternKeyguardView;Lcom/android/internal/policy/impl/LockPatternKeyguardView$Mode;Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardWindowController;)V
com.android.internal.policy.impl.LockPatternKeyguardView.verifyUnlock()V
com.android.internal.policy.impl.LockPatternKeyguardView.wakeWhenReadyTq(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$1.run()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.forgotPattern(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.goToLockScreen()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.goToUnlockScreen()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.reportFailedUnlockAttempt()V
com.android.internal.policy.impl.LockPatternKeyguardView$4.onUserChanged(I)V
com.android.internal.policy.impl.LockPatternKeyguardViewProperties.createKeyguardView(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardWindowController;)Lcom/android/internal/policy/impl/KeyguardViewBase;
com.android.internal.policy.impl.KeyguardViewBase.verifyUnlock()V
com.android.internal.policy.impl.KeyguardViewBase.wakeWhenReadyTq(I)V
com.android.internal.policy.impl.KeyguardScreenCallback.forgotPattern(Z)V
com.android.internal.policy.impl.KeyguardScreenCallback.goToLockScreen()V
com.android.internal.policy.impl.KeyguardScreenCallback.goToUnlockScreen()V
com.android.internal.policy.impl.KeyguardScreenCallback.reportFailedUnlockAttempt()V
com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallbackImpl.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardViewProperties.createKeyguardView(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardWindowController;)Lcom/android/internal/policy/impl/KeyguardViewBase;
com.android.internal.policy.impl.KeyguardViewManager.verifyUnlock()V
com.android.internal.policy.impl.KeyguardViewManager.wakeWhenReadyTq(I)Z
com.android.internal.policy.impl.AccountUnlockScreen.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.PatternUnlockScreen$2.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.SimPukUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.SimUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimUnlockScreen$TouchInput.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.LockScreen$3.run()V
com.android.internal.policy.impl.LockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.LockScreen$GlowPadViewMethods.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$SlidingTabMethods.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.SimPukUnlockScreen$1$1.run()V
com.android.internal.policy.impl.SimUnlockScreen$1$1.run()V
com.android.internal.policy.impl.AccountUnlockScreen$1.run()V
com.android.internal.policy.impl.PasswordUnlockScreen.verifyPasswordAndUnlock()V
com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener.onPatternDetected(Ljava/util/List;)V
com.android.internal.policy.impl.KeyguardStatusViewManager$1.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallback.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardViewMediator$1.onUserChanged(I)V
com.android.internal.policy.impl.LockScreen$1.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardViewManager.show()V
com.android.internal.policy.impl.KeyguardViewMediator.handleVerifyUnlock()V
com.android.internal.policy.impl.KeyguardViewMediator.handleWakeWhenReady(I)V
com.android.internal.widget.SlidingTab$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.PasswordUnlockScreen.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.internal.widget.LockPatternView$OnPatternListener.onPatternDetected(Ljava/util/List;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.handleUserChanged(I)V
com.android.internal.policy.impl.KeyguardViewMediator.handleShow()V
com.android.internal.policy.impl.KeyguardViewMediator.access$1500(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1800(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.widget.SlidingTab.dispatchTriggerEvent(I)V
com.android.internal.widget.LockPatternView.notifyPatternDetected()V
com.android.internal.policy.impl.KeyguardViewMediator.access$1200(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.resetStateLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.verifyUnlockLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.showLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.hideLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewMediator.notifyScreenOffLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.notifyScreenOnLocked(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardViewMediator.wakeWhenReadyLocked(I)V
com.android.internal.widget.SlidingTab.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.LockPatternView.handleActionUp(Landroid/view/MotionEvent;)V
com.android.internal.policy.impl.KeyguardViewMediator.onScreenTurnedOff(I)V
com.android.internal.policy.impl.KeyguardViewMediator.onSimStateChanged(Lcom/android/internal/telephony/IccCard$State;)V
com.android.internal.policy.impl.KeyguardViewMediator.onUserSwitched(I)V
com.android.internal.policy.impl.KeyguardViewMediator.setKeyguardEnabled(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.verifyUnlock(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.KeyguardViewMediator.doKeyguardLocked()V
com.android.internal.policy.impl.KeyguardViewCallback.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewMediator.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewMediator.onScreenTurnedOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardViewMediator.onWakeKeyWhenKeyguardShowingTq(IZ)Z
com.android.internal.policy.impl.KeyguardViewMediator.onWakeMotionWhenKeyguardShowingTq()Z
com.android.internal.widget.LockPatternView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.PhoneWindowManager.screenTurnedOff(I)V
com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback.onSimStateChanged(Lcom/android/internal/telephony/IccCard$State;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$300(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.policy.impl.PhoneWindowManager.enableKeyguard(Z)V
com.android.internal.policy.impl.PhoneWindowManager.exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.PhoneWindowManager.launchHomeFromHotKey()V
com.android.internal.policy.impl.KeyguardViewMediator.access$700(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.onSystemReady()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewCallback.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewMediator.adjustUserActivityLocked()V
com.android.internal.policy.impl.PhoneWindowManager.showGlobalActionsDialog()V
com.android.internal.policy.impl.PhoneWindowManager.screenTurningOn(Landroid/view/WindowManagerPolicy$ScreenOnListener;)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.notifyLidSwitchChanged(JZ)V
com.android.internal.policy.impl.PhoneWindowManager.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.internal.widget.LockPatternView.onHoverEvent(Landroid/view/MotionEvent;)Z
android.view.WindowManagerPolicy.screenTurnedOff(I)V
com.android.internal.policy.impl.PhoneWindowManager.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.handleSimStateChange(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimArgs;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.registerSimStateCallback(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimStateCallback;)V
com.android.internal.policy.impl.KeyguardViewMediator$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.view.WindowManagerPolicy.enableKeyguard(Z)V
android.view.WindowManagerPolicy.exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.KeyguardViewMediator$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.policy.impl.KeyguardViewMediator.doKeyguardTimeout()V
com.android.internal.policy.impl.PhoneWindowManager.systemReady()V
com.android.internal.policy.impl.KeyguardScreenCallback.pokeWakelock(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.takeEmergencyCallAction()V
com.android.internal.policy.impl.KeyguardViewBase.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView$3.pokeWakelock()V
com.android.internal.policy.impl.LockPatternKeyguardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.KeyguardViewMediator.handleHide()V
com.android.internal.policy.impl.KeyguardViewMediator.handleSetHidden(Z)V
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
android.view.WindowManagerPolicy.screenTurningOn(Landroid/view/WindowManagerPolicy$ScreenOnListener;)V
android.view.WindowManagerPolicy.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.interceptFallback(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Z
android.view.WindowManagerPolicy.notifyLidSwitchChanged(JZ)V
android.view.WindowManagerPolicy.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.PowerManagerService$4.run()V
android.view.WindowManagerPolicy.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.access$300(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimArgs;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.reportSimUnlocked()V
com.android.internal.policy.impl.KeyguardStatusViewManager.<init>(Landroid/view/View;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Z)V
com.android.internal.policy.impl.KeyguardStatusViewManager.onResume()V
com.android.internal.policy.impl.KeyguardViewMediator.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/PhoneWindowManager;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.LockScreen.onResume()V
com.android.server.wm.WindowManagerService$1.acquired()V
com.android.server.wm.WindowManagerService$1.released()V
com.android.server.wm.WindowManagerService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.wm.WindowManagerService.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.WindowManagerPolicy.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.PhoneWindowManager$19.run()V
android.view.WindowManagerPolicy.systemReady()V
com.android.internal.policy.impl.AccountUnlockScreen$2.run(Landroid/accounts/AccountManagerFuture;)V
com.android.internal.policy.impl.AccountUnlockScreen.asyncCheckPassword()V
com.android.internal.policy.impl.AccountUnlockScreen.onTextChanged(Ljava/lang/CharSequence;III)V
com.android.internal.policy.impl.FaceUnlock.handleCancel()V
com.android.internal.policy.impl.FaceUnlock.handlePokeWakelock(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$2.userActivity(Landroid/view/View;)V
com.android.internal.policy.impl.LockScreen$WaveViewMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener.onPatternCellAdded(Ljava/util/List;)V
com.android.internal.policy.impl.SimPukUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardScreenCallback.takeEmergencyCallAction()V
com.android.internal.policy.impl.LockPatternKeyguardView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardScreenCallback.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewMediator.access$1300(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.handleKeyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.access$2100(Lcom/android/internal/policy/impl/KeyguardViewMediator;Z)V
com.android.server.wm.InputMonitor.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.wm.InputMonitor.notifyLidSwitchChanged(JZ)V
com.android.server.wm.InputMonitor.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService$PolicyThread.run()V
com.android.internal.policy.impl.AccountUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.LockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;)V
com.android.internal.policy.impl.PatternUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;I)V
com.android.internal.policy.impl.SimPukUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.SimUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.AccountUnlockScreen.onResume()V
com.android.internal.policy.impl.PasswordUnlockScreen.onResume()V
com.android.internal.policy.impl.PatternUnlockScreen.onResume()V
com.android.internal.policy.impl.SimPukUnlockScreen.onResume()V
com.android.internal.policy.impl.SimUnlockScreen.onResume()V
com.android.internal.policy.impl.KeyguardScreen.onResume()V
android.view.IWindowManager$Stub$Proxy.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.IWindowManager$Stub.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
com.android.server.wm.InputMonitor.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.server.wm.WindowManagerService.systemReady()V
com.android.internal.policy.impl.AccountUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.widget.LockScreenWidgetCallback.userActivity(Landroid/view/View;)V
com.android.internal.widget.WaveView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.LockPatternView$OnPatternListener.onPatternCellAdded(Ljava/util/List;)V
com.android.internal.policy.impl.KeyguardStatusViewManager.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.FaceUnlock.handleServiceConnected()V
com.android.internal.policy.impl.LockScreen$GlowPadViewMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$SlidingTabMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.PasswordUnlockScreen$2.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PasswordUnlockScreen$3.afterTextChanged(Landroid/text/Editable;)V
com.android.internal.policy.impl.PasswordUnlockScreen$4.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PasswordUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimUnlockScreen.checkPin()V
com.android.internal.policy.impl.SimUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1900(Lcom/android/internal/policy/impl/KeyguardViewMediator;Z)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDone(ZZ)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDoneDrawing()V
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
android.view.WindowManagerPolicy.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.input.InputManagerService$Callbacks.notifyLidSwitchChanged(JZ)V
com.android.server.input.InputManagerService$Callbacks.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)V
com.android.internal.policy.impl.LockPatternKeyguardView.createLockScreen()Landroid/view/View;
com.android.internal.policy.impl.PatternUnlockScreen.onWindowFocusChanged(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.show()V
android.view.IWindowManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IWindowManager.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.server.ServerThread.run()V
com.android.internal.widget.TransportControlView.onClick(Landroid/view/View;)V
com.android.internal.widget.WaveView.setGrabbedState(I)V
com.android.internal.widget.LockPatternView.notifyCellAdded()V
com.android.internal.widget.SlidingTab$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDone(Z)V
com.android.internal.policy.impl.PhoneWindowManager$15.run()V
com.android.internal.policy.impl.PhoneWindowManager$9.run()V
com.android.internal.policy.impl.KeyguardViewCallback.keyguardDoneDrawing()V
com.android.server.input.InputManagerService.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.wm.InputMonitor.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.input.InputManagerService.notifyLidSwitchChanged(JZ)V
com.android.server.input.InputManagerService.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZLcom/android/server/wm/WindowManagerService$1;)V
com.android.internal.policy.impl.LockPatternKeyguardView.recreateLockScreen()V
com.android.internal.policy.impl.KeyguardViewBase.show()V
com.android.internal.policy.impl.LockPatternKeyguardView.onScreenTurnedOn()V
com.android.server.wm.WindowManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.KeyguardManager.exitKeyguardSecurely(Landroid/app/KeyguardManager$OnKeyguardExitResult;)V
com.android.server.input.InputManagerService.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.internal.widget.WaveView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.WaveView.tryTransitionToStartAttemptState(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.addCellToPattern(Lcom/android/internal/widget/LockPatternView$Cell;)V
com.android.internal.widget.SlidingTab.setGrabbedState(I)V
com.android.internal.policy.impl.KeyguardViewCallback.keyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost.dispatchDraw(Landroid/graphics/Canvas;)V
com.android.server.input.InputManagerService$Callbacks.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.wm.WindowManagerService$WMThread.run()V
com.android.internal.policy.impl.KeyguardViewBase.onScreenTurnedOn()V
com.android.systemui.statusbar.BaseStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.systemui.statusbar.phone.PhoneStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.internal.widget.WaveView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.LockPatternView.detectAndAddHit(FF)Lcom/android/internal/widget/LockPatternView$Cell;
com.android.internal.widget.SlidingTab.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.cancelGrab()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.keyguardDone(Z)V
com.android.server.input.InputManagerService.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.wm.WindowManagerService.main(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)Lcom/android/server/wm/WindowManagerService;
com.android.internal.policy.impl.KeyguardViewManager.onScreenTurnedOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.widget.LockPatternView.handleActionDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.handleActionMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.SlidingTab.onVisibilityChanged(Landroid/view/View;I)V
com.android.internal.policy.impl.KeyguardScreenCallback.keyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.handleNotifyScreenOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.FaceUnlock.handleUnlock()V
com.android.internal.policy.impl.KeyguardViewMediator.access$1700(Lcom/android/internal/policy/impl/KeyguardViewMediator;Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
android.media.AudioManager.isWiredHeadsetOn()Z
android.media.AudioManager.setMicrophoneMute(Z)V
com.android.phone.PhoneUtils.setMuteInternal(Lcom/android/internal/telephony/Phone;Z)V
com.android.phone.PhoneUtils.startNewCall(Lcom/android/internal/telephony/CallManager;)Z
com.android.phone.PhoneUtils.access$100(Lcom/android/internal/telephony/Phone;Z)V
com.android.phone.PhoneUtils.setMute(Z)V
com.android.phone.CallNotifier.onResendMute()V
com.android.phone.InCallScreen.onMuteClick()V
com.android.phone.PhoneUtils.restoreMuteState()Ljava/lang/Boolean;
android.media.AudioManager.setParameter(Ljava/lang/String;Ljava/lang/String;)V
com.android.phone.CallFeaturesSetting.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
android.media.AudioManager.setParameters(Ljava/lang/String;)V
android.server.BluetoothA2dpService.checkSinkSuspendState(I)Z
android.server.BluetoothA2dpService.onBluetoothDisable()V
android.server.BluetoothA2dpService.onBluetoothEnable()V
com.android.phone.BluetoothHandsfree$25.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.configAudioParameters()V
com.android.phone.PhoneApp.handleQueryTTYModeResponse(Landroid/os/Message;)V
com.android.phone.PhoneUtils.turnOnNoiseSuppression(Landroid/content/Context;ZZ)V
android.server.BluetoothA2dpService.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.handleSinkStateChange(Landroid/bluetooth/BluetoothDevice;II)V
android.server.BluetoothA2dpService.access$100(Landroid/server/BluetoothA2dpService;)V
android.server.BluetoothA2dpService.access$000(Landroid/server/BluetoothA2dpService;)V
android.server.BluetoothA2dpService.<init>(Landroid/content/Context;Landroid/server/BluetoothService;)V
com.android.phone.PhoneApp.access$800(Lcom/android/phone/PhoneApp;Landroid/os/Message;)V
com.android.phone.PhoneUtils.restoreNoiseSuppression(Landroid/content/Context;)V
android.bluetooth.IBluetoothA2dp$Stub$Proxy.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.access$300(Landroid/server/BluetoothA2dpService;Landroid/bluetooth/BluetoothDevice;II)V
android.server.BluetoothA2dpService.onConnectSinkResult(Ljava/lang/String;Z)V
android.server.BluetoothA2dpService.onSinkPropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothA2dpService$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.IBluetoothA2dp.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.IBluetoothA2dp.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothA2dp.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.BluetoothA2dp.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
Permission:android.permission.READ_EXTERNAL_STORAGE

26 Callers:

com.android.providers.media.MediaProvider.openFileAndEnforcePathPermissionsHelper(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
com.android.providers.media.MediaProvider.openFile(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
com.android.server.pm.PackageManagerService.getPackageGids(Ljava/lang/String;)[I
android.content.pm.IPackageManager$Stub$Proxy.getPackageGids(Ljava/lang/String;)[I
android.content.pm.IPackageManager$Stub.getPackageGids(Ljava/lang/String;)[I
android.content.pm.IPackageManager.getPackageGids(Ljava/lang/String;)[I
android.content.pm.IPackageManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ApplicationPackageManager.getPackageGids(Ljava/lang/String;)[I
com.android.server.pm.PackageManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.DevelopmentSettings$ConfirmEnforceFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.DevelopmentSettings.updateAllOptions()V
com.android.settings.DevelopmentSettings.access$100(Lcom/android/settings/DevelopmentSettings;)V
com.android.settings.DevelopmentSettings.resetDangerousOptions()V
com.android.settings.DevelopmentSettings.setPrefsEnabledState(Z)V
com.android.settings.DevelopmentSettings$ConfirmEnforceFragment$2.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.DevelopmentSettings.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.DevelopmentSettings.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.DevelopmentSettings.onResume()V
com.android.settings.DevelopmentSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.DevelopmentSettings.isPermissionEnforced(Landroid/content/Context;Ljava/lang/String;)Z
com.android.settings.DevelopmentSettings.setPermissionEnforced(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.settings.DevelopmentSettings.access$000(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.providers.media.MediaProvider.getAlbumArtOutputUri(Lcom/android/providers/media/MediaProvider$DatabaseHelper;Landroid/database/sqlite/SQLiteDatabase;JLandroid/net/Uri;)Landroid/net/Uri;
com.android.providers.media.MediaProvider.makeThumbInternal(Lcom/android/providers/media/MediaProvider$ThumbData;)Landroid/os/ParcelFileDescriptor;
com.android.providers.media.MediaProvider.access$1200(Lcom/android/providers/media/MediaProvider;Lcom/android/providers/media/MediaProvider$ThumbData;)Landroid/os/ParcelFileDescriptor;
com.android.providers.media.MediaProvider.getThumb(Lcom/android/providers/media/MediaProvider$DatabaseHelper;Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;JLandroid/net/Uri;)Landroid/os/ParcelFileDescriptor;
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS

339 Callers:

com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Browser.getAllVisitedUrls(Landroid/content/ContentResolver;)Landroid/database/Cursor;
com.android.browser.provider.SnapshotProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.browser.provider.BrowserProvider2.updateBookmarksInTransaction(Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.browser.provider.BrowserProvider2.deleteBookmarks(Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.browser.provider.BrowserProvider2.updateInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.browser.provider.BrowserProvider2.deleteInTransaction(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.browser.provider.BrowserProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.browser.provider.BrowserProvider2.updateHistoryInTransaction(Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.browser.provider.BrowserProvider2.getAccountNameAndType(J)[Ljava/lang/String;
com.android.browser.provider.BrowserProvider2.isValidParent(Ljava/lang/String;Ljava/lang/String;J)Z
com.android.browser.provider.BrowserProvider2.setParentValues(JLandroid/content/ContentValues;)Z
com.android.browser.provider.BrowserProvider2.insertInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Z)Landroid/net/Uri;
android.provider.Browser.truncateHistory(Landroid/content/ContentResolver;)V
android.provider.Browser.updateVisitedHistory(Landroid/content/ContentResolver;Ljava/lang/String;Z)V
com.android.browser.DataController$DataControllerHandler.doUpdateVisitedHistory(Ljava/lang/String;)V
android.provider.BrowserContract$SyncState.get(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)[B
com.android.browser.Bookmarks.queryCombinedForUrl(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.browser.Controller$10.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.browser.DownloadTouchIcon.doInBackground([Ljava/lang/String;)Ljava/lang/Void;
com.android.browser.Controller$10.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.DownloadTouchIcon.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.DataController$DataControllerHandler.doLoadThumbnail(Lcom/android/browser/Tab;)V
com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts.run()V
com.android.browser.AccountsChangedReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.webkit.WebIconDatabaseClassic$EventHandler.bulkRequestIcons(Landroid/os/Message;)V
android.webkit.WebIconDatabaseClassic$EventHandler.access$500(Landroid/webkit/WebIconDatabaseClassic$EventHandler;Landroid/os/Message;)V
android.webkit.WebIconDatabaseClassic$EventHandler.postMessage(Landroid/os/Message;)V
android.webkit.WebIconDatabaseClassic$EventHandler.access$900(Landroid/webkit/WebIconDatabaseClassic$EventHandler;Landroid/os/Message;)V
android.webkit.WebIconDatabaseClassic.bulkRequestIconForPageUrl(Landroid/content/ContentResolver;Ljava/lang/String;Landroid/webkit/WebIconDatabase$IconListener;)V
android.webkit.WebIconDatabaseClassic.close()V
android.webkit.WebIconDatabaseClassic.open(Ljava/lang/String;)V
android.webkit.WebIconDatabaseClassic.releaseIconForPageUrl(Ljava/lang/String;)V
android.webkit.WebIconDatabaseClassic.removeAllIcons()V
android.webkit.WebIconDatabaseClassic.requestIconForPageUrl(Ljava/lang/String;Landroid/webkit/WebIconDatabase$IconListener;)V
android.webkit.WebIconDatabaseClassic.retainIconForPageUrl(Ljava/lang/String;)V
com.android.browser.BookmarkUtils.getBookmarksUri(Landroid/content/Context;)Landroid/net/Uri;
com.android.browser.AddBookmarkPage$UpdateBookmarkTask.doInBackground([Landroid/content/ContentValues;)Ljava/lang/Void;
com.android.browser.Bookmarks.removeFromBookmarks(Landroid/content/Context;Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.BrowserBookmarksPage$LookupBookmarkCount.doInBackground([Ljava/lang/Long;)Ljava/lang/Integer;
com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask.doInBackground([Ljava/lang/Void;)Landroid/database/Cursor;
com.android.browser.DataController$DataControllerHandler.doQueryBookmarkStatus(Ljava/lang/String;Ljava/lang/Object;)V
com.android.browser.AddBookmarkPage$UpdateBookmarkTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BrowserBookmarksPage.handleContextItem(III)Z
com.android.browser.BrowserHistoryPage.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.HistoryItem.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.browser.BrowserBookmarksPage$LookupBookmarkCount.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BrowserBookmarksPage.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.BrowserBookmarksPage$2.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.provider.BrowserProvider.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
android.provider.Browser.deleteHistoryWhere(Landroid/content/ContentResolver;Ljava/lang/String;)V
android.provider.Browser.clearHistory(Landroid/content/ContentResolver;)V
android.provider.Browser.deleteHistoryTimeFrame(Landroid/content/ContentResolver;JJ)V
com.android.browser.BrowserHistoryPage$ClearHistoryTask.run()V
com.android.browser.BrowserSettings.clearHistory()V
com.android.browser.BrowserHistoryPage$3.onClick(Landroid/content/DialogInterface;I)V
com.android.browser.BrowserYesNoPreference.onDialogClosed(Z)V
com.android.internal.preference.YesNoPreference.onDialogClosed(Z)V
android.provider.Browser.canClearHistory(Landroid/content/ContentResolver;)Z
com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory.loadBookmarks()V
com.android.browser.provider.BrowserProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
android.provider.Browser.getVisitedHistory(Landroid/content/ContentResolver;)[Ljava/lang/String;
com.android.browser.Controller$5.doInBackground([Ljava/lang/Void;)[Ljava/lang/String;
com.android.browser.Controller$5.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Browser.getVisitedLike(Landroid/content/ContentResolver;Ljava/lang/String;)Landroid/database/Cursor;
android.provider.BrowserContract$Bookmarks.buildFolderUri(J)Landroid/net/Uri;
com.android.browser.AddBookmarkPage.getUriForFolder(J)Landroid/net/Uri;
com.android.browser.AddBookmarkPage.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.browser.AddBookmarkPage.onTop(Lcom/android/browser/BreadCrumbView;ILjava/lang/Object;)V
com.android.browser.BreadCrumbView$Controller.onTop(Lcom/android/browser/BreadCrumbView;ILjava/lang/Object;)V
com.android.browser.BreadCrumbView.notifyController()V
com.android.browser.view.BookmarkExpandableView.onTop(Lcom/android/browser/BreadCrumbView;ILjava/lang/Object;)V
com.android.browser.AddBookmarkPage.descendInto(Ljava/lang/String;J)V
com.android.browser.BreadCrumbView.onClick(Landroid/view/View;)V
com.android.browser.BreadCrumbView.pop(Z)V
com.android.browser.AddBookmarkPage.completeOrCancelFolderNaming(Z)V
com.android.browser.AddBookmarkPage.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.browser.BreadCrumbView.clear()V
com.android.browser.BreadCrumbView.popView()V
com.android.browser.AddBookmarkPage.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.browser.AddBookmarkPage.onClick(Landroid/view/View;)V
com.android.browser.AddBookmarkPage.setupTopCrumb()V
com.android.browser.AddBookmarkPage.onRootFolderFound(J)V
com.android.browser.AddBookmarkPage.switchToDefaultView(Z)V
com.android.browser.AddBookmarkPage.onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.browser.AddBookmarkPage.setAccount(Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.AddBookmarkPage$1.onLoadFinished(Landroid/content/Loader;Lcom/android/browser/AddBookmarkPage$EditBookmarkInfo;)V
com.android.browser.AddBookmarkPage$1.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.browser.SnapshotTab$LoadData.doInBackground([Ljava/lang/Void;)Landroid/database/Cursor;
com.android.browser.SnapshotTab$LoadData.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.provider.BrowserProvider.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.browser.BrowserBackupAgent.onRestore(Landroid/app/backup/BackupDataInput;ILandroid/os/ParcelFileDescriptor;)V
android.provider.Browser.getAllBookmarks(Landroid/content/ContentResolver;)Landroid/database/Cursor;
com.android.browser.homepages.RequestHandler.writeTemplatedIndex()V
com.android.browser.homepages.RequestHandler.doHandleRequest()V
com.android.browser.homepages.RequestHandler.run()V
com.android.browser.homepages.HomeProvider.openFile(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
com.android.browser.homepages.HomeProvider.shouldInterceptRequest(Landroid/content/Context;Ljava/lang/String;)Landroid/webkit/WebResourceResponse;
com.android.browser.SuggestionsAdapter$CombinedCursor.runQuery(Ljava/lang/CharSequence;)V
com.android.browser.SuggestionsAdapter$CursorSource.runQuery(Ljava/lang/CharSequence;)V
com.android.browser.SuggestionsAdapter$SuggestFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.browser.AddBookmarkPage$EditBookmarkInfoLoader.loadInBackground()Lcom/android/browser/AddBookmarkPage$EditBookmarkInfo;
com.android.browser.AddBookmarkPage$EditBookmarkInfoLoader.loadInBackground()Ljava/lang/Object;
android.provider.BrowserContract$SyncState.getWithUri(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)Landroid/util/Pair;
android.provider.BrowserContract$Settings.isSyncEnabled(Landroid/content/Context;)Z
android.provider.Browser.deleteFromHistory(Landroid/content/ContentResolver;Ljava/lang/String;)V
android.provider.BrowserContract$SyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts.delete(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.DataController$DataControllerHandler.doUpdateHistoryTitle(Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.Controller$PruneThumbnails.run()V
android.provider.Browser.addSearchUrl(Landroid/content/ContentResolver;Ljava/lang/String;)V
com.android.browser.IntentHandler$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.browser.IntentHandler$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.AddBookmarkPage.addFolderToCurrent(Ljava/lang/String;)J
android.provider.BrowserContract$Settings.setSyncEnabled(Landroid/content/Context;Z)V
com.android.browser.BookmarkUtils$1$1.run()V
com.android.browser.DataController$DataControllerHandler.doSaveThumbnail(Lcom/android/browser/Tab;)V
com.android.browser.DownloadTouchIcon.storeIcon(Landroid/graphics/Bitmap;)V
com.android.browser.Controller$SaveSnapshotTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Long;
com.android.browser.Controller$SaveSnapshotTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BrowserBackupAgent.addBookmark(Lcom/android/browser/BrowserBackupAgent$Bookmark;)V
android.provider.BrowserContract$SyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
android.provider.Browser.clearSearches(Landroid/content/ContentResolver;)V
com.android.browser.DataController$DataControllerHandler.handleMessage(Lcom/android/browser/DataController$DCMessage;)V
com.android.browser.DataController$DataControllerHandler.run()V
com.android.browser.DataController.<init>(Landroid/content/Context;)V
com.android.browser.DataController.getInstance(Landroid/content/Context;)Lcom/android/browser/DataController;
com.android.browser.Controller.doUpdateVisitedHistory(Lcom/android/browser/Tab;Z)V
com.android.browser.Controller.onReceivedTitle(Lcom/android/browser/Tab;Ljava/lang/String;)V
com.android.browser.Tab.deleteThumbnail()V
com.android.browser.Tab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;Landroid/os/Bundle;)V
com.android.browser.Tab.persistThumbnail()V
com.android.browser.Tab.restoreState(Landroid/os/Bundle;)V
com.android.browser.WebViewController.doUpdateVisitedHistory(Lcom/android/browser/Tab;Z)V
com.android.browser.WebViewController.onReceivedTitle(Lcom/android/browser/Tab;Ljava/lang/String;)V
com.android.browser.SnapshotTab.deleteThumbnail()V
com.android.browser.TabControl.saveState(Landroid/os/Bundle;)V
com.android.browser.Tab.removeFromTree()V
com.android.browser.Tab.updateShouldCaptureThumbnails()V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;Landroid/os/Bundle;)V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;J)V
com.android.browser.TabControl.createNewTab(Landroid/os/Bundle;Z)Lcom/android/browser/Tab;
com.android.browser.Tab.<init>(Lcom/android/browser/WebViewController;Landroid/os/Bundle;)V
com.android.browser.Tab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;)V
com.android.browser.SnapshotTab.persistThumbnail()V
com.android.browser.Tab.capture()V
com.android.browser.SnapshotTab.restoreState(Landroid/os/Bundle;)V
com.android.browser.Tab$2.doUpdateVisitedHistory(Landroid/webkit/WebView;Ljava/lang/String;Z)V
com.android.browser.Tab$3.onReceivedTitle(Landroid/webkit/WebView;Ljava/lang/String;)V
com.android.browser.Controller.createSaveState()Landroid/os/Bundle;
com.android.browser.SnapshotTab.removeFromTree()V
com.android.browser.TabControl.removeTab(Lcom/android/browser/Tab;)Z
com.android.browser.TabControl.removeParentChildRelationShips()V
com.android.browser.SnapshotTab.updateShouldCaptureThumbnails()V
com.android.browser.Tab.setController(Lcom/android/browser/WebViewController;)V
com.android.browser.XLargeUi.setUseQuickControls(Z)V
com.android.browser.TabControl.createSnapshotTab(J)Lcom/android/browser/SnapshotTab;
com.android.browser.TabControl.createNewTab(Z)Lcom/android/browser/Tab;
com.android.browser.TabControl.restoreState(Landroid/os/Bundle;JZZ)V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;Landroid/os/Bundle;)V
com.android.browser.Preloader$PreloaderSession.<init>(Lcom/android/browser/Preloader;Ljava/lang/String;)V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;)V
com.android.browser.PhoneUi.showNavScreen()V
com.android.browser.PieControl.buildTabs()V
com.android.browser.SnapshotTab.capture()V
com.android.browser.Tab.putInBackground()V
com.android.browser.Tab.postCapture()V
com.android.browser.Controller.onSaveInstanceState(Landroid/os/Bundle;)V
com.android.browser.CrashRecoveryHandler$2.run()V
com.android.browser.Controller.closeCurrentTab(Z)V
com.android.browser.Controller.removeTab(Lcom/android/browser/Tab;)V
com.android.browser.Controller.onActivityResult(IILandroid/content/Intent;)V
com.android.browser.SnapshotTab.setController(Lcom/android/browser/WebViewController;)V
com.android.browser.TabControl.addPreloadedTab(Lcom/android/browser/Tab;)V
com.android.browser.BaseUi.setUseQuickControls(Z)V
com.android.browser.XLargeUi.<init>(Landroid/app/Activity;Lcom/android/browser/UiController;)V
com.android.browser.Controller.createNewSnapshotTab(JZ)Lcom/android/browser/SnapshotTab;
com.android.browser.Controller.createNewTab(ZZZ)Lcom/android/browser/Tab;
com.android.browser.TabControl.createNewTab()Lcom/android/browser/Tab;
com.android.browser.Controller.onPreloginFinished(Landroid/os/Bundle;Landroid/content/Intent;JZ)V
com.android.browser.Preloader.getSession(Ljava/lang/String;)Lcom/android/browser/Preloader$PreloaderSession;
com.android.browser.PhoneUi.toggleNavScreen()V
com.android.browser.PieControl.onClick(Landroid/view/View;)V
com.android.browser.PieControl.access$000(Lcom/android/browser/PieControl;)V
com.android.browser.SnapshotTab.putInBackground()V
com.android.browser.TabControl.setCurrentTab(Lcom/android/browser/Tab;Z)Z
com.android.browser.SnapshotTab.postCapture()V
com.android.browser.Tab.onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V
com.android.browser.ActivityController.onSaveInstanceState(Landroid/os/Bundle;)V
com.android.browser.Controller.closeCurrentTab()V
com.android.browser.Controller.goBackOnePageOrQuit()V
com.android.browser.Controller.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.Controller.onDestroy()V
com.android.browser.Controller.showPreloadedTab(Lcom/android/browser/IntentHandler$UrlData;)Lcom/android/browser/Tab;
com.android.browser.PhoneUi.setUseQuickControls(Z)V
com.android.browser.UI.setUseQuickControls(Z)V
com.android.browser.BaseUi.<init>(Landroid/app/Activity;Lcom/android/browser/UiController;)V
com.android.browser.BrowserActivity.createController()Lcom/android/browser/Controller;
com.android.browser.UiController.createNewSnapshotTab(JZ)Lcom/android/browser/SnapshotTab;
com.android.browser.Controller.openTab(Lcom/android/browser/IntentHandler$UrlData;)Lcom/android/browser/Tab;
com.android.browser.Controller.openTab(Ljava/lang/String;ZZZLcom/android/browser/Tab;)Lcom/android/browser/Tab;
com.android.browser.Controller.access$100(Lcom/android/browser/Controller;Landroid/os/Bundle;Landroid/content/Intent;JZ)V
com.android.browser.Preloader.cancelSearchBoxPreload(Ljava/lang/String;)V
com.android.browser.Preloader.handlePreloadRequest(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;)V
com.android.browser.NavigationBarPhone.onClick(Landroid/view/View;)V
com.android.browser.SnapshotBar.onClick(Landroid/view/View;)V
com.android.browser.PieControl$1.onLayout(IIZ)V
com.android.browser.TabControl.setCurrentTab(Lcom/android/browser/Tab;)Z
com.android.browser.TabControl.recreateWebView(Lcom/android/browser/Tab;)V
com.android.browser.SnapshotTab.onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V
com.android.browser.BrowserActivity.onNewIntent(Landroid/content/Intent;)V
com.android.browser.BrowserActivity.onSaveInstanceState(Landroid/os/Bundle;)V
com.android.browser.Controller.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.Controller.closeEmptyTab()V
com.android.browser.UiController.closeCurrentTab()V
com.android.browser.Controller.onBackKey()V
com.android.browser.Controller.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.UiController.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.WebViewController.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.ActivityController.onDestroy()V
com.android.browser.PhoneUi.<init>(Landroid/app/Activity;Lcom/android/browser/UiController;)V
com.android.browser.BrowserSettings.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.browser.BrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.browser.IntentHandler.onNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.Controller.openTab(Ljava/lang/String;Lcom/android/browser/Tab;ZZ)Lcom/android/browser/Tab;
com.android.browser.Controller$2.run()V
com.android.browser.PreloadRequestReceiver.handlePreload(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.NavigationBarBase.onClick(Landroid/view/View;)V
com.android.browser.view.PieMenu$PieView$OnLayoutListener.onLayout(IIZ)V
com.android.browser.Controller.setActiveTab(Lcom/android/browser/Tab;)V
com.android.browser.Controller.reuseTab(Lcom/android/browser/Tab;Lcom/android/browser/IntentHandler$UrlData;)V
com.android.browser.ActivityController.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.Controller.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UiController.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UrlHandler.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.UrlHandler.startActivityForUrl(Lcom/android/browser/Tab;Ljava/lang/String;)Z
com.android.browser.NavScreen.onCloseTab(Lcom/android/browser/Tab;)V
com.android.browser.TabBar$TabView.closeTab()V
com.android.browser.Controller.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.WebViewController.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.SnapshotTab$LoadData.onPostExecute(Landroid/database/Cursor;)V
com.android.browser.Tab$3.onCloseWindow(Landroid/webkit/WebView;)V
com.android.browser.BrowserActivity.onDestroy()V
com.android.browser.Controller.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.openIncognitoTab()Lcom/android/browser/Tab;
com.android.browser.Controller.openTabToHomePage()Lcom/android/browser/Tab;
com.android.browser.UiController.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.UrlHandler.handleMenuClick(Lcom/android/browser/Tab;Ljava/lang/String;)Z
com.android.browser.WebViewController.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.Controller$7.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.Controller$9.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.WebViewController.openTab(Ljava/lang/String;Lcom/android/browser/Tab;ZZ)Lcom/android/browser/Tab;
com.android.browser.PreloadRequestReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.NavigationBarTablet.onClick(Landroid/view/View;)V
com.android.browser.view.BasePieView.layout(IIZFI)V
com.android.browser.Controller.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.UiController.setActiveTab(Lcom/android/browser/Tab;)V
com.android.browser.BrowserActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.ActivityController.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.NavigationBarPhone.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.NavScreen.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.Controller.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.UrlHandler$RLZTask.onPostExecute(Ljava/lang/String;)V
com.android.browser.NavScreen.access$000(Lcom/android/browser/NavScreen;Lcom/android/browser/Tab;)V
com.android.browser.TabBar$TabView.onClick(Landroid/view/View;)V
com.android.browser.ActivityController.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.Tab$4.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.Tab$7.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.SnapshotTab$LoadData.onPostExecute(Ljava/lang/Object;)V
com.android.browser.ActivityController.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.UiController.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.browser.UiController.openIncognitoTab()Lcom/android/browser/Tab;
com.android.browser.UiController.openTabToHomePage()Lcom/android/browser/Tab;
com.android.browser.NavScreen.openNewTab()V
com.android.browser.Tab$3.createWindow(ZLandroid/os/Message;)V
com.android.browser.view.PieListView.layout(IIZFI)V
com.android.browser.view.PieMenu$PieView.layout(IIZFI)V
com.android.browser.view.PieStackView.layout(IIZFI)V
com.android.browser.UiController.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.WebViewController.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.NavScreen.switchToTab(Lcom/android/browser/Tab;)V
com.android.browser.PhoneUi.hideNavScreen(IZ)V
com.android.browser.BrowserActivity.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.WebViewController.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.UrlHandler$RLZTask.onPostExecute(Ljava/lang/Object;)V
com.android.browser.NavScreen$1.onRemovePosition(I)V
com.android.browser.BrowserActivity.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.NavigationBarBase.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.TabBar.onClick(Landroid/view/View;)V
com.android.browser.NavScreen.onClick(Landroid/view/View;)V
com.android.browser.Tab$3.onCreateWindow(Landroid/webkit/WebView;ZZLandroid/os/Message;)Z
com.android.browser.Tab$3.access$1600(Lcom/android/browser/Tab$3;ZLandroid/os/Message;)V
com.android.browser.view.PieMenu.layoutPieView(Lcom/android/browser/view/PieMenu$PieView;IIF)V
com.android.browser.PieControl$TabAdapter$1.onClick(Landroid/view/View;)V
com.android.browser.Tab$3.onRequestFocus(Landroid/webkit/WebView;)V
com.android.browser.NavScreen.access$100(Lcom/android/browser/NavScreen;Lcom/android/browser/Tab;)V
com.android.browser.NavScreen$2.onLayout(IIII)V
com.android.browser.NavScreen.close(IZ)V
com.android.browser.PhoneUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.PhoneUi.showWeb(Z)V
com.android.browser.Tab$2.shouldOverrideUrlLoading(Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.NavTabScroller$OnRemoveListener.onRemovePosition(I)V
com.android.browser.NavigationBarPhone.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.NavigationBarTablet.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.UrlInputView$UrlInputListener.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.Tab$3$1.onClick(Landroid/content/DialogInterface;I)V
com.android.browser.view.PieMenu.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.browser.NavScreen$TabAdapter$1.onClick(Landroid/view/View;)V
com.android.browser.NavTabScroller$OnLayoutListener.onLayout(IIII)V
com.android.browser.NavScreen.close(I)V
com.android.browser.BaseUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.BaseUi.showWeb(Z)V
com.android.browser.NavTabScroller$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.browser.UrlInputView.finishInput(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.NavTabScroller.onLayout(ZIIII)V
com.android.browser.PhoneUi.onBackKey()Z
com.android.browser.UI.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.XLargeUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UI.showWeb(Z)V
com.android.browser.XLargeUi.showWeb(Z)V
com.android.browser.UrlInputView.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.browser.UrlInputView.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.browser.UrlInputView.onSelect(Ljava/lang/String;ILjava/lang/String;)V
com.android.browser.view.ScrollerView.onLayout(ZIIII)V
com.android.browser.BaseUi.onBackKey()Z
com.android.browser.SuggestionsAdapter$CompletionListener.onSelect(Ljava/lang/String;ILjava/lang/String;)V
com.android.browser.UrlInputView.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.browser.UI.onBackKey()Z
com.android.browser.XLargeUi.onBackKey()Z
com.android.browser.SuggestionsAdapter.onClick(Landroid/view/View;)V
com.android.browser.Bookmarks$1.updateImages(Landroid/content/ContentResolver;Ljava/lang/String;Landroid/content/ContentValues;)V
com.android.browser.Bookmarks$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.browser.Bookmarks$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.Bookmarks.addBookmark(Landroid/content/Context;ZLjava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap;J)V
com.android.browser.AddBookmarkPage$SaveBookmarkRunnable.run()V
Permission:android.permission.BATTERY_STATS

18 Callers:

com.android.server.am.BatteryStatsService.getStatistics()[B
com.android.internal.app.IBatteryStats$Stub$Proxy.getStatistics()[B
com.android.internal.app.IBatteryStats$Stub.getStatistics()[B
com.android.internal.app.IBatteryStats.getStatistics()[B
com.android.internal.app.IBatteryStats$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.fuelgauge.PowerUsageSummary.load()V
com.android.server.am.BatteryStatsService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.fuelgauge.PowerUsageSummary.refreshStats()V
com.android.settings.fuelgauge.PowerUsageSummary.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.fuelgauge.PowerUsageSummary.onResume()V
com.android.server.am.BatteryStatsService.getAwakeTimeBattery()J
com.android.internal.app.IBatteryStats$Stub$Proxy.getAwakeTimeBattery()J
com.android.internal.app.IBatteryStats$Stub.getAwakeTimeBattery()J
com.android.internal.app.IBatteryStats.getAwakeTimeBattery()J
com.android.server.am.BatteryStatsService.getAwakeTimePlugged()J
com.android.internal.app.IBatteryStats$Stub$Proxy.getAwakeTimePlugged()J
com.android.internal.app.IBatteryStats$Stub.getAwakeTimePlugged()J
com.android.internal.app.IBatteryStats.getAwakeTimePlugged()J
Permission:android.permission.READ_USER_DICTIONARY

332 Callers:

com.android.inputmethod.latin.UserDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.UserDictionary.addWordToUserDictionary(Ljava/lang/String;I)V
com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask.run()V
com.android.inputmethod.latin.WhitelistDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.addWordToUserDictionary(Ljava/lang/String;I)V
com.android.inputmethod.latin.ExpandableDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ContactsDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ExpandableDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ExpandableDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ExpandableDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ExpandableDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.UserDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.UserHistoryDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.WhitelistDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ContactsDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.Dictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.UserDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.WhitelistDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ExpandableDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.UserDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.UserHistoryDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.WhitelistDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ContactsDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.Dictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserHistoryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.WhitelistDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.loadDictionary()V
com.android.inputmethod.latin.UserDictionary.loadDictionary()V
com.android.inputmethod.latin.UserHistoryDictionary.loadDictionary()V
com.android.inputmethod.latin.WhitelistDictionary.loadDictionary()V
com.android.inputmethod.latin.AutoCorrection.isValidWord(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/CharSequence;Z)Z
com.android.inputmethod.latin.DictionaryCollection.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestions(Landroid/view/textservice/TextInfo;Ljava/lang/String;I)Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserHistoryDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.WhitelistDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ContactsDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.Dictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserHistoryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.WhitelistDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.DictionaryCollection.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.Suggest.getSuggestedWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/keyboard/ProximityInfo;I)Lcom/android/inputmethod/latin/SuggestedWords;
com.android.inputmethod.latin.ContactsDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserHistoryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;ILandroid/content/SharedPreferences;)V
com.android.inputmethod.latin.AutoCorrection.allowsToBeAutoCorrected(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/CharSequence;Z)Z
com.android.inputmethod.latin.LatinIME.pickSuggestionManuallyWhileInBatchEdit(ILjava/lang/CharSequence;IILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestions(Landroid/view/textservice/TextInfo;I)Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestionsMultiple([Landroid/view/textservice/TextInfo;IZ)[Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.DictionaryCollection.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.Suggest.getAllBigrams(Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/WordComposer;)V
com.android.inputmethod.latin.LatinIME.updateSuggestions()V
com.android.inputmethod.latin.ExpandableDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.<init>(Landroid/content/Context;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.UserHistoryDictionary.getInstance(Landroid/content/Context;Ljava/lang/String;ILandroid/content/SharedPreferences;)Lcom/android/inputmethod/latin/UserHistoryDictionary;
com.android.inputmethod.latin.AutoCorrection.hasAutoCorrectionForConsideredWord(Ljava/util/concurrent/ConcurrentHashMap;Lcom/android/inputmethod/latin/WordComposer;Ljava/util/ArrayList;Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.LatinIME.pickSuggestionManually(ILjava/lang/CharSequence;II)V
com.android.inputmethod.latin.Suggest.getBigramPredictions(Ljava/lang/CharSequence;)Lcom/android/inputmethod/latin/SuggestedWords;
com.android.inputmethod.latin.LatinIME.commitCurrentAutoCorrection(ILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.commitTyped(Landroid/view/inputmethod/InputConnection;I)V
com.android.inputmethod.latin.LatinIME.resetEntireInputState()V
com.android.inputmethod.latin.LatinIME$UIHandler.postUpdateSuggestions()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserHistoryDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.WhitelistDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.WhitelistDictionary.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.LatinIME.initSuggest()V
com.android.inputmethod.latin.AutoCorrection.computeAutoCorrectionWord(Ljava/util/concurrent/ConcurrentHashMap;Lcom/android/inputmethod/latin/WordComposer;Ljava/util/ArrayList;Ljava/lang/CharSequence;FLjava/lang/CharSequence;)Ljava/lang/CharSequence;
com.android.inputmethod.latin.suggestions.SuggestionsView$Listener.pickSuggestionManually(ILjava/lang/CharSequence;II)V
com.android.inputmethod.latin.LatinIME.updateBigramPredictions()V
com.android.inputmethod.latin.LatinIME.handleSeparator(IIII)Z
com.android.inputmethod.latin.LatinIME.handleClose()V
com.android.inputmethod.latin.LatinIME.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.inputmethod.latin.LatinIME.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.onUpdateSelection(IIIIII)V
com.android.inputmethod.latin.LatinIME.addWordToDictionary(Ljava/lang/String;)Z
com.android.inputmethod.latin.LatinIME.handleBackspaceWhileInBatchEdit(ILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.handleCharacterWhileInBatchEdit(IIIILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.onRefreshKeyboard()V
com.android.inputmethod.latin.LatinIME.onStartInputViewInternal(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.LatinIME.restartSuggestionsOnWordBeforeCursor(Landroid/view/inputmethod/InputConnection;Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.revertCommit(Landroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.switchToKeyboardView()V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.createDictAndProximity(Ljava/util/Locale;)Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.Suggest.initWhitelistAndAutocorrectAndPool(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.LatinIME.onCreate()V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.SuggestionsView.onClick(Landroid/view/View;)V
com.android.inputmethod.latin.LatinIME$UIHandler.postUpdateBigramPredictions()V
com.android.inputmethod.latin.LatinIME.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.launchSettingsClass(Ljava/lang/Class;)V
com.android.inputmethod.keyboard.KeyboardActionListener.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.suggestions.SuggestionsView$Listener.addWordToDictionary(Ljava/lang/String;)Z
com.android.inputmethod.latin.LatinIME.handleBackspace(I)V
com.android.inputmethod.latin.LatinIME.handleCharacter(IIII)V
com.android.inputmethod.latin.SubtypeSwitcher.updateSubtype(Landroid/view/inputmethod/InputMethodSubtype;)V
com.android.inputmethod.latin.LatinIME.access$300(Lcom/android/inputmethod/latin/LatinIME;Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.LatinIME.restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(Landroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.spellcheck.DictionaryPool.take()Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.Suggest.<init>(Landroid/content/Context;Ljava/io/File;JJLjava/util/Locale;)V
com.android.inputmethod.latin.Suggest.initAsynchronously(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onCustomRequest(I)Z
com.android.inputmethod.keyboard.KeyboardActionListener.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.launchDebugSettings()V
com.android.inputmethod.latin.LatinIME.launchSettings()V
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.callListenerOnCodeInput(Lcom/android/inputmethod/keyboard/Key;III)V
com.android.inputmethod.latin.suggestions.SuggestionsView.addToDictionary(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.onCurrentInputMethodSubtypeChanged(Landroid/view/inputmethod/InputMethodSubtype;)V
com.android.inputmethod.latin.SubtypeSwitcher.updateAllParameters()V
com.android.inputmethod.latin.SubtypeSwitcher.updateEnabledSubtypes()V
com.android.inputmethod.latin.LatinIME$UIHandler.onStartInputView(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.spellcheck.DictionaryPool.takeOrGetNull()Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.spellcheck.DictionaryPool.take()Ljava/lang/Object;
com.android.inputmethod.latin.Suggest.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.keyboard.KeyboardActionListener.onCustomRequest(I)Z
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onCustomRequest(I)Z
com.android.inputmethod.keyboard.LatinKeyboardView.invokeCodeInput(I)V
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.access$700(Lcom/android/inputmethod/latin/LatinIME;)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.detectAndSendKey(Lcom/android/inputmethod/keyboard/Key;II)V
com.android.inputmethod.latin.SubtypeSwitcher.init(Lcom/android/inputmethod/latin/LatinIME;)V
com.android.inputmethod.latin.SubtypeSwitcher.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.inputmethod.latin.SubtypeSwitcher.updateParametersOnStartInputView()V
com.android.inputmethod.latin.LatinIME.onStartInputView(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.keyboard.LatinKeyboardView.invokeCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onCodeInput(III)V
com.android.inputmethod.keyboard.LatinKeyboardView.onLongPress(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME$3.onClick(Landroid/content/DialogInterface;I)V
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.onRegisterKey(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.PointerTracker.onUpEventInternal()V
com.android.inputmethod.keyboard.LatinKeyboardView.openMoreKeysKeyboardIfRequired(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onCodeInput(III)V
com.android.inputmethod.keyboard.PointerTracker.startRepeatKey(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.PointerTracker.onMoveEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker.onPhantomUpEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker.onUpEvent(IIJ)V
com.android.inputmethod.keyboard.LatinKeyboardView.access$000(Lcom/android/inputmethod/keyboard/LatinKeyboardView;Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.PointerTracker.onDownEventInternal(IIJ)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.LatinKeyboardView.processMotionEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.PointerTracker.processMotionEvent(IIIJLcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointersExcept(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointersOlderThan(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startLongPressTimer(I)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startLongPressTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.PointerTracker.onDownEvent(IIJLcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler$ProcessMotionEvent.processMotionEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.latin.suggestions.SuggestionsView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointers(J)V
com.android.inputmethod.keyboard.PointerTracker.onCancelEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startLongPressTimer(I)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startLongPressTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.PointerTracker.onShowMoreKeysPanel(IILcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler.handleSuddenJumping(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardSwitcher.startLongPressTimer(I)V
com.android.inputmethod.keyboard.PointerTracker.startLongPressTimer(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.LatinKeyboardView.openMoreKeysPanel(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.LatinKeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.accessibility.AccessibilityEntityProvider.simulateKeyPress(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions.startLongPressTimer(I)V
com.android.inputmethod.accessibility.AccessibilityEntityProvider.performActionForKey(Lcom/android/inputmethod/keyboard/Key;ILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.dispatchHoverEvent(Landroid/view/MotionEvent;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.internal.KeyboardState.onPressShift()V
com.android.inputmethod.accessibility.AccessibilityEntityProvider.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onHoverKey(Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.LatinKeyboardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.internal.KeyboardState.onPressKey(IZI)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onTransitionKey(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardSwitcher.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.latin.LatinIME.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.keyboard.KeyboardActionListener.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onPressKey(I)V
com.android.inputmethod.keyboard.PointerTracker.callListenerOnPressAndCheckKeyboardLayoutChange(Lcom/android/inputmethod/keyboard/Key;)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onPressKey(I)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onPressKey(I)V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onPressKey(I)V
com.android.settings.UserDictionarySettings.createCursor(Ljava/lang/String;)Landroid/database/Cursor;
com.android.settings.UserDictionarySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.getUserDictionaryLocalesSet(Landroid/app/Activity;)Ljava/util/TreeSet;
com.android.settings.inputmethod.InputMethodAndLanguageSettings.updateUserDictionaryPreference(Landroid/preference/Preference;)V
com.android.settings.inputmethod.UserDictionaryAddWordContents.getLocalesList(Landroid/app/Activity;)Ljava/util/ArrayList;
com.android.settings.inputmethod.UserDictionaryList.createUserDictSettings(Landroid/preference/PreferenceGroup;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onResume()V
com.android.settings.inputmethod.UserDictionaryAddWordFragment.updateSpinner()V
com.android.settings.inputmethod.UserDictionaryList.onResume()V
com.android.settings.SettingsPreferenceFragment.onResume()V
com.android.settings.inputmethod.UserDictionaryAddWordFragment.onResume()V
com.android.settings.AccessibilitySettings.onResume()V
com.android.settings.accounts.AccountPreferenceBase.onResume()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onResume()V
com.android.settings.bluetooth.DeviceProfilesSettings.onResume()V
com.android.settings.DateTimeSettings.onResume()V
com.android.settings.deviceinfo.Memory.onResume()V
com.android.settings.deviceinfo.UsbSettings.onResume()V
com.android.settings.DisplaySettings.onResume()V
com.android.settings.DockSettings.onResume()V
com.android.settings.DreamSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onResume()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onResume()V
com.android.settings.inputmethod.SpellCheckersSettings.onResume()V
com.android.settings.LocationSettings.onResume()V
com.android.settings.PrivacySettings.onResume()V
com.android.settings.SecuritySettings.onResume()V
com.android.settings.SoundSettings.onResume()V
com.android.settings.users.UserDetailsSettings.onResume()V
com.android.settings.users.UserSettings.onResume()V
com.android.settings.vpn2.VpnSettings.onResume()V
com.android.settings.wifi.AdvancedWifiSettings.onResume()V
com.android.settings.wifi.p2p.WifiP2pSettings.onResume()V
com.android.settings.wifi.WifiSettings.onResume()V
com.android.settings.WirelessSettings.onResume()V
com.android.settings.accounts.AccountSyncSettings.onResume()V
com.android.settings.accounts.ManageAccountsSettings.onResume()V
com.android.settings.accounts.SyncSettings.onResume()V
com.android.settings.bluetooth.BluetoothSettings.onResume()V
com.android.settings.bluetooth.DevicePickerFragment.onResume()V
com.android.inputmethod.latin.UserBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.ContactsBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.UserBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.ContactsBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.UserBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ContactsBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary$AsyncReloadDictionaryTask.run()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.UserBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ExpandableBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ContactsBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.UserBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.UserBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.<init>(Landroid/content/Context;ILjava/util/Locale;)V
com.android.inputmethod.latin.UserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.LatinIME.resetContactsDictionary(Lcom/android/inputmethod/latin/Dictionary;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.<init>(Landroid/content/Context;ILjava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.LatinIME.loadSettings()V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.startUsingContactsDictionaryLocked()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.onCreate()V
com.android.providers.userdictionary.DictionaryBackupAgent.getDictionary()[B
com.android.providers.userdictionary.DictionaryBackupAgent.onBackup(Landroid/os/ParcelFileDescriptor;Landroid/app/backup/BackupDataOutput;Landroid/os/ParcelFileDescriptor;)V
com.android.settings.inputmethod.UserDictionaryAddWordContents.hasWord(Ljava/lang/String;Landroid/content/Context;)Z
com.android.settings.inputmethod.UserDictionaryAddWordContents.apply(Landroid/content/Context;)V
com.android.settings.inputmethod.UserDictionaryAddWordActivity.onClickConfirm(Landroid/view/View;)V
com.android.settings.inputmethod.UserDictionaryAddWordFragment.onPause()V
com.android.providers.userdictionary.UserDictionaryProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
android.provider.UserDictionary$Words.addWord(Landroid/content/Context;Ljava/lang/String;ILjava/lang/String;Ljava/util/Locale;)V
android.provider.UserDictionary$Words.addWord(Landroid/content/Context;Ljava/lang/String;II)V
com.android.providers.userdictionary.DictionaryBackupAgent.onRestore(Landroid/app/backup/BackupDataInput;ILandroid/os/ParcelFileDescriptor;)V
com.android.settings.UserDictionarySettings.deleteWord(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentResolver;)V
com.android.settings.inputmethod.UserDictionaryAddWordContents.delete(Landroid/content/Context;)V
com.android.settings.inputmethod.UserDictionaryAddWordFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
Permission:android.permission.WRITE_PROFILE

5 Callers:

com.android.providers.contacts.ProfileProvider.enforceWritePermission()V
com.android.providers.contacts.ProfileProvider.openAssetFile(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
com.android.providers.contacts.ProfileProvider.insertInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.contacts.ProfileProvider.deleteInTransaction(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ProfileProvider.updateInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
Permission:android.permission.MOUNT_UNMOUNT_FILESYSTEMS

68 Callers:

com.android.server.MountService.setUsbMassStorageEnabled(Z)V
android.os.storage.IMountService$Stub$Proxy.setUsbMassStorageEnabled(Z)V
android.os.storage.IMountService$Stub.setUsbMassStorageEnabled(Z)V
com.android.server.MountService.shutdown(Landroid/os/storage/IMountShutdownObserver;)V
android.os.storage.IMountService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.os.storage.IMountService.setUsbMassStorageEnabled(Z)V
android.os.storage.IMountService$Stub$Proxy.shutdown(Landroid/os/storage/IMountShutdownObserver;)V
android.os.storage.IMountService$Stub.shutdown(Landroid/os/storage/IMountShutdownObserver;)V
com.android.server.MountService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.os.storage.StorageManager.disableUsbMassStorage()V
android.os.storage.StorageManager.enableUsbMassStorage()V
android.os.storage.IMountService.shutdown(Landroid/os/storage/IMountShutdownObserver;)V
com.android.systemui.usb.UsbStorageActivity$8.run()V
com.android.server.pm.ShutdownThread.run()V
com.android.server.pm.ShutdownThread.beginShutdownSequence(Landroid/content/Context;)V
com.android.server.pm.ShutdownThread.access$000(Landroid/content/Context;)V
com.android.server.pm.ShutdownThread.shutdownInner(Landroid/content/Context;Z)V
com.android.server.pm.ShutdownThread$1.onClick(Landroid/content/DialogInterface;I)V
com.android.server.pm.ShutdownThread.reboot(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.server.pm.ShutdownThread.rebootSafeMode(Landroid/content/Context;Z)V
com.android.server.pm.ShutdownThread.shutdown(Landroid/content/Context;Z)V
com.android.server.PowerManagerService$10.run()V
com.android.server.ShutdownActivity$1.run()V
com.android.server.wm.WindowManagerService.rebootSafeMode()V
com.android.server.wm.WindowManagerService.shutdown()V
android.view.WindowManagerPolicy$WindowManagerFuncs.rebootSafeMode()V
android.view.WindowManagerPolicy$WindowManagerFuncs.shutdown()V
com.android.internal.policy.impl.GlobalActions$2.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$2.onPress()V
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
com.android.internal.policy.impl.GlobalActions$SinglePressAction.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$SinglePressAction.onPress()V
com.android.internal.policy.impl.GlobalActions$3.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$Action.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$Action.onPress()V
com.android.internal.policy.impl.GlobalActions$4.onItemLongClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)Z
com.android.internal.policy.impl.GlobalActions.onClick(Landroid/content/DialogInterface;I)V
com.android.server.MountService.mountVolume(Ljava/lang/String;)I
android.os.storage.IMountService$Stub$Proxy.mountVolume(Ljava/lang/String;)I
android.os.storage.IMountService$Stub.mountVolume(Ljava/lang/String;)I
android.os.storage.IMountService.mountVolume(Ljava/lang/String;)I
com.android.internal.os.storage.ExternalStorageFormatter$2.run()V
com.android.internal.os.storage.ExternalStorageFormatter.onCancel(Landroid/content/DialogInterface;)V
com.android.settings.deviceinfo.Memory.mount()V
com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()V
com.android.settings.deviceinfo.Memory.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.internal.os.storage.ExternalStorageFormatter$1.onStorageStateChanged(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Landroid/content/Intent;II)I
com.android.server.MountService.unmountVolume(Ljava/lang/String;ZZ)V
android.os.storage.IMountService$Stub$Proxy.unmountVolume(Ljava/lang/String;ZZ)V
android.os.storage.IMountService$Stub.unmountVolume(Ljava/lang/String;ZZ)V
android.os.storage.IMountService.unmountVolume(Ljava/lang/String;ZZ)V
com.android.settings.deviceinfo.Memory.doUnmount()V
com.android.settings.deviceinfo.Memory.access$100(Lcom/android/settings/deviceinfo/Memory;)V
com.android.settings.deviceinfo.Memory.unmount()V
com.android.settings.deviceinfo.Memory$3.onClick(Landroid/content/DialogInterface;I)V
com.android.server.MountService.getStorageUsers(Ljava/lang/String;)[I
android.os.storage.IMountService$Stub$Proxy.getStorageUsers(Ljava/lang/String;)[I
android.os.storage.IMountService$Stub.getStorageUsers(Ljava/lang/String;)[I
com.android.server.MountService.finishMediaUpdate()V
android.os.storage.IMountService.getStorageUsers(Ljava/lang/String;)[I
android.os.storage.IMountService$Stub$Proxy.finishMediaUpdate()V
android.os.storage.IMountService$Stub.finishMediaUpdate()V
com.android.settings.deviceinfo.Memory.hasAppsAccessingStorage()Z
com.android.systemui.usb.UsbStorageActivity.checkStorageUsersAsync()V
android.os.storage.IMountService.finishMediaUpdate()V
com.android.systemui.usb.UsbStorageActivity.access$900(Lcom/android/systemui/usb/UsbStorageActivity;)V
com.android.systemui.usb.UsbStorageActivity$9.run()V
Permission:android.permission.CAMERA

416 Callers:

android.hardware.Camera.open()Landroid/hardware/Camera;
com.android.wallpaper.walkaround.WalkAroundWallpaper.startCamera()V
com.android.wallpaper.walkaround.WalkAroundWallpaper.access$200(Lcom/android/wallpaper/walkaround/WalkAroundWallpaper;)V
com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine.onSurfaceCreated(Landroid/view/SurfaceHolder;)V
com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine.onVisibilityChanged(Z)V
android.hardware.Camera.native_setup(Ljava/lang/Object;)V
android.media.MediaRecorder.setVideoSource(I)V
android.filterpacks.videosink.MediaEncoderFilter.updateMediaRecorderParams()V
com.android.camera.VideoCamera.initializeRecorder()V
android.filterpacks.videosink.MediaEncoderFilter.startRecording(Landroid/filterfw/core/FilterContext;)V
com.android.camera.VideoCamera.startVideoRecording()V
android.filterpacks.videosink.MediaEncoderFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.process(Landroid/filterfw/core/FilterContext;)V
com.android.camera.VideoCamera.onShutterButtonClick()V
android.filterfw.core.Filter.open(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.process(Landroid/filterfw/core/FilterContext;)V
com.android.camera.ShutterButton$OnShutterButtonListener.onShutterButtonClick()V
android.filterfw.core.Filter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.CallbackFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.performProcess(Landroid/filterfw/core/FilterContext;)V
com.android.camera.ShutterButton.performClick()Z
android.filterpacks.base.CallbackFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceRenderFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceTargetFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.CameraSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureTarget.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.FilterFunction.execute(Landroid/filterfw/core/KeyValueMap;)Landroid/filterfw/core/Frame;
android.filterfw.core.SyncRunner.processFilterNode(Landroid/filterfw/core/Filter;)V
android.filterpacks.base.CallbackFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceRenderFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceTargetFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.CameraSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureTarget.performProcess(Landroid/filterfw/core/FilterContext;)V
com.android.camera.VideoCamera.onKeyDown(ILandroid/view/KeyEvent;)Z
android.filterfw.core.FilterFunction.executeWithArgList([Ljava/lang/Object;)Landroid/filterfw/core/Frame;
android.filterfw.core.SyncRunner.performStep()Z
android.media.effect.SingleFilterEffect.apply(IIII)V
android.media.effect.SizeChangeEffect.apply(IIII)V
android.filterfw.core.AsyncRunner$AsyncRunnerTask.doInBackground([Landroid/filterfw/core/SyncRunner;)Landroid/filterfw/core/AsyncRunner$RunnerResult;
android.filterfw.core.SyncRunner.step()I
android.filterfw.core.SyncRunner.run()V
android.media.effect.effects.AutoFixEffect.apply(IIII)V
android.media.effect.effects.BitmapOverlayEffect.apply(IIII)V
android.media.effect.effects.BlackWhiteEffect.apply(IIII)V
android.media.effect.effects.BrightnessEffect.apply(IIII)V
android.media.effect.effects.ColorTemperatureEffect.apply(IIII)V
android.media.effect.effects.ContrastEffect.apply(IIII)V
android.media.effect.effects.CrossProcessEffect.apply(IIII)V
android.media.effect.effects.DocumentaryEffect.apply(IIII)V
android.media.effect.effects.DuotoneEffect.apply(IIII)V
android.media.effect.effects.FillLightEffect.apply(IIII)V
android.media.effect.effects.FisheyeEffect.apply(IIII)V
android.media.effect.effects.FlipEffect.apply(IIII)V
android.media.effect.effects.GrainEffect.apply(IIII)V
android.media.effect.effects.GrayscaleEffect.apply(IIII)V
android.media.effect.effects.LomoishEffect.apply(IIII)V
android.media.effect.effects.NegativeEffect.apply(IIII)V
android.media.effect.effects.PosterizeEffect.apply(IIII)V
android.media.effect.effects.RedEyeEffect.apply(IIII)V
android.media.effect.effects.SaturateEffect.apply(IIII)V
android.media.effect.effects.SepiaEffect.apply(IIII)V
android.media.effect.effects.SharpenEffect.apply(IIII)V
android.media.effect.effects.StraightenEffect.apply(IIII)V
android.media.effect.effects.TintEffect.apply(IIII)V
android.media.effect.effects.VignetteEffect.apply(IIII)V
android.media.effect.effects.CropEffect.apply(IIII)V
android.media.effect.effects.RotateEffect.apply(IIII)V
android.filterfw.core.AsyncRunner$AsyncRunnerTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.filterfw.core.GraphRunner.run()V
android.media.effect.FilterGraphEffect.apply(IIII)V
com.android.camera.EffectsRecorder$4.onRunnerDone(I)V
com.android.camera.EffectsRecorder.startPreview()V
android.media.effect.effects.BackDropperEffect.apply(IIII)V
com.android.camera.EffectsRecorder.setPreviewSurfaceTexture(Landroid/graphics/SurfaceTexture;II)V
com.android.camera.EffectsRecorder.startRecording()V
com.android.camera.VideoCamera.startPreview()V
com.android.camera.VideoCamera.initializeEffectsPreview()V
com.android.camera.VideoCamera.setPreviewTexture()V
com.android.camera.VideoCamera.access$600(Lcom/android/camera/VideoCamera;)V
com.android.camera.VideoCamera.checkQualityAndStartPreview()V
com.android.camera.VideoCamera.onResume()V
com.android.camera.VideoCamera.onSharedPreferenceChanged()V
com.android.camera.VideoCamera.switchCamera()V
com.android.camera.VideoCamera$1.run()V
com.android.camera.VideoCamera.keepScreenOnAwhile()V
com.android.camera.VideoCamera.updateRecordingTime()V
com.android.camera.VideoCamera.updateEffectSelection()Z
com.android.camera.VideoCamera.onEffectsUpdate(II)V
com.android.camera.ActivityBase.onResume()V
com.android.gallery3d.app.AbstractGalleryActivity.onResume()V
com.android.camera.CameraPreference$OnPreferenceChangedListener.onSharedPreferenceChanged()V
com.android.camera.VideoCamera.onCancelBgTraining(Landroid/view/View;)V
com.android.camera.VideoCamera.restorePreferences()V
com.android.camera.VideoCamera.access$1000(Lcom/android/camera/VideoCamera;)V
com.android.camera.VideoCamera.stopVideoRecording()Z
com.android.camera.VideoCamera.onUserInteraction()V
com.android.camera.VideoCamera.access$200(Lcom/android/camera/VideoCamera;)V
com.android.camera.EffectsRecorder$EffectsListener.onEffectsUpdate(II)V
com.android.camera.Camera.onResume()V
com.android.camera.PanoramaActivity.onResume()V
com.android.gallery3d.app.AlbumPicker.onResume()V
com.android.gallery3d.app.CropImage.onResume()V
com.android.gallery3d.app.DialogPicker.onResume()V
com.android.gallery3d.app.Gallery.onResume()V
com.android.gallery3d.app.PickerActivity.onResume()V
com.android.camera.ui.IndicatorControl.onSettingChanged()V
com.android.camera.VideoCamera.access$2100(Lcom/android/camera/VideoCamera;)V
com.android.camera.VideoCamera.onPreviewTextureCopied()V
com.android.camera.VideoCamera.initializeVideoSnapshot()V
com.android.camera.VideoCamera.access$1200(Lcom/android/camera/VideoCamera;)Z
com.android.camera.VideoCamera.onError(Landroid/media/MediaRecorder;II)V
com.android.camera.VideoCamera.onReviewCancelClicked(Landroid/view/View;)V
com.android.camera.VideoCamera.onStopVideoRecording()V
com.android.gallery3d.app.AbstractGalleryActivity.onUserInteraction()V
com.android.camera.EffectsRecorder$5.run()V
com.android.camera.ui.IndicatorButton$Listener.onSettingChanged()V
com.android.camera.ui.IndicatorControlBarContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlBar.onSettingChanged()V
com.android.camera.ui.IndicatorControlContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlWheelContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlWheel.onSettingChanged()V
com.android.camera.ui.OtherSettingsPopup$Listener.onSettingChanged()V
com.android.camera.ui.SecondLevelIndicatorControlBar.onSettingChanged()V
com.android.camera.VideoCamera$3.run()V
com.android.camera.ActivityBase.onPreviewTextureCopied()V
com.android.camera.VideoCamera.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.camera.VideoCamera.onCreate(Landroid/os/Bundle;)V
com.android.camera.VideoCamera$MyBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.camera.VideoCamera.onBackPressed()V
com.android.camera.VideoCamera.onInfo(Landroid/media/MediaRecorder;II)V
com.android.camera.VideoCamera.onPause()V
com.android.camera.ui.IndicatorButton.onSettingChanged()V
com.android.camera.ui.OtherSettingsPopup.onSettingChanged()V
com.android.camera.ActivityBase$MyAppBridge.onPreviewTextureCopied()V
com.android.camera.PanoramaActivity.onPreviewTextureCopied()V
com.android.gallery3d.app.AbstractGalleryActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.camera.ActivityBase.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AbstractGalleryActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AbstractGalleryActivity.onBackPressed()V
com.android.camera.ActivityBase.onPause()V
com.android.gallery3d.app.AbstractGalleryActivity.onPause()V
com.android.camera.ui.BasicSettingPopup$Listener.onSettingChanged()V
com.android.camera.ui.EffectSettingPopup$Listener.onSettingChanged()V
com.android.camera.ui.InLineSettingItem$Listener.onSettingChanged()V
com.android.camera.CameraScreenNail$Listener.onPreviewTextureCopied()V
com.android.camera.ActivityBase.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.AlbumPicker.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.CropImage.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.DialogPicker.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.Gallery.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.PickerActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.camera.Camera.onCreate(Landroid/os/Bundle;)V
com.android.camera.PanoramaActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.CropImage.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.PickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.camera.ActivityBase.onBackPressed()V
com.android.gallery3d.app.AlbumPicker.onBackPressed()V
com.android.gallery3d.app.DialogPicker.onBackPressed()V
com.android.gallery3d.app.Gallery.onBackPressed()V
com.android.gallery3d.app.PickerActivity.onBackPressed()V
com.android.camera.Camera.onPause()V
com.android.camera.PanoramaActivity.onPause()V
com.android.gallery3d.app.AlbumPicker.onPause()V
com.android.gallery3d.app.CropImage.onPause()V
com.android.gallery3d.app.DialogPicker.onPause()V
com.android.gallery3d.app.Gallery.onPause()V
com.android.gallery3d.app.PickerActivity.onPause()V
com.android.camera.ui.BasicSettingPopup.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.camera.ui.EffectSettingPopup.onClick(Landroid/view/View;)V
com.android.camera.ui.EffectSettingPopup.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.camera.ui.InLineSettingItem.changeIndex(I)Z
com.android.camera.CameraScreenNail.draw(Lcom/android/gallery3d/ui/GLCanvas;IIII)V
com.android.camera.Camera.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.camera.PanoramaActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.AlbumPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.DialogPicker.onCreate(Landroid/os/Bundle;)V
com.android.camera.Camera.onBackPressed()V
com.android.camera.PanoramaActivity.onBackPressed()V
com.android.camera.ui.InLineSettingKnob.changeIndex(I)Z
com.android.camera.ui.InLineSettingRestore.changeIndex(I)Z
com.android.camera.ui.InLineSettingSwitch.changeIndex(I)Z
com.android.gallery3d.ui.SurfaceTextureScreenNail.draw(Lcom/android/gallery3d/ui/GLCanvas;IIII)V
com.android.camera.ui.InLineSettingKnob$1.run()V
com.android.camera.ui.InLineSettingKnob$2.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.camera.ui.InLineSettingKnob$3.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.camera.ui.InLineSettingSwitch$1.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.camera.CameraScreenNail.directDraw(Lcom/android/gallery3d/ui/GLCanvas;IIII)V
com.android.gallery3d.ui.ScreenNail.draw(Lcom/android/gallery3d/ui/GLCanvas;IIII)V
com.android.camera.CaptureAnimManager.drawAnimation(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/camera/CameraScreenNail;Lcom/android/gallery3d/ui/RawTexture;)Z
com.android.camera.SwitchAnimManager.drawAnimation(Lcom/android/gallery3d/ui/GLCanvas;IIIILcom/android/camera/CameraScreenNail;Lcom/android/gallery3d/ui/RawTexture;)Z
com.android.gallery3d.ui.PhotoView.buildFallbackEffect(Lcom/android/gallery3d/ui/GLView;Lcom/android/gallery3d/ui/GLCanvas;)Lcom/android/gallery3d/ui/PhotoFallbackEffect;
com.android.gallery3d.ui.PhotoView$ScreenNailPicture.draw(Lcom/android/gallery3d/ui/GLCanvas;Landroid/graphics/Rect;)V
com.android.gallery3d.ui.TileImageView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.PhotoPage$PreparePhotoFallback.onGLIdle(Lcom/android/gallery3d/ui/GLCanvas;Z)Z
com.android.gallery3d.ui.PhotoView$Picture.draw(Lcom/android/gallery3d/ui/GLCanvas;Landroid/graphics/Rect;)V
com.android.gallery3d.ui.GLView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.GLRoot$OnGLIdleListener.onGLIdle(Lcom/android/gallery3d/ui/GLCanvas;Z)Z
com.android.gallery3d.ui.PhotoView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.AlbumPage$2.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.AlbumSetPage$1.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.ManageCachePage$1.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.PhotoPage$1.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.SlideshowPage$1.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.CropView$FaceHighlightView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.CropView$HighlightRectangle.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.CropView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.EdgeView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.GLRootView.onDrawFrameLocked(Ljavax/microedition/khronos/opengles/GL10;)V
com.android.gallery3d.ui.GLView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.ScrollBarView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.SlotView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.UndoBarView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.GLRootView$IdleRunner.run()V
com.android.gallery3d.ui.GLRootView.onDrawFrame(Ljavax/microedition/khronos/opengles/GL10;)V
com.android.gallery3d.app.AlbumPage$2.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage$1.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage$1.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage$1.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage$1.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$FaceHighlightView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$HighlightRectangle.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.EdgeView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.ScrollBarView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlideshowView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlotView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.TileImageView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.UndoBarView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView$FullPicture.drawTileView(Lcom/android/gallery3d/ui/GLCanvas;Landroid/graphics/Rect;)V
com.android.gallery3d.ui.PhotoView$FullPicture.draw(Lcom/android/gallery3d/ui/GLCanvas;Landroid/graphics/Rect;)V
Permission:android.permission.WRITE_SMS

244 Callers:

com.android.mms.data.WorkingMessage.readDraftMmsMessage(Landroid/content/Context;Lcom/android/mms/data/Conversation;Ljava/lang/StringBuilder;)Landroid/net/Uri;
com.android.mms.data.WorkingMessage.access$200(Landroid/content/Context;Lcom/android/mms/data/Conversation;Ljava/lang/StringBuilder;)Landroid/net/Uri;
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Void;)Landroid/util/Pair;
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.util.Recycler$MmsRecycler.deleteMessagesOlderThanDate(Landroid/content/Context;JJ)V
com.android.mms.util.Recycler$MmsRecycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessagesInSameThreadAsMessage(Landroid/content/Context;Landroid/net/Uri;)V
com.android.mms.util.Recycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.util.Recycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.data.WorkingMessage.sendMmsWorker(Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.sendSmsWorker(Ljava/lang/String;Ljava/lang/String;J)V
com.android.mms.transaction.SmsReceiverService.storeMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.data.WorkingMessage.access$700(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.preSendSmsWorker(Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.transaction.SmsReceiverService.insertMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;ILjava/lang/String;)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.replaceMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.data.WorkingMessage$2.run()V
com.android.mms.data.WorkingMessage.access$900(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.transaction.SmsReceiverService.handleSmsReceived(Landroid/content/Intent;I)V
com.android.mms.data.WorkingMessage$3.run()V
com.android.mms.transaction.SmsReceiverService.access$100(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
android.provider.Telephony$Sms$Draft.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.data.Conversation.getUri()Landroid/net/Uri;
com.android.mms.data.Conversation.markAsRead()V
com.android.mms.ui.ComposeMessageActivity.startMsgListQuery(I)V
com.android.mms.data.Conversation.blockMarkAsRead(Z)V
com.android.mms.ui.ComposeMessageActivity.checkPendingNotification()V
com.android.mms.ui.ComposeMessageActivity.loadMessageContent()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.startMsgListQuery(I)V
com.android.mms.ui.ComposeMessageActivity.access$7000(Lcom/android/mms/ui/ComposeMessageActivity;I)V
com.android.mms.ui.ComposeMessageActivity.startMsgListQuery()V
com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.mms.ui.ComposeMessageActivity.onStop()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.checkPendingNotification()V
com.android.mms.ui.ComposeMessageActivity.onUserInteraction()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.loadMessageContent()V
com.android.mms.ui.ComposeMessageActivity.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity.onStart()V
com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$7000(Lcom/android/mms/ui/ComposeMessageActivity;I)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.startMsgListQuery()V
com.android.mms.ui.ComposeMessageActivity.access$5000(Lcom/android/mms/ui/ComposeMessageActivity;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onStop()V
com.android.mms.ui.ComposeMessageActivity$36.onTextChanged(Ljava/lang/CharSequence;III)V
com.android.mms.ui.ComposeMessageActivity$8.onTextChanged(Ljava/lang/CharSequence;III)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onUserInteraction()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onStart()V
com.android.mms.data.Conversation$ConversationQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivity$23.run()V
com.android.mms.ui.ComposeMessageActivity$41.onContentChanged(Lcom/android/mms/ui/MessageListAdapter;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5000(Lcom/android/mms/ui/ComposeMessageActivity;)V
com.android.mms.ui.ConversationList$ThreadListQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.MessageListAdapter$OnDataSetChangedListener.onContentChanged(Lcom/android/mms/ui/MessageListAdapter;)V
com.android.mms.ui.MessageListAdapter.onContentChanged()V
com.android.mms.data.Conversation.asyncDeleteObsoleteThreads(Landroid/content/AsyncQueryHandler;I)V
com.android.mms.ui.ConversationList$8.run()V
com.android.providers.telephony.MmsProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.mms.util.Recycler$SmsRecycler.deleteMessagesForThread(Landroid/content/Context;JI)V
android.provider.Telephony$Sms$Outbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;ZJ)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.replaceMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.saveMessage()V
com.android.mms.ui.ClassZeroActivity.access$200(Lcom/android/mms/ui/ClassZeroActivity;)V
com.android.mms.ui.ClassZeroActivity$3.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.data.Conversation.blockingMarkAllMmsMessagesAsSeen(Landroid/content/Context;)V
com.android.mms.data.Conversation.access$900(Landroid/content/Context;)V
com.android.mms.data.Conversation$3.run()V
com.android.mms.ui.ClassZeroActivity.storeMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.data.WorkingMessage.deleteDraftSmsMessage(J)V
com.android.mms.transaction.RetryScheduler.scheduleRetry(Landroid/net/Uri;)V
com.android.mms.transaction.RetryScheduler.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.Observable.notifyObservers()V
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.SendTransaction.run()V
com.android.mms.transaction.Transaction.process()V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
com.android.mms.data.WorkingMessage.createDraftMmsMessage(Lcom/google/android/mms/pdu/PduPersister;Lcom/google/android/mms/pdu/SendReq;Lcom/android/mms/model/SlideshowModel;Landroid/net/Uri;)Landroid/net/Uri;
com.android.mms.data.WorkingMessage.access$1300(Lcom/google/android/mms/pdu/PduPersister;Lcom/google/android/mms/pdu/SendReq;Lcom/android/mms/model/SlideshowModel;Landroid/net/Uri;)Landroid/net/Uri;
com.android.mms.data.WorkingMessage.saveAsMms(Z)Landroid/net/Uri;
com.android.mms.data.WorkingMessage$4.run()V
com.android.mms.ui.ComposeMessageActivity$1.run()V
com.android.mms.ui.ComposeMessageActivity$30.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivity$4.run()V
com.android.mms.ui.MessageUtils$ResizeImageResultCallback.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.MessageUtils$3$1.run()V
com.android.mms.ui.ComposeMessageActivity.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.google.android.mms.util.PduCache.normalizeKey(Landroid/net/Uri;)Landroid/net/Uri;
com.google.android.mms.util.PduCache.put(Landroid/net/Uri;Lcom/google/android/mms/util/PduCacheEntry;)Z
com.google.android.mms.pdu.PduPersister.load(Landroid/net/Uri;)Lcom/google/android/mms/pdu/GenericPdu;
com.google.android.mms.util.PduCache.put(Ljava/lang/Object;Ljava/lang/Object;)Z
com.android.mms.model.SlideshowModel.getPduBody(Landroid/content/Context;Landroid/net/Uri;)Lcom/google/android/mms/pdu/PduBody;
com.android.mms.transaction.MessagingNotification.addMmsNotificationInfos(Landroid/content/Context;Ljava/util/Set;)V
com.android.mms.transaction.MmsMessageSender.sendMessage(J)Z
com.android.mms.transaction.NotificationTransaction.<init>(Landroid/content/Context;ILcom/android/mms/transaction/TransactionSettings;Ljava/lang/String;)V
com.android.mms.ui.MessageUtils.getMultimediaMessageDetails(Landroid/content/Context;Landroid/database/Cursor;I)Ljava/lang/String;
com.android.mms.ui.MessageUtils.getNotificationIndDetails(Landroid/content/Context;Landroid/database/Cursor;)Ljava/lang/String;
com.android.mms.util.DownloadManager.getMessage(Landroid/net/Uri;)Ljava/lang/String;
com.android.mms.util.DownloadManager.markState(Landroid/net/Uri;I)V
com.android.mms.util.PduLoaderManager$PduTask.run()V
com.google.android.mms.util.AbstractCache.put(Ljava/lang/Object;Ljava/lang/Object;)Z
com.android.mms.model.SlideshowModel.createFromMessageUri(Landroid/content/Context;Landroid/net/Uri;)Lcom/android/mms/model/SlideshowModel;
com.android.mms.ui.ComposeMessageActivity.copyMedia(J)Z
com.android.mms.ui.ComposeMessageActivity.haveSomethingToCopyToSDCard(J)Z
com.android.mms.ui.ComposeMessageActivity.isDrmRingtoneWithRights(J)Z
com.android.mms.ui.ComposeMessageActivity.isForwardable(J)Z
com.android.mms.ui.ComposeMessageActivity.saveRingtone(J)Z
com.android.mms.transaction.MessagingNotification.blockingUpdateNewMessageIndicator(Landroid/content/Context;JZ)V
com.android.mms.transaction.MessageSender.sendMessage(J)Z
com.android.mms.ui.MessageUtils.getMessageDetails(Landroid/content/Context;Landroid/database/Cursor;I)Ljava/lang/String;
com.android.mms.util.DownloadManager.access$400(Lcom/android/mms/util/DownloadManager;Landroid/net/Uri;)Ljava/lang/String;
com.android.mms.data.WorkingMessage.loadFromUri(Landroid/net/Uri;)Z
com.android.mms.ui.SlideEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.SlideshowActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.SlideshowEditActivity.initSlideList()V
com.android.mms.ui.ComposeMessageActivity.access$3700(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.copyMedia(J)Z
com.android.mms.ui.ComposeMessageActivity.access$2900(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.haveSomethingToCopyToSDCard(J)Z
com.android.mms.ui.ComposeMessageActivity.access$3000(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivity.getDrmMimeMenuStringRsrc(J)I
com.android.mms.ui.ComposeMessageActivity.getDrmMimeSavedStringRsrc(JZ)I
com.android.mms.ui.ComposeMessageActivityNoLockScreen.isDrmRingtoneWithRights(J)Z
com.android.mms.ui.ComposeMessageActivity.access$2800(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.isForwardable(J)Z
com.android.mms.ui.ComposeMessageActivity.access$3800(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.saveRingtone(J)Z
com.android.mms.transaction.MessageStatusService.onHandleIntent(Landroid/content/Intent;)V
com.android.mms.transaction.MessagingNotification$1.run()V
com.android.mms.transaction.SmsReceiverService.handleBootCompleted()V
com.android.mms.ui.ComposeMessageActivity.showMessageDetails(Lcom/android/mms/ui/MessageItem;)Z
com.android.mms.util.DownloadManager$4.run()V
com.android.mms.data.WorkingMessage.access$300(Lcom/android/mms/data/WorkingMessage;Landroid/net/Uri;)Z
com.android.mms.data.WorkingMessage.load(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;)Lcom/android/mms/data/WorkingMessage;
com.android.mms.data.WorkingMessage.readStateFromBundle(Landroid/os/Bundle;)V
com.android.mms.ui.SlideshowEditActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$3700(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivity$10.onCreateContextMenu(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$2900(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$3000(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivity.access$3100(Lcom/android/mms/ui/ComposeMessageActivity;J)I
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getDrmMimeMenuStringRsrc(J)I
com.android.mms.ui.ComposeMessageActivity.access$3900(Lcom/android/mms/ui/ComposeMessageActivity;JZ)I
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getDrmMimeSavedStringRsrc(JZ)I
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$2800(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$3800(Lcom/android/mms/ui/ComposeMessageActivity;J)Z
com.android.mms.transaction.SmsReceiverService.access$200(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.mms.ui.ComposeMessageActivity.access$700(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.showMessageDetails(Lcom/android/mms/ui/MessageItem;)Z
com.android.mms.ui.ComposeMessageActivity.handleForwardedMessage()Z
com.android.mms.ui.ComposeMessageActivity.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$3100(Lcom/android/mms/ui/ComposeMessageActivity;J)I
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$3900(Lcom/android/mms/ui/ComposeMessageActivity;JZ)I
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$700(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.handleForwardedMessage()Z
com.android.mms.ui.ComposeMessageActivity.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onCreate(Landroid/os/Bundle;)V
com.android.mms.transaction.MessageStatusService.updateMessageStatus(Landroid/content/Context;Landroid/net/Uri;[BLjava/lang/String;)Landroid/telephony/SmsMessage;
com.android.mms.data.WorkingMessage.asyncDeleteDraftSmsMessage(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage.readDraftSmsMessage(Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.data.WorkingMessage.discard()V
com.android.mms.data.WorkingMessage.access$000(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.ui.ComposeMessageActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ComposeMessageActivity.saveDraft(Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.saveDraft(Z)V
com.android.mms.ui.ComposeMessageActivity.onMaxPendingMessagesReached()V
com.android.mms.data.WorkingMessage$MessageStatusListener.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onMaxPendingMessagesReached()V
com.android.mms.data.WorkingMessage.asyncDeleteDraftMmsMessage(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage.saveDraft(Z)V
com.android.mms.data.WorkingMessage.updateDraftSmsMessage(Lcom/android/mms/data/Conversation;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage.access$1500(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage$5.run()V
com.android.mms.data.Conversation.startDelete(Lcom/android/mms/data/Conversation$ConversationQueryHandler;IZJ)V
com.android.mms.ui.ConversationList$DeleteThreadListener$1.run()V
android.provider.Telephony$Sms$Sent.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.ui.ManageSimMessages.copyToPhoneMemory(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.transaction.SmsReceiverService.moveOutboxMessagesToFailedBox()I
com.android.internal.telephony.SMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.SMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processCdmaWapPdu([BILjava/lang/String;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.SMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.mms.data.Conversation.blockingMarkAllSmsMessagesAsSeen(Landroid/content/Context;)V
com.android.mms.data.Conversation.access$800(Landroid/content/Context;)V
com.android.mms.data.Conversation.getUri(J)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.createIntent(Landroid/content/Context;J)Landroid/content/Intent;
com.android.mms.transaction.MessagingNotification.getNewMessageNotificationInfo(Landroid/content/Context;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;JJLandroid/graphics/Bitmap;Lcom/android/mms/data/Contact;I)Lcom/android/mms/transaction/MessagingNotification$NotificationInfo;
com.android.mms.ui.ComposeMessageActivity$12.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.createIntent(Landroid/content/Context;J)Landroid/content/Intent;
com.android.mms.ui.ConversationList.createNewMessage()V
com.android.mms.ui.ConversationList.openThread(J)V
com.android.mms.transaction.MessagingNotification.addSmsNotificationInfos(Landroid/content/Context;Ljava/util/Set;)V
com.android.mms.ui.ConversationList.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationList.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.providers.telephony.MmsSmsProvider.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.mms.data.Conversation.startDeleteAll(Lcom/android/mms/data/Conversation$ConversationQueryHandler;IZ)V
com.android.providers.telephony.MmsSmsProvider.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.mms.ui.ManageSimMessages.deleteFromSim(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.access$500(Lcom/android/mms/ui/ManageSimMessages;Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.deleteAllFromSim()V
com.android.mms.ui.ManageSimMessages$2.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ManageSimMessages.access$600(Lcom/android/mms/ui/ManageSimMessages;)V
com.android.mms.ui.ManageSimMessages$3.onClick(Landroid/content/DialogInterface;I)V
android.provider.Telephony$Sms$Inbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;Z)Landroid/net/Uri;
Permission:android.permission.WRITE_USER_DICTIONARY

10 Callers:

com.android.providers.userdictionary.DictionaryBackupAgent.onRestore(Landroid/app/backup/BackupDataInput;ILandroid/os/ParcelFileDescriptor;)V
com.android.settings.UserDictionarySettings.deleteWord(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentResolver;)V
com.android.settings.inputmethod.UserDictionaryAddWordContents.apply(Landroid/content/Context;)V
com.android.settings.inputmethod.UserDictionaryAddWordContents.delete(Landroid/content/Context;)V
com.android.settings.inputmethod.UserDictionaryAddWordActivity.onClickConfirm(Landroid/view/View;)V
com.android.settings.inputmethod.UserDictionaryAddWordFragment.onPause()V
com.android.settings.inputmethod.UserDictionaryAddWordFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
android.provider.UserDictionary$Words.addWord(Landroid/content/Context;Ljava/lang/String;ILjava/lang/String;Ljava/util/Locale;)V
android.provider.UserDictionary$Words.addWord(Landroid/content/Context;Ljava/lang/String;II)V
com.android.providers.userdictionary.UserDictionaryProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
Permission:android.permission.INTERNET

471 Callers:

android.webkit.WebSettingsClassic.<init>(Landroid/content/Context;Landroid/webkit/WebViewClassic;)V
android.webkit.WebViewCore.<init>(Landroid/content/Context;Landroid/webkit/WebViewClassic;Landroid/webkit/CallbackProxy;Ljava/util/Map;)V
android.webkit.WebViewClassic.init(Ljava/util/Map;Z)V
android.webkit.WebViewProvider.init(Ljava/util/Map;Z)V
android.webkit.WebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;ILjava/util/Map;Z)V
android.webkit.WebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;IZ)V
com.android.browser.BrowserWebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;ILjava/util/Map;Z)V
com.android.email.view.RigidWebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;ILjava/util/Map;Z)V
android.webkit.WebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V
com.android.browser.BrowserWebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;IZ)V
com.android.email.view.RigidWebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;IZ)V
android.webkit.WebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;)V
com.android.browser.BrowserWebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V
com.android.email.view.RigidWebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V
com.android.browser.BrowserWebViewFactory.instantiateWebView(Landroid/util/AttributeSet;IZ)Landroid/webkit/WebView;
android.webkit.WebView.<init>(Landroid/content/Context;)V
com.android.browser.BrowserWebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;)V
com.android.email.view.RigidWebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;)V
com.android.browser.BrowserWebViewFactory.createWebView(Z)Landroid/webkit/WebView;
android.webkit.WebViewFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.browser.BrowserWebView.<init>(Landroid/content/Context;)V
com.android.browser.GoogleAccountLogin.<init>(Landroid/app/Activity;Landroid/accounts/Account;Ljava/lang/Runnable;)V
com.android.browser.preferences.AccessibilityPreferencesFragment.onCreate(Landroid/os/Bundle;)V
com.android.email.activity.setup.DebugFragment.clearWebViewCache()V
com.android.email.view.RigidWebView.<init>(Landroid/content/Context;)V
com.android.htmlviewer.HTMLViewerActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.SettingsLicenseActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.SettingsSafetyLegalActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.TetherSettings.onCreate(Landroid/os/Bundle;)V
com.android.browser.BrowserWebViewFactory.createSubWebView(Z)Landroid/webkit/WebView;
com.android.browser.Preloader$PreloaderSession.<init>(Lcom/android/browser/Preloader;Ljava/lang/String;)V
com.android.browser.WebViewFactory.createWebView(Z)Landroid/webkit/WebView;
com.android.browser.GoogleAccountLogin.startLoginIfNeeded(Landroid/app/Activity;Ljava/lang/Runnable;)V
com.android.email.activity.setup.DebugFragment.onClick(Landroid/view/View;)V
com.android.internal.app.AlertActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.SettingsPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.browser.WebViewFactory.createSubWebView(Z)Landroid/webkit/WebView;
com.android.browser.Preloader.getSession(Ljava/lang/String;)Lcom/android/browser/Preloader$PreloaderSession;
com.android.browser.Controller.createSubWindow(Lcom/android/browser/Tab;)V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;J)V
com.android.browser.SnapshotTab.putInForeground()V
com.android.browser.TabControl.createNewWebView(Z)Landroid/webkit/WebView;
com.android.browser.Controller.doStart(Landroid/os/Bundle;Landroid/content/Intent;)V
com.android.bluetooth.opp.BluetoothOppBtEnableActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppBtEnablingActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppBtErrorActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppTransferActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.pbap.BluetoothPbapActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.ExternalMediaFormatActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.NetInitiatedActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.ResolverActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.musicfx.ControlPanelPicker.onCreate(Landroid/os/Bundle;)V
com.android.providers.media.RingtonePickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.ActivityPicker.onCreate(Landroid/os/Bundle;)V
com.android.settings.AllowBindAppWidgetActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothPairingDialog.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothPermissionActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.RequestPermissionHelperActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbAccessoryUriActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbConfirmActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbPermissionActivity.onCreate(Landroid/os/Bundle;)V
com.android.vpndialogs.ConfirmDialog.onCreate(Landroid/os/Bundle;)V
com.android.vpndialogs.ManageDialog.onCreate(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountPreferenceBase.onCreate(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onCreate(Landroid/os/Bundle;)V
com.android.settings.DeviceInfoSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onCreate(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.net.DataUsageMeteredSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WirelessSettings.onCreate(Landroid/os/Bundle;)V
com.android.browser.Preloader.cancelSearchBoxPreload(Ljava/lang/String;)V
com.android.browser.Preloader.handlePreloadRequest(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;)V
com.android.browser.WebViewController.createSubWindow(Lcom/android/browser/Tab;)V
com.android.browser.TabControl.createSnapshotTab(J)Lcom/android/browser/SnapshotTab;
com.android.browser.Tab.putInForeground()V
com.android.browser.TabControl.createNewWebView()Landroid/webkit/WebView;
com.android.browser.TabControl.createNewTab(Landroid/os/Bundle;Z)Lcom/android/browser/Tab;
com.android.browser.CrashRecoveryHandler.startRecovery(Landroid/content/Intent;)V
com.android.internal.app.ChooserActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.internal.app.ChooserActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.ResolverActivity.onCreate(Landroid/os/Bundle;)V
com.android.nfc.TechListChooserActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.nfc.TechListChooserActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbResolverActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.systemui.usb.UsbResolverActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.AppWidgetPickActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountSyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.SyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.browser.PreloadRequestReceiver.handlePreload(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.Tab.createSubWindow()Z
com.android.browser.Controller.createNewSnapshotTab(JZ)Lcom/android/browser/SnapshotTab;
com.android.browser.TabControl.setCurrentTab(Lcom/android/browser/Tab;Z)Z
com.android.browser.TabControl.recreateWebView(Lcom/android/browser/Tab;)V
com.android.browser.TabControl.createNewTab(Z)Lcom/android/browser/Tab;
com.android.browser.TabControl.restoreState(Landroid/os/Bundle;JZZ)V
com.android.browser.Controller.start(Landroid/content/Intent;)V
com.android.browser.PreloadRequestReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.SnapshotTab.createSubWindow()Z
com.android.browser.Tab$3.createWindow(ZLandroid/os/Message;)V
com.android.browser.Controller.onActivityResult(IILandroid/content/Intent;)V
com.android.browser.UiController.createNewSnapshotTab(JZ)Lcom/android/browser/SnapshotTab;
com.android.browser.TabControl.setCurrentTab(Lcom/android/browser/Tab;)Z
com.android.browser.Controller.reuseTab(Lcom/android/browser/Tab;Lcom/android/browser/IntentHandler$UrlData;)V
com.android.browser.Controller.createNewTab(ZZZ)Lcom/android/browser/Tab;
com.android.browser.TabControl.createNewTab()Lcom/android/browser/Tab;
com.android.browser.Controller.onPreloginFinished(Landroid/os/Bundle;Landroid/content/Intent;JZ)V
com.android.browser.ActivityController.start(Landroid/content/Intent;)V
com.android.browser.Tab$3.onCreateWindow(Landroid/webkit/WebView;ZZLandroid/os/Message;)Z
com.android.browser.Tab$3.access$1600(Lcom/android/browser/Tab$3;ZLandroid/os/Message;)V
com.android.browser.Controller.closeCurrentTab(Z)V
com.android.browser.Controller.setActiveTab(Lcom/android/browser/Tab;)V
com.android.browser.IntentHandler.onNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.openTab(Lcom/android/browser/IntentHandler$UrlData;)Lcom/android/browser/Tab;
com.android.browser.Controller.openTab(Ljava/lang/String;ZZZLcom/android/browser/Tab;)Lcom/android/browser/Tab;
com.android.browser.Controller.access$100(Lcom/android/browser/Controller;Landroid/os/Bundle;Landroid/content/Intent;JZ)V
com.android.browser.BrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.browser.Tab$3$1.onClick(Landroid/content/DialogInterface;I)V
com.android.browser.Controller.closeCurrentTab()V
com.android.browser.Controller.goBackOnePageOrQuit()V
com.android.browser.Controller.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.Controller.showPreloadedTab(Lcom/android/browser/IntentHandler$UrlData;)Lcom/android/browser/Tab;
com.android.browser.UiController.setActiveTab(Lcom/android/browser/Tab;)V
com.android.browser.Controller.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.Controller.openTab(Ljava/lang/String;Lcom/android/browser/Tab;ZZ)Lcom/android/browser/Tab;
com.android.browser.Controller$2.run()V
com.android.browser.Controller.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.Controller.closeEmptyTab()V
com.android.browser.Controller.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.UiController.closeCurrentTab()V
com.android.browser.Controller.onBackKey()V
com.android.browser.Controller.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.Controller.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.browser.UiController.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.WebViewController.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.NavScreen.switchToTab(Lcom/android/browser/Tab;)V
com.android.browser.PhoneUi.hideNavScreen(IZ)V
com.android.browser.ActivityController.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.UiController.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.openIncognitoTab()Lcom/android/browser/Tab;
com.android.browser.Controller.openTabToHomePage()Lcom/android/browser/Tab;
com.android.browser.UiController.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.UrlHandler.handleMenuClick(Lcom/android/browser/Tab;Ljava/lang/String;)Z
com.android.browser.WebViewController.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.Controller$7.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.Controller$9.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.WebViewController.openTab(Ljava/lang/String;Lcom/android/browser/Tab;ZZ)Lcom/android/browser/Tab;
com.android.browser.ActivityController.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.Controller.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UiController.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UrlHandler.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.UrlHandler.startActivityForUrl(Lcom/android/browser/Tab;Ljava/lang/String;)Z
com.android.browser.UiController.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.WebViewController.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.NavScreen.onCloseTab(Lcom/android/browser/Tab;)V
com.android.browser.PieControl.onClick(Landroid/view/View;)V
com.android.browser.TabBar$TabView.closeTab()V
com.android.browser.Controller.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.WebViewController.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.PieControl$TabAdapter$1.onClick(Landroid/view/View;)V
com.android.browser.TabBar.onClick(Landroid/view/View;)V
com.android.browser.Tab$3.onCloseWindow(Landroid/webkit/WebView;)V
com.android.browser.Tab$3.onRequestFocus(Landroid/webkit/WebView;)V
com.android.browser.NavScreen.access$100(Lcom/android/browser/NavScreen;Lcom/android/browser/Tab;)V
com.android.browser.NavScreen$2.onLayout(IIII)V
com.android.browser.NavScreen.close(IZ)V
com.android.browser.PhoneUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.PhoneUi.showWeb(Z)V
com.android.browser.PhoneUi.toggleNavScreen()V
com.android.browser.BrowserActivity.onNewIntent(Landroid/content/Intent;)V
com.android.browser.NavigationBarBase.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.UiController.openIncognitoTab()Lcom/android/browser/Tab;
com.android.browser.UiController.openTabToHomePage()Lcom/android/browser/Tab;
com.android.browser.NavScreen.openNewTab()V
com.android.browser.UrlHandler$RLZTask.onPostExecute(Ljava/lang/String;)V
com.android.browser.BrowserActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.ActivityController.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.NavigationBarPhone.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.NavScreen.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.Controller.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.SnapshotTab$LoadData.onPostExecute(Landroid/database/Cursor;)V
com.android.browser.NavScreen.access$000(Lcom/android/browser/NavScreen;Lcom/android/browser/Tab;)V
com.android.browser.TabBar$TabView.onClick(Landroid/view/View;)V
com.android.browser.ActivityController.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.Tab$4.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.Tab$7.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.NavScreen$TabAdapter$1.onClick(Landroid/view/View;)V
com.android.browser.NavTabScroller$OnLayoutListener.onLayout(IIII)V
com.android.browser.NavScreen.close(I)V
com.android.browser.BaseUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.BaseUi.showWeb(Z)V
com.android.browser.NavigationBarPhone.onClick(Landroid/view/View;)V
com.android.browser.SnapshotBar.onClick(Landroid/view/View;)V
com.android.browser.NavigationBarPhone.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.NavigationBarTablet.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.UrlInputView$UrlInputListener.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.NavScreen.onClick(Landroid/view/View;)V
com.android.browser.UrlHandler$RLZTask.onPostExecute(Ljava/lang/Object;)V
com.android.browser.BrowserActivity.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.WebViewController.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.SnapshotTab$LoadData.onPostExecute(Ljava/lang/Object;)V
com.android.browser.NavScreen$1.onRemovePosition(I)V
com.android.browser.BrowserActivity.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.NavTabScroller.onLayout(ZIIII)V
com.android.browser.PhoneUi.onBackKey()Z
com.android.browser.UI.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.XLargeUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UI.showWeb(Z)V
com.android.browser.XLargeUi.showWeb(Z)V
com.android.browser.NavigationBarBase.onClick(Landroid/view/View;)V
com.android.browser.UrlInputView.finishInput(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.Tab$2.shouldOverrideUrlLoading(Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.NavTabScroller$OnRemoveListener.onRemovePosition(I)V
com.android.browser.view.ScrollerView.onLayout(ZIIII)V
com.android.browser.BaseUi.onBackKey()Z
com.android.browser.NavigationBarTablet.onClick(Landroid/view/View;)V
com.android.browser.UrlInputView.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.browser.UrlInputView.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.browser.UrlInputView.onSelect(Ljava/lang/String;ILjava/lang/String;)V
com.android.browser.NavTabScroller$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.browser.UI.onBackKey()Z
com.android.browser.XLargeUi.onBackKey()Z
com.android.browser.SuggestionsAdapter$CompletionListener.onSelect(Ljava/lang/String;ILjava/lang/String;)V
com.android.browser.UrlInputView.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.browser.SuggestionsAdapter.onClick(Landroid/view/View;)V
android.webkit.WebSettingsClassic.verifyNetworkAccess()V
android.webkit.WebSettingsClassic.setBlockNetworkLoads(Z)V
com.android.providers.downloads.DownloadProvider.checkInsertPermissions(Landroid/content/ContentValues;)V
com.android.providers.downloads.DownloadProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.server.NsdService.getMessenger()Landroid/os/Messenger;
android.net.nsd.INsdManager$Stub$Proxy.getMessenger()Landroid/os/Messenger;
android.net.nsd.INsdManager$Stub.getMessenger()Landroid/os/Messenger;
android.net.nsd.INsdManager.getMessenger()Landroid/os/Messenger;
android.net.nsd.INsdManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.nsd.NsdManager.getMessenger()Landroid/os/Messenger;
com.android.server.NsdService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.nsd.NsdManager.init()V
android.net.nsd.NsdManager.<init>(Landroid/content/Context;Landroid/net/nsd/INsdManager;)V
android.app.DownloadManager.getUriForDownloadedFile(J)Landroid/net/Uri;
com.android.browser.OpenDownloadReceiver.onReceiveAsync(Landroid/content/Context;J)V
com.android.emailcommon.utility.AttachmentUtilities.saveAttachment(Landroid/content/Context;Ljava/io/InputStream;Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.browser.OpenDownloadReceiver.access$000(Lcom/android/browser/OpenDownloadReceiver;Landroid/content/Context;J)V
com.android.browser.OpenDownloadReceiver$1.run()V
android.app.DownloadManager.addCompletedDownload(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;JZ)J
com.android.browser.Controller$Download.saveDataUri()V
com.android.email.activity.MessageViewFragmentBase.performAttachmentSave(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)Ljava/io/File;
com.android.browser.Controller$Download.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.email.activity.MessageFileViewFragment.performAttachmentSave(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)Ljava/io/File;
com.android.email.activity.MessageViewFragmentBase.onOpenAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragmentBase.onSaveAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragment.performAttachmentSave(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)Ljava/io/File;
com.android.email.activity.MessageFileViewFragment.onOpenAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragmentBase.onClick(Landroid/view/View;)V
com.android.email.activity.MessageViewFragment.onOpenAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageFileViewFragment.onSaveAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragment.onSaveAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageFileViewFragment.onClick(Landroid/view/View;)V
com.android.email.activity.MessageViewFragment.onClick(Landroid/view/View;)V
android.app.DownloadManager.enqueue(Landroid/app/DownloadManager$Request;)J
com.android.browser.DownloadHandler$1.run()V
com.android.browser.FetchUrlMimeType.run()V
com.android.browser.DownloadHandler.onDownloadStartNoStream(Landroid/app/Activity;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
com.android.browser.DownloadHandler.onDownloadStart(Landroid/app/Activity;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
com.android.providers.downloads.DownloadProvider.logVerboseOpenFileInfo(Landroid/net/Uri;Ljava/lang/String;)V
com.android.providers.downloads.DownloadProvider.openFile(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
android.provider.Downloads.removeAllDownloadsByPackage(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.BootReceiver.removeOldUpdatePackages(Landroid/content/Context;)V
com.android.server.BootReceiver.access$100(Lcom/android/server/BootReceiver;Landroid/content/Context;)V
com.android.server.BootReceiver$1.run()V
com.android.server.BootReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.providers.downloads.DownloadInfo.getMyDownloadsUri()Landroid/net/Uri;
com.android.providers.downloads.DownloadInfo.sendIntentIfRequested()V
com.android.providers.downloads.DownloadThread.notifyDownloadCompleted(IZIZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.providers.downloads.DownloadThread.run()V
com.android.providers.downloads.StorageManager.trimDatabase()V
com.android.providers.downloads.StorageManager.access$100(Lcom/android/providers/downloads/StorageManager;)V
com.android.providers.downloads.StorageManager$1.run()V
com.android.providers.downloads.DownloadService$1.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.IMediaScannerListener$Stub$Proxy.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.IMediaScannerListener$Stub.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.IMediaScannerListener$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.IMediaScannerListener.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.MediaScannerConnection$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.providers.downloads.DownloadService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.providers.downloads.StorageManager.discardPurgeableFiles(IJ)J
com.android.providers.downloads.StorageManager.findSpace(Ljava/io/File;JI)V
com.android.providers.downloads.StorageManager.verifySpace(ILjava/lang/String;J)V
com.android.providers.downloads.DownloadThread.writeDataToDestination(Lcom/android/providers/downloads/DownloadThread$State;[BI)V
com.android.providers.downloads.Helpers.generateSaveFile(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJZLcom/android/providers/downloads/StorageManager;)Ljava/lang/String;
com.android.providers.downloads.StorageManager.verifySpaceBeforeWritingToFile(ILjava/lang/String;J)V
com.android.providers.downloads.DownloadThread.transferData(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;[BLjava/io/InputStream;)V
com.android.providers.downloads.DownloadThread.processResponseHeaders(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;Lorg/apache/http/HttpResponse;)V
com.android.providers.downloads.DownloadThread.executeDownload(Lcom/android/providers/downloads/DownloadThread$State;Landroid/net/http/AndroidHttpClient;Lorg/apache/http/client/methods/HttpGet;)V
com.android.providers.downloads.DownloadService$UpdateThread.run()V
com.android.providers.downloads.DownloadInfo.getAllDownloadsUri()Landroid/net/Uri;
com.android.providers.downloads.DownloadInfo$Reader.readRequestHeaders(Lcom/android/providers/downloads/DownloadInfo;)V
com.android.providers.downloads.DownloadInfo.notifyPauseDueToSize(Z)V
com.android.providers.downloads.DownloadInfo.startIfReady(JLcom/android/providers/downloads/StorageManager;)V
com.android.providers.downloads.DownloadService.scanFile(Lcom/android/providers/downloads/DownloadInfo;ZZ)Z
com.android.providers.downloads.DownloadThread.readFromResponse(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;[BLjava/io/InputStream;)I
com.android.providers.downloads.DownloadThread.handleEndOfStream(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;)V
com.android.providers.downloads.DownloadThread.notifyThroughDatabase(IZIZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.providers.downloads.DownloadThread.reportProgress(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;)V
com.android.providers.downloads.DownloadThread.updateDatabaseFromHeaders(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;)V
com.android.providers.downloads.DownloadInfo$Reader.newDownloadInfo(Landroid/content/Context;Lcom/android/providers/downloads/SystemFacade;)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadThread.checkConnectivity()V
com.android.providers.downloads.DownloadService.insertDownloadLocked(Lcom/android/providers/downloads/DownloadInfo$Reader;J)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadService.updateDownload(Lcom/android/providers/downloads/DownloadInfo$Reader;Lcom/android/providers/downloads/DownloadInfo;J)V
com.android.providers.downloads.DownloadService.access$700(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo;ZZ)Z
com.android.providers.downloads.DownloadService.deleteDownloadLocked(J)V
com.android.providers.downloads.DownloadThread.checkPausedOrCanceled(Lcom/android/providers/downloads/DownloadThread$State;)V
com.android.providers.downloads.DownloadService.access$600(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo$Reader;J)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadService.access$500(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo$Reader;Lcom/android/providers/downloads/DownloadInfo;J)V
com.android.providers.downloads.DownloadService.access$800(Lcom/android/providers/downloads/DownloadService;J)V
java.net.DatagramSocket.<init>(I)V
java.net.HttpURLConnection.<init>(I)V
java.net.HttpURLConnection.connect()V
com.android.quicksearchbox.util.JavaNetHttpHelper.get(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/String;
com.android.quicksearchbox.util.JavaNetHttpHelper.post(Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;
com.android.quicksearchbox.util.HttpHelper.get(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/String;
com.android.quicksearchbox.util.JavaNetHttpHelper.get(Lcom/android/quicksearchbox/util/HttpHelper$GetRequest;)Ljava/lang/String;
com.android.quicksearchbox.util.HttpHelper.post(Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;
com.android.quicksearchbox.util.JavaNetHttpHelper.post(Lcom/android/quicksearchbox/util/HttpHelper$PostRequest;)Ljava/lang/String;
com.android.quicksearchbox.util.HttpHelper.get(Lcom/android/quicksearchbox/util/HttpHelper$GetRequest;)Ljava/lang/String;
com.android.quicksearchbox.util.HttpHelper.post(Lcom/android/quicksearchbox/util/HttpHelper$PostRequest;)Ljava/lang/String;
com.android.quicksearchbox.google.SearchBaseUrlHelper$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.quicksearchbox.google.SearchBaseUrlHelper$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
java.net.MulticastSocket.<init>(I)V
java.net.NetworkInterface.<init>(I)V
java.net.ServerSocket.<init>(I)V
com.android.bluetooth.opp.TestTcpSessionNotifier.<init>(I)V
com.android.bluetooth.opp.TestTcpServer.run()V
java.net.ServerSocket.bind(Ljava/net/SocketAddress;)V
com.android.internal.telephony.test.ModelInterpreter.<init>(Ljava/net/InetSocketAddress;)V
java.net.Socket.<init>(I)V
java.net.URL.getContent()Ljava/lang/Object;
java.net.URL.openConnection()Ljava/net/URLConnection;
android.net.wifi.WifiWatchdogStateMachine.isWalledGardenConnection()Z
com.android.quicksearchbox.util.JavaNetHttpHelper.createConnection(Ljava/lang/String;Ljava/util/Map;)Ljava/net/HttpURLConnection;
android.net.wifi.WifiWatchdogStateMachine.access$3200(Landroid/net/wifi/WifiWatchdogStateMachine;)Z
android.net.wifi.WifiWatchdogStateMachine$WalledGardenCheckState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
java.net.URL.openStream()Ljava/io/InputStream;
com.android.browser.WallpaperHandler.openStream()Ljava/io/InputStream;
com.android.gallery3d.data.DownloadUtils.download(Lcom/android/gallery3d/util/ThreadPool$JobContext;Ljava/net/URL;Ljava/io/OutputStream;)Z
com.google.common.io.Resources$1.getInput()Ljava/io/InputStream;
com.android.browser.WallpaperHandler.run()V
com.android.gallery3d.data.DownloadUtils.requestDownload(Lcom/android/gallery3d/util/ThreadPool$JobContext;Ljava/net/URL;Ljava/io/File;)Z
com.google.common.io.Resources$1.getInput()Ljava/lang/Object;
com.android.browser.WallpaperHandler.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.gallery3d.data.DownloadCache$DownloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/io/File;
com.google.common.io.InputSupplier.getInput()Ljava/lang/Object;
com.android.gallery3d.data.DownloadCache$DownloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.google.common.io.ByteStreams$4.getInput()Ljava/io/InputStream;
com.google.common.io.ByteStreams.equal(Lcom/google/common/io/InputSupplier;Lcom/google/common/io/InputSupplier;)Z
com.google.common.io.ByteStreams.toByteArray(Lcom/google/common/io/InputSupplier;)[B
com.google.common.io.ByteStreams.readBytes(Lcom/google/common/io/InputSupplier;Lcom/google/common/io/ByteProcessor;)Ljava/lang/Object;
com.google.common.io.ByteStreams.copy(Lcom/google/common/io/InputSupplier;Lcom/google/common/io/OutputSupplier;)J
com.google.common.io.ByteStreams.copy(Lcom/google/common/io/InputSupplier;Ljava/io/OutputStream;)J
com.google.common.io.ByteStreams.length(Lcom/google/common/io/InputSupplier;)J
com.google.common.io.CharStreams$2.getInput()Ljava/io/InputStreamReader;
com.google.common.io.CharStreams.readLines(Lcom/google/common/io/InputSupplier;Lcom/google/common/io/LineProcessor;)Ljava/lang/Object;
com.google.common.io.CharStreams.toStringBuilder(Lcom/google/common/io/InputSupplier;)Ljava/lang/StringBuilder;
com.google.common.io.CharStreams.readFirstLine(Lcom/google/common/io/InputSupplier;)Ljava/lang/String;
com.google.common.io.CharStreams.readLines(Lcom/google/common/io/InputSupplier;)Ljava/util/List;
com.google.common.io.CharStreams.copy(Lcom/google/common/io/InputSupplier;Lcom/google/common/io/OutputSupplier;)J
com.google.common.io.CharStreams.copy(Lcom/google/common/io/InputSupplier;Ljava/lang/Appendable;)J
com.google.common.io.MultiInputStream.advance()V
com.google.common.io.MultiReader.advance()V
com.android.gallery3d.util.ThreadPool$Job.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.google.common.io.ByteStreams$4.getInput()Ljava/lang/Object;
com.google.common.io.Files.equal(Ljava/io/File;Ljava/io/File;)Z
com.google.common.io.Files.toByteArray(Ljava/io/File;)[B
com.google.common.io.Resources.toByteArray(Ljava/net/URL;)[B
com.google.common.io.ByteStreams.getDigest(Lcom/google/common/io/InputSupplier;Ljava/security/MessageDigest;)[B
com.google.common.io.ByteStreams.getChecksum(Lcom/google/common/io/InputSupplier;Ljava/util/zip/Checksum;)J
com.google.common.io.Files.readBytes(Ljava/io/File;Lcom/google/common/io/ByteProcessor;)Ljava/lang/Object;
com.google.common.io.Files.copy(Lcom/google/common/io/InputSupplier;Ljava/io/File;)V
com.google.common.io.Files.copy(Ljava/io/File;Lcom/google/common/io/OutputSupplier;)V
com.google.common.io.Files.copy(Ljava/io/File;Ljava/io/OutputStream;)V
com.google.common.io.Resources.copy(Ljava/net/URL;Ljava/io/OutputStream;)V
com.google.common.io.CharStreams$2.getInput()Ljava/lang/Object;
com.google.common.io.Files.readLines(Ljava/io/File;Ljava/nio/charset/Charset;Lcom/google/common/io/LineProcessor;)Ljava/lang/Object;
com.google.common.io.Resources.readLines(Ljava/net/URL;Ljava/nio/charset/Charset;Lcom/google/common/io/LineProcessor;)Ljava/lang/Object;
com.google.common.io.CharStreams.toString(Lcom/google/common/io/InputSupplier;)Ljava/lang/String;
com.google.common.io.Files.readFirstLine(Ljava/io/File;Ljava/nio/charset/Charset;)Ljava/lang/String;
com.google.common.io.Files.readLines(Ljava/io/File;Ljava/nio/charset/Charset;)Ljava/util/List;
com.google.common.io.Resources.readLines(Ljava/net/URL;Ljava/nio/charset/Charset;)Ljava/util/List;
com.google.common.io.Files.copy(Lcom/google/common/io/InputSupplier;Ljava/io/File;Ljava/nio/charset/Charset;)V
com.google.common.io.Files.copy(Ljava/io/File;Ljava/nio/charset/Charset;Lcom/google/common/io/OutputSupplier;)V
com.google.common.io.Files.copy(Ljava/io/File;Ljava/nio/charset/Charset;Ljava/lang/Appendable;)V
com.google.common.io.MultiInputStream.read([BII)I
com.google.common.io.MultiInputStream.read()I
com.google.common.io.MultiInputStream.<init>(Ljava/util/Iterator;)V
com.google.common.io.MultiReader.read([CII)I
com.google.common.io.MultiReader.skip(J)J
com.google.common.io.MultiReader.<init>(Ljava/util/Iterator;)V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/Bitmap;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Lcom/android/gallery3d/ui/ScreenNail;
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.gallery3d.gadget.WidgetUtils.createWidgetBitmap(Lcom/android/gallery3d/data/MediaItem;)Landroid/graphics/Bitmap;
com.android.gallery3d.ui.AlbumSetSlidingWindow.getLoadingTexture()Lcom/android/gallery3d/ui/BitmapTexture;
com.android.gallery3d.util.JobLimiter$JobWrapper.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.util.ThreadPool$Worker.run()V
com.google.common.io.Files.toString(Ljava/io/File;Ljava/nio/charset/Charset;)Ljava/lang/String;
com.google.common.io.Files.getDigest(Ljava/io/File;Ljava/security/MessageDigest;)[B
com.google.common.io.Files.getChecksum(Ljava/io/File;Ljava/util/zip/Checksum;)J
com.google.common.io.Files.copy(Ljava/io/File;Ljava/io/File;)V
com.google.common.io.Resources.toString(Ljava/net/URL;Ljava/nio/charset/Charset;)Ljava/lang/String;
com.google.common.io.MultiInputStream.skip(J)J
com.google.common.io.ByteStreams$5.getInput()Ljava/io/InputStream;
com.google.common.io.CharStreams$4.getInput()Ljava/io/Reader;
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.gadget.LocalPhotoSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.gadget.MediaSetSource.getImage(I)Landroid/graphics/Bitmap;
com.google.common.io.Files.move(Ljava/io/File;Ljava/io/File;)V
com.google.common.io.ByteStreams$5.getInput()Ljava/lang/Object;
com.google.common.io.CharStreams$4.getInput()Ljava/lang/Object;
com.android.gallery3d.gadget.WidgetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.gadget.WidgetService$PhotoRVFactory.getViewAt(I)Landroid/widget/RemoteViews;
java.net.URLConnection.connect()V
java.net.URLConnection.getInputStream()Ljava/io/InputStream;
org.apache.http.impl.client.DefaultHttpClient.<init>(I)V
org.apache.http.impl.client.DefaultHttpClient.execute(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;
Permission:android.permission.SET_WALLPAPER

54 Callers:

com.android.server.WallpaperManagerService.setWallpaper(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager$Stub$Proxy.setWallpaper(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager$Stub.setWallpaper(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.setWallpaper(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.WallpaperManager.setBitmap(Landroid/graphics/Bitmap;)V
android.app.WallpaperManager.setResource(I)V
android.app.WallpaperManager.setStream(Ljava/io/InputStream;)V
com.android.server.WallpaperManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ContextImpl.setWallpaper(Landroid/graphics/Bitmap;)V
com.android.browser.WallpaperHandler.run()V
com.android.gallery3d.app.CropImage.setAsWallpaper(Lcom/android/gallery3d/util/ThreadPool$JobContext;Landroid/graphics/Bitmap;)Z
android.app.WallpaperManager.clear()V
com.android.launcher2.WallpaperChooserDialogFragment.selectWallpaper(I)V
android.app.ContextImpl.setWallpaper(Ljava/io/InputStream;)V
android.content.Context.setWallpaper(Landroid/graphics/Bitmap;)V
com.android.browser.WallpaperHandler.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.CropImage.access$500(Lcom/android/gallery3d/app/CropImage;Lcom/android/gallery3d/util/ThreadPool$JobContext;Landroid/graphics/Bitmap;)Z
android.app.ContextImpl.clearWallpaper()V
com.android.systemui.ImageWallpaper$DrawableEngine.updateWallpaperLocked()V
com.android.launcher2.WallpaperChooserDialogFragment.access$000(Lcom/android/launcher2/WallpaperChooserDialogFragment;I)V
com.android.launcher2.WallpaperChooserDialogFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
android.content.Context.setWallpaper(Ljava/io/InputStream;)V
android.content.ContextWrapper.setWallpaper(Landroid/graphics/Bitmap;)V
com.android.gallery3d.app.CropImage$SaveOutput.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/content/Intent;
android.content.Context.clearWallpaper()V
com.android.systemui.ImageWallpaper$DrawableEngine.drawFrameLocked()V
com.android.launcher2.WallpaperChooserDialogFragment$1.onClick(Landroid/view/View;)V
android.content.ContextWrapper.setWallpaper(Ljava/io/InputStream;)V
com.android.gallery3d.app.CropImage$SaveOutput.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
android.content.ContextWrapper.clearWallpaper()V
com.android.systemui.ImageWallpaper$DrawableEngine.onOffsetsChanged(FFFFII)V
com.android.systemui.ImageWallpaper$DrawableEngine.onSurfaceChanged(Landroid/view/SurfaceHolder;III)V
com.android.systemui.ImageWallpaper$DrawableEngine.onVisibilityChanged(Z)V
com.android.systemui.ImageWallpaper$DrawableEngine$WallpaperObserver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.gallery3d.util.ThreadPool$Job.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/Bitmap;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Lcom/android/gallery3d/ui/ScreenNail;
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.gallery3d.gadget.WidgetUtils.createWidgetBitmap(Lcom/android/gallery3d/data/MediaItem;)Landroid/graphics/Bitmap;
com.android.gallery3d.ui.AlbumSetSlidingWindow.getLoadingTexture()Lcom/android/gallery3d/ui/BitmapTexture;
com.android.gallery3d.util.JobLimiter$JobWrapper.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.util.ThreadPool$Worker.run()V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.gadget.LocalPhotoSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.gadget.MediaSetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.gadget.WidgetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.gadget.WidgetService$PhotoRVFactory.getViewAt(I)Landroid/widget/RemoteViews;
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS

288 Callers:

android.provider.Browser.deleteFromHistory(Landroid/content/ContentResolver;Ljava/lang/String;)V
com.android.browser.BrowserHistoryPage.onContextItemSelected(Landroid/view/MenuItem;)Z
android.provider.BrowserContract$Bookmarks.buildFolderUri(J)Landroid/net/Uri;
com.android.browser.AddBookmarkPage.getUriForFolder(J)Landroid/net/Uri;
com.android.browser.AddBookmarkPage.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.browser.AddBookmarkPage.onTop(Lcom/android/browser/BreadCrumbView;ILjava/lang/Object;)V
com.android.browser.BreadCrumbView$Controller.onTop(Lcom/android/browser/BreadCrumbView;ILjava/lang/Object;)V
com.android.browser.BreadCrumbView.notifyController()V
com.android.browser.view.BookmarkExpandableView.onTop(Lcom/android/browser/BreadCrumbView;ILjava/lang/Object;)V
com.android.browser.AddBookmarkPage.descendInto(Ljava/lang/String;J)V
com.android.browser.BreadCrumbView.onClick(Landroid/view/View;)V
com.android.browser.BreadCrumbView.pop(Z)V
com.android.browser.AddBookmarkPage.completeOrCancelFolderNaming(Z)V
com.android.browser.AddBookmarkPage.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.browser.BreadCrumbView.clear()V
com.android.browser.BreadCrumbView.popView()V
com.android.browser.AddBookmarkPage.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.browser.AddBookmarkPage.onClick(Landroid/view/View;)V
com.android.browser.AddBookmarkPage.setupTopCrumb()V
com.android.browser.AddBookmarkPage.onRootFolderFound(J)V
com.android.browser.AddBookmarkPage.switchToDefaultView(Z)V
com.android.browser.AddBookmarkPage.onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.browser.AddBookmarkPage.setAccount(Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.AddBookmarkPage$1.onLoadFinished(Landroid/content/Loader;Lcom/android/browser/AddBookmarkPage$EditBookmarkInfo;)V
com.android.browser.AddBookmarkPage$1.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.browser.DownloadTouchIcon.storeIcon(Landroid/graphics/Bitmap;)V
com.android.browser.DownloadTouchIcon.doInBackground([Ljava/lang/String;)Ljava/lang/Void;
com.android.browser.DownloadTouchIcon.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Browser.updateVisitedHistory(Landroid/content/ContentResolver;Ljava/lang/String;Z)V
com.android.browser.Controller$SaveSnapshotTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Long;
com.android.browser.Controller$SaveSnapshotTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BrowserBackupAgent.addBookmark(Lcom/android/browser/BrowserBackupAgent$Bookmark;)V
com.android.browser.BrowserBackupAgent.onRestore(Landroid/app/backup/BackupDataInput;ILandroid/os/ParcelFileDescriptor;)V
android.provider.Browser.truncateHistory(Landroid/content/ContentResolver;)V
com.android.browser.DataController$DataControllerHandler.doUpdateVisitedHistory(Ljava/lang/String;)V
android.provider.BrowserContract$SyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
android.provider.BrowserContract$SyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
android.provider.Browser.clearSearches(Landroid/content/ContentResolver;)V
com.android.browser.BrowserSettings.clearHistory()V
com.android.browser.BrowserYesNoPreference.onDialogClosed(Z)V
com.android.internal.preference.YesNoPreference.onDialogClosed(Z)V
com.android.browser.Bookmarks.removeFromBookmarks(Landroid/content/Context;Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.BrowserBookmarksPage.handleContextItem(III)Z
com.android.browser.HistoryItem.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.browser.BrowserBookmarksPage.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.BrowserBookmarksPage$2.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts.delete(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts.run()V
com.android.browser.AccountsChangedReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.Controller$10.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.browser.Controller$10.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.DataController$DataControllerHandler.handleMessage(Lcom/android/browser/DataController$DCMessage;)V
com.android.browser.DataController$DataControllerHandler.run()V
com.android.browser.DataController.<init>(Landroid/content/Context;)V
com.android.browser.DataController.getInstance(Landroid/content/Context;)Lcom/android/browser/DataController;
com.android.browser.Controller.doUpdateVisitedHistory(Lcom/android/browser/Tab;Z)V
com.android.browser.Controller.onReceivedTitle(Lcom/android/browser/Tab;Ljava/lang/String;)V
com.android.browser.Tab.deleteThumbnail()V
com.android.browser.Tab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;Landroid/os/Bundle;)V
com.android.browser.Tab.persistThumbnail()V
com.android.browser.Tab.restoreState(Landroid/os/Bundle;)V
com.android.browser.WebViewController.doUpdateVisitedHistory(Lcom/android/browser/Tab;Z)V
com.android.browser.WebViewController.onReceivedTitle(Lcom/android/browser/Tab;Ljava/lang/String;)V
com.android.browser.SnapshotTab.deleteThumbnail()V
com.android.browser.TabControl.saveState(Landroid/os/Bundle;)V
com.android.browser.Tab.removeFromTree()V
com.android.browser.Tab.updateShouldCaptureThumbnails()V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;Landroid/os/Bundle;)V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;J)V
com.android.browser.TabControl.createNewTab(Landroid/os/Bundle;Z)Lcom/android/browser/Tab;
com.android.browser.Tab.<init>(Lcom/android/browser/WebViewController;Landroid/os/Bundle;)V
com.android.browser.Tab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;)V
com.android.browser.SnapshotTab.persistThumbnail()V
com.android.browser.Tab.capture()V
com.android.browser.SnapshotTab.restoreState(Landroid/os/Bundle;)V
com.android.browser.Tab$2.doUpdateVisitedHistory(Landroid/webkit/WebView;Ljava/lang/String;Z)V
com.android.browser.Tab$3.onReceivedTitle(Landroid/webkit/WebView;Ljava/lang/String;)V
com.android.browser.Controller.createSaveState()Landroid/os/Bundle;
com.android.browser.SnapshotTab.removeFromTree()V
com.android.browser.TabControl.removeTab(Lcom/android/browser/Tab;)Z
com.android.browser.TabControl.removeParentChildRelationShips()V
com.android.browser.SnapshotTab.updateShouldCaptureThumbnails()V
com.android.browser.Tab.setController(Lcom/android/browser/WebViewController;)V
com.android.browser.XLargeUi.setUseQuickControls(Z)V
com.android.browser.TabControl.createSnapshotTab(J)Lcom/android/browser/SnapshotTab;
com.android.browser.TabControl.createNewTab(Z)Lcom/android/browser/Tab;
com.android.browser.TabControl.restoreState(Landroid/os/Bundle;JZZ)V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;Landroid/os/Bundle;)V
com.android.browser.Preloader$PreloaderSession.<init>(Lcom/android/browser/Preloader;Ljava/lang/String;)V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;)V
com.android.browser.PhoneUi.showNavScreen()V
com.android.browser.PieControl.buildTabs()V
com.android.browser.SnapshotTab.capture()V
com.android.browser.Tab.putInBackground()V
com.android.browser.Tab.postCapture()V
com.android.browser.Controller.onSaveInstanceState(Landroid/os/Bundle;)V
com.android.browser.CrashRecoveryHandler$2.run()V
com.android.browser.Controller.closeCurrentTab(Z)V
com.android.browser.Controller.removeTab(Lcom/android/browser/Tab;)V
com.android.browser.Controller.onActivityResult(IILandroid/content/Intent;)V
com.android.browser.SnapshotTab.setController(Lcom/android/browser/WebViewController;)V
com.android.browser.TabControl.addPreloadedTab(Lcom/android/browser/Tab;)V
com.android.browser.BaseUi.setUseQuickControls(Z)V
com.android.browser.XLargeUi.<init>(Landroid/app/Activity;Lcom/android/browser/UiController;)V
com.android.browser.Controller.createNewSnapshotTab(JZ)Lcom/android/browser/SnapshotTab;
com.android.browser.Controller.createNewTab(ZZZ)Lcom/android/browser/Tab;
com.android.browser.TabControl.createNewTab()Lcom/android/browser/Tab;
com.android.browser.Controller.onPreloginFinished(Landroid/os/Bundle;Landroid/content/Intent;JZ)V
com.android.browser.Preloader.getSession(Ljava/lang/String;)Lcom/android/browser/Preloader$PreloaderSession;
com.android.browser.PhoneUi.toggleNavScreen()V
com.android.browser.PieControl.onClick(Landroid/view/View;)V
com.android.browser.PieControl.access$000(Lcom/android/browser/PieControl;)V
com.android.browser.SnapshotTab.putInBackground()V
com.android.browser.TabControl.setCurrentTab(Lcom/android/browser/Tab;Z)Z
com.android.browser.SnapshotTab.postCapture()V
com.android.browser.Tab.onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V
com.android.browser.ActivityController.onSaveInstanceState(Landroid/os/Bundle;)V
com.android.browser.Controller.closeCurrentTab()V
com.android.browser.Controller.goBackOnePageOrQuit()V
com.android.browser.Controller.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.Controller.onDestroy()V
com.android.browser.Controller.showPreloadedTab(Lcom/android/browser/IntentHandler$UrlData;)Lcom/android/browser/Tab;
com.android.browser.PhoneUi.setUseQuickControls(Z)V
com.android.browser.UI.setUseQuickControls(Z)V
com.android.browser.BaseUi.<init>(Landroid/app/Activity;Lcom/android/browser/UiController;)V
com.android.browser.BrowserActivity.createController()Lcom/android/browser/Controller;
com.android.browser.UiController.createNewSnapshotTab(JZ)Lcom/android/browser/SnapshotTab;
com.android.browser.Controller.openTab(Lcom/android/browser/IntentHandler$UrlData;)Lcom/android/browser/Tab;
com.android.browser.Controller.openTab(Ljava/lang/String;ZZZLcom/android/browser/Tab;)Lcom/android/browser/Tab;
com.android.browser.Controller.access$100(Lcom/android/browser/Controller;Landroid/os/Bundle;Landroid/content/Intent;JZ)V
com.android.browser.Preloader.cancelSearchBoxPreload(Ljava/lang/String;)V
com.android.browser.Preloader.handlePreloadRequest(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;)V
com.android.browser.NavigationBarPhone.onClick(Landroid/view/View;)V
com.android.browser.SnapshotBar.onClick(Landroid/view/View;)V
com.android.browser.PieControl$1.onLayout(IIZ)V
com.android.browser.TabControl.setCurrentTab(Lcom/android/browser/Tab;)Z
com.android.browser.TabControl.recreateWebView(Lcom/android/browser/Tab;)V
com.android.browser.SnapshotTab.onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V
com.android.browser.BrowserActivity.onNewIntent(Landroid/content/Intent;)V
com.android.browser.BrowserActivity.onSaveInstanceState(Landroid/os/Bundle;)V
com.android.browser.Controller.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.Controller.closeEmptyTab()V
com.android.browser.UiController.closeCurrentTab()V
com.android.browser.Controller.onBackKey()V
com.android.browser.Controller.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.UiController.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.WebViewController.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.ActivityController.onDestroy()V
com.android.browser.PhoneUi.<init>(Landroid/app/Activity;Lcom/android/browser/UiController;)V
com.android.browser.BrowserSettings.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.browser.BrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.browser.IntentHandler.onNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.Controller.openTab(Ljava/lang/String;Lcom/android/browser/Tab;ZZ)Lcom/android/browser/Tab;
com.android.browser.Controller$2.run()V
com.android.browser.PreloadRequestReceiver.handlePreload(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.NavigationBarBase.onClick(Landroid/view/View;)V
com.android.browser.view.PieMenu$PieView$OnLayoutListener.onLayout(IIZ)V
com.android.browser.Controller.setActiveTab(Lcom/android/browser/Tab;)V
com.android.browser.Controller.reuseTab(Lcom/android/browser/Tab;Lcom/android/browser/IntentHandler$UrlData;)V
com.android.browser.ActivityController.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.Controller.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UiController.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UrlHandler.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.UrlHandler.startActivityForUrl(Lcom/android/browser/Tab;Ljava/lang/String;)Z
com.android.browser.NavScreen.onCloseTab(Lcom/android/browser/Tab;)V
com.android.browser.TabBar$TabView.closeTab()V
com.android.browser.Controller.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.WebViewController.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.SnapshotTab$LoadData.onPostExecute(Landroid/database/Cursor;)V
com.android.browser.Tab$3.onCloseWindow(Landroid/webkit/WebView;)V
com.android.browser.BrowserActivity.onDestroy()V
com.android.browser.Controller.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.openIncognitoTab()Lcom/android/browser/Tab;
com.android.browser.Controller.openTabToHomePage()Lcom/android/browser/Tab;
com.android.browser.UiController.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.UrlHandler.handleMenuClick(Lcom/android/browser/Tab;Ljava/lang/String;)Z
com.android.browser.WebViewController.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.Controller$7.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.Controller$9.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.WebViewController.openTab(Ljava/lang/String;Lcom/android/browser/Tab;ZZ)Lcom/android/browser/Tab;
com.android.browser.PreloadRequestReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.NavigationBarTablet.onClick(Landroid/view/View;)V
com.android.browser.view.BasePieView.layout(IIZFI)V
com.android.browser.Controller.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.UiController.setActiveTab(Lcom/android/browser/Tab;)V
com.android.browser.BrowserActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.ActivityController.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.NavigationBarPhone.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.NavScreen.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.Controller.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.UrlHandler$RLZTask.onPostExecute(Ljava/lang/String;)V
com.android.browser.NavScreen.access$000(Lcom/android/browser/NavScreen;Lcom/android/browser/Tab;)V
com.android.browser.TabBar$TabView.onClick(Landroid/view/View;)V
com.android.browser.ActivityController.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.Tab$4.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.Tab$7.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.SnapshotTab$LoadData.onPostExecute(Ljava/lang/Object;)V
com.android.browser.ActivityController.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.UiController.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.browser.UiController.openIncognitoTab()Lcom/android/browser/Tab;
com.android.browser.UiController.openTabToHomePage()Lcom/android/browser/Tab;
com.android.browser.NavScreen.openNewTab()V
com.android.browser.Tab$3.createWindow(ZLandroid/os/Message;)V
com.android.browser.view.PieListView.layout(IIZFI)V
com.android.browser.view.PieMenu$PieView.layout(IIZFI)V
com.android.browser.view.PieStackView.layout(IIZFI)V
com.android.browser.UiController.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.WebViewController.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.NavScreen.switchToTab(Lcom/android/browser/Tab;)V
com.android.browser.PhoneUi.hideNavScreen(IZ)V
com.android.browser.BrowserActivity.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.WebViewController.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.UrlHandler$RLZTask.onPostExecute(Ljava/lang/Object;)V
com.android.browser.NavScreen$1.onRemovePosition(I)V
com.android.browser.BrowserActivity.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.NavigationBarBase.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.TabBar.onClick(Landroid/view/View;)V
com.android.browser.NavScreen.onClick(Landroid/view/View;)V
com.android.browser.Tab$3.onCreateWindow(Landroid/webkit/WebView;ZZLandroid/os/Message;)Z
com.android.browser.Tab$3.access$1600(Lcom/android/browser/Tab$3;ZLandroid/os/Message;)V
com.android.browser.view.PieMenu.layoutPieView(Lcom/android/browser/view/PieMenu$PieView;IIF)V
com.android.browser.PieControl$TabAdapter$1.onClick(Landroid/view/View;)V
com.android.browser.Tab$3.onRequestFocus(Landroid/webkit/WebView;)V
com.android.browser.NavScreen.access$100(Lcom/android/browser/NavScreen;Lcom/android/browser/Tab;)V
com.android.browser.NavScreen$2.onLayout(IIII)V
com.android.browser.NavScreen.close(IZ)V
com.android.browser.PhoneUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.PhoneUi.showWeb(Z)V
com.android.browser.Tab$2.shouldOverrideUrlLoading(Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.NavTabScroller$OnRemoveListener.onRemovePosition(I)V
com.android.browser.NavigationBarPhone.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.NavigationBarTablet.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.UrlInputView$UrlInputListener.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.Tab$3$1.onClick(Landroid/content/DialogInterface;I)V
com.android.browser.view.PieMenu.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.browser.NavScreen$TabAdapter$1.onClick(Landroid/view/View;)V
com.android.browser.NavTabScroller$OnLayoutListener.onLayout(IIII)V
com.android.browser.NavScreen.close(I)V
com.android.browser.BaseUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.BaseUi.showWeb(Z)V
com.android.browser.NavTabScroller$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.browser.UrlInputView.finishInput(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.NavTabScroller.onLayout(ZIIII)V
com.android.browser.PhoneUi.onBackKey()Z
com.android.browser.UI.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.XLargeUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UI.showWeb(Z)V
com.android.browser.XLargeUi.showWeb(Z)V
com.android.browser.UrlInputView.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.browser.UrlInputView.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.browser.UrlInputView.onSelect(Ljava/lang/String;ILjava/lang/String;)V
com.android.browser.view.ScrollerView.onLayout(ZIIII)V
com.android.browser.BaseUi.onBackKey()Z
com.android.browser.SuggestionsAdapter$CompletionListener.onSelect(Ljava/lang/String;ILjava/lang/String;)V
com.android.browser.UrlInputView.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.browser.UI.onBackKey()Z
com.android.browser.XLargeUi.onBackKey()Z
com.android.browser.SuggestionsAdapter.onClick(Landroid/view/View;)V
com.android.browser.DataController$DataControllerHandler.doUpdateHistoryTitle(Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.Controller$PruneThumbnails.run()V
com.android.browser.Bookmarks$1.updateImages(Landroid/content/ContentResolver;Ljava/lang/String;Landroid/content/ContentValues;)V
com.android.browser.Bookmarks$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.browser.Bookmarks$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Browser.addSearchUrl(Landroid/content/ContentResolver;Ljava/lang/String;)V
com.android.browser.IntentHandler$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.browser.IntentHandler$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BookmarkUtils.getBookmarksUri(Landroid/content/Context;)Landroid/net/Uri;
com.android.browser.AddBookmarkPage$UpdateBookmarkTask.doInBackground([Landroid/content/ContentValues;)Ljava/lang/Void;
com.android.browser.BrowserBookmarksPage$LookupBookmarkCount.doInBackground([Ljava/lang/Long;)Ljava/lang/Integer;
com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask.doInBackground([Ljava/lang/Void;)Landroid/database/Cursor;
com.android.browser.DataController$DataControllerHandler.doQueryBookmarkStatus(Ljava/lang/String;Ljava/lang/Object;)V
com.android.browser.AddBookmarkPage$UpdateBookmarkTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BrowserBookmarksPage$LookupBookmarkCount.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Browser.deleteHistoryWhere(Landroid/content/ContentResolver;Ljava/lang/String;)V
android.provider.Browser.clearHistory(Landroid/content/ContentResolver;)V
android.provider.Browser.deleteHistoryTimeFrame(Landroid/content/ContentResolver;JJ)V
com.android.browser.BrowserHistoryPage$ClearHistoryTask.run()V
com.android.browser.BrowserHistoryPage$3.onClick(Landroid/content/DialogInterface;I)V
com.android.browser.provider.BrowserProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.browser.AddBookmarkPage.addFolderToCurrent(Ljava/lang/String;)J
com.android.browser.Bookmarks.addBookmark(Landroid/content/Context;ZLjava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap;J)V
com.android.browser.AddBookmarkPage$SaveBookmarkRunnable.run()V
android.provider.BrowserContract$Settings.setSyncEnabled(Landroid/content/Context;Z)V
com.android.browser.BookmarkUtils$1$1.run()V
com.android.browser.DataController$DataControllerHandler.doSaveThumbnail(Lcom/android/browser/Tab;)V
Permission:android.permission.WRITE_SOCIAL_STREAM

903 Callers:

com.android.providers.contacts.ContactsProvider2.enforceSocialStreamWritePermission(Landroid/net/Uri;)V
com.android.providers.contacts.ContactsProvider2.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.contacts.ContactsProvider2.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.email.activity.setup.AccountSetupNames.access$100()Landroid/net/Uri;
com.android.email.activity.setup.AccountSetupNames$2.doInBackground([Ljava/lang/Void;)Ljava/lang/String;
com.android.email.activity.setup.AccountSetupNames$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxFinder$FindMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$6.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$QuickResponseChecker.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageFileView$LoadFilenameTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageList$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment$MessageOpenTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSetupNames$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.UIControllerTwoPane$RefreshTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.commit()V
com.android.exchange.adapter.AbstractSyncParser.commit()V
com.android.exchange.adapter.AbstractSyncParser.parse()Z
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.parse()Z
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser.parse()Z
com.android.exchange.adapter.Parser.parse()Z
com.android.exchange.adapter.CalendarSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.ContactsSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.EmailSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.AbstractSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.EasSyncService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasAccountService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasOutboxService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasSyncService.run()V
com.android.vcard.VCardEntry$PhoneData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$EntryElement.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$InsertOperationConstrutor.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z
com.android.vcard.VCardEntry$EntryElementIterator.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z
com.android.vcard.VCardEntry.iterateAllData(Lcom/android/vcard/VCardEntry$EntryElementIterator;)V
com.android.vcard.VCardEntry.iterateOneList(Ljava/util/List;Lcom/android/vcard/VCardEntry$EntryElementIterator;)V
com.android.vcard.VCardEntry.isIgnorable()Z
com.android.vcard.VCardEntry.toString()Ljava/lang/String;
com.android.vcard.VCardEntry.constructInsertOperations(Landroid/content/ContentResolver;Ljava/util/ArrayList;)Ljava/util/ArrayList;
com.android.contacts.vcard.NotificationImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.vcard.VCardEntryCommitter.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.VCardImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.vcard.VCardEntryHandler.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.ImportProcessor.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.vcard.VCardEntryConstructor.onEntryEnded()V
com.android.vcard.VCardInterpreter.onEntryEnded()V
com.android.vcard.VCardParserImpl_V21.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.handleNest()V
com.android.vcard.VCardParserImpl_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V40.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.parseItem()Z
com.android.vcard.VCardParserImpl_V30.handleNest()V
com.android.vcard.VCardParserImpl_V40.handleNest()V
com.android.vcard.VCardParserImpl_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseItems()V
com.android.vcard.VCardParserImpl_V30.parseItem()Z
com.android.vcard.VCardParserImpl_V40.parseItem()Z
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseItems()V
com.android.vcard.VCardParserImpl_V40.parseItems()V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.constructImportRequest([BLandroid/net/Uri;Ljava/lang/String;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.NfcImportVCardActivity.createImportRequest()Lcom/android/contacts/vcard/ImportRequest;
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.run()V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Lcom/android/contacts/vcard/VCardService;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.ImportProcessor.readOneVCard(Ljava/io/InputStream;ILjava/lang/String;Lcom/android/vcard/VCardInterpreter;[I)Z
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.vcard.ImportProcessor.runInternal()V
com.android.contacts.vcard.ImportProcessor.run()V
com.android.contacts.vcard.ProcessorBase.run()V
com.android.contacts.list.LegacyContactListAdapter.getPersonUri(I)Landroid/net/Uri;
com.android.contacts.list.ContactPickerFragment.onItemClick(IJ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(IJ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.JoinContactListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.providers.contacts.ContactsProvider2.insertStatusUpdate(Landroid/content/ContentValues;)J
com.android.providers.contacts.ContactsProvider2.insertInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.contacts.LegacyApiSupport.updateExtensions(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.update(IJLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.updateAll(Landroid/net/Uri;ILandroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.LegacyApiSupport.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.updateInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.LegacyApiSupport.updateContactMethods(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.updatePhoto(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.delete(Landroid/net/Uri;IJ)I
com.android.providers.contacts.LegacyApiSupport.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.deleteInTransaction(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.vcard.VCardEntry$EmailData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.dialog.ClearFrequentsDialog$1$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.dialog.ClearFrequentsDialog$1$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.data.Contact.getPhoneUri()Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.launchMultiplePhonePicker()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.launchMultiplePhonePicker()V
com.android.mms.ui.ComposeMessageActivity.onClick(Landroid/view/View;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onClick(Landroid/view/View;)V
com.android.contacts.ContactSaveService.removeMembersFromGroup(Landroid/content/ContentResolver;[JJ)V
com.android.contacts.ContactSaveService.updateGroup(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.util.ContactLoaderUtils.ensureIsContactUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.ContactLoader.loadInBackground()Lcom/android/contacts/ContactLoader$Result;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.doInBackground([Ljava/lang/Void;)Landroid/net/Uri;
com.android.contacts.ContactLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.providers.contacts.LegacyApiSupport.updateGroups(JLandroid/content/ContentValues;)I
android.provider.ContactsContract$SyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.vcard.VCardEntry$PhotoData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.model.EntityDelta.buildDiff(Ljava/util/ArrayList;)V
com.android.contacts.model.EntityDeltaList.buildDiff()Ljava/util/ArrayList;
com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask.doInBackground([Lcom/android/contacts/model/EntityDeltaList;)Ljava/lang/Integer;
com.android.contacts.ContactSaveService.saveContact(Landroid/content/Intent;)V
com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.vcard.VCardEntry$ImData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.list.CustomContactListFilterActivity$GroupDelta.buildDiff()Landroid/content/ContentProviderOperation;
com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay.buildDiff(Ljava/util/ArrayList;)V
com.android.contacts.list.CustomContactListFilterActivity$AccountSet.buildDiff()Ljava/util/ArrayList;
com.android.contacts.list.CustomContactListFilterActivity.doSaveAction()V
com.android.contacts.list.CustomContactListFilterActivity.onClick(Landroid/view/View;)V
android.provider.ContactsContract$SyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
com.android.providers.contacts.LegacyApiSupport.findFirstDataRow(JLjava/lang/String;)Landroid/net/Uri;
com.android.providers.contacts.LegacyApiSupport.updatePeople(JLandroid/content/ContentValues;)I
com.android.contacts.ContactSaveService.renameGroup(Landroid/content/Intent;)V
android.provider.ContactsContract$Contacts.getLookupUri(JLjava/lang/String;)Landroid/net/Uri;
android.provider.ContactsContract$Contacts.getLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.provider.ContactsContract$Data.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.provider.ContactsContract$RawContacts.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.widget.QuickContactBadge$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.event.AttendeesView$PresenceQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.activities.ShowOrCreateActivity.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.lookupContactFromUri(Landroid/net/Uri;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.editor.AggregationSuggestionView.handleItemClickEvent()Z
com.android.contacts.group.GroupEditorFragment$Member.<init>(JLjava/lang/String;JLjava/lang/String;Ljava/lang/String;)V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactEntryListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.buildUri()Ljava/lang/String;
com.android.calendar.EventInfoFragment.showContactInfo(Lcom/android/calendar/CalendarEventModel$Attendee;Landroid/graphics/Rect;)V
com.android.email.activity.ContactStatusLoader.getContactInfo(Landroid/content/Context;Ljava/lang/String;)Lcom/android/email/activity/ContactStatusLoader$Result;
com.android.contacts.ContactSaveService.createRawContact(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.joinContacts(Landroid/content/Intent;)V
com.android.contacts.quickcontact.QuickContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.NfcImportVCardActivity.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.vcard.NotificationImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.queryContactInfoForPhoneNumber(Ljava/lang/String;Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.calllog.ContactInfoHelper.queryContactInfoForSipAddress(Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.editor.ContactEditorFragment$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.group.GroupEditorFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment$4.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.ContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.EmailAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyPostalAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.PostalAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.asList([Ljava/lang/String;)Ljava/util/ArrayList;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.addColumnValue(Ljava/util/ArrayList;Ljava/lang/String;)V
com.android.email.activity.ContactStatusLoader.loadInBackground()Lcom/android/email/activity/ContactStatusLoader$Result;
com.android.email.NotificationController.getSenderPhoto(Lcom/android/emailcommon/provider/EmailContent$Message;)Landroid/graphics/Bitmap;
com.android.contacts.vcard.VCardImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.util.NotifyingAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.lookupNumber(Ljava/lang/String;Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.group.GroupEditorFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.group.GroupEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.DefaultContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.EmailAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.JoinContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyPhoneNumberListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyPostalAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.PhoneNumberListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.PostalAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.ContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(IJ)V
com.android.contacts.list.DefaultContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport.addSearchSuggestionsBasedOnFilter(Landroid/database/MatrixCursor;Landroid/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.email.activity.ContactStatusLoader.loadInBackground()Ljava/lang/Object;
com.android.email.NotificationController.createNewMessageNotification(JJLandroid/database/Cursor;JII)Landroid/app/Notification;
com.android.contacts.CallDetailActivity.getPhoneCallDetailsForUri(Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.queryContactInfo(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.list.DefaultContactListAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.PhoneNumberListAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.ContactBrowseListFragment.checkSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.JoinContactListFragment.onItemClick(IJ)V
com.android.providers.contacts.GlobalSearchSupport.handleSearchShortcutRefresh(Landroid/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.GlobalSearchSupport.handleSearchSuggestionsQuery(Landroid/database/sqlite/SQLiteDatabase;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.email.NotificationController$MessageContentObserver.onChange(Z)V
com.android.contacts.CallDetailActivity.access$300(Lcom/android/contacts/CallDetailActivity;Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.access$300(Lcom/android/contacts/calllog/CallLogAdapter;Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.common.widget.CompositeCursorAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.ContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.checkSelection()V
com.android.providers.contacts.ContactsProvider2.queryLocal(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;JLandroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.LegacyApiSupport.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Void;)[Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter$QueryThread.run()V
com.android.common.widget.CompositeCursorAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.refreshSelectedContactUri()V
com.android.contacts.list.DefaultContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.providers.contacts.ContactsProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.updateData(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.contacts.ContactsProvider2.insertSettings(Landroid/net/Uri;Landroid/content/ContentValues;)J
com.android.providers.contacts.LegacyApiSupport.getContactMethodType(Landroid/net/Uri;)Ljava/lang/String;
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.calllog.CallLogAdapter.startRequestProcessing()V
com.android.calendar.EmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.contacts.BaseEmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.widget.CompositeCursorAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.DefaultContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.EmailAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.JoinContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPostalAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneNumberListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PostalAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.IndexerListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.EmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.DefaultContactBrowseListFragment.refreshSelectedContactUri()V
com.android.providers.contacts.ContactsProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.cleanupPhotoStore()V
com.android.providers.contacts.LegacyApiSupport.getType(Landroid/net/Uri;)Ljava/lang/String;
com.android.contacts.calllog.CallLogAdapter.access$100(Lcom/android/contacts/calllog/CallLogAdapter;)V
com.android.contacts.calllog.CallLogAdapter.enqueueRequest(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;Z)V
com.android.calendar.EmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.contacts.BaseEmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.DefaultContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.EmailAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.JoinContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPostalAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneNumberListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PostalAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.IndexerListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.EmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.ContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.providers.contacts.ContactsProvider2.deleteData(Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.contacts.ContactsProvider2.deleteData(J[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.performBackgroundTask(ILjava/lang/Object;)V
com.android.providers.contacts.ContactsProvider2.getType(Landroid/net/Uri;)Ljava/lang/String;
com.android.contacts.calllog.CallLogAdapter.bindView(Landroid/view/View;Landroid/database/Cursor;I)V
com.android.contacts.list.PhoneFavoriteMergedAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.calllog.CallLogAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.calllog.CallLogAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.contacts.calllog.CallLogAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactEntryListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragmentForRequest()V
com.android.common.widget.GroupingListAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.common.widget.GroupingListAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.list.ContactPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.EmailAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.JoinContactListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PhoneNumberPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PostalAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.list.ContactEntryListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setSearchMode(Z)V
com.android.contacts.list.EmailAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.list.JoinContactListFragment.setSearchMode(Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setSearchMode(Z)V
com.android.contacts.list.PostalAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureFragments(Z)V
com.android.common.widget.GroupingListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.activities.PeopleActivity.configureContactListFragment()V
com.android.contacts.activities.PeopleActivity.onContactListFilterChanged()V
com.android.contacts.list.OnContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.activities.ContactSelectionActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.list.ContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.EmailAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.JoinContactListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PostalAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.PeopleActivity.onAction(I)V
com.android.contacts.activities.PeopleActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onStart()V
com.android.contacts.calllog.CallLogAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListFilterController$ContactListFilterListener.onContactListFilterChanged()V
com.android.contacts.list.ContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.JoinContactActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.DialtactsActivity$7.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter$Listener.onAction(I)V
com.android.contacts.activities.TransactionSafeActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.TransactionSafeActivity.onStart()V
com.android.contacts.ContactsActivity.onStart()V
com.android.contacts.list.ContactListFilterControllerImpl.notifyContactListFilterChanged()V
com.android.contacts.list.DefaultContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.activities.PeopleActivity.setQueryTextToFragment(Ljava/lang/String;)V
com.android.contacts.activities.ActionBarAdapter.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter.update()V
com.android.contacts.activities.ContactEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.GroupEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.AttachPhotoActivity.onStart()V
com.android.contacts.activities.ContactDetailActivity.onStart()V
com.android.contacts.activities.ContactEditorActivity.onStart()V
com.android.contacts.activities.ContactSelectionActivity.onStart()V
com.android.contacts.activities.DialtactsActivity.onStart()V
com.android.contacts.activities.GroupBrowserActivity.onStart()V
com.android.contacts.activities.GroupDetailActivity.onStart()V
com.android.contacts.activities.GroupEditorActivity.onStart()V
com.android.contacts.activities.JoinContactActivity.onStart()V
com.android.contacts.activities.NonPhoneActivity.onStart()V
com.android.contacts.activities.ShowOrCreateActivity.onStart()V
com.android.contacts.CallContactActivity.onStart()V
com.android.contacts.list.AccountFilterActivity.onStart()V
com.android.contacts.test.FragmentTestActivity.onStart()V
com.android.contacts.vcard.ImportVCardActivity.onStart()V
com.android.contacts.vcard.SelectAccountActivity.onStart()V
com.android.contacts.list.CustomContactListFilterActivity.onStart()V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;ZZ)V
com.android.contacts.activities.ActionBarAdapter.initialize(Landroid/os/Bundle;Lcom/android/contacts/list/ContactsRequest;)V
com.android.contacts.activities.ActionBarAdapter.setSearchMode(Z)V
com.android.contacts.activities.AttachPhotoActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactSelectionActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupBrowserActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.JoinContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.NonPhoneActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ShowOrCreateActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.CallContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService$Listener.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.AccountFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.CustomContactListFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.test.FragmentTestActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.ImportVCardActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.SelectAccountActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.ContactListFilterControllerImpl.checkFilterValidity(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.activities.PeopleActivity.createViewsAndFragments(Landroid/os/Bundle;)V
com.android.contacts.activities.ActionBarAdapter.onClose()Z
com.android.contacts.activities.PeopleActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity.onBackPressed()V
com.android.contacts.ContactSaveService.deliverCallbackOnUiThread(Landroid/content/Intent;)V
com.android.contacts.list.ContactListFilterControllerImpl.<init>(Landroid/content/Context;)V
com.android.contacts.list.ContactListFilterController.checkFilterValidity(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.selectCustomFilter()V
com.android.contacts.list.ContactListFilterController.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.activities.PeopleActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.TransactionSafeActivity.onSearchRequested()Z
com.android.contacts.ContactsActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onFinishAction()V
com.android.contacts.activities.TransactionSafeActivity.onBackPressed()V
com.android.contacts.ContactsActivity.onBackPressed()V
com.android.contacts.ContactSaveService$2.run()V
com.android.contacts.list.ContactListFilterController.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.model.AccountTypeManagerImpl$1.run()V
com.android.contacts.list.ContactListFilterController.selectCustomFilter()V
com.android.contacts.util.AccountFilterUtil.handleAccountFilterResult(Lcom/android/contacts/list/ContactListFilterController;ILandroid/content/Intent;)V
com.android.contacts.activities.TransactionSafeActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.ContactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.TransactionSafeActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactsActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.OnContactBrowserActionListener.onFinishAction()V
com.android.contacts.activities.DialtactsActivity.onBackPressed()V
com.android.contacts.activities.GroupEditorActivity.onBackPressed()V
com.android.contacts.ContactsApplication.getSystemService(Ljava/lang/String;)Ljava/lang/Object;
com.android.contacts.list.ContactListFilterControllerImpl.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.list.DefaultContactBrowseListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneFavoriteFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneNumberPickerFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.activities.DialtactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.AttachPhotoActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactSelectionActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupBrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.JoinContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.NonPhoneActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ShowOrCreateActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.CallContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.AccountFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.CustomContactListFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.test.FragmentTestActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.ImportVCardActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.SelectAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactSelectionActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.GroupDetailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.JoinContactActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.AccountFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.CustomContactListFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.ContactBrowseListFragment.finish()V
com.android.contacts.list.ContactEntryListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.ContactEntryListFragment.finish()V
com.android.contacts.list.DefaultContactBrowseListFragment.finish()V
com.android.contacts.list.ContactEntryListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.finish()V
com.android.contacts.list.EmailAddressPickerFragment.finish()V
com.android.contacts.list.JoinContactListFragment.finish()V
com.android.contacts.list.PhoneNumberPickerFragment.finish()V
com.android.contacts.list.PostalAddressPickerFragment.finish()V
com.android.contacts.list.ContactBrowseListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.onClose()V
com.android.contacts.list.DefaultContactBrowseListFragment.onClose()V
com.android.contacts.list.EmailAddressPickerFragment.onClose()V
com.android.contacts.list.JoinContactListFragment.onClose()V
com.android.contacts.list.PhoneNumberPickerFragment.onClose()V
com.android.contacts.list.PostalAddressPickerFragment.onClose()V
com.android.providers.contacts.LegacyApiSupport.updateOrganizations(JLandroid/content/ContentValues;)I
com.android.contacts.model.EntityDeltaList.buildSplitContactDiff(Ljava/util/ArrayList;II[I)V
com.android.contacts.model.EntityDeltaList.buildSplitContactDiff(Ljava/util/ArrayList;[I)V
android.provider.Contacts$People.addToGroup(Landroid/content/ContentResolver;JJ)Landroid/net/Uri;
android.provider.Contacts$People.addToGroup(Landroid/content/ContentResolver;JLjava/lang/String;)Landroid/net/Uri;
android.provider.Contacts$People.addToMyContactsGroup(Landroid/content/ContentResolver;J)Landroid/net/Uri;
android.provider.Contacts$People.createPersonInMyContactsGroup(Landroid/content/ContentResolver;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.phone.SimContacts.actuallyImportOneSimContact(Landroid/database/Cursor;Landroid/content/ContentResolver;Landroid/accounts/Account;)V
com.android.phone.SimContacts.access$100(Landroid/database/Cursor;Landroid/content/ContentResolver;Landroid/accounts/Account;)V
com.android.phone.SimContacts.importOneSimContact(I)V
com.android.phone.SimContacts$ImportAllSimContactsThread.run()V
com.android.phone.SimContacts.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.SimContacts.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.phone.SimContacts.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.ADNList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.exchange.adapter.ContactsSyncAdapter.cleanup()V
com.android.exchange.adapter.AbstractSyncAdapter.cleanup()V
com.android.contacts.model.EntityDeltaList.beginKeepTogether()Landroid/content/ContentProviderOperation$Builder;
android.provider.Contacts$People.markAsContacted(Landroid/content/ContentResolver;J)V
android.provider.CallLog$Calls.addCall(Lcom/android/internal/telephony/CallerInfo;Landroid/content/Context;Ljava/lang/String;IIJI)Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Lcom/android/phone/CallLogAsync$AddCallArgs;)[Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.PostalAddressListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(IJ)V
com.android.vcard.VCardEntry$AnniversaryData.constructInsertOperation(Ljava/util/List;I)V
android.provider.Contacts$ContactMethods.addPostalLocation(Landroid/content/Context;JDD)V
com.android.contacts.list.LegacyPhoneNumberListAdapter.getPhoneUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(IJ)V
com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag.getStreamItemPhotoUri()Landroid/net/Uri;
com.android.contacts.detail.ContactDetailUpdatesFragment$2.onClick(Landroid/view/View;)V
com.android.exchange.adapter.ContactsSyncAdapter.dirtyContactsWithinDirtyGroups()V
com.android.exchange.adapter.ContactsSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.AbstractSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.contacts.ContactSaveService.setSuperPrimary(Landroid/content/Intent;)V
com.android.contacts.group.GroupBrowseListAdapter.getGroupUriFromId(J)Landroid/net/Uri;
com.android.contacts.group.GroupBrowseListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.group.GroupBrowseListAdapter.getSelectedGroupPosition()I
com.android.contacts.group.GroupBrowseListAdapter.setCursor(Landroid/database/Cursor;)V
com.android.contacts.group.GroupBrowseListFragment.requestSelectionToScreen()V
com.android.contacts.group.GroupBrowseListFragment.bindGroupList()V
com.android.contacts.group.GroupBrowseListFragment.access$400(Lcom/android/contacts/group/GroupBrowseListFragment;)V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.vcard.VCardEntry$NameData.constructInsertOperation(Ljava/util/List;I)V
android.provider.ContactsContract$Contacts.markAsContacted(Landroid/content/ContentResolver;J)V
com.android.contacts.list.ProviderStatusWatcher$2.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ProviderStatusWatcher$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactSaveService.addMembersToGroup(Landroid/content/ContentResolver;[JJ)V
com.android.contacts.ContactSaveService.createGroup(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity.getContactUriForEmail(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getContactUriForEmail(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.addCallAndContactMenuItems(Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addCallAndContactMenuItems(Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$2700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity$10.onCreateContextMenu(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$2700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
android.provider.ContactsContract$Directory.notifyDirectoryChange(Landroid/content/ContentResolver;)V
com.android.exchange.adapter.ContactsSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.AbstractSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.ContactsSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.AccountSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.EmailSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.AbstractSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.AccountSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.EmailSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.EmailSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.EmailSyncAdapter.getEstimate(Ljava/lang/String;)I
com.android.exchange.adapter.EmailSyncAdapter.getAutomaticLookback()V
com.android.contacts.detail.ContactLoaderFragment.getPreAuthorizedUri(Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.detail.ContactLoaderFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactSaveService.clearPrimary(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.buildJoinContactDiff(Ljava/util/ArrayList;JJ)V
com.android.providers.contacts.LegacyApiSupport.updatePhones(JLandroid/content/ContentValues;)I
android.provider.ContactsContract$ProfileSyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
com.android.providers.contacts.LegacyApiSupport.updateLegacyPhotoData(JJLandroid/content/ContentValues;)V
com.android.providers.contacts.LegacyApiSupport.updatePhotoByDataId(JLandroid/content/ContentValues;)I
com.android.vcard.VCardEntry$SipData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$NicknameData.constructInsertOperation(Ljava/util/List;I)V
com.android.common.contacts.DataUsageStatUpdater.update(Ljava/util/Collection;Ljava/util/Collection;Ljava/lang/String;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithAddress(Ljava/util/Collection;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithPhoneNumber(Ljava/util/Collection;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithRfc822Address(Ljava/util/Collection;)Z
com.android.mail.providers.UIProvider.incrementRecipientsTimesContacted(Landroid/content/Context;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage.updateSendStats(Lcom/android/mms/data/Conversation;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Long;
com.android.mms.data.WorkingMessage.access$800(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.data.WorkingMessage$2.run()V
com.android.mms.data.WorkingMessage$3.run()V
com.android.vcard.VCardEntry$OrganizationData.constructInsertOperation(Ljava/util/List;I)V
com.android.providers.telephony.SmsProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
android.provider.Contacts$Settings.setSetting(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.list.EmailAddressListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(IJ)V
com.android.contacts.list.LegacyPostalAddressListAdapter.getContactMethodUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneFavoriteFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.GroupMetaDataLoader.ensureIsGroupUri(Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.GroupMetaDataLoader.<init>(Landroid/content/Context;Landroid/net/Uri;)V
com.android.contacts.editor.ContactEditorFragment$5.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupDetailFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupEditorFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.editor.ContactEditorFragment$5.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupDetailFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupEditorFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.vcard.VCardEntry$AndroidCustomData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$WebsiteData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$BirthdayData.constructInsertOperation(Ljava/util/List;I)V
com.android.phone.ContactsAsyncHelper$ImageTracker.getPhotoUri()Landroid/net/Uri;
com.android.phone.CallCard.updatePhotoForCallState(Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.displayMainCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.phone.CallCard.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallCard.updateForegroundCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateNoCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateRingingCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallCard.updateState(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.phone.InCallScreen.updateIncomingCallWidgetHint(II)V
com.android.phone.InCallScreen.updateScreen()V
com.android.phone.InCallScreen.onResume()V
com.android.phone.InCallScreen.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.showPausePromptDialog(Lcom/android/internal/telephony/Connection;Ljava/lang/String;)V
com.android.phone.InCallScreen.requestUpdateBluetoothIndication()V
com.android.phone.InCallScreen.requestCloseOtaFailureNotice(J)V
com.android.phone.InCallScreen.requestCloseSpcErrorNotice(J)V
com.android.phone.InCallScreen.requestRemoveProviderInfoWithDelay()V
com.android.phone.InCallTouchUi.onGrabbedStateChange(Landroid/view/View;I)V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.syncWithPhoneState()Lcom/android/phone/InCallScreen$SyncWithPhoneStateStatus;
com.android.phone.InCallScreen.access$600(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.handleOtaCallEnd()V
com.android.phone.InCallScreen.access$500(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.handlePostOnDialChars(Landroid/os/AsyncResult;C)V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureNotice(I)V
com.android.phone.OtaUtils.otaShowSpcErrorNotice(I)V
com.android.phone.CallCard.updateCallStateWidgets(Lcom/android/internal/telephony/Call;)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.updateManageConferencePanelIfNecessary()V
com.android.phone.InCallScreen.requestUpdateScreen()V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.PhoneApp.dismissCallScreen()V
com.android.phone.InCallScreen.access$1000(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;C)V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.OtaUtils.otaShowProgramFailure(I)V
com.android.phone.OtaUtils.onOtaProvisionStatusChanged(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowProperScreen()V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.InCallScreen.onBackPressed()V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.updateAfterRadioTechnologyChange()V
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.PhoneApp.updateInCallScreen()V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowSuccessFailure()V
com.android.phone.PhoneApp.handleOtaspEvent(Landroid/os/Message;)V
com.android.phone.InCallScreen.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.access$400(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp.initForNewRadioTechnology()V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.EmergencyCallHelper.cleanup()V
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.DTMFTwelveKeyDialer.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.phone.PhoneApp.access$1100(Lcom/android/phone/PhoneApp;)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.DTMFTwelveKeyDialer.closeDialer(Z)V
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.DTMFTwelveKeyDialer.clearInCallScreenReference()V
com.android.phone.InCallScreen.closeDialpadInternal(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureDialog()V
com.android.phone.OtaUtils.otaShowProgramSuccessDialog()V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onDestroy()V
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.InCallScreen.onOpenCloseDialpad()V
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.vcard.VCardEntry$PostalData.constructInsertOperation(Ljava/util/List;I)V
android.provider.ContactsContract$ProfileSyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.providers.contacts.LegacyApiSupport.updateSettings(Landroid/content/ContentValues;)I
com.android.mms.data.Contact.getUri()Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.getContactUriForPhoneNumber(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationListItem.updateAvatarView()V
com.android.mms.ui.MessageListItem.updateAvatarView(Ljava/lang/String;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getContactUriForPhoneNumber(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationListItem.bind(Landroid/content/Context;Lcom/android/mms/data/Conversation;)V
com.android.mms.ui.ConversationListItem.updateFromView()V
com.android.mms.ui.MessageListItem.bindCommonMessage()V
com.android.mms.ui.MessageListItem.bindNotifInd()V
com.android.mms.ui.ConversationListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.ui.ConversationListItem.access$000(Lcom/android/mms/ui/ConversationListItem;)V
com.android.mms.ui.MessageListItem.access$500(Lcom/android/mms/ui/MessageListItem;)V
com.android.mms.ui.MessageListItem.bind(Lcom/android/mms/ui/MessageItem;ZI)V
com.android.mms.ui.ConversationListItem$1.run()V
com.android.mms.ui.MessageListItem$2.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.MessageListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.ui.MessageItem$PduLoadedCallback.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.util.ItemLoadedCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Lcom/android/mms/util/ThumbnailManager$ImageLoaded;Ljava/lang/Throwable;)V
com.android.mms.util.PduLoaderManager.getPdu(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.PduLoaderManager$PduTask$1.run()V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager$ThumbnailTask$1.run()V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MessageItem.<init>(Landroid/content/Context;Ljava/lang/String;Landroid/database/Cursor;Lcom/android/mms/ui/MessageListAdapter$ColumnsMap;Ljava/util/regex/Pattern;)V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager.getVideoThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.MessageListAdapter.getCachedMessageItem(Ljava/lang/String;JLandroid/database/Cursor;)Lcom/android/mms/ui/MessageItem;
com.android.mms.model.ImageModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.model.VideoModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.ComposeMessageActivity.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.data.WorkingMessage.setAttachment(ILandroid/net/Uri;Z)I
com.android.mms.ui.MmsThumbnailPresenter.presentImageThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/ImageModel;)V
com.android.mms.ui.MmsThumbnailPresenter.presentVideoThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/VideoModel;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.ui.ComposeMessageActivity$30.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivity.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivity.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.presentFirstSlide(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/SlideModel;)V
com.android.mms.ui.MessageUtils$ResizeImageResultCallback.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.MessageUtils$3$1.run()V
com.android.mms.ui.ComposeMessageActivity$32.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity$33.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.Presenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.ComposeMessageActivity$34.run()V
com.android.mms.ui.ComposeMessageActivity$35.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.AttachmentEditor.update(Lcom/android/mms/data/WorkingMessage;)Z
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.createViewFromResource(ILandroid/view/View;I)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivity.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.onRestart()V
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivity.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onRestart()V
com.android.mms.ui.ComposeMessageActivity$20.run()V
com.android.mms.ui.ComposeMessageActivity$40.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivity.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.vcard.VCardEntry$NoteData.constructInsertOperation(Ljava/util/List;I)V
com.android.providers.contacts.ContactsProvider2$PipeMonitor.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations.delete(J)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.deleteParser(Lcom/android/exchange/adapter/ContactsSyncAdapter$ContactOperations;)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.commandsParser()V
com.android.exchange.adapter.AbstractSyncParser.commandsParser()V
com.android.contacts.ContactSaveService.deleteGroup(Landroid/content/Intent;)V
com.android.contacts.GroupMemberLoader.createUri()Landroid/net/Uri;
com.android.contacts.GroupMemberLoader.<init>(Landroid/content/Context;J[Ljava/lang/String;)V
com.android.contacts.GroupMemberLoader.constructLoaderForGroupDetailQuery(Landroid/content/Context;J)Lcom/android/contacts/GroupMemberLoader;
com.android.contacts.GroupMemberLoader.constructLoaderForGroupEditorQuery(Landroid/content/Context;J)Lcom/android/contacts/GroupMemberLoader;
com.android.contacts.group.GroupDetailFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupEditorFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupDetailFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupEditorFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder.build()Landroid/net/Uri;
com.android.contacts.editor.AggregationSuggestionEngine.buildAggregationSuggestionUri(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)Landroid/net/Uri;
com.android.contacts.editor.AggregationSuggestionEngine.onNameChange(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.ContactEditorFragment.acquireAggregationSuggestions(Landroid/content/Context;Lcom/android/contacts/editor/RawContactEditorView;)V
com.android.contacts.editor.ContactEditorFragment.access$300(Lcom/android/contacts/editor/ContactEditorFragment;Landroid/content/Context;Lcom/android/contacts/editor/RawContactEditorView;)V
com.android.contacts.editor.ContactEditorFragment.bindEditors()V
com.android.contacts.editor.ContactEditorFragment$2.onRequest(I)V
com.android.contacts.editor.ContactEditorFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.editor.ContactEditorFragment.access$2100(Lcom/android/contacts/editor/ContactEditorFragment;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForExistingContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.Editor$EditorListener.onRequest(I)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onRemovePictureChosen()V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.ContactEditorFragment.setData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.ContactEditorFragment.rebindEditorsForNewContact(Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.LabeledEditorView.notifyEditorListener()V
com.android.contacts.editor.LabeledEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.PhotoEditorView$1.onClick(Landroid/view/View;)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onRemovePictureChosen()V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.createContact(Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.ContactEditorFragment.access$500(Lcom/android/contacts/editor/ContactEditorFragment;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.EventFieldEditorView.notifyEditorListener()V
com.android.contacts.editor.LabeledEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.PhoneticNameEditorView.notifyEditorListener()V
com.android.contacts.editor.StructuredNameEditorView.notifyEditorListener()V
com.android.contacts.editor.TextFieldsEditorView.notifyEditorListener()V
com.android.contacts.editor.EventFieldEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.PhoneticNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.detail.PhotoSelectionHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onRemovePictureChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onRemovePictureChosen()V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onUseAsPrimaryChosen()V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.editor.ContactEditorFragment.createContact()V
com.android.contacts.editor.ContactEditorFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.contacts.editor.ContactEditorFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.selectAccountAndCreateContact()V
com.android.contacts.editor.ContactEditorFragment$3$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.Editor.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.EventFieldEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.StructuredNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.StructuredNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView$1.onClick(Landroid/view/View;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.editor.PhotoActionPopup$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.EventFieldEditorView$2.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.EventFieldEditorView.clearAllFields()V
com.android.contacts.editor.EventFieldEditorView.onLabelRebuilt()V
com.android.contacts.editor.PhoneticNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView$2.afterTextChanged(Landroid/text/Editable;)V
com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.LabeledEditorView.onLabelRebuilt()V
com.android.contacts.datepicker.DatePickerDialog.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView$3.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.PhoneticNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.StructuredNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.TextFieldsEditorView.onLabelRebuilt()V
com.android.contacts.editor.EventFieldEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.LabeledEditorView$1.onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.PhoneticNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.StructuredNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.TextFieldsEditorView.onTypeSelectionChange(I)V
Permission:android.permission.WRITE_EXTERNAL_STORAGE

86 Callers:

com.android.providers.downloads.DownloadProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.media.MediaProvider.openFileAndEnforcePathPermissionsHelper(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
com.android.providers.media.MediaProvider.openFile(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
com.android.inputmethod.latin.Utils$UsabilityStudyLogUtils$2.run()V
com.android.providers.media.MediaProvider.getAlbumArtOutputUri(Lcom/android/providers/media/MediaProvider$DatabaseHelper;Landroid/database/sqlite/SQLiteDatabase;JLandroid/net/Uri;)Landroid/net/Uri;
com.android.providers.media.MediaProvider.makeThumbInternal(Lcom/android/providers/media/MediaProvider$ThumbData;)Landroid/os/ParcelFileDescriptor;
com.android.providers.media.MediaProvider.access$1200(Lcom/android/providers/media/MediaProvider;Lcom/android/providers/media/MediaProvider$ThumbData;)Landroid/os/ParcelFileDescriptor;
com.android.providers.media.MediaProvider.getThumb(Lcom/android/providers/media/MediaProvider$DatabaseHelper;Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;JLandroid/net/Uri;)Landroid/os/ParcelFileDescriptor;
com.android.providers.downloads.StorageManager.trimDatabase()V
com.android.providers.downloads.StorageManager.access$100(Lcom/android/providers/downloads/StorageManager;)V
com.android.providers.downloads.StorageManager$1.run()V
android.app.DownloadManager.getUriForDownloadedFile(J)Landroid/net/Uri;
com.android.browser.OpenDownloadReceiver.onReceiveAsync(Landroid/content/Context;J)V
com.android.emailcommon.utility.AttachmentUtilities.saveAttachment(Landroid/content/Context;Ljava/io/InputStream;Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.browser.OpenDownloadReceiver.access$000(Lcom/android/browser/OpenDownloadReceiver;Landroid/content/Context;J)V
com.android.browser.OpenDownloadReceiver$1.run()V
com.android.providers.downloads.DownloadService$1.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.IMediaScannerListener$Stub$Proxy.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.IMediaScannerListener$Stub.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.IMediaScannerListener$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.IMediaScannerListener.scanCompleted(Ljava/lang/String;Landroid/net/Uri;)V
android.media.MediaScannerConnection$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.providers.downloads.DownloadService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.providers.downloads.StorageManager.discardPurgeableFiles(IJ)J
com.android.providers.downloads.StorageManager.findSpace(Ljava/io/File;JI)V
com.android.providers.downloads.StorageManager.verifySpace(ILjava/lang/String;J)V
com.android.providers.downloads.DownloadThread.writeDataToDestination(Lcom/android/providers/downloads/DownloadThread$State;[BI)V
com.android.providers.downloads.Helpers.generateSaveFile(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJZLcom/android/providers/downloads/StorageManager;)Ljava/lang/String;
com.android.providers.downloads.StorageManager.verifySpaceBeforeWritingToFile(ILjava/lang/String;J)V
com.android.providers.downloads.DownloadThread.transferData(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;[BLjava/io/InputStream;)V
com.android.providers.downloads.DownloadThread.processResponseHeaders(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;Lorg/apache/http/HttpResponse;)V
com.android.providers.downloads.DownloadThread.executeDownload(Lcom/android/providers/downloads/DownloadThread$State;Landroid/net/http/AndroidHttpClient;Lorg/apache/http/client/methods/HttpGet;)V
com.android.providers.downloads.DownloadThread.run()V
com.android.providers.downloads.DownloadInfo.getMyDownloadsUri()Landroid/net/Uri;
com.android.providers.downloads.DownloadInfo.sendIntentIfRequested()V
com.android.providers.downloads.DownloadThread.notifyDownloadCompleted(IZIZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.providers.downloads.DownloadService$UpdateThread.run()V
android.app.DownloadManager.addCompletedDownload(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;JZ)J
com.android.browser.Controller$Download.saveDataUri()V
com.android.email.activity.MessageViewFragmentBase.performAttachmentSave(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)Ljava/io/File;
com.android.browser.Controller$Download.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.email.activity.MessageFileViewFragment.performAttachmentSave(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)Ljava/io/File;
com.android.email.activity.MessageViewFragmentBase.onOpenAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragmentBase.onSaveAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragment.performAttachmentSave(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)Ljava/io/File;
com.android.email.activity.MessageFileViewFragment.onOpenAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragmentBase.onClick(Landroid/view/View;)V
com.android.email.activity.MessageViewFragment.onOpenAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageFileViewFragment.onSaveAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragment.onSaveAttachment(Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageFileViewFragment.onClick(Landroid/view/View;)V
com.android.email.activity.MessageViewFragment.onClick(Landroid/view/View;)V
android.app.DownloadManager.enqueue(Landroid/app/DownloadManager$Request;)J
com.android.browser.DownloadHandler$1.run()V
com.android.browser.FetchUrlMimeType.run()V
com.android.browser.DownloadHandler.onDownloadStartNoStream(Landroid/app/Activity;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
com.android.browser.DownloadHandler.onDownloadStart(Landroid/app/Activity;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
com.android.browser.Controller.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.WebViewController.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.Tab$4.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.Tab$7.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
android.provider.Downloads.removeAllDownloadsByPackage(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.BootReceiver.removeOldUpdatePackages(Landroid/content/Context;)V
com.android.server.BootReceiver.access$100(Lcom/android/server/BootReceiver;Landroid/content/Context;)V
com.android.server.BootReceiver$1.run()V
com.android.server.BootReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.providers.downloads.DownloadInfo.getAllDownloadsUri()Landroid/net/Uri;
com.android.providers.downloads.DownloadInfo$Reader.readRequestHeaders(Lcom/android/providers/downloads/DownloadInfo;)V
com.android.providers.downloads.DownloadInfo.notifyPauseDueToSize(Z)V
com.android.providers.downloads.DownloadInfo.startIfReady(JLcom/android/providers/downloads/StorageManager;)V
com.android.providers.downloads.DownloadService.scanFile(Lcom/android/providers/downloads/DownloadInfo;ZZ)Z
com.android.providers.downloads.DownloadThread.readFromResponse(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;[BLjava/io/InputStream;)I
com.android.providers.downloads.DownloadThread.handleEndOfStream(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;)V
com.android.providers.downloads.DownloadThread.notifyThroughDatabase(IZIZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.providers.downloads.DownloadThread.reportProgress(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;)V
com.android.providers.downloads.DownloadThread.updateDatabaseFromHeaders(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;)V
com.android.providers.downloads.DownloadInfo$Reader.newDownloadInfo(Landroid/content/Context;Lcom/android/providers/downloads/SystemFacade;)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadThread.checkConnectivity()V
com.android.providers.downloads.DownloadService.insertDownloadLocked(Lcom/android/providers/downloads/DownloadInfo$Reader;J)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadService.updateDownload(Lcom/android/providers/downloads/DownloadInfo$Reader;Lcom/android/providers/downloads/DownloadInfo;J)V
com.android.providers.downloads.DownloadService.access$700(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo;ZZ)Z
com.android.providers.downloads.DownloadService.deleteDownloadLocked(J)V
com.android.providers.downloads.DownloadThread.checkPausedOrCanceled(Lcom/android/providers/downloads/DownloadThread$State;)V
com.android.providers.downloads.DownloadService.access$600(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo$Reader;J)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadService.access$500(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo$Reader;Lcom/android/providers/downloads/DownloadInfo;J)V
com.android.providers.downloads.DownloadService.access$800(Lcom/android/providers/downloads/DownloadService;J)V
Permission:android.permission.REORDER_TASKS

23 Callers:

com.android.server.am.ActivityManagerService.moveTaskToFront(IILandroid/os/Bundle;)V
android.app.ActivityManagerNative.moveTaskToFront(IILandroid/os/Bundle;)V
android.app.ActivityManagerNative.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IActivityManager.moveTaskToFront(IILandroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ActivityManager.moveTaskToFront(IILandroid/os/Bundle;)V
com.android.internal.app.HeavyWeightSwitcherActivity$1.onClick(Landroid/view/View;)V
android.app.ActivityManager.moveTaskToFront(II)V
com.android.systemui.recent.RecentsPanelView.handleOnClick(Landroid/view/View;)V
com.android.internal.policy.impl.RecentApplicationsDialog.switchTo(Lcom/android/internal/policy/impl/RecentApplicationsDialog$RecentTag;)V
com.android.systemui.recent.RecentsCallback.handleOnClick(Landroid/view/View;)V
com.android.systemui.recent.RecentsPanelView.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.internal.policy.impl.RecentApplicationsDialog.dismissAndSwitch()V
com.android.internal.policy.impl.RecentApplicationsDialog.onClick(Landroid/view/View;)V
com.android.systemui.recent.RecentsHorizontalScrollView$3.onClick(Landroid/view/View;)V
com.android.systemui.recent.RecentsVerticalScrollView$3.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PhoneWindowManager$4.run()V
com.android.server.am.ActivityManagerService.moveTaskToBack(I)V
android.app.ActivityManagerNative.moveTaskToBack(I)V
android.app.IActivityManager.moveTaskToBack(I)V
com.android.server.am.ActivityManagerService.moveTaskBackwards(I)V
android.app.ActivityManagerNative.moveTaskBackwards(I)V
android.app.IActivityManager.moveTaskBackwards(I)V
Permission:android.permission.ACCESS_FINE_LOCATION

450 Callers:

com.android.server.LocationManagerService.checkPermissionsSafe(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.LocationManagerService._getLastKnownLocationLocked(Ljava/lang/String;)Landroid/location/Location;
com.android.server.LocationManagerService._getProviderInfoLocked(Ljava/lang/String;)Landroid/os/Bundle;
com.android.server.LocationManagerService._isProviderEnabledLocked(Ljava/lang/String;)Z
com.android.server.LocationManagerService.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
com.android.server.LocationManagerService.requestLocationUpdatesLocked(Ljava/lang/String;JFZLcom/android/server/LocationManagerService$Receiver;)V
com.android.server.LocationManagerService.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
com.android.server.LocationManagerService.getProviderInfo(Ljava/lang/String;)Landroid/os/Bundle;
com.android.server.LocationManagerService.isProviderEnabled(Ljava/lang/String;)Z
android.location.ILocationManager$Stub$Proxy.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
android.location.ILocationManager$Stub.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
com.android.server.LocationManagerService.addProximityAlertLocked(DDFJLandroid/app/PendingIntent;)V
com.android.server.LocationManagerService.requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/location/ILocationListener;)V
com.android.server.LocationManagerService.requestLocationUpdatesPI(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/app/PendingIntent;)V
android.location.ILocationManager$Stub$Proxy.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
android.location.ILocationManager$Stub.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
android.location.ILocationManager$Stub$Proxy.getProviderInfo(Ljava/lang/String;)Landroid/os/Bundle;
android.location.ILocationManager$Stub.getProviderInfo(Ljava/lang/String;)Landroid/os/Bundle;
android.location.ILocationManager$Stub$Proxy.isProviderEnabled(Ljava/lang/String;)Z
android.location.ILocationManager$Stub.isProviderEnabled(Ljava/lang/String;)Z
android.location.ILocationManager.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
android.location.ILocationManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.LocationManagerService.addProximityAlert(DDFJLandroid/app/PendingIntent;)V
android.location.ILocationManager$Stub$Proxy.requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/location/ILocationListener;)V
android.location.ILocationManager$Stub.requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/location/ILocationListener;)V
android.location.ILocationManager$Stub$Proxy.requestLocationUpdatesPI(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/app/PendingIntent;)V
android.location.ILocationManager$Stub.requestLocationUpdatesPI(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/app/PendingIntent;)V
android.location.ILocationManager.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
android.location.ILocationManager.getProviderInfo(Ljava/lang/String;)Landroid/os/Bundle;
android.location.ILocationManager.isProviderEnabled(Ljava/lang/String;)Z
android.location.LocationManager.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
com.android.server.LocationManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.location.ILocationManager$Stub$Proxy.addProximityAlert(DDFJLandroid/app/PendingIntent;)V
android.location.ILocationManager$Stub.addProximityAlert(DDFJLandroid/app/PendingIntent;)V
android.location.ILocationManager.requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/location/ILocationListener;)V
android.location.ILocationManager.requestLocationUpdatesPI(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/app/PendingIntent;)V
android.location.LocationManager.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
android.location.LocationManager.getProvider(Ljava/lang/String;)Landroid/location/LocationProvider;
android.location.LocationManager.isProviderEnabled(Ljava/lang/String;)Z
android.location.ILocationManager.addProximityAlert(DDFJLandroid/app/PendingIntent;)V
android.location.LocationManager._requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/location/LocationListener;Landroid/os/Looper;)V
android.location.LocationManager._requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/app/PendingIntent;)V
com.android.gallery3d.util.ReverseGeocoder.computeAddress(Lcom/android/gallery3d/util/ReverseGeocoder$SetLatLong;)Ljava/lang/String;
com.android.server.location.LocationBasedCountryDetector.getLastKnownLocation()Landroid/location/Location;
com.android.server.UiModeManagerService$8.retrieveLocation()V
com.android.wallpaper.grass.GrassRS.updateLocation()V
com.android.server.UiModeManagerService.systemReady()V
android.location.LocationManager.addProximityAlert(DDFJLandroid/app/PendingIntent;)V
android.location.LocationManager.requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;Landroid/os/Looper;)V
android.location.LocationManager.requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;)V
android.location.LocationManager.requestLocationUpdates(JFLandroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V
android.location.LocationManager.requestSingleUpdate(Landroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V
android.location.LocationManager.requestSingleUpdate(Ljava/lang/String;Landroid/location/LocationListener;Landroid/os/Looper;)V
android.location.LocationManager.requestLocationUpdates(Ljava/lang/String;JFLandroid/app/PendingIntent;)V
android.location.LocationManager.requestLocationUpdates(JFLandroid/location/Criteria;Landroid/app/PendingIntent;)V
android.location.LocationManager.requestSingleUpdate(Landroid/location/Criteria;Landroid/app/PendingIntent;)V
android.location.LocationManager.requestSingleUpdate(Ljava/lang/String;Landroid/app/PendingIntent;)V
com.android.gallery3d.data.LocationClustering.generateName(Ljava/util/ArrayList;Lcom/android/gallery3d/util/ReverseGeocoder;)Ljava/lang/String;
com.android.server.location.LocationBasedCountryDetector$2.run()V
com.android.server.location.LocationBasedCountryDetector.detectCountry()Landroid/location/Country;
com.android.wallpaper.grass.GrassRS.access$300(Lcom/android/wallpaper/grass/GrassRS;)V
com.android.wallpaper.grass.GrassRS.start()V
com.android.server.ServerThread$1.run()V
android.webkit.GeolocationService.registerForLocationUpdates()V
com.android.camera.LocationManager.startReceivingLocationUpdates()V
com.android.server.location.LocationBasedCountryDetector.registerListener(Ljava/lang/String;Landroid/location/LocationListener;)V
com.android.gallery3d.data.LocationClustering.run(Lcom/android/gallery3d/data/MediaSet;)V
com.android.server.location.CountryDetectorBase.detectCountry()Landroid/location/Country;
com.android.wallpaper.grass.GrassRS$TimezoneTracker.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.wallpaper.grass.GrassView.surfaceChanged(Landroid/view/SurfaceHolder;III)V
com.android.wallpaper.RenderScriptScene.start()V
android.webkit.GeolocationService.start()Z
android.webkit.GeolocationService.setEnableGps(Z)V
com.android.camera.LocationManager.recordLocation(Z)V
com.android.gallery3d.data.Clustering.run(Lcom/android/gallery3d/data/MediaSet;)V
com.android.server.location.ComprehensiveCountryDetector.startLocationBasedDetector(Landroid/location/CountryListener;)V
com.android.wallpaper.fall.FallRS.start()V
com.android.wallpaper.galaxy.GalaxyRS.start()V
com.android.wallpaper.nexus.NexusRS.start()V
com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine.onSurfaceChanged(Landroid/view/SurfaceHolder;III)V
com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine.onVisibilityChanged(Z)V
com.android.camera.Camera.initializeFirstTime()V
com.android.camera.Camera.initializeSecondTime()V
com.android.camera.Camera.onPause()V
com.android.camera.Camera.onSharedPreferenceChanged()V
com.android.camera.VideoCamera.onPause()V
com.android.camera.VideoCamera.onResume()V
com.android.camera.VideoCamera.onSharedPreferenceChanged()V
com.android.gallery3d.data.ClusterAlbumSet.updateClusters()V
com.android.server.location.ComprehensiveCountryDetector.runAfterDetection(Landroid/location/Country;Landroid/location/Country;ZZ)V
com.android.wallpaper.fall.FallView.surfaceChanged(Landroid/view/SurfaceHolder;III)V
com.android.wallpaper.galaxy.GalaxyView.surfaceChanged(Landroid/view/SurfaceHolder;III)V
com.android.camera.Camera.access$1300(Lcom/android/camera/Camera;)V
com.android.camera.Camera.onResume()V
com.android.camera.ActivityBase.onPause()V
com.android.gallery3d.app.AbstractGalleryActivity.onPause()V
com.android.camera.CameraPreference$OnPreferenceChangedListener.onSharedPreferenceChanged()V
com.android.camera.Camera.restorePreferences()V
com.android.camera.ActivityBase.onResume()V
com.android.gallery3d.app.AbstractGalleryActivity.onResume()V
com.android.camera.VideoCamera.onCancelBgTraining(Landroid/view/View;)V
com.android.camera.VideoCamera.restorePreferences()V
com.android.gallery3d.data.ClusterAlbumSet.reload()J
com.android.server.location.ComprehensiveCountryDetector$2.run()V
com.android.camera.PanoramaActivity.onPause()V
com.android.gallery3d.app.AlbumPicker.onPause()V
com.android.gallery3d.app.CropImage.onPause()V
com.android.gallery3d.app.DialogPicker.onPause()V
com.android.gallery3d.app.Gallery.onPause()V
com.android.gallery3d.app.PickerActivity.onPause()V
com.android.camera.ui.IndicatorControl.onSettingChanged()V
com.android.camera.Camera.access$4300(Lcom/android/camera/Camera;)V
com.android.camera.PanoramaActivity.onResume()V
com.android.gallery3d.app.AlbumPicker.onResume()V
com.android.gallery3d.app.CropImage.onResume()V
com.android.gallery3d.app.DialogPicker.onResume()V
com.android.gallery3d.app.Gallery.onResume()V
com.android.gallery3d.app.PickerActivity.onResume()V
com.android.camera.VideoCamera.access$2100(Lcom/android/camera/VideoCamera;)V
com.android.gallery3d.data.MediaSet.reload()J
com.android.camera.ui.IndicatorButton$Listener.onSettingChanged()V
com.android.camera.ui.IndicatorControlBarContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlBar.onSettingChanged()V
com.android.camera.ui.IndicatorControlContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlWheelContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlWheel.onSettingChanged()V
com.android.camera.ui.OtherSettingsPopup$Listener.onSettingChanged()V
com.android.camera.ui.SecondLevelIndicatorControlBar.onSettingChanged()V
com.android.camera.Camera$4.run()V
com.android.camera.VideoCamera$3.run()V
com.android.gallery3d.app.AlbumDataLoader$ReloadTask.run()V
com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask.run()V
com.android.gallery3d.app.PhotoDataAdapter$ReloadTask.run()V
com.android.gallery3d.app.SlideshowPage$SequentialSource.reload()J
com.android.gallery3d.app.SlideshowPage$ShuffleSource.reload()J
com.android.gallery3d.data.ClusterAlbum.reload()J
com.android.gallery3d.data.ComboAlbum.reload()J
com.android.gallery3d.data.ComboAlbumSet.reload()J
com.android.gallery3d.data.FilterDeleteSet.reload()J
com.android.gallery3d.data.FilterTypeSet.reload()J
com.android.gallery3d.data.FilterTypeSet.updateData()V
com.android.gallery3d.data.LocalAlbumSet.reload()J
com.android.gallery3d.data.LocalMergeAlbum.reload()J
com.android.gallery3d.data.MtpDeviceSet.reload()J
com.android.gallery3d.gadget.MediaSetSource.reload()V
com.android.camera.ui.IndicatorButton.onSettingChanged()V
com.android.camera.ui.OtherSettingsPopup.onSettingChanged()V
com.android.gallery3d.app.AlbumDataLoader.resume()V
com.android.gallery3d.app.AlbumSetDataLoader.resume()V
com.android.gallery3d.app.PhotoDataAdapter.resume()V
com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource.reload()J
com.android.gallery3d.gadget.WidgetSource.reload()V
com.android.camera.ui.BasicSettingPopup$Listener.onSettingChanged()V
com.android.camera.ui.EffectSettingPopup$Listener.onSettingChanged()V
com.android.camera.ui.InLineSettingItem$Listener.onSettingChanged()V
com.android.gallery3d.app.AlbumPage.onResume()V
com.android.gallery3d.app.AlbumSetPage.onResume()V
com.android.gallery3d.app.ManageCachePage.onResume()V
com.android.gallery3d.app.PhotoPage$Model.resume()V
com.android.gallery3d.app.SlideshowDataAdapter.loadItem()Lcom/android/gallery3d/data/MediaItem;
com.android.gallery3d.gadget.WidgetService$PhotoRVFactory.onDataSetChanged()V
com.android.camera.ui.BasicSettingPopup.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.camera.ui.EffectSettingPopup.onClick(Landroid/view/View;)V
com.android.camera.ui.EffectSettingPopup.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.camera.ui.InLineSettingItem.changeIndex(I)Z
com.android.gallery3d.app.ActivityState.onResume()V
com.android.gallery3d.app.PhotoPage.onResume()V
com.android.gallery3d.app.SlideshowDataAdapter.access$500(Lcom/android/gallery3d/app/SlideshowDataAdapter;)Lcom/android/gallery3d/data/MediaItem;
com.android.camera.ui.InLineSettingKnob.changeIndex(I)Z
com.android.camera.ui.InLineSettingRestore.changeIndex(I)Z
com.android.camera.ui.InLineSettingSwitch.changeIndex(I)Z
com.android.gallery3d.app.ActivityState.resume()V
com.android.gallery3d.app.SlideshowPage.onResume()V
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.camera.ui.InLineSettingKnob$1.run()V
com.android.camera.ui.InLineSettingKnob$2.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.camera.ui.InLineSettingKnob$3.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.camera.ui.InLineSettingSwitch$1.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.gallery3d.app.AlbumPage.resume()V
com.android.gallery3d.app.AlbumSetPage.resume()V
com.android.gallery3d.app.ManageCachePage.resume()V
com.android.gallery3d.app.PhotoPage.resume()V
com.android.gallery3d.app.SlideshowPage.resume()V
com.android.gallery3d.app.StateManager.finishState(Lcom/android/gallery3d/app/ActivityState;)V
com.android.gallery3d.app.StateManager.resume()V
com.android.gallery3d.app.StateManager.startStateForResult(Ljava/lang/Class;ILandroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.startState(Ljava/lang/Class;Landroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.switchState(Lcom/android/gallery3d/app/ActivityState;Ljava/lang/Class;Landroid/os/Bundle;)V
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.ActivityState.onBackPressed()V
com.android.gallery3d.app.AlbumPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage.clearLoadingBit(I)V
com.android.gallery3d.app.AlbumSetPage.clearLoadingBit(I)V
com.android.gallery3d.app.PhotoPage$2.onLoadingFinished()V
com.android.gallery3d.app.SlideshowPage.showPendingBitmap()V
com.android.gallery3d.app.AlbumPage.doCluster(I)V
com.android.gallery3d.app.AlbumPage.pickPhoto(I)V
com.android.gallery3d.app.AlbumSetPage.pickAlbum(I)V
com.android.gallery3d.app.PhotoPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.ActivityBase.createCameraScreenNail(Z)V
com.android.gallery3d.app.AlbumPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumSetPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.DialogPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.startDefaultPage()V
com.android.gallery3d.app.Gallery.startGetContent(Landroid/content/Intent;)V
com.android.gallery3d.app.Gallery.startViewAction(Landroid/content/Intent;)V
com.android.gallery3d.ui.ImportCompleteListener.goToImportedAlbum()V
com.android.gallery3d.app.AlbumPage.onUpPressed()V
com.android.gallery3d.app.AlbumSetPage.doCluster(I)V
com.android.gallery3d.app.PhotoPage.onUpPressed()V
com.android.gallery3d.util.ThreadPool$Job.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumSetPage.onBackPressed()V
com.android.gallery3d.app.ManageCachePage.onBackPressed()V
com.android.gallery3d.app.PhotoPage.onBackPressed()V
com.android.gallery3d.app.SlideshowPage.onBackPressed()V
com.android.gallery3d.app.StateManager.itemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.StateManager.onBackPressed()V
com.android.gallery3d.app.ActivityState.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage$5.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage.access$1600(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumPage.onPause()V
com.android.gallery3d.app.AlbumSetPage.access$1600(Lcom/android/gallery3d/app/AlbumSetPage;I)V
com.android.gallery3d.app.AlbumSetPage.onPause()V
com.android.gallery3d.app.LoadingListener.onLoadingFinished()V
com.android.gallery3d.app.PhotoDataAdapter$DataListener.onLoadingFinished()V
com.android.gallery3d.app.SlideshowPage.access$100(Lcom/android/gallery3d/app/SlideshowPage;)V
com.android.gallery3d.app.GalleryActionBar$ClusterRunner.doCluster(I)V
com.android.gallery3d.app.AlbumPage.access$900(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumSetPage.access$1000(Lcom/android/gallery3d/app/AlbumSetPage;I)V
com.android.camera.Camera.createCameraScreenNail(Z)V
com.android.camera.PanoramaActivity.createCameraScreenNail(Z)V
com.android.camera.VideoCamera.createCameraScreenNail(Z)V
com.android.gallery3d.app.AbstractGalleryActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.PickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumSetPage$4.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.Gallery.initializeByIntent()V
com.android.gallery3d.ui.ImportCompleteListener.onProgressComplete(I)V
com.android.gallery3d.app.AlbumPage.onBackPressed()V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/Bitmap;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Lcom/android/gallery3d/ui/ScreenNail;
com.android.gallery3d.gadget.WidgetUtils.createWidgetBitmap(Lcom/android/gallery3d/data/MediaItem;)Landroid/graphics/Bitmap;
com.android.gallery3d.ui.AlbumSetSlidingWindow.getLoadingTexture()Lcom/android/gallery3d/ui/BitmapTexture;
com.android.gallery3d.util.JobLimiter$JobWrapper.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.util.ThreadPool$Worker.run()V
com.android.gallery3d.app.ManageCachePage.onClick(Landroid/view/View;)V
com.android.gallery3d.app.ManageCachePage.onProgressComplete(I)V
com.android.gallery3d.app.SlideshowPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AbstractGalleryActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AbstractGalleryActivity.onBackPressed()V
com.android.gallery3d.app.ManageCachePage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.SlideshowPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.ActionModeHandler$ActionModeListener.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage$7.run()V
com.android.gallery3d.app.AlbumPage$MyLoadingListener.onLoadingFinished()V
com.android.gallery3d.app.ActivityState.onPause()V
com.android.gallery3d.app.AlbumSetPage$6.run()V
com.android.gallery3d.app.AlbumSetPage$MyLoadingListener.onLoadingFinished()V
com.android.gallery3d.app.AlbumSetDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.GalleryActionBar$1.onClick(Landroid/content/DialogInterface;I)V
com.android.gallery3d.app.GalleryActionBar.onNavigationItemSelected(IJ)Z
com.android.camera.Camera.onCreate(Landroid/os/Bundle;)V
com.android.camera.PanoramaActivity.onCreate(Landroid/os/Bundle;)V
com.android.camera.VideoCamera.onCreate(Landroid/os/Bundle;)V
com.android.camera.ActivityBase.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.CropImage.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.ui.MenuExecutor$ProgressListener.onProgressComplete(I)V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.gadget.LocalPhotoSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.gadget.MediaSetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.ui.GLView.onTouch(Landroid/view/MotionEvent;)Z
com.android.camera.ActivityBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.Camera.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.PanoramaActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.VideoCamera.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.Gallery.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.PickerActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.ActivityBase.onBackPressed()V
com.android.gallery3d.app.AlbumPicker.onBackPressed()V
com.android.gallery3d.app.DialogPicker.onBackPressed()V
com.android.gallery3d.app.Gallery.onBackPressed()V
com.android.gallery3d.app.PickerActivity.onBackPressed()V
com.android.gallery3d.ui.ActionModeHandler.onActionItemClicked(Landroid/view/ActionMode;Landroid/view/MenuItem;)Z
com.android.gallery3d.app.ManageCachePage.onPause()V
com.android.gallery3d.app.PhotoPage.onPause()V
com.android.gallery3d.app.SlideshowPage.onPause()V
com.android.gallery3d.app.StateManager.pause()V
com.android.gallery3d.app.AlbumSetDataLoader.access$1900(Lcom/android/gallery3d/app/AlbumSetDataLoader;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.access$2500(Lcom/android/gallery3d/app/PhotoDataAdapter;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumDataLoader.access$1700(Lcom/android/gallery3d/app/AlbumDataLoader;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.ui.MenuExecutor.onProgressComplete(ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.gallery3d.gadget.WidgetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.app.AlbumPage$2.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumSetPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ManageCachePage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.PhotoPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.EdgeView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.ScrollBarView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlideshowView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.TileImageView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumPicker.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.DialogPicker.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.Camera.onBackPressed()V
com.android.camera.PanoramaActivity.onBackPressed()V
com.android.camera.VideoCamera.onBackPressed()V
com.android.gallery3d.ui.ActionModeHandler$1.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.MenuExecutor.access$700(Lcom/android/gallery3d/ui/MenuExecutor;ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.gallery3d.gadget.WidgetService$PhotoRVFactory.getViewAt(I)Landroid/widget/RemoteViews;
com.android.gallery3d.app.AlbumPage$2.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumSetPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ManageCachePage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.PhotoPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.SlideshowPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.EdgeView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLRootView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLRootView.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.GLView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.GLView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.ScrollBarView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlideshowView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlotView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.TileImageView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.UndoBarView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.MenuExecutor$MediaOperation.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.gallery3d.ui.GLRoot.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage$2.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.AlbumSetPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.ManageCachePage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.PhotoPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.SlideshowPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.EdgeView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.PhotoView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.ScrollBarView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.SlideshowView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.SlotView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.TileImageView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.UndoBarView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.AlbumPage$2.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$FaceHighlightView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$HighlightRectangle.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.EdgeView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.GLView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.GLView.removeAllComponents()V
com.android.gallery3d.ui.PhotoView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.ScrollBarView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlideshowView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlotView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.TileImageView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.UndoBarView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.MenuExecutor$MediaOperation.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.ActivityState.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage$2.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.AlbumSetPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.ManageCachePage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.PhotoPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.SlideshowPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.EdgeView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.PhotoView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.ScrollBarView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.SlideshowView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.SlotView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.TileImageView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.UndoBarView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.AlbumPage$2.removeAllComponents()V
com.android.gallery3d.app.AlbumSetPage$1.removeAllComponents()V
com.android.gallery3d.app.ManageCachePage$1.removeAllComponents()V
com.android.gallery3d.app.PhotoPage$1.removeAllComponents()V
com.android.gallery3d.app.SlideshowPage$1.removeAllComponents()V
com.android.gallery3d.ui.CropView$FaceHighlightView.removeAllComponents()V
com.android.gallery3d.ui.CropView$HighlightRectangle.removeAllComponents()V
com.android.gallery3d.ui.CropView.removeAllComponents()V
com.android.gallery3d.ui.EdgeView.removeAllComponents()V
com.android.gallery3d.ui.PhotoView.removeAllComponents()V
com.android.gallery3d.ui.ScrollBarView.removeAllComponents()V
com.android.gallery3d.ui.SlideshowView.removeAllComponents()V
com.android.gallery3d.ui.SlotView.removeAllComponents()V
com.android.gallery3d.ui.TileImageView.removeAllComponents()V
com.android.gallery3d.ui.UndoBarView.removeAllComponents()V
com.android.gallery3d.app.AlbumPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage.initializeViews()V
com.android.gallery3d.app.SlideshowPage.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.app.ActivityState.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.restoreFromState(Landroid/os/Bundle;)V
com.android.server.LocationManagerService.isAllowedProviderSafe(Ljava/lang/String;)Z
com.android.server.LocationManagerService._getProvidersLocked(Landroid/location/Criteria;Z)Ljava/util/List;
com.android.server.LocationManagerService.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
android.location.ILocationManager$Stub$Proxy.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
android.location.ILocationManager$Stub.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
com.android.server.LocationManagerService.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
android.location.ILocationManager.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
android.location.ILocationManager$Stub$Proxy.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
android.location.ILocationManager$Stub.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
android.location.LocationManager.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
android.location.LocationManager.getProviders(Z)Ljava/util/List;
android.location.ILocationManager.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
com.android.server.location.LocationBasedCountryDetector.getEnabledProviders()Ljava/util/List;
android.location.LocationManager.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
com.android.server.LocationManagerService.addGpsStatusListener(Landroid/location/IGpsStatusListener;)Z
android.location.ILocationManager$Stub$Proxy.addGpsStatusListener(Landroid/location/IGpsStatusListener;)Z
android.location.ILocationManager$Stub.addGpsStatusListener(Landroid/location/IGpsStatusListener;)Z
android.location.ILocationManager.addGpsStatusListener(Landroid/location/IGpsStatusListener;)Z
android.location.LocationManager.addGpsStatusListener(Landroid/location/GpsStatus$Listener;)Z
android.location.LocationManager.addNmeaListener(Landroid/location/GpsStatus$NmeaListener;)Z
com.android.phone.PhoneInterfaceManager.getCellLocation()Landroid/os/Bundle;
com.android.internal.telephony.ITelephony$Stub$Proxy.getCellLocation()Landroid/os/Bundle;
com.android.internal.telephony.ITelephony$Stub.getCellLocation()Landroid/os/Bundle;
com.android.internal.telephony.ITelephony.getCellLocation()Landroid/os/Bundle;
com.android.internal.telephony.ITelephony$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.telephony.TelephonyManager.getCellLocation()Landroid/telephony/CellLocation;
com.android.phone.PhoneInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.location.GpsLocationProvider.requestRefLocation(I)V
com.android.settings.RadioInfo.onResume()V
com.android.phone.PhoneInterfaceManager.getNeighboringCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony$Stub$Proxy.getNeighboringCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony$Stub.getNeighboringCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony.getNeighboringCellInfo()Ljava/util/List;
android.telephony.TelephonyManager.getNeighboringCellInfo()Ljava/util/List;
com.android.phone.PhoneInterfaceManager.getAllCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony$Stub$Proxy.getAllCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony$Stub.getAllCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony.getAllCellInfo()Ljava/util/List;
android.telephony.TelephonyManager.getAllCellInfo()Ljava/util/List;
Permission:android.permission.USE_CREDENTIALS

364 Callers:

android.accounts.AccountManagerService.getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V
android.accounts.IAccountManager$Stub$Proxy.getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V
android.accounts.IAccountManager$Stub.getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V
android.accounts.IAccountManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.accounts.IAccountManager.getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V
android.accounts.AccountManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.accounts.AccountManager$5.doWork()V
android.accounts.AccountManager$6.doWork()V
android.accounts.AccountManager$AmsTask.doWork()V
android.accounts.AccountManager$AmsTask.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$AmsTask$Response.onResult(Landroid/os/Bundle;)V
android.accounts.AccountManager$10.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$5.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$6.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$7.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$8.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$9.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.start()Landroid/accounts/AccountManagerFuture;
android.accounts.IAccountManagerResponse$Stub$Proxy.onResult(Landroid/os/Bundle;)V
android.accounts.AccountManager.editProperties(Ljava/lang/String;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.addAccount(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.confirmCredentials(Landroid/accounts/Account;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.updateCredentials(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAuthTokenByFeatures(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/Bundle;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.test.IsolatedContext$MockAccountManager.editProperties(Ljava/lang/String;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.development.AccountsTester$ButtonClickListener.onClick(Landroid/view/View;)V
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1.onResult(Landroid/os/Bundle;)V
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1.run(Landroid/accounts/AccountManagerFuture;)V
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.run(Landroid/accounts/AccountManagerFuture;)V
android.test.IsolatedContext$MockAccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.browser.DeviceAccountLogin.handleLogin(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.DeviceAccountLogin.login(ILcom/android/browser/DeviceAccountLogin$AutoLoginCallback;)V
com.android.browser.GoogleAccountLogin.invalidateTokens()V
com.android.browser.GoogleAccountLogin.run(Landroid/accounts/AccountManagerFuture;)V
com.android.browser.GoogleAccountLogin.startLogin()V
com.android.development.AccountsTester$2.onClick(Landroid/content/DialogInterface;I)V
android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.test.IsolatedContext$MockAccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.addAccount(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.calendar.AllInOneActivity$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.util.AccountPromptUtils.launchAccountPrompt(Landroid/app/Activity;)V
com.android.email.service.MailService.setupAccountManagerAccount(Landroid/content/Context;Lcom/android/emailcommon/provider/Account;ZZZLandroid/accounts/AccountManagerCallback;)V
com.android.settings.accounts.AddAccountSettings.addAccount(Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.confirmCredentials(Landroid/accounts/Account;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.development.AccountsTester.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.internal.policy.impl.AccountUnlockScreen.asyncCheckPassword()V
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.next()V
android.test.IsolatedContext$MockAccountManager.updateCredentials(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.test.IsolatedContext$MockAccountManager.getAuthTokenByFeatures(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/Bundle;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.development.AccountsTester$3.onClick(Landroid/content/DialogInterface;I)V
com.android.browser.Tab$2.onReceivedLoginRequest(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.AutologinBar.onClick(Landroid/view/View;)V
com.android.browser.GoogleAccountLogin.run()V
com.android.browser.GoogleAccountLogin.startLoginIfNeeded(Landroid/app/Activity;Ljava/lang/Runnable;)V
android.accounts.AccountManager.blockingGetAuthToken(Landroid/accounts/Account;Ljava/lang/String;Z)Ljava/lang/String;
android.test.IsolatedContext$MockAccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.ChooseTypeAndAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.updateViewConfiguration(Z)V
com.android.email.activity.setup.AccountSetupOptions$1.run()V
com.android.settings.accounts.AddAccountSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.internal.policy.impl.AccountUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.run(Landroid/accounts/AccountManagerFuture;)V
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.start()V
com.android.browser.Controller.doStart(Landroid/os/Bundle;Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onProviderStatusChange()V
com.android.contacts.activities.PeopleActivity.onResume()V
com.android.internal.policy.impl.LockPatternKeyguardView.maybeEnableFallback(Landroid/content/Context;)V
com.android.browser.CrashRecoveryHandler.startRecovery(Landroid/content/Intent;)V
com.android.contacts.list.ProviderStatusWatcher$ProviderStatusListener.onProviderStatusChange()V
com.android.contacts.activities.TransactionSafeActivity.onResume()V
com.android.contacts.ContactsActivity.onResume()V
com.android.internal.policy.impl.LockPatternKeyguardView.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardWindowController;)V
com.android.browser.Controller.start(Landroid/content/Intent;)V
com.android.contacts.list.ProviderStatusWatcher.notifyListeners()V
com.android.contacts.activities.AttachPhotoActivity.onResume()V
com.android.contacts.activities.ContactDetailActivity.onResume()V
com.android.contacts.activities.ContactEditorActivity.onResume()V
com.android.contacts.activities.ContactSelectionActivity.onResume()V
com.android.contacts.activities.DialtactsActivity.onResume()V
com.android.contacts.activities.GroupBrowserActivity.onResume()V
com.android.contacts.activities.GroupDetailActivity.onResume()V
com.android.contacts.activities.GroupEditorActivity.onResume()V
com.android.contacts.activities.JoinContactActivity.onResume()V
com.android.contacts.activities.NonPhoneActivity.onResume()V
com.android.contacts.activities.ShowOrCreateActivity.onResume()V
com.android.contacts.CallContactActivity.onResume()V
com.android.contacts.list.AccountFilterActivity.onResume()V
com.android.contacts.list.CustomContactListFilterActivity.onResume()V
com.android.contacts.test.FragmentTestActivity.onResume()V
com.android.contacts.vcard.ImportVCardActivity.onResume()V
com.android.contacts.vcard.SelectAccountActivity.onResume()V
com.android.internal.policy.impl.LockPatternKeyguardViewProperties.createKeyguardView(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardWindowController;)Lcom/android/internal/policy/impl/KeyguardViewBase;
com.android.browser.ActivityController.start(Landroid/content/Intent;)V
com.android.contacts.list.ProviderStatusWatcher.access$600(Lcom/android/contacts/list/ProviderStatusWatcher;)V
com.android.internal.policy.impl.KeyguardViewProperties.createKeyguardView(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardWindowController;)Lcom/android/internal/policy/impl/KeyguardViewBase;
com.android.browser.BrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.onPostExecute(Ljava/lang/Boolean;)V
com.android.internal.policy.impl.KeyguardViewManager.show()V
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.onPostExecute(Ljava/lang/Object;)V
com.android.internal.policy.impl.KeyguardViewManager.verifyUnlock()V
com.android.internal.policy.impl.KeyguardViewMediator.handleShow()V
com.android.internal.policy.impl.KeyguardViewMediator.handleVerifyUnlock()V
com.android.internal.policy.impl.KeyguardViewMediator.access$1200(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1500(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.showLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewMediator.resetStateLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.verifyUnlockLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.hideLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.doKeyguardLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.setKeyguardEnabled(Z)V
com.android.internal.policy.impl.KeyguardViewCallback.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewMediator.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewMediator.onScreenTurnedOff(I)V
com.android.internal.policy.impl.KeyguardViewMediator.onSimStateChanged(Lcom/android/internal/telephony/IccCard$State;)V
com.android.internal.policy.impl.KeyguardViewMediator.onUserSwitched(I)V
com.android.internal.policy.impl.KeyguardViewMediator.verifyUnlock(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$700(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.onSystemReady()V
com.android.internal.policy.impl.PhoneWindowManager.enableKeyguard(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewCallback.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewMediator.adjustUserActivityLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.handleWakeWhenReady(I)V
com.android.internal.policy.impl.PhoneWindowManager.showGlobalActionsDialog()V
com.android.internal.policy.impl.PhoneWindowManager.screenTurnedOff(I)V
com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback.onSimStateChanged(Lcom/android/internal/telephony/IccCard$State;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$300(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.policy.impl.PhoneWindowManager.exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.PhoneWindowManager.launchHomeFromHotKey()V
com.android.internal.policy.impl.KeyguardViewMediator$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.policy.impl.KeyguardViewMediator.doKeyguardTimeout()V
com.android.internal.policy.impl.PhoneWindowManager.systemReady()V
android.view.WindowManagerPolicy.enableKeyguard(Z)V
com.android.internal.policy.impl.KeyguardScreenCallback.pokeWakelock(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.takeEmergencyCallAction()V
com.android.internal.policy.impl.KeyguardViewBase.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView$3.pokeWakelock()V
com.android.internal.policy.impl.LockPatternKeyguardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView.wakeWhenReadyTq(I)V
com.android.internal.policy.impl.KeyguardViewMediator.handleHide()V
com.android.internal.policy.impl.KeyguardViewMediator.handleSetHidden(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1800(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
android.view.WindowManagerPolicy.screenTurnedOff(I)V
com.android.internal.policy.impl.PhoneWindowManager.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.handleSimStateChange(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimArgs;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.registerSimStateCallback(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimStateCallback;)V
com.android.internal.policy.impl.KeyguardViewMediator$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.view.WindowManagerPolicy.exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.PhoneWindowManager$19.run()V
android.view.WindowManagerPolicy.systemReady()V
com.android.server.wm.WindowManagerService$1.acquired()V
com.android.server.wm.WindowManagerService$1.released()V
com.android.server.wm.WindowManagerService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.policy.impl.AccountUnlockScreen$2.run(Landroid/accounts/AccountManagerFuture;)V
com.android.internal.policy.impl.AccountUnlockScreen.onTextChanged(Ljava/lang/CharSequence;III)V
com.android.internal.policy.impl.FaceUnlock.handleCancel()V
com.android.internal.policy.impl.FaceUnlock.handlePokeWakelock(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$2.userActivity(Landroid/view/View;)V
com.android.internal.policy.impl.LockScreen$WaveViewMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener.onPatternCellAdded(Ljava/util/List;)V
com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener.onPatternDetected(Ljava/util/List;)V
com.android.internal.policy.impl.SimPukUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.SimPukUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.SimUnlockScreen$TouchInput.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardScreenCallback.takeEmergencyCallAction()V
com.android.internal.policy.impl.LockPatternKeyguardView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardScreenCallback.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewBase.wakeWhenReadyTq(I)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1300(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.handleKeyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.access$2100(Lcom/android/internal/policy/impl/KeyguardViewMediator;Z)V
com.android.internal.policy.impl.KeyguardViewMediator.notifyScreenOffLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.notifyScreenOnLocked(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardViewMediator.wakeWhenReadyLocked(I)V
com.android.server.PowerManagerService$4.run()V
android.view.WindowManagerPolicy.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.access$300(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimArgs;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.reportSimUnlocked()V
com.android.internal.policy.impl.KeyguardStatusViewManager.<init>(Landroid/view/View;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Z)V
com.android.internal.policy.impl.KeyguardStatusViewManager.onResume()V
com.android.internal.policy.impl.KeyguardViewMediator.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/PhoneWindowManager;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.LockScreen.onResume()V
com.android.server.wm.WindowManagerService.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.WindowManagerPolicy.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.PhoneWindowManager.interceptFallback(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Z
com.android.server.wm.WindowManagerService.systemReady()V
com.android.internal.widget.LockScreenWidgetCallback.userActivity(Landroid/view/View;)V
com.android.internal.widget.WaveView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.LockPatternView$OnPatternListener.onPatternCellAdded(Ljava/util/List;)V
com.android.internal.widget.LockPatternView$OnPatternListener.onPatternDetected(Ljava/util/List;)V
com.android.internal.policy.impl.KeyguardStatusViewManager.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.FaceUnlock.handleServiceConnected()V
com.android.internal.policy.impl.LockScreen$GlowPadViewMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$GlowPadViewMethods.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$SlidingTabMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$SlidingTabMethods.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.PasswordUnlockScreen$2.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PasswordUnlockScreen$3.afterTextChanged(Landroid/text/Editable;)V
com.android.internal.policy.impl.PasswordUnlockScreen$4.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PasswordUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimUnlockScreen$1$1.run()V
com.android.internal.policy.impl.SimUnlockScreen.checkPin()V
com.android.internal.policy.impl.SimUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardViewManager.wakeWhenReadyTq(I)Z
com.android.internal.policy.impl.KeyguardViewMediator.access$1900(Lcom/android/internal/policy/impl/KeyguardViewMediator;Z)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDone(ZZ)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDoneDrawing()V
com.android.internal.policy.impl.KeyguardViewMediator.onScreenTurnedOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardViewMediator.onWakeKeyWhenKeyguardShowingTq(IZ)Z
com.android.internal.policy.impl.KeyguardViewMediator.onWakeMotionWhenKeyguardShowingTq()Z
com.android.server.wm.WindowManagerService$PolicyThread.run()V
com.android.internal.policy.impl.SimPukUnlockScreen$1$1.run()V
com.android.internal.policy.impl.AccountUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.LockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;)V
com.android.internal.policy.impl.PasswordUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;)V
com.android.internal.policy.impl.PatternUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;I)V
com.android.internal.policy.impl.SimPukUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.SimUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.AccountUnlockScreen.onResume()V
com.android.internal.policy.impl.PasswordUnlockScreen.onResume()V
com.android.internal.policy.impl.PatternUnlockScreen.onResume()V
com.android.internal.policy.impl.SimPukUnlockScreen.onResume()V
com.android.internal.policy.impl.SimUnlockScreen.onResume()V
com.android.internal.policy.impl.KeyguardScreen.onResume()V
android.view.IWindowManager$Stub$Proxy.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.IWindowManager$Stub.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
com.android.server.wm.InputMonitor.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.PhoneWindowManager.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.ServerThread.run()V
com.android.internal.widget.TransportControlView.onClick(Landroid/view/View;)V
com.android.internal.widget.WaveView.setGrabbedState(I)V
com.android.internal.widget.LockPatternView.notifyCellAdded()V
com.android.internal.widget.LockPatternView.notifyPatternDetected()V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.internal.widget.SlidingTab$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.SlidingTab$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.SimUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDone(Z)V
com.android.internal.policy.impl.PhoneWindowManager$15.run()V
com.android.internal.policy.impl.PhoneWindowManager$9.run()V
com.android.internal.policy.impl.KeyguardViewCallback.keyguardDoneDrawing()V
com.android.internal.policy.impl.PhoneWindowManager.screenTurningOn(Landroid/view/WindowManagerPolicy$ScreenOnListener;)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.notifyLidSwitchChanged(JZ)V
com.android.internal.policy.impl.PhoneWindowManager.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)V
com.android.internal.policy.impl.LockPatternKeyguardView.createUnlockScreenFor(Lcom/android/internal/policy/impl/LockPatternKeyguardView$UnlockMode;)Landroid/view/View;
com.android.internal.policy.impl.LockPatternKeyguardView.createLockScreen()Landroid/view/View;
com.android.internal.policy.impl.PatternUnlockScreen.onWindowFocusChanged(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.show()V
com.android.internal.policy.impl.LockPatternKeyguardView.updateScreen(Lcom/android/internal/policy/impl/LockPatternKeyguardView$Mode;Z)V
android.view.IWindowManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IWindowManager.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
android.view.WindowManagerPolicy.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.WaveView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.WaveView.tryTransitionToStartAttemptState(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.addCellToPattern(Lcom/android/internal/widget/LockPatternView$Cell;)V
com.android.internal.widget.LockPatternView.handleActionUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.internal.widget.SlidingTab.setGrabbedState(I)V
com.android.internal.widget.SlidingTab.dispatchTriggerEvent(I)V
com.android.internal.policy.impl.KeyguardViewCallback.keyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost.dispatchDraw(Landroid/graphics/Canvas;)V
android.view.WindowManagerPolicy.screenTurningOn(Landroid/view/WindowManagerPolicy$ScreenOnListener;)V
android.view.WindowManagerPolicy.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
android.view.WindowManagerPolicy.notifyLidSwitchChanged(JZ)V
android.view.WindowManagerPolicy.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZLcom/android/server/wm/WindowManagerService$1;)V
com.android.internal.policy.impl.LockPatternKeyguardView.recreateUnlockScreen(Lcom/android/internal/policy/impl/LockPatternKeyguardView$UnlockMode;)V
com.android.internal.policy.impl.LockPatternKeyguardView.recreateLockScreen()V
com.android.internal.policy.impl.KeyguardViewBase.show()V
com.android.internal.policy.impl.LockPatternKeyguardView.onScreenTurnedOn()V
com.android.internal.policy.impl.LockPatternKeyguardView.access$200(Lcom/android/internal/policy/impl/LockPatternKeyguardView;Lcom/android/internal/policy/impl/LockPatternKeyguardView$Mode;Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.verifyUnlock()V
com.android.server.wm.WindowManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.KeyguardManager.exitKeyguardSecurely(Landroid/app/KeyguardManager$OnKeyguardExitResult;)V
com.android.server.input.InputManagerService.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.server.wm.InputMonitor.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.WaveView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.LockPatternView.detectAndAddHit(FF)Lcom/android/internal/widget/LockPatternView$Cell;
com.android.internal.widget.LockPatternView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.internal.widget.SlidingTab.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.cancelGrab()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.goToLockScreen()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.goToUnlockScreen()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.keyguardDone(Z)V
com.android.server.wm.InputMonitor.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.wm.InputMonitor.notifyLidSwitchChanged(JZ)V
com.android.server.wm.InputMonitor.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService$WMThread.run()V
com.android.internal.policy.impl.KeyguardViewBase.onScreenTurnedOn()V
com.android.internal.policy.impl.LockPatternKeyguardView$1.run()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.forgotPattern(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.reportFailedUnlockAttempt()V
com.android.internal.policy.impl.LockPatternKeyguardView$4.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardViewBase.verifyUnlock()V
com.android.systemui.statusbar.BaseStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.systemui.statusbar.phone.PhoneStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.server.input.InputManagerService$Callbacks.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.LockPatternView.handleActionDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.handleActionMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.SlidingTab.onVisibilityChanged(Landroid/view/View;I)V
com.android.internal.policy.impl.KeyguardScreenCallback.goToLockScreen()V
com.android.internal.policy.impl.KeyguardScreenCallback.goToUnlockScreen()V
com.android.internal.policy.impl.KeyguardScreenCallback.keyguardDone(Z)V
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.input.InputManagerService$Callbacks.notifyLidSwitchChanged(JZ)V
com.android.server.input.InputManagerService$Callbacks.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService.main(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)Lcom/android/server/wm/WindowManagerService;
com.android.internal.policy.impl.KeyguardViewManager.onScreenTurnedOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardScreenCallback.forgotPattern(Z)V
com.android.internal.policy.impl.KeyguardScreenCallback.reportFailedUnlockAttempt()V
com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallbackImpl.onUserChanged(I)V
com.android.server.input.InputManagerService.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.AccountUnlockScreen.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.LockScreen$3.run()V
com.android.internal.policy.impl.LockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.AccountUnlockScreen$1.run()V
com.android.internal.policy.impl.FaceUnlock.handleUnlock()V
com.android.internal.policy.impl.PasswordUnlockScreen.verifyPasswordAndUnlock()V
com.android.server.input.InputManagerService.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.input.InputManagerService.notifyLidSwitchChanged(JZ)V
com.android.server.input.InputManagerService.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.internal.policy.impl.KeyguardViewMediator.handleNotifyScreenOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.PatternUnlockScreen$2.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardStatusViewManager$1.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallback.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardViewMediator$1.onUserChanged(I)V
com.android.internal.policy.impl.LockScreen$1.onUserChanged(I)V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.PasswordUnlockScreen.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardViewMediator.access$1700(Lcom/android/internal/policy/impl/KeyguardViewMediator;Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.handleUserChanged(I)V
android.accounts.AccountManagerService.checkManageAccountsOrUseCredentialsPermissions()V
android.accounts.AccountManagerService.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager$Stub$Proxy.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager$Stub.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
android.accounts.AccountManager.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
com.android.development.AccountsTester$GetAndInvalidateAuthTokenCallback.run(Landroid/accounts/AccountManagerFuture;)V
Permission:android.permission.READ_CONTACTS

1654 Callers:

com.android.internal.telephony.IccPhoneBookInterfaceManager.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.IIccPhoneBook$Stub.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.IIccPhoneBook.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.IIccPhoneBook$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccProvider.loadFromEf(I)Landroid/database/MatrixCursor;
com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccPhoneBookInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.email.activity.setup.AccountSetupNames.access$100()Landroid/net/Uri;
com.android.email.activity.setup.AccountSetupNames$2.doInBackground([Ljava/lang/Void;)Ljava/lang/String;
com.android.email.activity.setup.AccountSetupNames$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxFinder$FindMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$6.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$QuickResponseChecker.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageFileView$LoadFilenameTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageList$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment$MessageOpenTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSetupNames$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.UIControllerTwoPane$RefreshTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.common.contacts.DataUsageStatUpdater.updateWithPhoneNumber(Ljava/util/Collection;)Z
com.android.mms.data.WorkingMessage.updateSendStats(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage.access$800(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage$2.run()V
com.android.mms.data.WorkingMessage$3.run()V
com.android.ex.chips.BaseRecipientAdapter$DefaultFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.contacts.list.ProfileAndContactsLoader.loadProfile()Landroid/database/MatrixCursor;
com.android.contacts.list.ProfileAndContactsLoader.loadInBackground()Landroid/database/Cursor;
com.android.contacts.list.ProfileAndContactsLoader.loadInBackground()Ljava/lang/Object;
com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
android.provider.Contacts$People.addToGroup(Landroid/content/ContentResolver;JLjava/lang/String;)Landroid/net/Uri;
com.android.providers.contacts.LegacyApiSupport.findFirstDataId(JLjava/lang/String;)J
com.android.providers.contacts.LegacyApiSupport.findFirstDataRow(JLjava/lang/String;)Landroid/net/Uri;
com.android.providers.contacts.LegacyApiSupport.updatePhoto(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.updatePeople(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.delete(Landroid/net/Uri;IJ)I
com.android.providers.contacts.LegacyApiSupport.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.LegacyApiSupport.update(IJLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.updateInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.LegacyApiSupport.updateAll(Landroid/net/Uri;ILandroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.deleteInTransaction(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.insertStatusUpdate(Landroid/content/ContentValues;)J
com.android.providers.contacts.ContactsProvider2.insertInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.contacts.list.LegacyContactListAdapter.getPersonUri(I)Landroid/net/Uri;
com.android.contacts.list.ContactPickerFragment.onItemClick(IJ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(IJ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.JoinContactListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.mms.data.Contact$ContactsCache.getContactInfoForPhoneNumber(Ljava/lang/String;)Lcom/android/mms/data/Contact;
com.android.mms.data.Contact$ContactsCache.getContactInfo(Lcom/android/mms/data/Contact;)Lcom/android/mms/data/Contact;
com.android.mms.data.Contact$ContactsCache.updateContact(Lcom/android/mms/data/Contact;)V
com.android.mms.data.Contact$ContactsCache.access$700(Lcom/android/mms/data/Contact$ContactsCache;Lcom/android/mms/data/Contact;)V
com.android.mms.data.Contact$ContactsCache$1.run()V
com.android.contacts.vcard.ExportProcessor.runInternal()V
com.android.contacts.vcard.ExportProcessor.run()V
com.android.contacts.vcard.ProcessorBase.run()V
com.android.phone.BluetoothAtPhonebook.processCpbrCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook.access$1000(Lcom/android/phone/BluetoothAtPhonebook;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook.handleAccessPermissionResult(Landroid/content/Intent;)V
com.android.phone.BluetoothAtPhonebook$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
android.bluetooth.HeadsetBase$1.run()V
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Boolean;
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.widget.QuickContactBadge.onClick(Landroid/view/View;)V
com.android.contacts.widget.LayoutSuppressingQuickContactBadge.onClick(Landroid/view/View;)V
com.android.mms.ui.QuickContactDivot.onClick(Landroid/view/View;)V
com.android.quicksearchbox.ui.ContactBadge.onClick(Landroid/view/View;)V
com.android.mms.data.Contact$ContactsCache.getContactInfoForSelf()Lcom/android/mms/data/Contact;
com.android.providers.contacts.LegacyApiSupport.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.queryLocal(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;JLandroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.LegacyApiSupport.getContactMethodType(Landroid/net/Uri;)Ljava/lang/String;
com.android.providers.contacts.ContactsProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.updateData(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.contacts.ContactsProvider2.insertSettings(Landroid/net/Uri;Landroid/content/ContentValues;)J
com.android.providers.contacts.LegacyApiSupport.getType(Landroid/net/Uri;)Ljava/lang/String;
com.android.providers.contacts.ContactsProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.cleanupPhotoStore()V
com.android.providers.contacts.ContactsProvider2.getType(Landroid/net/Uri;)Ljava/lang/String;
com.android.providers.contacts.ContactsProvider2.deleteData(Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.contacts.ContactsProvider2.deleteData(J[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.performBackgroundTask(ILjava/lang/Object;)V
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendVCards(Ljavax/obex/Operation;Ljava/lang/String;ZLjava/lang/String;Z)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendCallLogVcards(ILjavax/obex/Operation;IIZ)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendPhonebookOneVcard(Ljavax/obex/Operation;IZLjava/lang/String;I)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendPhonebookVcards(Ljavax/obex/Operation;IIZLjava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullPhonebook([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/HeaderSet;Ljavax/obex/Operation;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullVcardEntry([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/Operation;Ljava/lang/String;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.onGet(Ljavax/obex/Operation;)I
com.android.mms.ui.RecipientsAdapter.runQueryOnBackgroundThread(Ljava/lang/CharSequence;)Landroid/database/Cursor;
android.provider.Contacts$Settings.getSetting(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.activities.ConfirmAddDetailActivity.startExtraInfoQuery()V
com.android.contacts.activities.ConfirmAddDetailActivity.access$1200(Lcom/android/contacts/activities/ConfirmAddDetailActivity;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.util.NameConverter.displayNameToStructuredName(Landroid/content/Context;Ljava/lang/String;)Ljava/util/Map;
com.android.contacts.editor.StructuredNameEditorView.rebuildStructuredName(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.StructuredNameEditorView.switchFromFullNameToStructuredName()V
com.android.contacts.util.NameConverter.displayNameToStructuredName(Landroid/content/Context;Ljava/lang/String;Landroid/content/ContentValues;)Landroid/content/ContentValues;
com.android.contacts.editor.StructuredNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.StructuredNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.model.EntityModifier.migrateStructuredName(Landroid/content/Context;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/DataKind;)V
com.android.contacts.editor.LabeledEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.LabeledEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.model.EntityModifier.migrateStateForNewContact(Landroid/content/Context;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.Editor.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.EventFieldEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.PhoneticNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView$2.afterTextChanged(Landroid/text/Editable;)V
com.android.contacts.editor.EventFieldEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.PhoneticNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView$1.onClick(Landroid/view/View;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.EventFieldEditorView$2.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.EventFieldEditorView.clearAllFields()V
com.android.contacts.editor.EventFieldEditorView.onLabelRebuilt()V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.ContactEditorFragment.rebindEditorsForNewContact(Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.LabeledEditorView.onLabelRebuilt()V
com.android.contacts.editor.ContactEditorFragment.createContact(Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.ContactEditorFragment.access$500(Lcom/android/contacts/editor/ContactEditorFragment;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.datepicker.DatePickerDialog.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView$3.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.PhoneticNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.StructuredNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.TextFieldsEditorView.onLabelRebuilt()V
com.android.contacts.editor.ContactEditorFragment.createContact()V
com.android.contacts.editor.ContactEditorFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.contacts.editor.ContactEditorFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.selectAccountAndCreateContact()V
com.android.contacts.editor.ContactEditorFragment$3$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.EventFieldEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.LabeledEditorView$1.onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.PhoneticNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.StructuredNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.TextFieldsEditorView.onTypeSelectionChange(I)V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.queryPhotosForPreload()V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.preloadPhotosInBackground()V
com.android.vcard.VCardComposer.init(Ljava/lang/String;[Ljava/lang/String;)Z
com.android.vcard.VCardComposer.init()Z
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getContactsSize()I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getPhonebookSize(I)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullVcardListing([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/HeaderSet;Ljavax/obex/Operation;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.<init>(Landroid/os/Handler;Landroid/content/Context;)V
com.android.bluetooth.pbap.BluetoothPbapService.startObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.access$500(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.parseIntent(Landroid/content/Intent;)V
com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread.run()V
com.android.bluetooth.pbap.BluetoothPbapService.onStartCommand(Landroid/content/Intent;II)I
com.android.bluetooth.pbap.BluetoothPbapService.startRfcommSocketListener()V
com.android.bluetooth.pbap.BluetoothPbapService.access$900(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.stopObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.onCreate()V
com.android.bluetooth.pbap.BluetoothPbapService.access$1100(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.contacts.list.DirectoryListLoader.loadInBackground()Landroid/database/Cursor;
com.android.contacts.list.DirectoryListLoader.loadInBackground()Ljava/lang/Object;
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getContactNamesByNumber(Ljava/lang/String;)Ljava/util/ArrayList;
com.android.bluetooth.pbap.BluetoothPbapObexServer.createList(IILjava/lang/String;Ljava/lang/StringBuilder;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.sendVcardListingXml(ILjavax/obex/Operation;IILjava/lang/String;Ljava/lang/String;)I
com.android.contacts.ContactLoader.loadGroupMetaData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.ContactLoader.loadInBackground()Lcom/android/contacts/ContactLoader$Result;
com.android.contacts.ContactLoader.loadInBackground()Ljava/lang/Object;
com.android.mms.data.Contact.getPhoneUri()Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.launchMultiplePhonePicker()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.launchMultiplePhonePicker()V
com.android.mms.ui.ComposeMessageActivity.onClick(Landroid/view/View;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onClick(Landroid/view/View;)V
com.android.mms.data.Contact$ContactsCache.getContactInfoForEmailAddress(Ljava/lang/String;)Lcom/android/mms/data/Contact;
com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMemberFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.contacts.util.ContactLoaderUtils.ensureIsContactUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.doInBackground([Ljava/lang/Void;)Landroid/net/Uri;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.voicedialer.VoiceContact.getVoiceContacts(Landroid/app/Activity;)Ljava/util/List;
com.android.voicedialer.CommandRecognizerEngine.setupGrammar()V
com.android.voicedialer.RecognizerEngine.setupGrammar()V
com.android.voicedialer.RecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.CommandRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.PhoneTypeChoiceRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.VoiceDialerActivity$3.run()V
com.android.voicedialer.VoiceDialerActivity$4.run()V
com.android.exchange.adapter.ContactsSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.AbstractSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.ContactsSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.AbstractSyncParser.parse()Z
com.android.exchange.adapter.AccountSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.EmailSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.EasSyncService.run()V
com.android.exchange.EasSyncService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.adapter.AbstractSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.parse()Z
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser.parse()Z
com.android.exchange.adapter.Parser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.EmailSyncAdapter.getEstimate(Ljava/lang/String;)I
com.android.exchange.EasAccountService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasOutboxService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.adapter.CalendarSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.ContactsSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.EmailSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.EmailSyncAdapter.getAutomaticLookback()V
com.android.exchange.adapter.AbstractSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.browser.AutofillHandler$LoadFromDb.run()V
com.android.browser.AutofillHandler.asyncLoadFromDb()V
com.android.browser.BrowserSettings.<init>(Landroid/content/Context;)V
com.android.browser.BrowserSettings.initialize(Landroid/content/Context;)V
com.android.browser.Browser.onCreate()V
com.android.contacts.calllog.ContactInfoHelper.queryContactInfoForSipAddress(Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.calllog.ContactInfoHelper.lookupNumber(Ljava/lang/String;Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.CallDetailActivity.getPhoneCallDetailsForUri(Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.queryContactInfo(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.CallDetailActivity.access$300(Lcom/android/contacts/CallDetailActivity;Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.access$300(Lcom/android/contacts/calllog/CallLogAdapter;Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Void;)[Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter$QueryThread.run()V
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.calllog.CallLogAdapter.startRequestProcessing()V
com.android.contacts.calllog.CallLogAdapter.access$100(Lcom/android/contacts/calllog/CallLogAdapter;)V
com.android.contacts.calllog.CallLogAdapter.enqueueRequest(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;Z)V
com.android.contacts.calllog.CallLogAdapter.bindView(Landroid/view/View;Landroid/database/Cursor;I)V
com.android.contacts.calllog.CallLogAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.calllog.CallLogAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.contacts.calllog.CallLogAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.common.widget.GroupingListAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.calllog.CallLogAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.activity.ContactStatusLoader.getContactInfo(Landroid/content/Context;Ljava/lang/String;)Lcom/android/email/activity/ContactStatusLoader$Result;
com.android.email.activity.ContactStatusLoader.loadInBackground()Lcom/android/email/activity/ContactStatusLoader$Result;
com.android.email.NotificationController.getSenderPhoto(Lcom/android/emailcommon/provider/EmailContent$Message;)Landroid/graphics/Bitmap;
com.android.email.activity.ContactStatusLoader.loadInBackground()Ljava/lang/Object;
com.android.email.NotificationController.createNewMessageNotification(JJLandroid/database/Cursor;JII)Landroid/app/Notification;
com.android.email.NotificationController$MessageContentObserver.onChange(Z)V
android.provider.ContactsContract$SyncState.getWithUri(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)Landroid/util/Pair;
com.android.contacts.activities.ShowOrCreateActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.TransactionSafeActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.ContactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.DialtactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.AttachPhotoActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactSelectionActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupBrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.JoinContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.NonPhoneActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.CallContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.AccountFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.CustomContactListFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.test.FragmentTestActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.ImportVCardActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.SelectAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity.startPhotoQuery(JLandroid/net/Uri;)V
com.android.contacts.activities.ConfirmAddDetailActivity.access$900(Lcom/android/contacts/activities/ConfirmAddDetailActivity;JLandroid/net/Uri;)V
com.android.contacts.ContactLoader.loadDirectoryMetaData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.phone.CallerInfoCache.refreshCacheEntry()V
com.android.phone.CallerInfoCache.access$400(Lcom/android/phone/CallerInfoCache;)V
com.android.phone.CallerInfoCache$CacheAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.phone.CallerInfoCache$CacheAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.ContactsContract$ProfileSyncState.getWithUri(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)Landroid/util/Pair;
com.android.vcard.VCardComposer.initWithRawContactsEntityUri(Landroid/net/Uri;)Z
com.android.inputmethod.latin.ContactsDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask.run()V
com.android.inputmethod.latin.WhitelistDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ContactsDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ExpandableDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ExpandableDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ExpandableDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ExpandableDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.UserDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.UserHistoryDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.WhitelistDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ContactsDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.Dictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.UserDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.WhitelistDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ExpandableDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.UserDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.UserHistoryDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.WhitelistDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ContactsDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.Dictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserHistoryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.WhitelistDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.loadDictionary()V
com.android.inputmethod.latin.UserDictionary.loadDictionary()V
com.android.inputmethod.latin.UserHistoryDictionary.loadDictionary()V
com.android.inputmethod.latin.WhitelistDictionary.loadDictionary()V
com.android.inputmethod.latin.AutoCorrection.isValidWord(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/CharSequence;Z)Z
com.android.inputmethod.latin.DictionaryCollection.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestions(Landroid/view/textservice/TextInfo;Ljava/lang/String;I)Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserHistoryDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.WhitelistDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ContactsDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.Dictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserHistoryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.WhitelistDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.DictionaryCollection.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.Suggest.getSuggestedWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/keyboard/ProximityInfo;I)Lcom/android/inputmethod/latin/SuggestedWords;
com.android.inputmethod.latin.ContactsDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserHistoryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;ILandroid/content/SharedPreferences;)V
com.android.inputmethod.latin.AutoCorrection.allowsToBeAutoCorrected(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/CharSequence;Z)Z
com.android.inputmethod.latin.LatinIME.pickSuggestionManuallyWhileInBatchEdit(ILjava/lang/CharSequence;IILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestions(Landroid/view/textservice/TextInfo;I)Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestionsMultiple([Landroid/view/textservice/TextInfo;IZ)[Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.DictionaryCollection.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.Suggest.getAllBigrams(Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/WordComposer;)V
com.android.inputmethod.latin.LatinIME.updateSuggestions()V
com.android.inputmethod.latin.ExpandableDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.<init>(Landroid/content/Context;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.UserHistoryDictionary.getInstance(Landroid/content/Context;Ljava/lang/String;ILandroid/content/SharedPreferences;)Lcom/android/inputmethod/latin/UserHistoryDictionary;
com.android.inputmethod.latin.AutoCorrection.hasAutoCorrectionForConsideredWord(Ljava/util/concurrent/ConcurrentHashMap;Lcom/android/inputmethod/latin/WordComposer;Ljava/util/ArrayList;Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.LatinIME.pickSuggestionManually(ILjava/lang/CharSequence;II)V
com.android.inputmethod.latin.Suggest.getBigramPredictions(Ljava/lang/CharSequence;)Lcom/android/inputmethod/latin/SuggestedWords;
com.android.inputmethod.latin.LatinIME.commitCurrentAutoCorrection(ILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.commitTyped(Landroid/view/inputmethod/InputConnection;I)V
com.android.inputmethod.latin.LatinIME.resetEntireInputState()V
com.android.inputmethod.latin.LatinIME$UIHandler.postUpdateSuggestions()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserHistoryDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.WhitelistDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.WhitelistDictionary.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.LatinIME.initSuggest()V
com.android.inputmethod.latin.AutoCorrection.computeAutoCorrectionWord(Ljava/util/concurrent/ConcurrentHashMap;Lcom/android/inputmethod/latin/WordComposer;Ljava/util/ArrayList;Ljava/lang/CharSequence;FLjava/lang/CharSequence;)Ljava/lang/CharSequence;
com.android.inputmethod.latin.suggestions.SuggestionsView$Listener.pickSuggestionManually(ILjava/lang/CharSequence;II)V
com.android.inputmethod.latin.LatinIME.updateBigramPredictions()V
com.android.inputmethod.latin.LatinIME.handleSeparator(IIII)Z
com.android.inputmethod.latin.LatinIME.handleClose()V
com.android.inputmethod.latin.LatinIME.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.inputmethod.latin.LatinIME.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.onUpdateSelection(IIIIII)V
com.android.inputmethod.latin.LatinIME.addWordToDictionary(Ljava/lang/String;)Z
com.android.inputmethod.latin.LatinIME.handleBackspaceWhileInBatchEdit(ILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.handleCharacterWhileInBatchEdit(IIIILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.onRefreshKeyboard()V
com.android.inputmethod.latin.LatinIME.onStartInputViewInternal(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.LatinIME.restartSuggestionsOnWordBeforeCursor(Landroid/view/inputmethod/InputConnection;Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.revertCommit(Landroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.switchToKeyboardView()V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.createDictAndProximity(Ljava/util/Locale;)Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.Suggest.initWhitelistAndAutocorrectAndPool(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.LatinIME.onCreate()V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.SuggestionsView.onClick(Landroid/view/View;)V
com.android.inputmethod.latin.LatinIME$UIHandler.postUpdateBigramPredictions()V
com.android.inputmethod.latin.LatinIME.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.launchSettingsClass(Ljava/lang/Class;)V
com.android.inputmethod.keyboard.KeyboardActionListener.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.suggestions.SuggestionsView$Listener.addWordToDictionary(Ljava/lang/String;)Z
com.android.inputmethod.latin.LatinIME.handleBackspace(I)V
com.android.inputmethod.latin.LatinIME.handleCharacter(IIII)V
com.android.inputmethod.latin.SubtypeSwitcher.updateSubtype(Landroid/view/inputmethod/InputMethodSubtype;)V
com.android.inputmethod.latin.LatinIME.access$300(Lcom/android/inputmethod/latin/LatinIME;Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.LatinIME.restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(Landroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.spellcheck.DictionaryPool.take()Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.Suggest.<init>(Landroid/content/Context;Ljava/io/File;JJLjava/util/Locale;)V
com.android.inputmethod.latin.Suggest.initAsynchronously(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onCustomRequest(I)Z
com.android.inputmethod.keyboard.KeyboardActionListener.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.launchDebugSettings()V
com.android.inputmethod.latin.LatinIME.launchSettings()V
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.callListenerOnCodeInput(Lcom/android/inputmethod/keyboard/Key;III)V
com.android.inputmethod.latin.suggestions.SuggestionsView.addToDictionary(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.onCurrentInputMethodSubtypeChanged(Landroid/view/inputmethod/InputMethodSubtype;)V
com.android.inputmethod.latin.SubtypeSwitcher.updateAllParameters()V
com.android.inputmethod.latin.SubtypeSwitcher.updateEnabledSubtypes()V
com.android.inputmethod.latin.LatinIME$UIHandler.onStartInputView(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.spellcheck.DictionaryPool.takeOrGetNull()Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.spellcheck.DictionaryPool.take()Ljava/lang/Object;
com.android.inputmethod.latin.Suggest.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.keyboard.KeyboardActionListener.onCustomRequest(I)Z
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onCustomRequest(I)Z
com.android.inputmethod.keyboard.LatinKeyboardView.invokeCodeInput(I)V
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.access$700(Lcom/android/inputmethod/latin/LatinIME;)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.detectAndSendKey(Lcom/android/inputmethod/keyboard/Key;II)V
com.android.inputmethod.latin.SubtypeSwitcher.init(Lcom/android/inputmethod/latin/LatinIME;)V
com.android.inputmethod.latin.SubtypeSwitcher.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.inputmethod.latin.SubtypeSwitcher.updateParametersOnStartInputView()V
com.android.inputmethod.latin.LatinIME.onStartInputView(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.keyboard.LatinKeyboardView.invokeCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onCodeInput(III)V
com.android.inputmethod.keyboard.LatinKeyboardView.onLongPress(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME$3.onClick(Landroid/content/DialogInterface;I)V
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.onRegisterKey(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.PointerTracker.onUpEventInternal()V
com.android.inputmethod.keyboard.LatinKeyboardView.openMoreKeysKeyboardIfRequired(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onCodeInput(III)V
com.android.inputmethod.keyboard.PointerTracker.startRepeatKey(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.PointerTracker.onMoveEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker.onPhantomUpEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker.onUpEvent(IIJ)V
com.android.inputmethod.keyboard.LatinKeyboardView.access$000(Lcom/android/inputmethod/keyboard/LatinKeyboardView;Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.PointerTracker.onDownEventInternal(IIJ)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.LatinKeyboardView.processMotionEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.PointerTracker.processMotionEvent(IIIJLcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointersExcept(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointersOlderThan(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startLongPressTimer(I)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startLongPressTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.PointerTracker.onDownEvent(IIJLcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler$ProcessMotionEvent.processMotionEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.latin.suggestions.SuggestionsView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointers(J)V
com.android.inputmethod.keyboard.PointerTracker.onCancelEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startLongPressTimer(I)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startLongPressTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.PointerTracker.onShowMoreKeysPanel(IILcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler.handleSuddenJumping(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardSwitcher.startLongPressTimer(I)V
com.android.inputmethod.keyboard.PointerTracker.startLongPressTimer(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.LatinKeyboardView.openMoreKeysPanel(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.LatinKeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.accessibility.AccessibilityEntityProvider.simulateKeyPress(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions.startLongPressTimer(I)V
com.android.inputmethod.accessibility.AccessibilityEntityProvider.performActionForKey(Lcom/android/inputmethod/keyboard/Key;ILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.dispatchHoverEvent(Landroid/view/MotionEvent;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.internal.KeyboardState.onPressShift()V
com.android.inputmethod.accessibility.AccessibilityEntityProvider.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onHoverKey(Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.LatinKeyboardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.internal.KeyboardState.onPressKey(IZI)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onTransitionKey(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardSwitcher.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.latin.LatinIME.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.keyboard.KeyboardActionListener.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onPressKey(I)V
com.android.inputmethod.keyboard.PointerTracker.callListenerOnPressAndCheckKeyboardLayoutChange(Lcom/android/inputmethod/keyboard/Key;)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onPressKey(I)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onPressKey(I)V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onPressKey(I)V
com.android.contacts.model.EntityModifier.parseStructuredNameExtra(Landroid/content/Context;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Landroid/os/Bundle;)V
com.android.contacts.model.EntityModifier.parseExtras(Landroid/content/Context;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity.setEntityDeltaList(Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment.setIntentExtras(Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity.access$300(Lcom/android/contacts/activities/ConfirmAddDetailActivity;Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.ContactEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForExistingContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.onPostExecute(Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.TransactionSafeActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.setData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.activities.GroupEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.AttachPhotoActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactSelectionActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupBrowserActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.JoinContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.NonPhoneActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ShowOrCreateActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.CallContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService$Listener.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.AccountFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.CustomContactListFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.test.FragmentTestActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.ImportVCardActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.SelectAccountActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.ContactSaveService.deliverCallbackOnUiThread(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService$2.run()V
android.provider.ContactsContract$Contacts.getLookupUri(JLjava/lang/String;)Landroid/net/Uri;
android.provider.ContactsContract$Contacts.getLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.provider.ContactsContract$Data.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.provider.ContactsContract$RawContacts.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.widget.QuickContactBadge$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.event.AttendeesView$PresenceQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.activities.ShowOrCreateActivity.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.lookupContactFromUri(Landroid/net/Uri;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.ContactSaveService.saveContact(Landroid/content/Intent;)V
com.android.contacts.editor.AggregationSuggestionView.handleItemClickEvent()Z
com.android.contacts.group.GroupEditorFragment$Member.<init>(JLjava/lang/String;JLjava/lang/String;Ljava/lang/String;)V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactEntryListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.buildUri()Ljava/lang/String;
com.android.calendar.EventInfoFragment.showContactInfo(Lcom/android/calendar/CalendarEventModel$Attendee;Landroid/graphics/Rect;)V
com.android.contacts.ContactSaveService.createRawContact(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.joinContacts(Landroid/content/Intent;)V
com.android.contacts.quickcontact.QuickContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.NfcImportVCardActivity.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.vcard.NotificationImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.queryContactInfoForPhoneNumber(Ljava/lang/String;Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.ContactSaveService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.group.GroupEditorFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment$4.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.ContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.EmailAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyPostalAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.PostalAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.asList([Ljava/lang/String;)Ljava/util/ArrayList;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.addColumnValue(Ljava/util/ArrayList;Ljava/lang/String;)V
com.android.contacts.vcard.VCardImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.util.NotifyingAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.group.GroupEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.DefaultContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.EmailAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.JoinContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyPhoneNumberListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyPostalAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.PhoneNumberListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.PostalAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.ContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(IJ)V
com.android.contacts.list.DefaultContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport.addSearchSuggestionsBasedOnFilter(Landroid/database/MatrixCursor;Landroid/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.contacts.vcard.ImportProcessor.runInternal()V
com.android.contacts.list.DefaultContactListAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.PhoneNumberListAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.ContactBrowseListFragment.checkSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.JoinContactListFragment.onItemClick(IJ)V
com.android.providers.contacts.GlobalSearchSupport.handleSearchShortcutRefresh(Landroid/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.GlobalSearchSupport.handleSearchSuggestionsQuery(Landroid/database/sqlite/SQLiteDatabase;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.contacts.vcard.ImportProcessor.run()V
com.android.common.widget.CompositeCursorAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.ContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.checkSelection()V
com.android.common.widget.CompositeCursorAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.refreshSelectedContactUri()V
com.android.contacts.list.DefaultContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.calendar.EmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.contacts.BaseEmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.widget.CompositeCursorAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.DefaultContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.EmailAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.JoinContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPostalAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneNumberListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PostalAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.IndexerListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.EmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.DefaultContactBrowseListFragment.refreshSelectedContactUri()V
com.android.calendar.EmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.contacts.BaseEmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.DefaultContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.EmailAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.JoinContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPostalAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneNumberListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PostalAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.IndexerListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.EmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.ContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.PhoneFavoriteMergedAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactEntryListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragmentForRequest()V
com.android.contacts.list.ContactPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.EmailAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.JoinContactListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PhoneNumberPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PostalAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.list.ContactEntryListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setSearchMode(Z)V
com.android.contacts.list.EmailAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.list.JoinContactListFragment.setSearchMode(Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setSearchMode(Z)V
com.android.contacts.list.PostalAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureFragments(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragment()V
com.android.contacts.activities.PeopleActivity.onContactListFilterChanged()V
com.android.contacts.list.OnContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.activities.ContactSelectionActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.list.ContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.EmailAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.JoinContactListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PostalAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.PeopleActivity.onAction(I)V
com.android.contacts.activities.PeopleActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onStart()V
com.android.contacts.list.ContactListFilterController$ContactListFilterListener.onContactListFilterChanged()V
com.android.contacts.list.ContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.JoinContactActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.DialtactsActivity$7.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter$Listener.onAction(I)V
com.android.contacts.activities.TransactionSafeActivity.onStart()V
com.android.contacts.ContactsActivity.onStart()V
com.android.contacts.list.ContactListFilterControllerImpl.notifyContactListFilterChanged()V
com.android.contacts.list.DefaultContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.activities.PeopleActivity.setQueryTextToFragment(Ljava/lang/String;)V
com.android.contacts.activities.ActionBarAdapter.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter.update()V
com.android.contacts.activities.AttachPhotoActivity.onStart()V
com.android.contacts.activities.ContactDetailActivity.onStart()V
com.android.contacts.activities.ContactEditorActivity.onStart()V
com.android.contacts.activities.ContactSelectionActivity.onStart()V
com.android.contacts.activities.DialtactsActivity.onStart()V
com.android.contacts.activities.GroupBrowserActivity.onStart()V
com.android.contacts.activities.GroupDetailActivity.onStart()V
com.android.contacts.activities.GroupEditorActivity.onStart()V
com.android.contacts.activities.JoinContactActivity.onStart()V
com.android.contacts.activities.NonPhoneActivity.onStart()V
com.android.contacts.activities.ShowOrCreateActivity.onStart()V
com.android.contacts.CallContactActivity.onStart()V
com.android.contacts.list.AccountFilterActivity.onStart()V
com.android.contacts.test.FragmentTestActivity.onStart()V
com.android.contacts.vcard.ImportVCardActivity.onStart()V
com.android.contacts.vcard.SelectAccountActivity.onStart()V
com.android.contacts.list.CustomContactListFilterActivity.onStart()V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;ZZ)V
com.android.contacts.activities.ActionBarAdapter.initialize(Landroid/os/Bundle;Lcom/android/contacts/list/ContactsRequest;)V
com.android.contacts.activities.ActionBarAdapter.setSearchMode(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.checkFilterValidity(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.activities.PeopleActivity.createViewsAndFragments(Landroid/os/Bundle;)V
com.android.contacts.activities.ActionBarAdapter.onClose()Z
com.android.contacts.activities.PeopleActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity.onBackPressed()V
com.android.contacts.list.ContactListFilterControllerImpl.<init>(Landroid/content/Context;)V
com.android.contacts.list.ContactListFilterController.checkFilterValidity(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.selectCustomFilter()V
com.android.contacts.list.ContactListFilterController.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.activities.PeopleActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.TransactionSafeActivity.onSearchRequested()Z
com.android.contacts.ContactsActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onFinishAction()V
com.android.contacts.activities.TransactionSafeActivity.onBackPressed()V
com.android.contacts.ContactsActivity.onBackPressed()V
com.android.contacts.list.ContactListFilterController.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.model.AccountTypeManagerImpl$1.run()V
com.android.contacts.list.ContactListFilterController.selectCustomFilter()V
com.android.contacts.util.AccountFilterUtil.handleAccountFilterResult(Lcom/android/contacts/list/ContactListFilterController;ILandroid/content/Intent;)V
com.android.contacts.activities.TransactionSafeActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactsActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.OnContactBrowserActionListener.onFinishAction()V
com.android.contacts.activities.DialtactsActivity.onBackPressed()V
com.android.contacts.activities.GroupEditorActivity.onBackPressed()V
com.android.contacts.ContactsApplication.getSystemService(Ljava/lang/String;)Ljava/lang/Object;
com.android.contacts.list.ContactListFilterControllerImpl.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.list.DefaultContactBrowseListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneFavoriteFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneNumberPickerFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.activities.ContactSelectionActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.GroupDetailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.JoinContactActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.AccountFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.CustomContactListFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.ContactBrowseListFragment.finish()V
com.android.contacts.list.ContactEntryListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.ContactEntryListFragment.finish()V
com.android.contacts.list.DefaultContactBrowseListFragment.finish()V
com.android.contacts.list.ContactEntryListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.finish()V
com.android.contacts.list.EmailAddressPickerFragment.finish()V
com.android.contacts.list.JoinContactListFragment.finish()V
com.android.contacts.list.PhoneNumberPickerFragment.finish()V
com.android.contacts.list.PostalAddressPickerFragment.finish()V
com.android.contacts.list.ContactBrowseListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.onClose()V
com.android.contacts.list.DefaultContactBrowseListFragment.onClose()V
com.android.contacts.list.EmailAddressPickerFragment.onClose()V
com.android.contacts.list.JoinContactListFragment.onClose()V
com.android.contacts.list.PhoneNumberPickerFragment.onClose()V
com.android.contacts.list.PostalAddressPickerFragment.onClose()V
com.android.contacts.util.NameConverter.structuredNameToDisplayName(Landroid/content/Context;Ljava/util/Map;)Ljava/lang/String;
com.android.contacts.editor.StructuredNameEditorView.rebuildFullName(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.StructuredNameEditorView.switchFromStructuredNameToFullName()V
com.android.contacts.ContactLoader.loadStreamItems(Lcom/android/contacts/ContactLoader$Result;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.hasContentChanged()Z
com.android.inputmethod.latin.ExpandableBinaryDictionary.hasContentChanged()Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.hasContentChanged()Z
com.android.inputmethod.latin.ExpandableBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ContactsBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.UserBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ContactsBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary$AsyncReloadDictionaryTask.run()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.UserBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ExpandableBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ContactsBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.UserBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.UserBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.<init>(Landroid/content/Context;ILjava/util/Locale;)V
com.android.inputmethod.latin.UserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.LatinIME.resetContactsDictionary(Lcom/android/inputmethod/latin/Dictionary;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.<init>(Landroid/content/Context;ILjava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.LatinIME.loadSettings()V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.startUsingContactsDictionaryLocked()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.onCreate()V
com.android.exchange.ContactsSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.contacts.editor.AggregationSuggestionEngine.loadAggregationSuggestions(Landroid/net/Uri;)V
com.android.calendar.event.AttendeesView.addOneAttendee(Lcom/android/calendar/CalendarEventModel$Attendee;)V
com.android.calendar.event.AttendeesView.addAttendees(Ljava/lang/String;)V
com.android.calendar.event.AttendeesView.addAttendees(Ljava/util/ArrayList;)V
com.android.calendar.event.AttendeesView.addAttendees(Ljava/util/HashMap;)V
com.android.calendar.EventInfoFragment.updateAttendees(Landroid/view/View;)V
com.android.calendar.EventInfoFragment.initAttendeesCursor(Landroid/view/View;)V
com.android.calendar.EventInfoFragment.access$1900(Lcom/android/calendar/EventInfoFragment;Landroid/view/View;)V
com.android.calendar.EventInfoFragment$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.AsyncQueryService.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.providers.contacts.ContactsProvider2.outputRawContactsAsVCard(Landroid/net/Uri;Ljava/io/OutputStream;Ljava/lang/String;[Ljava/lang/String;)V
com.android.providers.contacts.ContactsProvider2.openAssetFileLocal(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
com.android.providers.contacts.ContactsProvider2.openAssetFile(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
com.android.contacts.model.AccountWithDataSet.hasData(Landroid/content/Context;)Z
com.android.contacts.list.AccountFilterActivity.loadAccountFilters(Landroid/content/Context;)Ljava/util/List;
com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader.loadInBackground()Lcom/android/contacts/list/CustomContactListFilterActivity$AccountSet;
com.android.contacts.list.AccountFilterActivity.access$100(Landroid/content/Context;)Ljava/util/List;
com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.list.AccountFilterActivity$FilterLoader.loadInBackground()Ljava/util/List;
com.android.contacts.list.AccountFilterActivity$FilterLoader.loadInBackground()Ljava/lang/Object;
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getPhonebookNameList(I)Ljava/util/ArrayList;
com.android.internal.telephony.CallerInfoAsyncQuery.startQuery(ILandroid/content/Context;Ljava/lang/String;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/internal/telephony/CallerInfoAsyncQuery;
com.android.phone.PhoneUtils.startGetCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Connection;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/phone/PhoneUtils$CallerInfoToken;
com.android.phone.CallCard.displayMainCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.displaySecondaryCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallNotifier.showMissedCallNotification(Lcom/android/internal/telephony/Connection;J)V
com.android.phone.CallNotifier.startIncomingCallQuery(Lcom/android/internal/telephony/Connection;)V
com.android.phone.ManageConferenceUtils.updateManageConferenceRow(ILcom/android/internal/telephony/Connection;Z)V
com.android.phone.PhoneUtils.startGetCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Call;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/phone/PhoneUtils$CallerInfoToken;
com.android.phone.CallCard.updateForegroundCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateNoCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateRingingCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateAlreadyDisconnected(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallNotifier.onCdmaCallWaitingReject()V
com.android.phone.CallNotifier.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onNewRingingConnection(Landroid/os/AsyncResult;)V
com.android.phone.ManageConferenceUtils.updateManageConferencePanel(Ljava/util/List;)V
com.android.phone.NotificationMgr.updateInCallNotification(Z)V
com.android.phone.CallCard.updateState(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.sendCdmaCallWaitingReject()V
com.android.phone.InCallScreen.setInCallScreenMode(Lcom/android/phone/InCallUiState$InCallScreenMode;)V
com.android.phone.InCallScreen.updateManageConferencePanelIfNecessary()V
com.android.phone.NotificationMgr.updateInCallNotification()V
com.android.phone.NotificationMgr.updateNotificationAndLaunchIncomingCallUi()V
com.android.phone.InCallScreen.updateIncomingCallWidgetHint(II)V
com.android.phone.InCallScreen.updateScreen()V
com.android.phone.InCallScreen.onResume()V
com.android.phone.InCallScreen.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.showPausePromptDialog(Lcom/android/internal/telephony/Connection;Ljava/lang/String;)V
com.android.phone.InCallScreen.requestUpdateBluetoothIndication()V
com.android.phone.InCallScreen.requestCloseOtaFailureNotice(J)V
com.android.phone.InCallScreen.requestCloseSpcErrorNotice(J)V
com.android.phone.InCallScreen.requestRemoveProviderInfoWithDelay()V
com.android.phone.PhoneUtils.hangupRingingCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.InCallScreen.checkOtaspStateOnResume()Z
com.android.phone.InCallScreen.endInCallScreenSession(Z)V
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.InCallScreen.handleOtaCallEnd()V
com.android.phone.InCallScreen.internalResolveIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.onBackPressed()V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.resetInCallScreenMode()V
com.android.phone.InCallScreen.onPause()V
com.android.phone.NotificationMgr.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.NotificationMgr.updateNotificationsAtStartup()V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.showIncomingCall()V
com.android.phone.InCallTouchUi.onGrabbedStateChange(Landroid/view/View;I)V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.syncWithPhoneState()Lcom/android/phone/InCallScreen$SyncWithPhoneStateStatus;
com.android.phone.InCallScreen.access$600(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$500(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.handlePostOnDialChars(Landroid/os/AsyncResult;C)V
com.android.phone.OtaUtils.otaShowProgramFailureNotice(I)V
com.android.phone.OtaUtils.otaShowSpcErrorNotice(I)V
com.android.phone.CallCard.updateCallStateWidgets(Lcom/android/internal/telephony/Call;)V
com.android.phone.BluetoothHandsfree$16.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.CallNotifier.onCustomRingtoneQueryTimeout(Ljava/lang/String;)V
com.android.phone.CallNotifier.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.InCallScreen.hangupRingingCall()V
com.android.phone.PhoneUtils.hangup(Lcom/android/internal/telephony/CallManager;)Z
com.android.phone.PhoneUtils.hangupRingingAndActive(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.InCallScreen.bailOutAfterErrorDialog()V
com.android.phone.InCallScreen.endInCallScreenSession()V
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.PhoneApp.dismissCallScreen()V
com.android.phone.InCallScreen.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.onNewIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.updateAfterRadioTechnologyChange()V
com.android.phone.PhoneApp.clearInCallScreenMode()V
com.android.phone.NotificationMgr.init(Lcom/android/phone/PhoneApp;)Lcom/android/phone/NotificationMgr;
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onCustomRingQueryComplete()V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.requestUpdateScreen()V
com.android.phone.InCallScreen.access$1000(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;C)V
com.android.phone.OtaUtils.otaShowProgramFailure(I)V
com.android.phone.OtaUtils.onOtaProvisionStatusChanged(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowProperScreen()V
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalHangup()V
com.android.phone.PhoneApp$NotificationBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneUtils.handleHeadsetHook(Lcom/android/internal/telephony/Phone;Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.access$2300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.addVoiceMailNumberPanel()V
com.android.phone.InCallScreen.delayedCleanupAfterDisconnect()V
com.android.phone.InCallScreen.dontAddVoiceMailNumber()V
com.android.phone.InCallScreen.onMMICancel()V
com.android.phone.InCallScreen.onMMIComplete(Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.otaShowHome()V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.PhoneApp.initForNewRadioTechnology()V
com.android.phone.CallNotifier.ignoreAllIncomingCalls(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.doReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.onCreate()V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.InCallScreen.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.PhoneApp.updateInCallScreen()V
com.android.phone.OtaUtils.otaShowSuccessFailure()V
com.android.phone.PhoneApp.handleOtaspEvent(Landroid/os/Message;)V
com.android.phone.InCallScreen.onDialerClose(Z)V
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.InCallScreen$12.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$13.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.InCallScreen.access$1100(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1200(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$800(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$900(Lcom/android/phone/InCallScreen;Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.onClickOtaActivateNextButton()V
com.android.phone.OtaUtils.otaShowActivateScreen()V
com.android.phone.PhoneApp.access$1100(Lcom/android/phone/PhoneApp;)V
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.phone.InCallScreen.access$400(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.EmergencyCallHelper.cleanup()V
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.DTMFTwelveKeyDialer.onDialerClose(Z)V
com.android.phone.InCallScreen$14.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$15.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.OtaUtils.onClickOtaTryAgainButton()V
com.android.phone.OtaUtils.onOtaCloseFailureNotice()V
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.DTMFTwelveKeyDialer.closeDialer(Z)V
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.DTMFTwelveKeyDialer.clearInCallScreenReference()V
com.android.phone.InCallScreen.closeDialpadInternal(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureDialog()V
com.android.phone.OtaUtils.otaShowProgramSuccessDialog()V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onDestroy()V
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.InCallScreen.onOpenCloseDialpad()V
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.contacts.calllog.CallLogAdapter.getBetterNumberFromContacts(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.calllog.CallLogFragment.callSelectedEntry()V
android.provider.CallLog$Calls.addCall(Lcom/android/internal/telephony/CallerInfo;Landroid/content/Context;Ljava/lang/String;IIJI)Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Lcom/android/phone/CallLogAsync$AddCallArgs;)[Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.PostalAddressListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(IJ)V
com.android.contacts.list.LegacyPhoneNumberListAdapter.getPhoneUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(IJ)V
com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag.getStreamItemPhotoUri()Landroid/net/Uri;
com.android.contacts.detail.ContactDetailUpdatesFragment$2.onClick(Landroid/view/View;)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.changeParser(Lcom/android/exchange/adapter/ContactsSyncAdapter$ContactOperations;)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.commandsParser()V
com.android.exchange.adapter.AbstractSyncParser.commandsParser()V
android.provider.ContactsContract$ProfileSyncState.get(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)[B
com.android.phone.BluetoothAtPhonebook.queryPhonebook(Ljava/lang/String;Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;)Z
com.android.phone.BluetoothAtPhonebook.getPhonebookResult(Ljava/lang/String;Z)Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;
com.android.phone.BluetoothAtPhonebook.access$500(Lcom/android/phone/BluetoothAtPhonebook;Ljava/lang/String;Z)Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;
com.android.phone.BluetoothAtPhonebook$2.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleReadCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.contacts.group.GroupBrowseListAdapter.getGroupUriFromId(J)Landroid/net/Uri;
com.android.contacts.group.GroupBrowseListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.group.GroupBrowseListAdapter.getSelectedGroupPosition()I
com.android.contacts.group.GroupBrowseListAdapter.setCursor(Landroid/database/Cursor;)V
com.android.contacts.group.GroupBrowseListFragment.requestSelectionToScreen()V
com.android.contacts.group.GroupBrowseListFragment.bindGroupList()V
com.android.contacts.group.GroupBrowseListFragment.access$400(Lcom/android/contacts/group/GroupBrowseListFragment;)V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.ContactsUtils.getThumbnailSize(Landroid/content/Context;)I
com.android.contacts.activities.AttachPhotoActivity.saveContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.PhotoEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.AttachPhotoActivity.access$000(Lcom/android/contacts/activities/AttachPhotoActivity;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.BaseRawContactEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.AttachPhotoActivity$1.onContactLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onRemovePictureChosen()V
com.android.contacts.editor.ContactEditorFragment.bindEditors()V
com.android.contacts.editor.ContactEditorFragment.setPhoto(JLandroid/graphics/Bitmap;Ljava/lang/String;)V
com.android.contacts.editor.RawContactEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.RawContactReadOnlyEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.AttachPhotoActivity$Listener.onContactLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onRemovePictureChosen()V
com.android.contacts.editor.ContactEditorFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.editor.ContactEditorFragment.access$2100(Lcom/android/contacts/editor/ContactEditorFragment;)V
com.android.contacts.editor.ContactEditorFragment.access$2300(Lcom/android/contacts/editor/ContactEditorFragment;JLandroid/graphics/Bitmap;Ljava/lang/String;)V
com.android.contacts.activities.AttachPhotoActivity$2.onLoadComplete(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onRemovePictureChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onRemovePictureChosen()V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onUseAsPrimaryChosen()V
com.android.contacts.activities.AttachPhotoActivity$2.onLoadComplete(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.editor.PhotoActionPopup$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onUseAsPrimaryChosen()V
com.android.contacts.detail.PhotoSelectionHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onUseAsPrimaryChosen()V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.doInBackground([Landroid/content/Intent;)Lcom/android/contacts/model/EntityDeltaList;
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask.loadPhoto()V
com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask.loadPhoto()V
com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask.loadPhoto()V
com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.interactions.ImportExportDialogFragment.doShareVisibleContacts()V
com.android.contacts.interactions.ImportExportDialogFragment.access$100(Lcom/android/contacts/interactions/ImportExportDialogFragment;)V
com.android.contacts.interactions.ImportExportDialogFragment$2.onClick(Landroid/content/DialogInterface;I)V
com.android.internal.telephony.CallerInfo.getCallerInfo(Landroid/content/Context;Ljava/lang/String;)Lcom/android/internal/telephony/CallerInfo;
com.android.internal.telephony.CallerInfo.getCallerId(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
com.android.phone.PhoneUtils.getCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Connection;)Lcom/android/internal/telephony/CallerInfo;
com.android.phone.PhoneUtils.placeCall(Landroid/content/Context;Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/net/Uri;ZLandroid/net/Uri;)I
com.android.phone.PhoneUtils$4.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.OtaUtils.startNonInteractiveOtasp(Landroid/content/Context;)I
com.android.phone.InCallScreenShowActivation.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity.startDisambiguationQuery(Ljava/lang/String;)V
com.android.contacts.activities.ConfirmAddDetailActivity.access$800(Lcom/android/contacts/activities/ConfirmAddDetailActivity;Ljava/lang/String;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.ContactsBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.UserBinaryDictionary.generateBinaryDictionary()V
android.widget.QuickContactBadge.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.calendar.event.AttendeesView.updateAttendeeView(Lcom/android/calendar/event/EditEventHelper$AttendeeItem;)Landroid/view/View;
com.android.contacts.widget.LayoutSuppressingQuickContactBadge.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.mms.ui.QuickContactDivot.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.quicksearchbox.ui.ContactBadge.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.calendar.event.AttendeesView.access$100(Lcom/android/calendar/event/AttendeesView;Lcom/android/calendar/event/EditEventHelper$AttendeeItem;)Landroid/view/View;
com.android.calendar.event.AttendeesView.constructAttendeeView(Lcom/android/calendar/event/EditEventHelper$AttendeeItem;)Landroid/view/View;
com.android.calendar.event.AttendeesView.onClick(Landroid/view/View;)V
com.android.mms.ui.QuickContactDivot.assignContactFromEmail(Ljava/lang/String;)V
com.android.calendar.event.AttendeesView$PresenceQueryHandler$1.run()V
com.android.mms.ui.Divot.assignContactFromEmail(Ljava/lang/String;)V
com.android.contacts.util.NameConverter.structuredNameToDisplayName(Landroid/content/Context;Landroid/content/ContentValues;)Ljava/lang/String;
com.android.contacts.model.AccountTypeWithDataSet.hasData(Landroid/content/Context;)Z
com.android.contacts.model.AccountTypeManagerImpl.findUsableInvitableAccountTypes(Landroid/content/Context;)Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl.access$400(Lcom/android/contacts/model/AccountTypeManagerImpl;Landroid/content/Context;)Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl.getUsableInvitableAccountTypes()Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl$FindInvitablesTask.doInBackground([Ljava/lang/Void;)Ljava/util/Map;
com.android.contacts.model.AccountTypeManager.getUsableInvitableAccountTypes()Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl$FindInvitablesTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactLoader.loadInvitableAccountTypes(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.ContactSaveService.addMembersToGroup(Landroid/content/ContentResolver;[JJ)V
com.android.contacts.ContactSaveService.createGroup(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.updateGroup(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity.getContactUriForEmail(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getContactUriForEmail(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.addCallAndContactMenuItems(Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addCallAndContactMenuItems(Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$2700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity$10.onCreateContextMenu(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$2700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.contacts.detail.ContactLoaderFragment.getPreAuthorizedUri(Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.detail.ContactLoaderFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.detail.PhotoSelectionHandler.getPhotoPickSize()I
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.getPhotoPickSize()I
com.android.contacts.detail.PhotoSelectionHandler.<init>(Landroid/content/Context;Landroid/view/View;IZLcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.getPhotoPickSize()I
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.<init>(Landroid/content/Context;Landroid/view/View;IZLcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.<init>(Lcom/android/contacts/activities/PhotoSelectionActivity;Landroid/content/Context;Landroid/view/View;ILcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.<init>(Landroid/content/Context;Landroid/view/View;IZLcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.<init>(Lcom/android/contacts/editor/ContactEditorFragment;Landroid/content/Context;Lcom/android/contacts/editor/BaseRawContactEditorView;ILcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.<init>(Lcom/android/contacts/activities/PhotoSelectionActivity;Landroid/content/Context;Landroid/view/View;ILcom/android/contacts/model/EntityDeltaList;Lcom/android/contacts/activities/PhotoSelectionActivity$1;)V
com.android.contacts.editor.ContactEditorFragment.bindPhotoHandler(Lcom/android/contacts/editor/BaseRawContactEditorView;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.PhotoSelectionActivity.attachPhotoHandler()V
com.android.contacts.activities.PhotoSelectionActivity.displayPhoto()V
com.android.contacts.activities.PhotoSelectionActivity.access$000(Lcom/android/contacts/activities/PhotoSelectionActivity;)V
com.android.contacts.activities.PhotoSelectionActivity$2.run()V
android.widget.QuickContactBadge.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.contacts.widget.LayoutSuppressingQuickContactBadge.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.mms.ui.ConversationListItem.updateAvatarView()V
com.android.mms.ui.QuickContactDivot.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.quicksearchbox.ui.ContactBadge.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.mms.ui.ConversationListItem.bind(Landroid/content/Context;Lcom/android/mms/data/Conversation;)V
com.android.mms.ui.ConversationListItem.updateFromView()V
com.android.mms.ui.MessageListItem.updateAvatarView(Ljava/lang/String;Z)V
com.android.mms.ui.ConversationListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.ui.ConversationListItem.access$000(Lcom/android/mms/ui/ConversationListItem;)V
com.android.mms.ui.MessageListItem.bindCommonMessage()V
com.android.mms.ui.MessageListItem.bindNotifInd()V
com.android.mms.ui.ConversationListItem$1.run()V
com.android.mms.ui.MessageListItem.access$500(Lcom/android/mms/ui/MessageListItem;)V
com.android.mms.ui.MessageListItem.bind(Lcom/android/mms/ui/MessageItem;ZI)V
com.android.mms.ui.MessageListItem$2.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.MessageListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.ui.MessageItem$PduLoadedCallback.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.util.ItemLoadedCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Lcom/android/mms/util/ThumbnailManager$ImageLoaded;Ljava/lang/Throwable;)V
com.android.mms.util.PduLoaderManager.getPdu(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.PduLoaderManager$PduTask$1.run()V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager$ThumbnailTask$1.run()V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MessageItem.<init>(Landroid/content/Context;Ljava/lang/String;Landroid/database/Cursor;Lcom/android/mms/ui/MessageListAdapter$ColumnsMap;Ljava/util/regex/Pattern;)V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager.getVideoThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.MessageListAdapter.getCachedMessageItem(Ljava/lang/String;JLandroid/database/Cursor;)Lcom/android/mms/ui/MessageItem;
com.android.mms.model.ImageModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.model.VideoModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.ComposeMessageActivity.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.data.WorkingMessage.setAttachment(ILandroid/net/Uri;Z)I
com.android.mms.ui.MmsThumbnailPresenter.presentImageThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/ImageModel;)V
com.android.mms.ui.MmsThumbnailPresenter.presentVideoThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/VideoModel;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.ui.ComposeMessageActivity$30.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivity.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivity.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.presentFirstSlide(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/SlideModel;)V
com.android.mms.ui.MessageUtils$ResizeImageResultCallback.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.MessageUtils$3$1.run()V
com.android.mms.ui.ComposeMessageActivity$32.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity$33.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.Presenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.ComposeMessageActivity$34.run()V
com.android.mms.ui.ComposeMessageActivity$35.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.AttachmentEditor.update(Lcom/android/mms/data/WorkingMessage;)Z
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.createViewFromResource(ILandroid/view/View;I)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivity.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.onRestart()V
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivity.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onRestart()V
com.android.mms.ui.ComposeMessageActivity$20.run()V
com.android.mms.ui.ComposeMessageActivity$40.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivity.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.internal.telephony.CallerInfo.doSecondaryLookupIfNecessary(Landroid/content/Context;Ljava/lang/String;Lcom/android/internal/telephony/CallerInfo;)Lcom/android/internal/telephony/CallerInfo;
android.provider.Contacts$People.queryGroups(Landroid/content/ContentResolver;J)Landroid/database/Cursor;
com.android.common.contacts.DataUsageStatUpdater.updateWithAddress(Ljava/util/Collection;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithRfc822Address(Ljava/util/Collection;)Z
com.android.mail.providers.UIProvider.incrementRecipientsTimesContacted(Landroid/content/Context;Ljava/lang/String;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Long;
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.contacts.calllog.DefaultVoicemailNotifier$DefaultNameLookupQuery.query(Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.calllog.DefaultVoicemailNotifier$NameLookupQuery.query(Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.calllog.DefaultVoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.calllog.CallLogNotificationsService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.calllog.VoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.queryForContactId(Landroid/content/ContentResolver;J)J
com.android.providers.telephony.SmsProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.contacts.list.EmailAddressListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(IJ)V
com.android.mms.data.Contact$ContactsCache.getContactInfoForPhoneUris([Landroid/os/Parcelable;)Ljava/util/List;
com.android.mms.data.Contact.getByPhoneUris([Landroid/os/Parcelable;)Ljava/util/List;
com.android.mms.data.ContactList.blockingGetByUris([Landroid/os/Parcelable;)Lcom/android/mms/data/ContactList;
com.android.mms.ui.ComposeMessageActivity$29.run()V
com.android.contacts.list.LegacyPostalAddressListAdapter.getContactMethodUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneFavoriteFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.loadThumbnails(Z)V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.loadPhotosInBackground()V
com.android.providers.contacts.ContactsProvider2.query(Landroid/database/sqlite/SQLiteDatabase;Landroid/database/sqlite/SQLiteQueryBuilder;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.queryWithContactIdAndLookupKey(Landroid/database/sqlite/SQLiteQueryBuilder;Landroid/database/sqlite/SQLiteDatabase;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.contacts.GroupMetaDataLoader.ensureIsGroupUri(Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.GroupMetaDataLoader.<init>(Landroid/content/Context;Landroid/net/Uri;)V
com.android.contacts.editor.ContactEditorFragment$5.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupDetailFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupEditorFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.editor.ContactEditorFragment$5.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupDetailFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupEditorFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.list.CustomContactListFilterActivity$GroupDelta.fromSettings(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lcom/android/contacts/list/CustomContactListFilterActivity$GroupDelta;
android.provider.ContactsContract$SyncState.get(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)[B
com.android.inputmethod.latin.ContactsBinaryDictionary.getContactCount()I
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getContactCount()I
com.android.phone.ContactsAsyncHelper$ImageTracker.getPhotoUri()Landroid/net/Uri;
com.android.phone.CallCard.updatePhotoForCallState(Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.mms.data.Contact.getUri()Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.getContactUriForPhoneNumber(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getContactUriForPhoneNumber(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.NotificationMgr$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
android.provider.Contacts$People.tryGetMyContactsGroupId(Landroid/content/ContentResolver;)J
android.provider.Contacts$People.addToMyContactsGroup(Landroid/content/ContentResolver;J)Landroid/net/Uri;
android.provider.Contacts$People.createPersonInMyContactsGroup(Landroid/content/ContentResolver;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.contacts.GroupMemberLoader.createUri()Landroid/net/Uri;
com.android.contacts.GroupMemberLoader.<init>(Landroid/content/Context;J[Ljava/lang/String;)V
com.android.contacts.GroupMemberLoader.constructLoaderForGroupDetailQuery(Landroid/content/Context;J)Lcom/android/contacts/GroupMemberLoader;
com.android.contacts.GroupMemberLoader.constructLoaderForGroupEditorQuery(Landroid/content/Context;J)Lcom/android/contacts/GroupMemberLoader;
com.android.contacts.group.GroupDetailFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupEditorFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupDetailFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupEditorFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder.build()Landroid/net/Uri;
com.android.contacts.editor.AggregationSuggestionEngine.buildAggregationSuggestionUri(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)Landroid/net/Uri;
com.android.contacts.editor.AggregationSuggestionEngine.onNameChange(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.ContactEditorFragment.acquireAggregationSuggestions(Landroid/content/Context;Lcom/android/contacts/editor/RawContactEditorView;)V
com.android.contacts.editor.ContactEditorFragment.access$300(Lcom/android/contacts/editor/ContactEditorFragment;Landroid/content/Context;Lcom/android/contacts/editor/RawContactEditorView;)V
com.android.contacts.editor.ContactEditorFragment$2.onRequest(I)V
com.android.contacts.editor.Editor$EditorListener.onRequest(I)V
com.android.contacts.editor.LabeledEditorView.notifyEditorListener()V
com.android.contacts.editor.PhotoEditorView$1.onClick(Landroid/view/View;)V
com.android.contacts.editor.EventFieldEditorView.notifyEditorListener()V
com.android.contacts.editor.PhoneticNameEditorView.notifyEditorListener()V
com.android.contacts.editor.StructuredNameEditorView.notifyEditorListener()V
com.android.contacts.editor.TextFieldsEditorView.notifyEditorListener()V
com.android.mms.ui.ComposeMessageActivity.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.providers.contacts.LegacyApiSupport.updateExtensions(JLandroid/content/ContentValues;)I
com.android.mms.data.Conversation.blockingMarkAllSmsMessagesAsSeen(Landroid/content/Context;)V
com.android.mms.data.Conversation.access$800(Landroid/content/Context;)V
com.android.mms.data.Conversation$3.run()V
com.android.vcard.VCardEntry$EmailData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$EntryElement.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$InsertOperationConstrutor.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z
com.android.vcard.VCardEntry$EntryElementIterator.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z
com.android.vcard.VCardEntry.iterateAllData(Lcom/android/vcard/VCardEntry$EntryElementIterator;)V
com.android.vcard.VCardEntry.iterateOneList(Ljava/util/List;Lcom/android/vcard/VCardEntry$EntryElementIterator;)V
com.android.vcard.VCardEntry.isIgnorable()Z
com.android.vcard.VCardEntry.toString()Ljava/lang/String;
com.android.vcard.VCardEntry.constructInsertOperations(Landroid/content/ContentResolver;Ljava/util/ArrayList;)Ljava/util/ArrayList;
com.android.contacts.vcard.NotificationImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.vcard.VCardEntryCommitter.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.VCardImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.vcard.VCardEntryHandler.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.ImportProcessor.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.vcard.VCardEntryConstructor.onEntryEnded()V
com.android.vcard.VCardInterpreter.onEntryEnded()V
com.android.vcard.VCardParserImpl_V21.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.handleNest()V
com.android.vcard.VCardParserImpl_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V40.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.parseItem()Z
com.android.vcard.VCardParserImpl_V30.handleNest()V
com.android.vcard.VCardParserImpl_V40.handleNest()V
com.android.vcard.VCardParserImpl_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseItems()V
com.android.vcard.VCardParserImpl_V30.parseItem()Z
com.android.vcard.VCardParserImpl_V40.parseItem()Z
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseItems()V
com.android.vcard.VCardParserImpl_V40.parseItems()V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.constructImportRequest([BLandroid/net/Uri;Ljava/lang/String;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.NfcImportVCardActivity.createImportRequest()Lcom/android/contacts/vcard/ImportRequest;
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.run()V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Lcom/android/contacts/vcard/VCardService;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.ImportProcessor.readOneVCard(Ljava/io/InputStream;ILjava/lang/String;Lcom/android/vcard/VCardInterpreter;[I)Z
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.dialog.ClearFrequentsDialog$1$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.dialog.ClearFrequentsDialog$1$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.ContactsContract$SyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.mms.transaction.SmsReceiverService.storeMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.insertMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;ILjava/lang/String;)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.replaceMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.handleSmsReceived(Landroid/content/Intent;I)V
com.android.mms.transaction.SmsReceiverService.access$100(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
android.provider.Telephony$Sms$Outbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;ZJ)Landroid/net/Uri;
com.android.contacts.model.EntityDelta.buildDiff(Ljava/util/ArrayList;)V
com.android.contacts.model.EntityDeltaList.buildDiff()Ljava/util/ArrayList;
com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask.doInBackground([Lcom/android/contacts/model/EntityDeltaList;)Ljava/lang/Integer;
com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.CustomContactListFilterActivity$GroupDelta.buildDiff()Landroid/content/ContentProviderOperation;
com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay.buildDiff(Ljava/util/ArrayList;)V
com.android.contacts.list.CustomContactListFilterActivity$AccountSet.buildDiff()Ljava/util/ArrayList;
com.android.contacts.list.CustomContactListFilterActivity.doSaveAction()V
com.android.contacts.list.CustomContactListFilterActivity.onClick(Landroid/view/View;)V
com.android.contacts.ContactSaveService.renameGroup(Landroid/content/Intent;)V
com.android.mms.transaction.MessageStatusService.updateMessageStatus(Landroid/content/Context;Landroid/net/Uri;[BLjava/lang/String;)Landroid/telephony/SmsMessage;
com.android.mms.transaction.MessageStatusService.onHandleIntent(Landroid/content/Intent;)V
com.android.providers.contacts.LegacyApiSupport.updateOrganizations(JLandroid/content/ContentValues;)I
android.provider.Contacts$People.addToGroup(Landroid/content/ContentResolver;JJ)Landroid/net/Uri;
com.android.phone.SimContacts.actuallyImportOneSimContact(Landroid/database/Cursor;Landroid/content/ContentResolver;Landroid/accounts/Account;)V
com.android.phone.SimContacts.access$100(Landroid/database/Cursor;Landroid/content/ContentResolver;Landroid/accounts/Account;)V
com.android.phone.SimContacts.importOneSimContact(I)V
com.android.phone.SimContacts$ImportAllSimContactsThread.run()V
com.android.phone.SimContacts.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.SimContacts.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.phone.SimContacts.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.ADNList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.exchange.adapter.ContactsSyncAdapter.cleanup()V
com.android.exchange.adapter.AbstractSyncAdapter.cleanup()V
android.provider.Contacts$People.markAsContacted(Landroid/content/ContentResolver;J)V
android.provider.Contacts$ContactMethods.addPostalLocation(Landroid/content/Context;JDD)V
com.android.contacts.ContactSaveService.setSuperPrimary(Landroid/content/Intent;)V
com.android.vcard.VCardEntry$NameData.constructInsertOperation(Ljava/util/List;I)V
android.provider.ContactsContract$Contacts.markAsContacted(Landroid/content/ContentResolver;J)V
android.provider.Telephony$Sms$Sent.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.ui.ManageSimMessages.copyToPhoneMemory(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.internal.telephony.SMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.SMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processCdmaWapPdu([BILjava/lang/String;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.SMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
android.provider.ContactsContract$Directory.notifyDirectoryChange(Landroid/content/ContentResolver;)V
com.android.exchange.adapter.ContactsSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.AbstractSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.AccountSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.EmailSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.contacts.ContactSaveService.buildJoinContactDiff(Ljava/util/ArrayList;JJ)V
com.android.contacts.ContactSaveService.clearPrimary(Landroid/content/Intent;)V
com.android.mms.ui.ManageSimMessages.deleteFromSim(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.access$500(Lcom/android/mms/ui/ManageSimMessages;Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.deleteAllFromSim()V
com.android.mms.ui.ManageSimMessages$2.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ManageSimMessages.access$600(Lcom/android/mms/ui/ManageSimMessages;)V
com.android.mms.ui.ManageSimMessages$3.onClick(Landroid/content/DialogInterface;I)V
android.provider.Telephony$Sms$Draft.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.vcard.VCardEntry$NicknameData.constructInsertOperation(Ljava/util/List;I)V
com.android.mms.util.Recycler$SmsRecycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.data.WorkingMessage.sendMmsWorker(Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.sendSmsWorker(Ljava/lang/String;Ljava/lang/String;J)V
com.android.mms.data.WorkingMessage.access$700(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.preSendSmsWorker(Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage.access$900(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage.asyncDeleteDraftSmsMessage(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage$4.run()V
com.android.mms.data.WorkingMessage.readDraftSmsMessage(Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.data.WorkingMessage.discard()V
com.android.mms.data.WorkingMessage.access$000(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ComposeMessageActivity.saveDraft(Z)V
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Void;)Landroid/util/Pair;
com.android.mms.data.Conversation$ConversationQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.saveDraft(Z)V
com.android.mms.ui.ComposeMessageActivity.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivity.onStop()V
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.ui.ConversationList$ThreadListQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.data.WorkingMessage$MessageStatusListener.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onStop()V
com.android.vcard.VCardEntry$AndroidCustomData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$WebsiteData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$PostalData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$NoteData.constructInsertOperation(Ljava/util/List;I)V
com.android.providers.contacts.LegacyApiSupport.updatePhotoByDataId(JLandroid/content/ContentValues;)I
com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations.delete(J)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.deleteParser(Lcom/android/exchange/adapter/ContactsSyncAdapter$ContactOperations;)V
com.android.contacts.ContactSaveService.deleteGroup(Landroid/content/Intent;)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.commit()V
com.android.exchange.adapter.AbstractSyncParser.commit()V
com.android.vcard.VCardEntry$PhoneData.constructInsertOperation(Ljava/util/List;I)V
com.android.providers.contacts.LegacyApiSupport.updateContactMethods(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.updateGroups(JLandroid/content/ContentValues;)I
com.android.contacts.ContactSaveService.removeMembersFromGroup(Landroid/content/ContentResolver;[JJ)V
com.android.vcard.VCardEntry$PhotoData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$ImData.constructInsertOperation(Ljava/util/List;I)V
com.android.mms.ui.ClassZeroActivity.storeMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.replaceMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.saveMessage()V
com.android.mms.ui.ClassZeroActivity.access$200(Lcom/android/mms/ui/ClassZeroActivity;)V
com.android.mms.ui.ClassZeroActivity$3.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.data.WorkingMessage.deleteDraftSmsMessage(J)V
android.provider.ContactsContract$SyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
com.android.contacts.model.EntityDeltaList.buildSplitContactDiff(Ljava/util/ArrayList;II[I)V
com.android.contacts.model.EntityDeltaList.buildSplitContactDiff(Ljava/util/ArrayList;[I)V
com.android.contacts.model.EntityDeltaList.beginKeepTogether()Landroid/content/ContentProviderOperation$Builder;
com.android.vcard.VCardEntry$AnniversaryData.constructInsertOperation(Ljava/util/List;I)V
com.android.exchange.adapter.ContactsSyncAdapter.dirtyContactsWithinDirtyGroups()V
com.android.contacts.list.ProviderStatusWatcher$2.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ProviderStatusWatcher$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.providers.contacts.LegacyApiSupport.updatePhones(JLandroid/content/ContentValues;)I
android.provider.ContactsContract$ProfileSyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
com.android.providers.contacts.LegacyApiSupport.updateLegacyPhotoData(JJLandroid/content/ContentValues;)V
com.android.vcard.VCardEntry$SipData.constructInsertOperation(Ljava/util/List;I)V
com.android.common.contacts.DataUsageStatUpdater.update(Ljava/util/Collection;Ljava/util/Collection;Ljava/lang/String;)Z
com.android.vcard.VCardEntry$OrganizationData.constructInsertOperation(Ljava/util/List;I)V
android.provider.Contacts$Settings.setSetting(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.vcard.VCardEntry$BirthdayData.constructInsertOperation(Ljava/util/List;I)V
com.android.mms.transaction.SmsReceiverService.moveOutboxMessagesToFailedBox()I
com.android.mms.transaction.SmsReceiverService.handleBootCompleted()V
com.android.mms.transaction.SmsReceiverService.access$200(Lcom/android/mms/transaction/SmsReceiverService;)V
android.provider.ContactsContract$ProfileSyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.providers.contacts.LegacyApiSupport.updateSettings(Landroid/content/ContentValues;)I
com.android.providers.contacts.ContactsProvider2$PipeMonitor.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Telephony$Sms$Inbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;Z)Landroid/net/Uri;
com.android.contacts.ContactsListActivity.getContactUri(I)Landroid/net/Uri;
com.android.contacts.ContactsListActivity.getUriToQuery()Landroid/net/Uri;
com.android.contacts.ContactsListActivity.getSelectedUri(I)Landroid/net/Uri;
Permission:android.permission.WRITE_SYNC_SETTINGS

69 Callers:

android.content.ContentService.setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V
android.content.IContentService$Stub$Proxy.setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V
android.content.IContentService$Stub.setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V
android.content.IContentService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.content.IContentService.setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V
android.content.ContentService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.content.ContentResolver.setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V
android.app.ContextImpl$ApplicationContentResolver.setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V
android.test.mock.MockContentResolver.setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V
com.android.browser.provider.BrowserProvider2$DatabaseHelper.enableSync(Landroid/database/sqlite/SQLiteDatabase;)V
com.android.email.activity.setup.AccountSettingsFragment.saveSettings()V
com.android.email.provider.DBHelper.createAccountManagerAccount(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
com.android.email.provider.DBHelper.upgradeFromVersion21ToVersion22(Landroid/database/sqlite/SQLiteDatabase;Landroid/content/Context;)V
com.android.email.service.EasAuthenticatorService$EasAuthenticator.addAccount(Landroid/accounts/AccountAuthenticatorResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator.addAccount(Landroid/accounts/AccountAuthenticatorResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.exchange.CalendarSyncEnabler.enableEasCalendarSyncInternalForTest()Ljava/lang/String;
com.android.settings.accounts.AccountSyncSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.browser.provider.BrowserProvider2$DatabaseHelper.onCreate(Landroid/database/sqlite/SQLiteDatabase;)V
com.android.browser.provider.BrowserProvider2$DatabaseHelper.onUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V
com.android.email.activity.setup.AccountSettingsFragment.onPause()V
com.android.email.provider.DBHelper$DatabaseHelper.onUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V
com.android.exchange.CalendarSyncEnabler.enableEasCalendarSync()V
android.content.ContentService.addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
android.content.IContentService$Stub$Proxy.addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
android.content.IContentService$Stub.addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
android.content.IContentService.addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
android.content.ContentResolver.addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
android.app.ContextImpl$ApplicationContentResolver.addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
android.test.mock.MockContentResolver.addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
android.content.ContentService.removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
android.content.IContentService$Stub$Proxy.removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
android.content.IContentService$Stub.removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
android.content.IContentService.removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
android.content.ContentResolver.removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
android.app.ContextImpl$ApplicationContentResolver.removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
android.test.mock.MockContentResolver.removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
android.content.ContentService.setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
android.content.IContentService$Stub$Proxy.setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
android.content.IContentService$Stub.setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
android.content.IContentService.setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
android.content.ContentResolver.setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
android.app.ContextImpl$ApplicationContentResolver.setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl.startSync(Landroid/content/ISyncContext;Ljava/lang/String;Landroid/accounts/Account;Landroid/os/Bundle;)V
android.test.mock.MockContentResolver.setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
android.content.ISyncAdapter$Stub$Proxy.startSync(Landroid/content/ISyncContext;Ljava/lang/String;Landroid/accounts/Account;Landroid/os/Bundle;)V
android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl.initialize(Landroid/accounts/Account;Ljava/lang/String;)V
android.content.ISyncAdapter$Stub.startSync(Landroid/content/ISyncContext;Ljava/lang/String;Landroid/accounts/Account;Landroid/os/Bundle;)V
android.content.ISyncAdapter$Stub$Proxy.initialize(Landroid/accounts/Account;Ljava/lang/String;)V
android.content.ISyncAdapter$Stub.initialize(Landroid/accounts/Account;Ljava/lang/String;)V
android.content.ISyncAdapter$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.content.ISyncAdapter.startSync(Landroid/content/ISyncContext;Ljava/lang/String;Landroid/accounts/Account;Landroid/os/Bundle;)V
android.content.ISyncAdapter.initialize(Landroid/accounts/Account;Ljava/lang/String;)V
android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.content.SyncManager$SyncHandler.runBoundToSyncAdapter(Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/ISyncAdapter;)V
com.android.development.SyncAdapterDriver.startSync(Ljava/lang/String;)V
android.content.SyncManager$ActiveSyncContext.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
com.android.development.SyncAdapterDriver.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
android.content.ContentService.setMasterSyncAutomatically(Z)V
android.content.IContentService$Stub$Proxy.setMasterSyncAutomatically(Z)V
android.content.IContentService$Stub.setMasterSyncAutomatically(Z)V
android.content.IContentService.setMasterSyncAutomatically(Z)V
android.content.ContentResolver.setMasterSyncAutomatically(Z)V
android.app.ContextImpl$ApplicationContentResolver.setMasterSyncAutomatically(Z)V
android.test.mock.MockContentResolver.setMasterSyncAutomatically(Z)V
android.test.SyncBaseInstrumentation.cancelSyncsandDisableAutoSync()V
com.android.settings.accounts.SyncSettings$1.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.DataUsageSummary$ConfirmAutoSyncChangeFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Boolean;
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
Permission:android.permission.MANAGE_ACCOUNTS

437 Callers:

android.accounts.AccountManagerService.checkManageAccountsPermission()V
android.accounts.AccountManagerService.addAcount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V
android.accounts.AccountManagerService.clearPassword(Landroid/accounts/Account;)V
android.accounts.AccountManagerService.confirmCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;Z)V
android.accounts.AccountManagerService.editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V
android.accounts.AccountManagerService.removeAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;)V
android.accounts.AccountManagerService.updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V
android.accounts.IAccountManager$Stub$Proxy.addAcount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V
android.accounts.IAccountManager$Stub.addAcount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V
android.accounts.IAccountManager$Stub$Proxy.clearPassword(Landroid/accounts/Account;)V
android.accounts.IAccountManager$Stub.clearPassword(Landroid/accounts/Account;)V
android.accounts.IAccountManager$Stub$Proxy.confirmCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;Z)V
android.accounts.IAccountManager$Stub.confirmCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;Z)V
android.accounts.IAccountManager$Stub$Proxy.editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V
android.accounts.IAccountManager$Stub.editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V
android.accounts.IAccountManager$Stub$Proxy.removeAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;)V
android.accounts.IAccountManager$Stub.removeAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;)V
android.accounts.IAccountManager$Stub$Proxy.updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V
android.accounts.IAccountManager$Stub.updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V
android.accounts.IAccountManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.accounts.IAccountManager.addAcount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V
android.accounts.IAccountManager.clearPassword(Landroid/accounts/Account;)V
android.accounts.IAccountManager.confirmCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;Z)V
android.accounts.IAccountManager.editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V
android.accounts.IAccountManager.removeAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;)V
android.accounts.IAccountManager.updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V
android.accounts.AccountManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.accounts.AccountManager$7.doWork()V
android.accounts.AccountManager.clearPassword(Landroid/accounts/Account;)V
android.accounts.AccountManager$8.doWork()V
android.accounts.AccountManager$10.doWork()V
android.accounts.AccountManager$4.doWork()V
android.accounts.AccountManager$9.doWork()V
android.accounts.AccountManager$AmsTask.doWork()V
android.test.IsolatedContext$MockAccountManager.clearPassword(Landroid/accounts/Account;)V
com.android.development.AccountsTester.onContextItemSelected(Landroid/view/MenuItem;)Z
android.accounts.AccountManager$BaseFutureTask.doWork()V
android.accounts.AccountManager$AmsTask.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$AmsTask$Response.onResult(Landroid/os/Bundle;)V
android.accounts.AccountManager$BaseFutureTask.startTask()V
android.accounts.AccountManager$10.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$5.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$6.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$7.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$8.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$9.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.start()Landroid/accounts/AccountManagerFuture;
android.accounts.IAccountManagerResponse$Stub$Proxy.onResult(Landroid/os/Bundle;)V
android.accounts.AccountManager$1.startTask()V
android.accounts.AccountManager$2.startTask()V
android.accounts.AccountManager$3.startTask()V
android.accounts.AccountManager$4.startTask()V
android.accounts.AccountManager$Future2Task.startTask()V
android.accounts.AccountManager.editProperties(Ljava/lang/String;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.addAccount(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.confirmCredentials(Landroid/accounts/Account;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.updateCredentials(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAuthTokenByFeatures(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/Bundle;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$Future2Task.start()Landroid/accounts/AccountManager$Future2Task;
android.test.IsolatedContext$MockAccountManager.editProperties(Ljava/lang/String;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.development.AccountsTester$ButtonClickListener.onClick(Landroid/view/View;)V
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1.onResult(Landroid/os/Bundle;)V
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1.run(Landroid/accounts/AccountManagerFuture;)V
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.run(Landroid/accounts/AccountManagerFuture;)V
android.test.IsolatedContext$MockAccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.browser.DeviceAccountLogin.handleLogin(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.DeviceAccountLogin.login(ILcom/android/browser/DeviceAccountLogin$AutoLoginCallback;)V
com.android.browser.GoogleAccountLogin.invalidateTokens()V
com.android.browser.GoogleAccountLogin.run(Landroid/accounts/AccountManagerFuture;)V
com.android.browser.GoogleAccountLogin.startLogin()V
com.android.development.AccountsTester$2.onClick(Landroid/content/DialogInterface;I)V
android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.test.IsolatedContext$MockAccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.addAccount(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.calendar.AllInOneActivity$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.util.AccountPromptUtils.launchAccountPrompt(Landroid/app/Activity;)V
com.android.email.service.MailService.setupAccountManagerAccount(Landroid/content/Context;Lcom/android/emailcommon/provider/Account;ZZZLandroid/accounts/AccountManagerCallback;)V
com.android.settings.accounts.AddAccountSettings.addAccount(Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.confirmCredentials(Landroid/accounts/Account;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.internal.policy.impl.AccountUnlockScreen.asyncCheckPassword()V
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.next()V
android.test.IsolatedContext$MockAccountManager.updateCredentials(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.test.IsolatedContext$MockAccountManager.getAuthTokenByFeatures(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/Bundle;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.development.AccountsTester$3.onClick(Landroid/content/DialogInterface;I)V
android.accounts.AccountManager$1.start()Landroid/accounts/AccountManager$Future2Task;
android.accounts.AccountManager$2.start()Landroid/accounts/AccountManager$Future2Task;
android.accounts.AccountManager$3.start()Landroid/accounts/AccountManager$Future2Task;
android.accounts.AccountManager$4.start()Landroid/accounts/AccountManager$Future2Task;
com.android.browser.Tab$2.onReceivedLoginRequest(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.AutologinBar.onClick(Landroid/view/View;)V
com.android.browser.GoogleAccountLogin.run()V
com.android.browser.GoogleAccountLogin.startLoginIfNeeded(Landroid/app/Activity;Ljava/lang/Runnable;)V
android.accounts.AccountManager.blockingGetAuthToken(Landroid/accounts/Account;Ljava/lang/String;Z)Ljava/lang/String;
android.test.IsolatedContext$MockAccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.ChooseTypeAndAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.updateViewConfiguration(Z)V
com.android.email.activity.setup.AccountSetupOptions$1.run()V
com.android.settings.accounts.AddAccountSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.internal.policy.impl.AccountUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.run(Landroid/accounts/AccountManagerFuture;)V
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.start()V
android.accounts.AccountManager.getAuthTokenLabel(Ljava/lang/String;Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.hasFeatures(Landroid/accounts/Account;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAccountsByTypeAndFeatures(Ljava/lang/String;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.removeAccount(Landroid/accounts/Account;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.browser.Controller.doStart(Landroid/os/Bundle;Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onProviderStatusChange()V
com.android.contacts.activities.PeopleActivity.onResume()V
com.android.internal.policy.impl.LockPatternKeyguardView.maybeEnableFallback(Landroid/content/Context;)V
android.accounts.GrantCredentialsPermissionActivity.onCreate(Landroid/os/Bundle;)V
android.test.IsolatedContext$MockAccountManager.getAuthTokenLabel(Ljava/lang/String;Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.test.IsolatedContext$MockAccountManager.hasFeatures(Landroid/accounts/Account;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.doWork()V
android.test.IsolatedContext$MockAccountManager.removeAccount(Landroid/accounts/Account;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.email.provider.AccountReconciler.reconcileAccountsInternal(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;Z)Z
com.android.email.provider.DBHelper$DatabaseHelper.onUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V
com.android.settings.accounts.AccountSyncSettings$1.onClick(Landroid/content/DialogInterface;I)V
com.android.browser.CrashRecoveryHandler.startRecovery(Landroid/content/Intent;)V
com.android.contacts.list.ProviderStatusWatcher$ProviderStatusListener.onProviderStatusChange()V
com.android.contacts.activities.TransactionSafeActivity.onResume()V
com.android.contacts.ContactsActivity.onResume()V
com.android.internal.policy.impl.LockPatternKeyguardView.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardWindowController;)V
com.android.email.provider.AccountReconciler.accountsNeedReconciling(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;)Z
com.android.email.provider.AccountReconciler.reconcileAccounts(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;)V
com.android.browser.Controller.start(Landroid/content/Intent;)V
com.android.contacts.list.ProviderStatusWatcher.notifyListeners()V
com.android.contacts.activities.AttachPhotoActivity.onResume()V
com.android.contacts.activities.ContactDetailActivity.onResume()V
com.android.contacts.activities.ContactEditorActivity.onResume()V
com.android.contacts.activities.ContactSelectionActivity.onResume()V
com.android.contacts.activities.DialtactsActivity.onResume()V
com.android.contacts.activities.GroupBrowserActivity.onResume()V
com.android.contacts.activities.GroupDetailActivity.onResume()V
com.android.contacts.activities.GroupEditorActivity.onResume()V
com.android.contacts.activities.JoinContactActivity.onResume()V
com.android.contacts.activities.NonPhoneActivity.onResume()V
com.android.contacts.activities.ShowOrCreateActivity.onResume()V
com.android.contacts.CallContactActivity.onResume()V
com.android.contacts.list.AccountFilterActivity.onResume()V
com.android.contacts.list.CustomContactListFilterActivity.onResume()V
com.android.contacts.test.FragmentTestActivity.onResume()V
com.android.contacts.vcard.ImportVCardActivity.onResume()V
com.android.contacts.vcard.SelectAccountActivity.onResume()V
com.android.internal.policy.impl.LockPatternKeyguardViewProperties.createKeyguardView(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardWindowController;)Lcom/android/internal/policy/impl/KeyguardViewBase;
com.android.email.service.MailService.hasMismatchInPopImapAccounts(Landroid/content/Context;)Z
com.android.email.service.AccountService$1.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService.reconcileAccountsWithAccountManager(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;)V
com.android.browser.ActivityController.start(Landroid/content/Intent;)V
com.android.contacts.list.ProviderStatusWatcher.access$600(Lcom/android/contacts/list/ProviderStatusWatcher;)V
com.android.internal.policy.impl.KeyguardViewProperties.createKeyguardView(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardWindowController;)Lcom/android/internal/policy/impl/KeyguardViewBase;
com.android.email.activity.Welcome$1.run()V
com.android.emailcommon.service.IAccountService$Stub$Proxy.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.emailcommon.service.IAccountService$Stub.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService$6.runInternal(Landroid/content/Context;)V
com.android.browser.BrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.onPostExecute(Ljava/lang/Boolean;)V
com.android.internal.policy.impl.KeyguardViewManager.show()V
com.android.emailcommon.service.IAccountService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IAccountService.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService$6.runInternal(Ljava/lang/Object;)V
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.onPostExecute(Ljava/lang/Object;)V
com.android.internal.policy.impl.KeyguardViewManager.verifyUnlock()V
com.android.internal.policy.impl.KeyguardViewMediator.handleShow()V
com.android.email.service.AccountService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.AccountServiceProxy$3.run()V
com.android.email.SingleRunningTask.runInternal(Ljava/lang/Object;)V
com.android.internal.policy.impl.KeyguardViewMediator.handleVerifyUnlock()V
com.android.internal.policy.impl.KeyguardViewMediator.access$1200(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.emailcommon.service.ServiceProxy$ProxyTask.run()V
com.android.email.SingleRunningTask.run(Ljava/lang/Object;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1500(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.showLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.pokeWakelock(I)V
com.android.emailcommon.service.ServiceProxy$ProxyRunnable.run()V
com.android.email.service.MailService$6.run(Ljava/lang/Object;)V
com.android.email.service.MailService.reconcilePopImapAccountsSync(Landroid/content/Context;)V
com.android.internal.policy.impl.KeyguardViewMediator.resetStateLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.verifyUnlockLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.hideLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.doKeyguardLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.setKeyguardEnabled(Z)V
com.android.internal.policy.impl.KeyguardViewCallback.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewMediator.pokeWakelock()V
com.android.email.service.EmailBroadcastProcessorService.onSystemAccountChanged()V
com.android.email.service.MailService$1.run()V
com.android.internal.policy.impl.KeyguardViewMediator.onScreenTurnedOff(I)V
com.android.internal.policy.impl.KeyguardViewMediator.onSimStateChanged(Lcom/android/internal/telephony/IccCard$State;)V
com.android.internal.policy.impl.KeyguardViewMediator.onUserSwitched(I)V
com.android.internal.policy.impl.KeyguardViewMediator.verifyUnlock(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$700(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.onSystemReady()V
com.android.internal.policy.impl.PhoneWindowManager.enableKeyguard(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewCallback.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewMediator.adjustUserActivityLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.handleWakeWhenReady(I)V
com.android.internal.policy.impl.PhoneWindowManager.showGlobalActionsDialog()V
com.android.email.service.EmailBroadcastProcessorService.onHandleIntent(Landroid/content/Intent;)V
com.android.internal.policy.impl.PhoneWindowManager.screenTurnedOff(I)V
com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback.onSimStateChanged(Lcom/android/internal/telephony/IccCard$State;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$300(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.policy.impl.PhoneWindowManager.exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.PhoneWindowManager.launchHomeFromHotKey()V
com.android.internal.policy.impl.KeyguardViewMediator$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.policy.impl.KeyguardViewMediator.doKeyguardTimeout()V
com.android.internal.policy.impl.PhoneWindowManager.systemReady()V
android.view.WindowManagerPolicy.enableKeyguard(Z)V
com.android.internal.policy.impl.KeyguardScreenCallback.pokeWakelock(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.takeEmergencyCallAction()V
com.android.internal.policy.impl.KeyguardViewBase.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView$3.pokeWakelock()V
com.android.internal.policy.impl.LockPatternKeyguardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView.wakeWhenReadyTq(I)V
com.android.internal.policy.impl.KeyguardViewMediator.handleHide()V
com.android.internal.policy.impl.KeyguardViewMediator.handleSetHidden(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1800(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
android.view.WindowManagerPolicy.screenTurnedOff(I)V
com.android.internal.policy.impl.PhoneWindowManager.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.handleSimStateChange(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimArgs;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.registerSimStateCallback(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimStateCallback;)V
com.android.internal.policy.impl.KeyguardViewMediator$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.view.WindowManagerPolicy.exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.PhoneWindowManager$19.run()V
android.view.WindowManagerPolicy.systemReady()V
com.android.server.wm.WindowManagerService$1.acquired()V
com.android.server.wm.WindowManagerService$1.released()V
com.android.server.wm.WindowManagerService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.policy.impl.AccountUnlockScreen$2.run(Landroid/accounts/AccountManagerFuture;)V
com.android.internal.policy.impl.AccountUnlockScreen.onTextChanged(Ljava/lang/CharSequence;III)V
com.android.internal.policy.impl.FaceUnlock.handleCancel()V
com.android.internal.policy.impl.FaceUnlock.handlePokeWakelock(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$2.userActivity(Landroid/view/View;)V
com.android.internal.policy.impl.LockScreen$WaveViewMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener.onPatternCellAdded(Ljava/util/List;)V
com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener.onPatternDetected(Ljava/util/List;)V
com.android.internal.policy.impl.SimPukUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.SimPukUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.SimUnlockScreen$TouchInput.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardScreenCallback.takeEmergencyCallAction()V
com.android.internal.policy.impl.LockPatternKeyguardView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardScreenCallback.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewBase.wakeWhenReadyTq(I)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1300(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.handleKeyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.access$2100(Lcom/android/internal/policy/impl/KeyguardViewMediator;Z)V
com.android.internal.policy.impl.KeyguardViewMediator.notifyScreenOffLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.notifyScreenOnLocked(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardViewMediator.wakeWhenReadyLocked(I)V
com.android.server.PowerManagerService$4.run()V
android.view.WindowManagerPolicy.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.access$300(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimArgs;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.reportSimUnlocked()V
com.android.internal.policy.impl.KeyguardStatusViewManager.<init>(Landroid/view/View;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Z)V
com.android.internal.policy.impl.KeyguardStatusViewManager.onResume()V
com.android.internal.policy.impl.KeyguardViewMediator.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/PhoneWindowManager;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.LockScreen.onResume()V
com.android.server.wm.WindowManagerService.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.WindowManagerPolicy.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.PhoneWindowManager.interceptFallback(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Z
com.android.server.wm.WindowManagerService.systemReady()V
com.android.internal.widget.LockScreenWidgetCallback.userActivity(Landroid/view/View;)V
com.android.internal.widget.WaveView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.LockPatternView$OnPatternListener.onPatternCellAdded(Ljava/util/List;)V
com.android.internal.widget.LockPatternView$OnPatternListener.onPatternDetected(Ljava/util/List;)V
com.android.internal.policy.impl.KeyguardStatusViewManager.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.FaceUnlock.handleServiceConnected()V
com.android.internal.policy.impl.LockScreen$GlowPadViewMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$GlowPadViewMethods.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$SlidingTabMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$SlidingTabMethods.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.PasswordUnlockScreen$2.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PasswordUnlockScreen$3.afterTextChanged(Landroid/text/Editable;)V
com.android.internal.policy.impl.PasswordUnlockScreen$4.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PasswordUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimUnlockScreen$1$1.run()V
com.android.internal.policy.impl.SimUnlockScreen.checkPin()V
com.android.internal.policy.impl.SimUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardViewManager.wakeWhenReadyTq(I)Z
com.android.internal.policy.impl.KeyguardViewMediator.access$1900(Lcom/android/internal/policy/impl/KeyguardViewMediator;Z)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDone(ZZ)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDoneDrawing()V
com.android.internal.policy.impl.KeyguardViewMediator.onScreenTurnedOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardViewMediator.onWakeKeyWhenKeyguardShowingTq(IZ)Z
com.android.internal.policy.impl.KeyguardViewMediator.onWakeMotionWhenKeyguardShowingTq()Z
com.android.server.wm.WindowManagerService$PolicyThread.run()V
com.android.internal.policy.impl.SimPukUnlockScreen$1$1.run()V
com.android.internal.policy.impl.AccountUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.LockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;)V
com.android.internal.policy.impl.PasswordUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;)V
com.android.internal.policy.impl.PatternUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;I)V
com.android.internal.policy.impl.SimPukUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.SimUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.AccountUnlockScreen.onResume()V
com.android.internal.policy.impl.PasswordUnlockScreen.onResume()V
com.android.internal.policy.impl.PatternUnlockScreen.onResume()V
com.android.internal.policy.impl.SimPukUnlockScreen.onResume()V
com.android.internal.policy.impl.SimUnlockScreen.onResume()V
com.android.internal.policy.impl.KeyguardScreen.onResume()V
android.view.IWindowManager$Stub$Proxy.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.IWindowManager$Stub.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
com.android.server.wm.InputMonitor.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.PhoneWindowManager.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.ServerThread.run()V
com.android.internal.widget.TransportControlView.onClick(Landroid/view/View;)V
com.android.internal.widget.WaveView.setGrabbedState(I)V
com.android.internal.widget.LockPatternView.notifyCellAdded()V
com.android.internal.widget.LockPatternView.notifyPatternDetected()V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.internal.widget.SlidingTab$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.SlidingTab$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.SimUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDone(Z)V
com.android.internal.policy.impl.PhoneWindowManager$15.run()V
com.android.internal.policy.impl.PhoneWindowManager$9.run()V
com.android.internal.policy.impl.KeyguardViewCallback.keyguardDoneDrawing()V
com.android.internal.policy.impl.PhoneWindowManager.screenTurningOn(Landroid/view/WindowManagerPolicy$ScreenOnListener;)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.notifyLidSwitchChanged(JZ)V
com.android.internal.policy.impl.PhoneWindowManager.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)V
com.android.internal.policy.impl.LockPatternKeyguardView.createUnlockScreenFor(Lcom/android/internal/policy/impl/LockPatternKeyguardView$UnlockMode;)Landroid/view/View;
com.android.internal.policy.impl.LockPatternKeyguardView.createLockScreen()Landroid/view/View;
com.android.internal.policy.impl.PatternUnlockScreen.onWindowFocusChanged(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.show()V
com.android.internal.policy.impl.LockPatternKeyguardView.updateScreen(Lcom/android/internal/policy/impl/LockPatternKeyguardView$Mode;Z)V
android.view.IWindowManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IWindowManager.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
android.view.WindowManagerPolicy.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.WaveView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.WaveView.tryTransitionToStartAttemptState(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.addCellToPattern(Lcom/android/internal/widget/LockPatternView$Cell;)V
com.android.internal.widget.LockPatternView.handleActionUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.internal.widget.SlidingTab.setGrabbedState(I)V
com.android.internal.widget.SlidingTab.dispatchTriggerEvent(I)V
com.android.internal.policy.impl.KeyguardViewCallback.keyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost.dispatchDraw(Landroid/graphics/Canvas;)V
android.view.WindowManagerPolicy.screenTurningOn(Landroid/view/WindowManagerPolicy$ScreenOnListener;)V
android.view.WindowManagerPolicy.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
android.view.WindowManagerPolicy.notifyLidSwitchChanged(JZ)V
android.view.WindowManagerPolicy.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZLcom/android/server/wm/WindowManagerService$1;)V
com.android.internal.policy.impl.LockPatternKeyguardView.recreateUnlockScreen(Lcom/android/internal/policy/impl/LockPatternKeyguardView$UnlockMode;)V
com.android.internal.policy.impl.LockPatternKeyguardView.recreateLockScreen()V
com.android.internal.policy.impl.KeyguardViewBase.show()V
com.android.internal.policy.impl.LockPatternKeyguardView.onScreenTurnedOn()V
com.android.internal.policy.impl.LockPatternKeyguardView.access$200(Lcom/android/internal/policy/impl/LockPatternKeyguardView;Lcom/android/internal/policy/impl/LockPatternKeyguardView$Mode;Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.verifyUnlock()V
com.android.server.wm.WindowManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.KeyguardManager.exitKeyguardSecurely(Landroid/app/KeyguardManager$OnKeyguardExitResult;)V
com.android.server.input.InputManagerService.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.server.wm.InputMonitor.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.WaveView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.LockPatternView.detectAndAddHit(FF)Lcom/android/internal/widget/LockPatternView$Cell;
com.android.internal.widget.LockPatternView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.internal.widget.SlidingTab.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.cancelGrab()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.goToLockScreen()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.goToUnlockScreen()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.keyguardDone(Z)V
com.android.server.wm.InputMonitor.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.wm.InputMonitor.notifyLidSwitchChanged(JZ)V
com.android.server.wm.InputMonitor.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService$WMThread.run()V
com.android.internal.policy.impl.KeyguardViewBase.onScreenTurnedOn()V
com.android.internal.policy.impl.LockPatternKeyguardView$1.run()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.forgotPattern(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.reportFailedUnlockAttempt()V
com.android.internal.policy.impl.LockPatternKeyguardView$4.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardViewBase.verifyUnlock()V
com.android.systemui.statusbar.BaseStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.systemui.statusbar.phone.PhoneStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.server.input.InputManagerService$Callbacks.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.LockPatternView.handleActionDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.handleActionMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.SlidingTab.onVisibilityChanged(Landroid/view/View;I)V
com.android.internal.policy.impl.KeyguardScreenCallback.goToLockScreen()V
com.android.internal.policy.impl.KeyguardScreenCallback.goToUnlockScreen()V
com.android.internal.policy.impl.KeyguardScreenCallback.keyguardDone(Z)V
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.input.InputManagerService$Callbacks.notifyLidSwitchChanged(JZ)V
com.android.server.input.InputManagerService$Callbacks.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.WindowManagerService.main(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)Lcom/android/server/wm/WindowManagerService;
com.android.internal.policy.impl.KeyguardViewManager.onScreenTurnedOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardScreenCallback.forgotPattern(Z)V
com.android.internal.policy.impl.KeyguardScreenCallback.reportFailedUnlockAttempt()V
com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallbackImpl.onUserChanged(I)V
com.android.server.input.InputManagerService.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.AccountUnlockScreen.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.LockScreen$3.run()V
com.android.internal.policy.impl.LockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.AccountUnlockScreen$1.run()V
com.android.internal.policy.impl.FaceUnlock.handleUnlock()V
com.android.internal.policy.impl.PasswordUnlockScreen.verifyPasswordAndUnlock()V
com.android.server.input.InputManagerService.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.input.InputManagerService.notifyLidSwitchChanged(JZ)V
com.android.server.input.InputManagerService.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.internal.policy.impl.KeyguardViewMediator.handleNotifyScreenOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.PatternUnlockScreen$2.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardStatusViewManager$1.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallback.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardViewMediator$1.onUserChanged(I)V
com.android.internal.policy.impl.LockScreen$1.onUserChanged(I)V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.PasswordUnlockScreen.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardViewMediator.access$1700(Lcom/android/internal/policy/impl/KeyguardViewMediator;Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.handleUserChanged(I)V
android.accounts.AccountManagerService.checkManageAccountsOrUseCredentialsPermissions()V
android.accounts.AccountManagerService.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager$Stub$Proxy.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager$Stub.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
android.accounts.AccountManager.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
com.android.development.AccountsTester$GetAndInvalidateAuthTokenCallback.run(Landroid/accounts/AccountManagerFuture;)V
Permission:android.permission.BROADCAST_STICKY

758 Callers:

android.app.ActivityManagerNative.broadcastStickyIntent(Landroid/content/Intent;Ljava/lang/String;)V
android.media.AudioService.sendDeviceConnectionIntent(IILjava/lang/String;)V
com.android.internal.telephony.cdma.CDMAPhone.sendEmergencyCallbackModeChange()V
com.android.internal.telephony.IccCard.broadcastIccStateChangedIntent(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.PhoneProxy.updatePhoneObject(I)V
com.android.server.am.ActivityManagerService.broadcastStickyIntent(Landroid/content/Intent;Ljava/lang/String;)V
com.android.server.BatteryService.sendIntent()V
android.media.AudioService.onSetWiredDeviceConnectionState(IILjava/lang/String;)V
com.android.internal.telephony.cdma.CDMALTEPhone.sendEmergencyCallbackModeChange()V
com.android.internal.telephony.cdma.CDMAPhone.handleEnterEmergencyCallbackMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.handleExitEmergencyCallbackMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.RuimRecords.onAllRecordsLoaded()V
com.android.internal.telephony.cdma.RuimRecords.onReady()V
com.android.internal.telephony.gsm.SIMRecords.onAllRecordsLoaded()V
com.android.internal.telephony.gsm.SIMRecords.onReady()V
com.android.internal.telephony.IccCard.handleIccCardStatus(Lcom/android/internal/telephony/IccCardStatus;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.handleCdmaSubscriptionSource(I)V
com.android.server.BatteryService.processValues()V
android.media.AudioService.access$6000(Landroid/media/AudioService;IILjava/lang/String;)V
com.android.internal.telephony.cdma.CDMALTEPhone.handleEnterEmergencyCallbackMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.handleExitEmergencyCallbackMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.RuimRecords.onRecordLoaded()V
com.android.internal.telephony.IccRecords.onAllRecordsLoaded()V
com.android.internal.telephony.IccRecords.onReady()V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.onAllRecordsLoaded()V
com.android.internal.telephony.gsm.SIMRecords.onRecordLoaded()V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.onReady()V
com.android.internal.telephony.IccCard.getIccCardStatusDone(Landroid/os/AsyncResult;)V
com.android.internal.telephony.IccCard.handleCdmaSubscriptionSource()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.handleCdmaSubscriptionSource(I)V
com.android.server.BatteryService.update()V
com.android.internal.telephony.IccRecords.onRecordLoaded()V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.onRecordLoaded()V
com.android.internal.telephony.IccCard.access$200(Lcom/android/internal/telephony/IccCard;Landroid/os/AsyncResult;)V
com.android.internal.telephony.IccCard.access$100(Lcom/android/internal/telephony/IccCard;)V
com.android.server.BatteryService.access$000(Lcom/android/server/BatteryService;)V
com.android.server.BatteryService.<init>(Landroid/content/Context;Lcom/android/server/LightsService;)V
com.android.server.BatteryService$1.onUEvent(Landroid/os/UEventObserver$UEvent;)V
com.android.server.BatteryService$2.onUEvent(Landroid/os/UEventObserver$UEvent;)V
com.android.server.ServerThread.run()V
android.app.ContextImpl.sendStickyBroadcast(Landroid/content/Intent;)V
android.content.Context.sendStickyBroadcast(Landroid/content/Intent;)V
android.content.ContextWrapper.sendStickyBroadcast(Landroid/content/Intent;)V
android.media.AudioService$AudioServiceBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.media.AudioService.broadcastScoConnectionState(I)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.sendP2pConnectionChangedBroadcast()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.sendP2pDiscoveryChangedBroadcast(Z)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.sendP2pStateChangedBroadcast(Z)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.sendThisDeviceChangedBroadcast()V
android.net.wifi.SupplicantStateTracker.sendSupplicantStateChangedBroadcast(Landroid/net/wifi/SupplicantState;Z)V
android.net.wifi.WifiStateMachine.sendNetworkStateChangeBroadcast(Ljava/lang/String;)V
android.net.wifi.WifiStateMachine.setWifiApState(I)V
android.net.wifi.WifiStateMachine.setWifiState(I)V
com.android.internal.policy.impl.PhoneWindowManager.setHdmiPlugged(Z)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.setAndBroadcastNetworkSetTime(J)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.setAndBroadcastNetworkSetTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.updateSpnDisplay()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.setAndBroadcastNetworkSetTime(J)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.setAndBroadcastNetworkSetTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.updateSpnDisplay()V
com.android.server.ConnectivityService.sendProxyBroadcast(Landroid/net/ProxyProperties;)V
com.android.server.ConnectivityService.sendStickyBroadcast(Landroid/content/Intent;)V
com.android.server.ConnectivityService.systemReady()V
com.android.server.connectivity.Tethering.sendTetherStateChangedBroadcast()V
com.android.server.DeviceStorageMonitorService.sendFullNotification()V
com.android.server.DeviceStorageMonitorService.sendNotification()V
com.android.server.NsdService.sendNsdStateChangeBroadcast(Z)V
com.android.server.TelephonyRegistry.broadcastDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.TelephonyRegistry.broadcastDataConnectionStateChanged(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/LinkCapabilities;Z)V
com.android.server.TelephonyRegistry.broadcastServiceStateChanged(Landroid/telephony/ServiceState;)V
com.android.server.TelephonyRegistry.broadcastSignalStrengthChanged(Landroid/telephony/SignalStrength;)V
com.android.server.ThrottleService$MyHandler.checkThrottleAndPostNotification(J)V
com.android.server.ThrottleService$MyHandler.clearThrottleAndNotification()V
com.android.server.ThrottleService$MyHandler.onPollAlarm()V
com.android.server.usb.UsbDeviceManager$UsbHandler.updateAudioSourceFunction()V
com.android.server.usb.UsbDeviceManager$UsbHandler.updateUsbState()V
com.android.server.DockObserver.update()V
android.media.AudioService.access$2300(Landroid/media/AudioService;I)V
android.media.AudioService.resetBluetoothSco()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$2400(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$3100(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;Z)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$2200(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;Z)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.setAndPersistDeviceName(Ljava/lang/String;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.updateThisDevice(I)V
android.net.wifi.SupplicantStateTracker.access$200(Landroid/net/wifi/SupplicantStateTracker;Landroid/net/wifi/SupplicantState;Z)V
android.net.wifi.WifiStateMachine.access$11300(Landroid/net/wifi/WifiStateMachine;Ljava/lang/String;)V
android.net.wifi.WifiStateMachine.handleNetworkDisconnect()V
android.net.wifi.WifiStateMachine.access$2300(Landroid/net/wifi/WifiStateMachine;I)V
android.net.wifi.WifiStateMachine.access$2200(Landroid/net/wifi/WifiStateMachine;I)V
com.android.internal.policy.impl.PhoneWindowManager$1.onUEvent(Landroid/os/UEventObserver$UEvent;)V
com.android.internal.policy.impl.PhoneWindowManager.initializeHdmiState()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.setAndBroadcastNetworkSetTime(J)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.fixTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.revertToNitzTime()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.setTimeFromNITZString(Ljava/lang/String;J)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.setAndBroadcastNetworkSetTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.revertToNitzTimeZone()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.updateSpnDisplay()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.pollStateDone()V
com.android.internal.telephony.ServiceStateTracker.updateSpnDisplay()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.pollStateDone()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.revertToNitzTime()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.setTimeFromNITZString(Ljava/lang/String;J)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.revertToNitzTimeZone()V
com.android.internal.telephony.gsm.GsmServiceStateTracker$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.server.ConnectivityService.access$3200(Lcom/android/server/ConnectivityService;Landroid/net/ProxyProperties;)V
com.android.server.ConnectivityService.handleApplyDefaultProxy(Landroid/net/ProxyProperties;)V
com.android.server.ConnectivityService.access$2300(Lcom/android/server/ConnectivityService;Landroid/content/Intent;)V
com.android.server.ConnectivityService.handleConnectionFailure(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.handleDisconnect(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.sendGeneralBroadcast(Landroid/net/NetworkInfo;Ljava/lang/String;)V
com.android.server.ConnectivityService.sendStickyBroadcastDelayed(Landroid/content/Intent;I)V
com.android.server.ServerThread$1.run()V
com.android.server.connectivity.Tethering.access$900(Lcom/android/server/connectivity/Tethering;)V
com.android.server.DeviceStorageMonitorService.checkMemory(Z)V
com.android.server.NsdService.access$700(Lcom/android/server/NsdService;Z)V
com.android.server.TelephonyRegistry.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.TelephonyRegistry.notifyDataConnection(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/LinkCapabilities;IZ)V
com.android.server.TelephonyRegistry.notifyServiceState(Landroid/telephony/ServiceState;)V
com.android.server.TelephonyRegistry.notifySignalStrength(Landroid/telephony/SignalStrength;)V
com.android.server.ThrottleService$MyHandler.onPolicyChanged()V
com.android.server.ThrottleService$MyHandler.onResetAlarm()V
com.android.server.usb.UsbDeviceManager$UsbHandler.updateState(Ljava/lang/String;)V
com.android.server.usb.UsbDeviceManager.systemReady()V
com.android.server.DockObserver.onUEvent(Landroid/os/UEventObserver$UEvent;)V
com.android.server.DockObserver.systemReady()V
android.media.AudioService$ScoClient.requestScoState(I)V
android.media.AudioService.access$5900(Landroid/media/AudioService;)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState.processMessage(Landroid/os/Message;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$2900(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;Ljava/lang/String;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$7700(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;I)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.initializeP2pSettings()V
android.net.wifi.SupplicantStateTracker$CompletedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DefaultState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$HandshakeState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$ConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$ConnectModeState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$VerifyingLinkState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$VerifyingLinkState.enter()V
android.net.wifi.WifiStateMachine.access$6100(Landroid/net/wifi/WifiStateMachine;)V
android.net.wifi.WifiStateMachine$DriverLoadingState$1.run()V
android.net.wifi.WifiStateMachine$DriverUnloadingState$1.run()V
android.net.wifi.WifiStateMachine$SoftApStartedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$SoftApStartingState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$SupplicantStartedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$TetheredState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$SupplicantStartingState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$SupplicantStoppingState.enter()V
com.android.internal.policy.impl.PhoneWindowManager.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.fixTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.revertToNitzTime()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.access$000(Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.setTimeFromNITZString(Ljava/lang/String;J)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.revertToNitzTimeZone()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.access$100(Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.pollStateDone()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.pollState()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.pollState()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.access$000(Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.access$100(Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;)V
com.android.server.ConnectivityService$VpnCallback.override(Ljava/util/List;Ljava/util/List;)V
com.android.server.ConnectivityService$VpnCallback.restore()V
com.android.server.ConnectivityService.handleConnectivityChange(IZ)V
com.android.server.ConnectivityService.access$900(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.access$1000(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.sendConnectedBroadcast(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.sendConnectedBroadcastDelayed(Landroid/net/NetworkInfo;I)V
com.android.server.ConnectivityService.sendInetConditionBroadcast(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.sendGeneralBroadcastDelayed(Landroid/net/NetworkInfo;Ljava/lang/String;I)V
com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState.enter()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState.enter()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.enter()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState.enter()V
com.android.server.DeviceStorageMonitorService.access$000(Lcom/android/server/DeviceStorageMonitorService;Z)V
com.android.server.DeviceStorageMonitorService.<init>(Landroid/content/Context;)V
com.android.server.NsdService$NsdStateMachine$DisabledState.enter()V
com.android.server.NsdService$NsdStateMachine$EnabledState.enter()V
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.ITelephonyRegistry$Stub.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataConnection(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/LinkCapabilities;IZ)V
com.android.internal.telephony.ITelephonyRegistry$Stub.notifyDataConnection(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/LinkCapabilities;IZ)V
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyServiceState(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.ITelephonyRegistry$Stub.notifyServiceState(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifySignalStrength(Landroid/telephony/SignalStrength;)V
com.android.internal.telephony.ITelephonyRegistry$Stub.notifySignalStrength(Landroid/telephony/SignalStrength;)V
com.android.server.usb.UsbDeviceManager$1.onUEvent(Landroid/os/UEventObserver$UEvent;)V
com.android.server.usb.UsbDeviceManager$UsbHandler.<init>(Lcom/android/server/usb/UsbDeviceManager;Landroid/os/Looper;)V
com.android.server.usb.UsbService.systemReady()V
android.media.AudioService$ScoClient.clearCount(Z)V
android.media.AudioService$ScoClient.decCount()V
android.media.AudioService$ScoClient.incCount()V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
com.android.internal.util.State.enter()V
com.android.internal.util.State.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$2500(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;)V
android.net.wifi.WifiStateMachine$DisconnectingState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$DriverStartedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$WpsRunningState.processMessage(Landroid/os/Message;)Z
android.view.WindowManagerPolicy.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.access$000(Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker$1.onChange(Z)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.access$100(Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker$2.onChange(Z)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.pollState()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.ServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.getSubscriptionInfoAndStartPollingThreads()V
com.android.internal.telephony.gsm.GsmServiceStateTracker$2.onChange(Z)V
com.android.internal.telephony.gsm.GsmServiceStateTracker$3.onChange(Z)V
com.android.server.connectivity.Vpn$LegacyVpnRunner.execute()V
com.android.server.ConnectivityService.access$1200(Lcom/android/server/ConnectivityService;IZ)V
com.android.server.ConnectivityService.handleConnect(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.access$800(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.handleInetConditionHoldEnd(II)V
com.android.internal.telephony.ITelephonyRegistry$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.ITelephonyRegistry.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.ITelephonyRegistry.notifyDataConnection(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/LinkCapabilities;IZ)V
com.android.internal.telephony.ITelephonyRegistry.notifyServiceState(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.ITelephonyRegistry.notifySignalStrength(Landroid/telephony/SignalStrength;)V
com.android.server.usb.UsbDeviceManager.<init>(Landroid/content/Context;Lcom/android/server/usb/UsbSettingsManager;)V
android.media.AudioService$ScoClient.binderDied()V
android.media.AudioService.clearAllScoClients(IZ)V
android.media.AudioService.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.AudioService.startBluetoothSco(Landroid/os/IBinder;)V
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.exit()V
android.bluetooth.BluetoothProfileState$PendingCommandState.exit()V
android.bluetooth.BluetoothProfileState$StableState.exit()V
android.net.DhcpStateMachine$DefaultState.exit()V
android.net.DhcpStateMachine$RunningState.exit()V
android.net.DhcpStateMachine$StoppedState.exit()V
android.net.DhcpStateMachine$WaitBeforeStartState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState.exit()V
android.net.wifi.SupplicantStateTracker$CompletedState.exit()V
android.net.wifi.SupplicantStateTracker$DefaultState.exit()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.exit()V
android.net.wifi.SupplicantStateTracker$DormantState.exit()V
android.net.wifi.SupplicantStateTracker$HandshakeState.exit()V
android.net.wifi.SupplicantStateTracker$InactiveState.exit()V
android.net.wifi.SupplicantStateTracker$ScanState.exit()V
android.net.wifi.SupplicantStateTracker$UninitializedState.exit()V
android.net.wifi.WifiApConfigStore$ActiveState.exit()V
android.net.wifi.WifiApConfigStore$DefaultState.exit()V
android.net.wifi.WifiApConfigStore$InactiveState.exit()V
android.net.wifi.WifiStateMachine$ConnectModeState.exit()V
android.net.wifi.WifiStateMachine$DefaultState.exit()V
android.net.wifi.WifiStateMachine$DisconnectingState.exit()V
android.net.wifi.WifiStateMachine$DriverFailedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadingState.exit()V
android.net.wifi.WifiStateMachine$DriverStartingState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppedState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppingState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadedState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadingState.exit()V
android.net.wifi.WifiStateMachine$InitialState.exit()V
android.net.wifi.WifiStateMachine$ObtainingIpState.exit()V
android.net.wifi.WifiStateMachine$ScanModeState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartedState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartingState.exit()V
android.net.wifi.WifiStateMachine$SoftApStoppingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStartingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStoppingState.exit()V
android.net.wifi.WifiStateMachine$TetheredState.exit()V
android.net.wifi.WifiStateMachine$TetheringState.exit()V
android.net.wifi.WifiStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$ConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$DefaultState.exit()V
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState.exit()V
android.net.wifi.WifiWatchdogStateMachine$RssiMonitoringState.exit()V
android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WalledGardenCheckState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState.exit()V
android.server.BluetoothAdapterStateMachine$BluetoothOn.exit()V
android.server.BluetoothAdapterStateMachine$HotOff.exit()V
android.server.BluetoothAdapterStateMachine$PerProcessState.exit()V
android.server.BluetoothAdapterStateMachine$PowerOff.exit()V
android.server.BluetoothAdapterStateMachine$Switching.exit()V
android.server.BluetoothAdapterStateMachine$WarmUp.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.exit()V
com.android.internal.telephony.DataConnection$DcActivatingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.exit()V
com.android.internal.util.IState.exit()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.exit()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.exit()V
com.android.internal.util.StateMachine$SmHandler.invokeExitMethods(Lcom/android/internal/util/StateMachine$SmHandler$StateInfo;)V
com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.exit()V
com.android.server.NsdService$NsdStateMachine$DefaultState.exit()V
com.android.server.NsdService$NsdStateMachine$DisabledState.exit()V
com.android.server.wm.WindowManagerService$PolicyThread.run()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.getSubscriptionInfoAndStartPollingThreads()V
com.android.server.connectivity.Vpn$LegacyVpnRunner.run()V
com.android.server.ConnectivityService.access$1100(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService$1.onRestrictBackgroundChanged(Z)V
com.android.server.ConnectivityService.access$1700(Lcom/android/server/ConnectivityService;II)V
com.android.server.TelephonyRegistry.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.DefaultPhoneNotifier.notifyDataConnectionFailed(Lcom/android/internal/telephony/Phone;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.DefaultPhoneNotifier.doNotifyDataConnection(Lcom/android/internal/telephony/Phone;Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/Phone$DataState;)V
com.android.internal.telephony.DefaultPhoneNotifier.notifyServiceState(Lcom/android/internal/telephony/Phone;)V
com.android.internal.telephony.DefaultPhoneNotifier.notifySignalStrength(Lcom/android/internal/telephony/Phone;)V
com.android.server.usb.UsbService.<init>(Landroid/content/Context;)V
android.media.AudioService.disconnectBluetoothSco(I)V
android.media.IAudioService$Stub$Proxy.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub$Proxy.startBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub.startBluetoothSco(Landroid/os/IBinder;)V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)V
com.android.server.connectivity.Vpn.startLegacyVpn(Lcom/android/internal/net/VpnConfig;[Ljava/lang/String;[Ljava/lang/String;)V
android.net.INetworkPolicyListener$Stub$Proxy.onRestrictBackgroundChanged(Z)V
com.android.server.ConnectivityService.handleInetConditionChange(II)V
com.android.internal.telephony.PhoneNotifier.notifyDataConnectionFailed(Lcom/android/internal/telephony/Phone;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.DefaultPhoneNotifier.notifyDataConnection(Lcom/android/internal/telephony/Phone;Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/Phone$DataState;)V
com.android.internal.telephony.PhoneNotifier.notifyServiceState(Lcom/android/internal/telephony/Phone;)V
com.android.internal.telephony.PhoneNotifier.notifySignalStrength(Lcom/android/internal/telephony/Phone;)V
android.media.AudioService.access$1300(Landroid/media/AudioService;I)V
android.media.AudioService.setMode(ILandroid/os/IBinder;)V
android.media.IAudioService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.IAudioService.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService.startBluetoothSco(Landroid/os/IBinder;)V
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZLcom/android/server/wm/WindowManagerService$1;)V
com.android.server.ConnectivityService.startLegacyVpn(Lcom/android/internal/net/VpnConfig;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.server.ConnectivityService.access$1600(Lcom/android/server/ConnectivityService;II)V
com.android.internal.telephony.PhoneBase.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.PhoneNotifier.notifyDataConnection(Lcom/android/internal/telephony/Phone;Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/Phone$DataState;)V
com.android.internal.telephony.PhoneBase.notifyServiceStateChangedP(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.cdma.CDMAPhone.notifySignalStrength()V
com.android.internal.telephony.gsm.GSMPhone.notifySignalStrength()V
android.media.AudioService$SetModeDeathHandler.binderDied()V
android.media.IAudioService$Stub$Proxy.setMode(ILandroid/os/IBinder;)V
android.media.IAudioService$Stub.setMode(ILandroid/os/IBinder;)V
android.media.AudioService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.AudioManager.stopBluetoothSco()V
android.media.AudioManager.startBluetoothSco()V
com.android.server.wm.WindowManagerService$WMThread.run()V
android.net.IConnectivityManager$Stub$Proxy.startLegacyVpn(Lcom/android/internal/net/VpnConfig;[Ljava/lang/String;[Ljava/lang/String;)V
android.net.IConnectivityManager$Stub.startLegacyVpn(Lcom/android/internal/net/VpnConfig;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.server.ConnectivityService.reportInetCondition(II)V
com.android.internal.telephony.cdma.CDMALTEPhone.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.cdma.CDMAPhone.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.trySetupData(Lcom/android/internal/telephony/ApnContext;)Z
com.android.internal.telephony.gsm.GsmDataConnectionTracker.notifyNoData(Lcom/android/internal/telephony/DataConnection$FailCause;Lcom/android/internal/telephony/ApnContext;)V
com.android.internal.telephony.gsm.GSMPhone.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.sip.SipPhoneBase.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.sip.SipPhone.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.PhoneBase.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/Phone$DataState;)V
com.android.internal.telephony.PhoneBase.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.PhoneBase.notifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CDMALTEPhone.notifyServiceStateChangedP(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.cdma.CDMAPhone.notifyServiceStateChanged(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.cdma.CDMAPhone.notifyServiceStateChangedP(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.gsm.GSMPhone.notifyServiceStateChanged(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.gsm.GSMPhone.notifyServiceStateChangedP(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.sip.SipPhoneBase.notifyServiceStateChanged(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.sip.SipPhoneBase.notifyServiceStateChangedP(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.sip.SipPhone.notifyServiceStateChangedP(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.cdma.CDMALTEPhone.notifySignalStrength()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.onSignalStrengthResult(Landroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.onSignalStrengthResult(Landroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.onSignalStrengthResult(Landroid/os/AsyncResult;)V
android.media.IAudioService.setMode(ILandroid/os/IBinder;)V
com.android.server.wm.WindowManagerService.main(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)Lcom/android/server/wm/WindowManagerService;
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager.startLegacyVpn(Lcom/android/internal/net/VpnConfig;[Ljava/lang/String;[Ljava/lang/String;)V
android.net.IConnectivityManager$Stub$Proxy.reportInetCondition(II)V
android.net.IConnectivityManager$Stub.reportInetCondition(II)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onTrySetupData(Lcom/android/internal/telephony/ApnContext;)Z
com.android.internal.telephony.gsm.GsmDataConnectionTracker.trySetupData(Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.gsm.GsmDataConnectionTracker.applyNewState(Lcom/android/internal/telephony/ApnContext;ZZ)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.setupDataOnReadyApns(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.reconnectAfterFail(Lcom/android/internal/telephony/DataConnection$FailCause;Lcom/android/internal/telephony/ApnContext;I)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.startDelayedRetry(Lcom/android/internal/telephony/DataConnection$FailCause;Lcom/android/internal/telephony/ApnContext;I)V
com.android.internal.telephony.cdma.CDMALTEPhone.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/Phone$DataState;)V
com.android.internal.telephony.cdma.CDMAPhone.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/Phone$DataState;)V
com.android.internal.telephony.DataConnectionTracker.notifyApnIdDisconnected(Ljava/lang/String;I)V
com.android.internal.telephony.DataConnectionTracker.notifyApnIdUpToCurrent(Ljava/lang/String;I)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.notifyApnIdUpToCurrent(Ljava/lang/String;Lcom/android/internal/telephony/ApnContext;Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.notifyOffApnsOfAvailability(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GSMPhone.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/Phone$DataState;)V
com.android.internal.telephony.sip.SipPhoneBase.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/Phone$DataState;)V
com.android.internal.telephony.sip.SipPhone.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/Phone$DataState;)V
com.android.internal.telephony.cdma.CDMALTEPhone.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.cdma.CDMAPhone.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.DataConnectionTracker.notifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.setupData(Lcom/android/internal/telephony/ApnContext;)Z
com.android.internal.telephony.gsm.GsmDataConnectionTracker.cleanUpConnection(ZLcom/android/internal/telephony/ApnContext;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.notifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.notifyDefaultData(Lcom/android/internal/telephony/ApnContext;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDataSetupComplete(Landroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDataStateChanged(Landroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDisconnectDone(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GSMPhone.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.sip.SipPhoneBase.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.sip.SipPhone.notifyDataConnection(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.cdma.CDMALTEPhone.notifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CDMAPhone.notifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GSMPhone.notifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.sip.SipPhoneBase.notifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.sip.SipPhone.notifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CDMALTEPhone.notifyServiceStateChanged(Landroid/telephony/ServiceState;)V
com.android.internal.telephony.sip.SipPhone.notifyServiceStateChanged(Landroid/telephony/ServiceState;)V
android.media.AudioManager.setMode(I)V
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.vpn2.VpnSettings.connect(Lcom/android/settings/vpn2/VpnProfile;)V
android.net.IConnectivityManager.reportInetCondition(II)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver.onChange(Z)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onActionIntentReconnectAlarm(Landroid/content/Intent;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDataStallAlarm(I)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onPollPdp()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.initApnContextsAndDataConnection()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onEnableApn(II)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onSetDependencyMet(Ljava/lang/String;Z)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onTrySetupData(Ljava/lang/String;)Z
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onApnChanged()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDataConnectionAttached()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onRecordsLoaded()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onRoamingOff()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onRoamingOn()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onVoiceCallEnded()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.notifyApnIdDisconnected(Ljava/lang/String;I)V
com.android.internal.telephony.DataConnectionTracker.notifyOffApnsOfAvailability(Ljava/lang/String;)V
com.android.internal.telephony.DataConnectionTracker.onEnableApn(II)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.notifyApnIdDisconnected(Ljava/lang/String;I)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.notifyApnIdUpToCurrent(Ljava/lang/String;I)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.notifyApnIdUpToCurrent(Ljava/lang/String;I)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onRadioAvailable()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onRadioOffOrNotAvailable()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.notifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.cleanUpAllConnections(ZLjava/lang/String;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onCleanUpConnection(ZILjava/lang/String;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.gotoIdleAndNotifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDataConnectionDetached()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onVoiceCallStarted()V
com.android.internal.telephony.DataConnectionTracker.onDataSetupComplete(Landroid/os/AsyncResult;)V
com.android.internal.telephony.DataConnectionTracker.onDisconnectDone(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.CallManager.setAudioMode()V
com.android.settings.vpn2.VpnSettings.onClick(Landroid/content/DialogInterface;I)V
android.net.ConnectivityManager.reportInetCondition(II)V
com.android.internal.telephony.DataConnectionTracker.onActionIntentReconnectAlarm(Landroid/content/Intent;)V
com.android.internal.telephony.DataConnectionTracker.onDataStallAlarm(I)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.<init>(Lcom/android/internal/telephony/PhoneBase;)V
com.android.internal.telephony.DataConnectionTracker.onSetDependencyMet(Ljava/lang/String;Z)V
com.android.internal.telephony.DataConnectionTracker.onTrySetupData(Ljava/lang/String;)Z
com.android.internal.telephony.DataConnectionTracker.onRoamingOff()V
com.android.internal.telephony.DataConnectionTracker.onRoamingOn()V
com.android.internal.telephony.DataConnectionTracker.onVoiceCallEnded()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.notifyOffApnsOfAvailability(Ljava/lang/String;)V
com.android.internal.telephony.DataConnectionTracker.onSetUserDataEnabled(Z)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onEnableApn(II)V
com.android.internal.telephony.DataConnectionTracker.onRadioAvailable()V
com.android.internal.telephony.DataConnectionTracker.onRadioOffOrNotAvailable()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.setupData(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.trySetupData(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.gotoIdleAndNotifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.notifyDefaultData(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onCdmaDataDetached()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onDisconnectDone(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onRadioAvailable()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onRoamingOff()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onRoamingOn()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onVoiceCallEnded()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onVoiceCallStarted()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.dispose()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.doRecovery()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onCleanUpAllConnections(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.restartRadio()V
com.android.internal.telephony.DataConnectionTracker.onCleanUpConnection(ZILjava/lang/String;)V
com.android.internal.telephony.DataConnectionTracker.gotoIdleAndNotifyDataConnection(Ljava/lang/String;)V
com.android.internal.telephony.DataConnectionTracker.onVoiceCallStarted()V
com.android.phone.PhoneUtils.setAudioMode(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onActionIntentReconnectAlarm(Landroid/content/Intent;)V
com.android.internal.telephony.DataConnectionTracker$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onDataStallAlarm(I)V
com.android.internal.telephony.DataConnectionTracker.<init>(Lcom/android/internal/telephony/PhoneBase;)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onSetDependencyMet(Ljava/lang/String;Z)V
com.android.internal.telephony.DataConnectionTracker.onSetInternalDataEnabled(Z)V
com.android.internal.telephony.DataConnectionTracker.onSetPolicyDataEnabled(Z)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.cleanUpConnection(ZLjava/lang/String;Z)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.notifyNoData(Lcom/android/internal/telephony/DataConnection$FailCause;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onSetUserDataEnabled(Z)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onSetUserDataEnabled(Z)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onTrySetupData(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onDataSetupComplete(Landroid/os/AsyncResult;)V
com.android.internal.telephony.DataConnectionTracker.dispose()V
com.android.internal.telephony.DataConnectionTracker.onCleanUpAllConnections(Ljava/lang/String;)V
com.android.internal.telephony.DataConnectionTracker.restartRadio()V
com.android.internal.telephony.DataConnectionTracker.onResetDone(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.resetAudioStateAfterDisconnect()V
com.android.phone.PhoneApp.onCreate()V
com.android.phone.PhoneUtils.setAudioMode()V
com.android.phone.PhoneUtils.switchHoldingAndActive(Lcom/android/internal/telephony/Call;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.<init>(Lcom/android/internal/telephony/cdma/CDMAPhone;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.<init>(Lcom/android/internal/telephony/PhoneBase;)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onSetInternalDataEnabled(Z)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onSetInternalDataEnabled(Z)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onSetPolicyDataEnabled(Z)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onSetPolicyDataEnabled(Z)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.dispose()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onCleanUpAllConnections(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onCleanUpConnection(ZILjava/lang/String;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onDataStateChanged(Landroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onEnableNewApn()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.reconnectAfterFail(Lcom/android/internal/telephony/DataConnection$FailCause;Ljava/lang/String;I)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.startDelayedRetry(Lcom/android/internal/telephony/DataConnection$FailCause;Ljava/lang/String;I)V
com.android.internal.telephony.cdma.CDMAPhone.dispose()V
com.android.internal.telephony.gsm.GSMPhone.dispose()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onResetDone(Landroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onResetDone(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.access$1000(Lcom/android/phone/CallNotifier;)V
com.android.phone.CallNotifier.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.PhoneUtils.answerCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.placeCall(Landroid/content/Context;Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/net/Uri;ZLandroid/net/Uri;)I
com.android.phone.Ringer.stopRing()V
com.android.phone.BluetoothHandsfree$16.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.InCallScreen.internalResolveIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.PhoneUtils.mergeCalls(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.PhoneUtils.sendEmptyFlash(Lcom/android/internal/telephony/Phone;)V
com.android.internal.telephony.cdma.CDMAPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.PhoneFactory.getGsmPhone()Lcom/android/internal/telephony/Phone;
com.android.internal.telephony.PhoneFactory.makeDefaultPhone(Landroid/content/Context;)V
com.android.internal.telephony.DataConnectionTracker.onEnableNewApn()V
com.android.internal.telephony.cdma.CDMALTEPhone.dispose()V
com.android.internal.telephony.PhoneBase.dispose()V
com.android.phone.CallNotifier$InCallTonePlayer.run()V
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalAnswerCall()V
com.android.phone.PhoneInterfaceManager.answerRingingCallInternal()V
com.android.phone.PhoneUtils.answerAndEndActive(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.answerAndEndHolding(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.handleHeadsetHook(Lcom/android/internal/telephony/Phone;Landroid/view/KeyEvent;)Z
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OtaUtils.startNonInteractiveOtasp(Landroid/content/Context;)I
com.android.phone.CallNotifier.silenceRinger()V
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.onNewIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.phone.PhoneUtils.mergeCalls()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.internal.telephony.cdma.CDMALTEPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.PhoneProxy.deleteAndCreatePhone(I)V
com.android.internal.telephony.PhoneFactory.makeDefaultPhones(Landroid/content/Context;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onEnableNewApn()V
com.android.internal.telephony.Phone.dispose()V
com.android.internal.telephony.sip.SipPhoneBase.dispose()V
com.android.internal.telephony.sip.SipPhone.dispose()V
com.android.phone.CallNotifier.onNewRingingConnection(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onRingbackTone(Landroid/os/AsyncResult;)V
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.PhoneInterfaceManager.access$000(Lcom/android/phone/PhoneInterfaceManager;)V
com.android.phone.InCallScreen.internalAnswerAndEnd()V
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.InCallScreenShowActivation.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.internalSilenceRinger()V
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneInterfaceManager.silenceRingerInternal()V
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.PhoneFactory.getCdmaPhone()Lcom/android/internal/telephony/Phone;
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$1.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$7.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$9.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.phone.InCallScreen.internalRespondViaSms()V
com.android.phone.PhoneInterfaceManager.access$100(Lcom/android/phone/PhoneInterfaceManager;)V
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
android.bluetooth.HeadsetBase$1.run()V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
android.app.ContextImpl.sendStickyOrderedBroadcast(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V
android.content.Context.sendStickyOrderedBroadcast(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V
android.content.ContextWrapper.sendStickyOrderedBroadcast(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.unbroadcastIntent(Landroid/app/IApplicationThread;Landroid/content/Intent;I)V
android.app.ActivityManagerNative.unbroadcastIntent(Landroid/app/IApplicationThread;Landroid/content/Intent;I)V
android.app.ActivityManagerNative.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IActivityManager.unbroadcastIntent(Landroid/app/IApplicationThread;Landroid/content/Intent;I)V
com.android.server.am.ActivityManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ContextImpl.removeStickyBroadcast(Landroid/content/Intent;)V
android.content.Context.removeStickyBroadcast(Landroid/content/Intent;)V
android.content.ContextWrapper.removeStickyBroadcast(Landroid/content/Intent;)V
com.android.server.DeviceStorageMonitorService.cancelFullNotification()V
com.android.server.DeviceStorageMonitorService.cancelNotification()V
com.android.server.ThrottleService.shutdown()V
Permission:android.permission.READ_SOCIAL_STREAM

1565 Callers:

com.android.providers.contacts.ContactsProvider2.enforceSocialStreamReadPermission(Landroid/net/Uri;)V
com.android.providers.contacts.ContactsProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.call(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.providers.contacts.ContactsProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.deleteData(Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.contacts.ContactsProvider2.deleteData(J[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.deleteInTransaction(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.email.activity.setup.AccountSetupNames.access$100()Landroid/net/Uri;
com.android.email.activity.setup.AccountSetupNames$2.doInBackground([Ljava/lang/Void;)Ljava/lang/String;
com.android.email.activity.setup.AccountSetupNames$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxFinder$FindMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$6.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$QuickResponseChecker.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageFileView$LoadFilenameTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageList$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment$MessageOpenTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSetupNames$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.UIControllerTwoPane$RefreshTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.ex.chips.BaseRecipientAdapter$DefaultFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.providers.contacts.LegacyApiSupport.findFirstDataId(JLjava/lang/String;)J
com.android.providers.contacts.LegacyApiSupport.findFirstDataRow(JLjava/lang/String;)Landroid/net/Uri;
com.android.providers.contacts.LegacyApiSupport.updatePhoto(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.updatePeople(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.delete(Landroid/net/Uri;IJ)I
com.android.providers.contacts.LegacyApiSupport.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.LegacyApiSupport.update(IJLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.updateInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.LegacyApiSupport.updateAll(Landroid/net/Uri;ILandroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.insertStatusUpdate(Landroid/content/ContentValues;)J
com.android.providers.contacts.ContactsProvider2.insertInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.contacts.vcard.ExportProcessor.runInternal()V
com.android.contacts.vcard.ExportProcessor.run()V
com.android.contacts.vcard.ProcessorBase.run()V
com.android.providers.contacts.LegacyApiSupport.updateExtensions(JLandroid/content/ContentValues;)I
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Boolean;
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.widget.QuickContactBadge.onClick(Landroid/view/View;)V
com.android.contacts.widget.LayoutSuppressingQuickContactBadge.onClick(Landroid/view/View;)V
com.android.mms.ui.QuickContactDivot.onClick(Landroid/view/View;)V
com.android.quicksearchbox.ui.ContactBadge.onClick(Landroid/view/View;)V
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendVCards(Ljavax/obex/Operation;Ljava/lang/String;ZLjava/lang/String;Z)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendCallLogVcards(ILjavax/obex/Operation;IIZ)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendPhonebookOneVcard(Ljavax/obex/Operation;IZLjava/lang/String;I)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendPhonebookVcards(Ljavax/obex/Operation;IIZLjava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullPhonebook([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/HeaderSet;Ljavax/obex/Operation;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullVcardEntry([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/Operation;Ljava/lang/String;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.onGet(Ljavax/obex/Operation;)I
com.android.contacts.util.NameConverter.displayNameToStructuredName(Landroid/content/Context;Ljava/lang/String;)Ljava/util/Map;
com.android.contacts.editor.StructuredNameEditorView.rebuildStructuredName(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.StructuredNameEditorView.switchFromFullNameToStructuredName()V
com.android.contacts.util.NameConverter.displayNameToStructuredName(Landroid/content/Context;Ljava/lang/String;Landroid/content/ContentValues;)Landroid/content/ContentValues;
com.android.contacts.editor.StructuredNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.StructuredNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.model.EntityModifier.migrateStructuredName(Landroid/content/Context;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/DataKind;)V
com.android.contacts.editor.LabeledEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.LabeledEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.model.EntityModifier.migrateStateForNewContact(Landroid/content/Context;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.Editor.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.EventFieldEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.PhoneticNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView$2.afterTextChanged(Landroid/text/Editable;)V
com.android.contacts.editor.EventFieldEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.PhoneticNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView$1.onClick(Landroid/view/View;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.EventFieldEditorView$2.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.EventFieldEditorView.clearAllFields()V
com.android.contacts.editor.EventFieldEditorView.onLabelRebuilt()V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.ContactEditorFragment.rebindEditorsForNewContact(Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.LabeledEditorView.onLabelRebuilt()V
com.android.contacts.editor.ContactEditorFragment.createContact(Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.ContactEditorFragment.access$500(Lcom/android/contacts/editor/ContactEditorFragment;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.datepicker.DatePickerDialog.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView$3.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.PhoneticNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.StructuredNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.TextFieldsEditorView.onLabelRebuilt()V
com.android.contacts.editor.ContactEditorFragment.createContact()V
com.android.contacts.editor.ContactEditorFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.contacts.editor.ContactEditorFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.selectAccountAndCreateContact()V
com.android.contacts.editor.ContactEditorFragment$3$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.EventFieldEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.LabeledEditorView$1.onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.PhoneticNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.StructuredNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.TextFieldsEditorView.onTypeSelectionChange(I)V
com.android.vcard.VCardComposer.init(Ljava/lang/String;[Ljava/lang/String;)Z
com.android.vcard.VCardComposer.init()Z
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getContactsSize()I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getPhonebookSize(I)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullVcardListing([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/HeaderSet;Ljavax/obex/Operation;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.<init>(Landroid/os/Handler;Landroid/content/Context;)V
com.android.bluetooth.pbap.BluetoothPbapService.startObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.access$500(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.parseIntent(Landroid/content/Intent;)V
com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread.run()V
com.android.bluetooth.pbap.BluetoothPbapService.onStartCommand(Landroid/content/Intent;II)I
com.android.bluetooth.pbap.BluetoothPbapService.startRfcommSocketListener()V
com.android.bluetooth.pbap.BluetoothPbapService.access$900(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.stopObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.onCreate()V
com.android.bluetooth.pbap.BluetoothPbapService.access$1100(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.vcard.VCardEntry$EmailData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$EntryElement.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$InsertOperationConstrutor.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z
com.android.vcard.VCardEntry$EntryElementIterator.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z
com.android.vcard.VCardEntry.iterateAllData(Lcom/android/vcard/VCardEntry$EntryElementIterator;)V
com.android.vcard.VCardEntry.iterateOneList(Ljava/util/List;Lcom/android/vcard/VCardEntry$EntryElementIterator;)V
com.android.vcard.VCardEntry.isIgnorable()Z
com.android.vcard.VCardEntry.toString()Ljava/lang/String;
com.android.vcard.VCardEntry.constructInsertOperations(Landroid/content/ContentResolver;Ljava/util/ArrayList;)Ljava/util/ArrayList;
com.android.contacts.vcard.NotificationImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.vcard.VCardEntryCommitter.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.VCardImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.vcard.VCardEntryHandler.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.ImportProcessor.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.vcard.VCardEntryConstructor.onEntryEnded()V
com.android.vcard.VCardInterpreter.onEntryEnded()V
com.android.vcard.VCardParserImpl_V21.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.handleNest()V
com.android.vcard.VCardParserImpl_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V40.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.parseItem()Z
com.android.vcard.VCardParserImpl_V30.handleNest()V
com.android.vcard.VCardParserImpl_V40.handleNest()V
com.android.vcard.VCardParserImpl_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseItems()V
com.android.vcard.VCardParserImpl_V30.parseItem()Z
com.android.vcard.VCardParserImpl_V40.parseItem()Z
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseItems()V
com.android.vcard.VCardParserImpl_V40.parseItems()V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.constructImportRequest([BLandroid/net/Uri;Ljava/lang/String;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.NfcImportVCardActivity.createImportRequest()Lcom/android/contacts/vcard/ImportRequest;
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.run()V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Lcom/android/contacts/vcard/VCardService;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.ImportProcessor.readOneVCard(Ljava/io/InputStream;ILjava/lang/String;Lcom/android/vcard/VCardInterpreter;[I)Z
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.vcard.ImportProcessor.runInternal()V
com.android.contacts.vcard.ImportProcessor.run()V
com.android.contacts.dialog.ClearFrequentsDialog$1$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.dialog.ClearFrequentsDialog$1$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactLoader.loadGroupMetaData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.ContactLoader.loadInBackground()Lcom/android/contacts/ContactLoader$Result;
com.android.contacts.ContactLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.util.ContactLoaderUtils.ensureIsContactUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.doInBackground([Ljava/lang/Void;)Landroid/net/Uri;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.exchange.adapter.ContactsSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.AbstractSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.ContactsSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.AbstractSyncParser.parse()Z
com.android.exchange.adapter.AccountSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.EmailSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.EasSyncService.run()V
com.android.exchange.EasSyncService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.adapter.AbstractSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.parse()Z
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser.parse()Z
com.android.exchange.adapter.Parser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.EmailSyncAdapter.getEstimate(Ljava/lang/String;)I
com.android.exchange.EasAccountService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasOutboxService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.adapter.CalendarSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.ContactsSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.EmailSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.EmailSyncAdapter.getAutomaticLookback()V
com.android.exchange.adapter.AbstractSyncAdapter.parse(Ljava/io/InputStream;)Z
android.provider.ContactsContract$SyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.contacts.calllog.ContactInfoHelper.queryContactInfoForSipAddress(Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.calllog.ContactInfoHelper.lookupNumber(Ljava/lang/String;Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.CallDetailActivity.getPhoneCallDetailsForUri(Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.queryContactInfo(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.CallDetailActivity.access$300(Lcom/android/contacts/CallDetailActivity;Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.access$300(Lcom/android/contacts/calllog/CallLogAdapter;Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Void;)[Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter$QueryThread.run()V
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.calllog.CallLogAdapter.startRequestProcessing()V
com.android.contacts.calllog.CallLogAdapter.access$100(Lcom/android/contacts/calllog/CallLogAdapter;)V
com.android.contacts.calllog.CallLogAdapter.enqueueRequest(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;Z)V
com.android.contacts.calllog.CallLogAdapter.bindView(Landroid/view/View;Landroid/database/Cursor;I)V
com.android.contacts.calllog.CallLogAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.calllog.CallLogAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.contacts.calllog.CallLogAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.common.widget.GroupingListAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.calllog.CallLogAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.activity.ContactStatusLoader.getContactInfo(Landroid/content/Context;Ljava/lang/String;)Lcom/android/email/activity/ContactStatusLoader$Result;
com.android.email.activity.ContactStatusLoader.loadInBackground()Lcom/android/email/activity/ContactStatusLoader$Result;
com.android.email.NotificationController.getSenderPhoto(Lcom/android/emailcommon/provider/EmailContent$Message;)Landroid/graphics/Bitmap;
com.android.email.activity.ContactStatusLoader.loadInBackground()Ljava/lang/Object;
com.android.email.NotificationController.createNewMessageNotification(JJLandroid/database/Cursor;JII)Landroid/app/Notification;
com.android.email.NotificationController$MessageContentObserver.onChange(Z)V
com.android.contacts.model.EntityDelta.buildDiff(Ljava/util/ArrayList;)V
com.android.contacts.model.EntityDeltaList.buildDiff()Ljava/util/ArrayList;
com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask.doInBackground([Lcom/android/contacts/model/EntityDeltaList;)Ljava/lang/Integer;
com.android.contacts.ContactSaveService.saveContact(Landroid/content/Intent;)V
com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactSaveService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.list.CustomContactListFilterActivity$GroupDelta.buildDiff()Landroid/content/ContentProviderOperation;
com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay.buildDiff(Ljava/util/ArrayList;)V
com.android.contacts.list.CustomContactListFilterActivity$AccountSet.buildDiff()Ljava/util/ArrayList;
com.android.contacts.list.CustomContactListFilterActivity.doSaveAction()V
com.android.contacts.list.CustomContactListFilterActivity.onClick(Landroid/view/View;)V
com.android.contacts.activities.ConfirmAddDetailActivity.startPhotoQuery(JLandroid/net/Uri;)V
com.android.contacts.activities.ConfirmAddDetailActivity.access$900(Lcom/android/contacts/activities/ConfirmAddDetailActivity;JLandroid/net/Uri;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.phone.CallerInfoCache.refreshCacheEntry()V
com.android.phone.CallerInfoCache.access$400(Lcom/android/phone/CallerInfoCache;)V
com.android.phone.CallerInfoCache$CacheAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.phone.CallerInfoCache$CacheAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactSaveService.renameGroup(Landroid/content/Intent;)V
com.android.contacts.util.NameConverter.structuredNameToDisplayName(Landroid/content/Context;Ljava/util/Map;)Ljava/lang/String;
com.android.contacts.editor.StructuredNameEditorView.rebuildFullName(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.StructuredNameEditorView.switchFromStructuredNameToFullName()V
com.android.providers.contacts.LegacyApiSupport.updateOrganizations(JLandroid/content/ContentValues;)I
com.android.contacts.editor.AggregationSuggestionEngine.loadAggregationSuggestions(Landroid/net/Uri;)V
android.provider.Contacts$People.addToGroup(Landroid/content/ContentResolver;JJ)Landroid/net/Uri;
android.provider.Contacts$People.addToGroup(Landroid/content/ContentResolver;JLjava/lang/String;)Landroid/net/Uri;
android.provider.Contacts$People.addToMyContactsGroup(Landroid/content/ContentResolver;J)Landroid/net/Uri;
android.provider.Contacts$People.createPersonInMyContactsGroup(Landroid/content/ContentResolver;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.phone.SimContacts.actuallyImportOneSimContact(Landroid/database/Cursor;Landroid/content/ContentResolver;Landroid/accounts/Account;)V
com.android.phone.SimContacts.access$100(Landroid/database/Cursor;Landroid/content/ContentResolver;Landroid/accounts/Account;)V
com.android.phone.SimContacts.importOneSimContact(I)V
com.android.phone.SimContacts$ImportAllSimContactsThread.run()V
com.android.phone.SimContacts.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.SimContacts.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.phone.SimContacts.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.ADNList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.exchange.adapter.ContactsSyncAdapter.cleanup()V
com.android.exchange.adapter.AbstractSyncAdapter.cleanup()V
com.android.providers.contacts.ContactsProvider2.outputRawContactsAsVCard(Landroid/net/Uri;Ljava/io/OutputStream;Ljava/lang/String;[Ljava/lang/String;)V
com.android.providers.contacts.ContactsProvider2.openAssetFileLocal(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
com.android.providers.contacts.ContactsProvider2.openAssetFile(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader.loadInBackground()Lcom/android/contacts/list/CustomContactListFilterActivity$AccountSet;
com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader.loadInBackground()Ljava/lang/Object;
android.provider.Contacts$People.markAsContacted(Landroid/content/ContentResolver;J)V
android.provider.CallLog$Calls.addCall(Lcom/android/internal/telephony/CallerInfo;Landroid/content/Context;Ljava/lang/String;IIJI)Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Lcom/android/phone/CallLogAsync$AddCallArgs;)[Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Contacts$ContactMethods.addPostalLocation(Landroid/content/Context;JDD)V
com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag.getStreamItemPhotoUri()Landroid/net/Uri;
com.android.contacts.detail.ContactDetailUpdatesFragment$2.onClick(Landroid/view/View;)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.changeParser(Lcom/android/exchange/adapter/ContactsSyncAdapter$ContactOperations;)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.commandsParser()V
com.android.exchange.adapter.AbstractSyncParser.commandsParser()V
com.android.contacts.ContactSaveService.setSuperPrimary(Landroid/content/Intent;)V
com.android.contacts.group.GroupBrowseListAdapter.getGroupUriFromId(J)Landroid/net/Uri;
com.android.contacts.group.GroupBrowseListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.group.GroupBrowseListAdapter.getSelectedGroupPosition()I
com.android.contacts.group.GroupBrowseListAdapter.setCursor(Landroid/database/Cursor;)V
com.android.contacts.group.GroupBrowseListFragment.requestSelectionToScreen()V
com.android.contacts.group.GroupBrowseListFragment.bindGroupList()V
com.android.contacts.group.GroupBrowseListFragment.access$400(Lcom/android/contacts/group/GroupBrowseListFragment;)V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.vcard.VCardEntry$NameData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask.loadPhoto()V
com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask.loadPhoto()V
com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask.loadPhoto()V
com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.ContactsContract$Contacts.markAsContacted(Landroid/content/ContentResolver;J)V
com.android.internal.telephony.CallerInfo.getCallerInfo(Landroid/content/Context;Ljava/lang/String;)Lcom/android/internal/telephony/CallerInfo;
com.android.internal.telephony.CallerInfo.getCallerId(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
com.android.phone.PhoneUtils.getCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Connection;)Lcom/android/internal/telephony/CallerInfo;
com.android.phone.PhoneUtils.placeCall(Landroid/content/Context;Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/net/Uri;ZLandroid/net/Uri;)I
com.android.phone.CallCard.displayMainCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.PhoneUtils$4.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.CallNotifier.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OtaUtils.startNonInteractiveOtasp(Landroid/content/Context;)I
com.android.phone.CallCard.updateForegroundCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateNoCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateRingingCall(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.InCallScreenShowActivation.onCreate(Landroid/os/Bundle;)V
com.android.phone.CallCard.updateState(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.phone.InCallScreen.updateIncomingCallWidgetHint(II)V
com.android.phone.InCallScreen.updateScreen()V
com.android.phone.InCallScreen.onResume()V
com.android.phone.InCallScreen.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.showPausePromptDialog(Lcom/android/internal/telephony/Connection;Ljava/lang/String;)V
com.android.phone.InCallScreen.requestUpdateBluetoothIndication()V
com.android.phone.InCallScreen.requestCloseOtaFailureNotice(J)V
com.android.phone.InCallScreen.requestCloseSpcErrorNotice(J)V
com.android.phone.InCallScreen.requestRemoveProviderInfoWithDelay()V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.phone.InCallTouchUi.onGrabbedStateChange(Landroid/view/View;I)V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.syncWithPhoneState()Lcom/android/phone/InCallScreen$SyncWithPhoneStateStatus;
com.android.phone.InCallScreen.access$600(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.handleOtaCallEnd()V
com.android.phone.InCallScreen.access$500(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.handlePostOnDialChars(Landroid/os/AsyncResult;C)V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureNotice(I)V
com.android.phone.OtaUtils.otaShowSpcErrorNotice(I)V
com.android.phone.CallCard.updateCallStateWidgets(Lcom/android/internal/telephony/Call;)V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.updateManageConferencePanelIfNecessary()V
com.android.phone.InCallScreen.requestUpdateScreen()V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.PhoneApp.dismissCallScreen()V
com.android.phone.InCallScreen.access$1000(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;C)V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.OtaUtils.otaShowProgramFailure(I)V
com.android.phone.OtaUtils.onOtaProvisionStatusChanged(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowProperScreen()V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.InCallScreen.onBackPressed()V
com.android.phone.InCallScreen.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.updateAfterRadioTechnologyChange()V
com.android.phone.PhoneApp.updateInCallScreen()V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowSuccessFailure()V
com.android.phone.PhoneApp.handleOtaspEvent(Landroid/os/Message;)V
com.android.phone.InCallScreen.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.access$400(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp.initForNewRadioTechnology()V
com.android.phone.EmergencyCallHelper.cleanup()V
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.DTMFTwelveKeyDialer.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.phone.PhoneApp.access$1100(Lcom/android/phone/PhoneApp;)V
com.android.phone.DTMFTwelveKeyDialer.closeDialer(Z)V
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.DTMFTwelveKeyDialer.clearInCallScreenReference()V
com.android.phone.InCallScreen.closeDialpadInternal(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureDialog()V
com.android.phone.OtaUtils.otaShowProgramSuccessDialog()V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onDestroy()V
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.InCallScreen.onOpenCloseDialpad()V
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.contacts.activities.ConfirmAddDetailActivity.startDisambiguationQuery(Ljava/lang/String;)V
com.android.contacts.activities.ConfirmAddDetailActivity.access$800(Lcom/android/contacts/activities/ConfirmAddDetailActivity;Ljava/lang/String;)V
com.android.contacts.util.NameConverter.structuredNameToDisplayName(Landroid/content/Context;Landroid/content/ContentValues;)Ljava/lang/String;
android.provider.ContactsContract$Directory.notifyDirectoryChange(Landroid/content/ContentResolver;)V
com.android.exchange.adapter.ContactsSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.AbstractSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.AccountSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.EmailSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.providers.contacts.ContactsProvider2.insertSettings(Landroid/net/Uri;Landroid/content/ContentValues;)J
com.android.contacts.ContactSaveService.buildJoinContactDiff(Ljava/util/ArrayList;JJ)V
com.android.contacts.ContactSaveService.joinContacts(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.clearPrimary(Landroid/content/Intent;)V
android.widget.QuickContactBadge.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.contacts.widget.LayoutSuppressingQuickContactBadge.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.mms.ui.ConversationListItem.updateAvatarView()V
com.android.mms.ui.QuickContactDivot.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.quicksearchbox.ui.ContactBadge.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.mms.ui.ConversationListItem.bind(Landroid/content/Context;Lcom/android/mms/data/Conversation;)V
com.android.mms.ui.ConversationListItem.updateFromView()V
com.android.mms.ui.MessageListItem.updateAvatarView(Ljava/lang/String;Z)V
com.android.mms.ui.ConversationListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.ui.ConversationListItem.access$000(Lcom/android/mms/ui/ConversationListItem;)V
com.android.mms.ui.MessageListItem.bindCommonMessage()V
com.android.mms.ui.MessageListItem.bindNotifInd()V
com.android.mms.ui.ConversationListItem$1.run()V
com.android.mms.ui.MessageListItem.access$500(Lcom/android/mms/ui/MessageListItem;)V
com.android.mms.ui.MessageListItem.bind(Lcom/android/mms/ui/MessageItem;ZI)V
com.android.mms.ui.MessageListItem$2.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.MessageListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.ui.MessageItem$PduLoadedCallback.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.util.ItemLoadedCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Lcom/android/mms/util/ThumbnailManager$ImageLoaded;Ljava/lang/Throwable;)V
com.android.mms.util.PduLoaderManager.getPdu(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.PduLoaderManager$PduTask$1.run()V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager$ThumbnailTask$1.run()V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MessageItem.<init>(Landroid/content/Context;Ljava/lang/String;Landroid/database/Cursor;Lcom/android/mms/ui/MessageListAdapter$ColumnsMap;Ljava/util/regex/Pattern;)V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager.getVideoThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.MessageListAdapter.getCachedMessageItem(Ljava/lang/String;JLandroid/database/Cursor;)Lcom/android/mms/ui/MessageItem;
com.android.mms.model.ImageModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.model.VideoModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.ComposeMessageActivity$10.onCreateContextMenu(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V
com.android.mms.ui.ComposeMessageActivity.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.data.WorkingMessage.setAttachment(ILandroid/net/Uri;Z)I
com.android.mms.ui.MmsThumbnailPresenter.presentImageThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/ImageModel;)V
com.android.mms.ui.MmsThumbnailPresenter.presentVideoThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/VideoModel;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.ui.ComposeMessageActivity$30.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivity.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivity.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.presentFirstSlide(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/SlideModel;)V
com.android.mms.ui.MessageUtils$ResizeImageResultCallback.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.MessageUtils$3$1.run()V
com.android.mms.ui.ComposeMessageActivity$32.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity$33.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.Presenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.ComposeMessageActivity$34.run()V
com.android.mms.ui.ComposeMessageActivity$35.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.AttachmentEditor.update(Lcom/android/mms/data/WorkingMessage;)Z
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.createViewFromResource(ILandroid/view/View;I)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivity.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.onRestart()V
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivity.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onRestart()V
com.android.mms.ui.ComposeMessageActivity$20.run()V
com.android.mms.ui.ComposeMessageActivity$40.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivity.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.internal.telephony.CallerInfo.doSecondaryLookupIfNecessary(Landroid/content/Context;Ljava/lang/String;Lcom/android/internal/telephony/CallerInfo;)Lcom/android/internal/telephony/CallerInfo;
android.provider.Contacts$People.queryGroups(Landroid/content/ContentResolver;J)Landroid/database/Cursor;
com.android.common.contacts.DataUsageStatUpdater.updateWithAddress(Ljava/util/Collection;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithRfc822Address(Ljava/util/Collection;)Z
com.android.mail.providers.UIProvider.incrementRecipientsTimesContacted(Landroid/content/Context;Ljava/lang/String;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Long;
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.vcard.VCardEntry$NicknameData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.ContactSaveService.createGroup(Landroid/content/Intent;)V
com.android.providers.telephony.SmsProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.contacts.list.EmailAddressListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(IJ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(IJ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.JoinContactListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.mms.data.Contact$ContactsCache.getContactInfoForPhoneUris([Landroid/os/Parcelable;)Ljava/util/List;
com.android.mms.data.Contact.getByPhoneUris([Landroid/os/Parcelable;)Ljava/util/List;
com.android.mms.data.ContactList.blockingGetByUris([Landroid/os/Parcelable;)Lcom/android/mms/data/ContactList;
com.android.mms.ui.ComposeMessageActivity$29.run()V
com.android.contacts.list.LegacyPostalAddressListAdapter.getContactMethodUri(I)Landroid/net/Uri;
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(IJ)V
com.android.contacts.list.CustomContactListFilterActivity$GroupDelta.fromSettings(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lcom/android/contacts/list/CustomContactListFilterActivity$GroupDelta;
com.android.contacts.GroupMetaDataLoader.ensureIsGroupUri(Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.GroupMetaDataLoader.<init>(Landroid/content/Context;Landroid/net/Uri;)V
com.android.contacts.editor.ContactEditorFragment$5.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupDetailFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupEditorFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.editor.ContactEditorFragment$5.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupDetailFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupEditorFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.vcard.VCardEntry$AndroidCustomData.constructInsertOperation(Ljava/util/List;I)V
android.provider.ContactsContract$SyncState.get(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)[B
com.android.vcard.VCardEntry$WebsiteData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$PostalData.constructInsertOperation(Ljava/util/List;I)V
com.android.mms.data.Contact.getUri()Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.getContactUriForPhoneNumber(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getContactUriForPhoneNumber(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.addCallAndContactMenuItems(Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addCallAndContactMenuItems(Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$2700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$2700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.vcard.VCardEntry$NoteData.constructInsertOperation(Ljava/util/List;I)V
com.android.providers.contacts.LegacyApiSupport.updatePhotoByDataId(JLandroid/content/ContentValues;)I
com.android.phone.NotificationMgr$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations.delete(J)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.deleteParser(Lcom/android/exchange/adapter/ContactsSyncAdapter$ContactOperations;)V
com.android.contacts.ContactSaveService.deleteGroup(Landroid/content/Intent;)V
com.android.contacts.GroupMemberLoader.createUri()Landroid/net/Uri;
com.android.contacts.GroupMemberLoader.<init>(Landroid/content/Context;J[Ljava/lang/String;)V
com.android.contacts.GroupMemberLoader.constructLoaderForGroupDetailQuery(Landroid/content/Context;J)Lcom/android/contacts/GroupMemberLoader;
com.android.contacts.GroupMemberLoader.constructLoaderForGroupEditorQuery(Landroid/content/Context;J)Lcom/android/contacts/GroupMemberLoader;
com.android.contacts.group.GroupDetailFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupEditorFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupDetailFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupEditorFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.common.contacts.DataUsageStatUpdater.updateWithPhoneNumber(Ljava/util/Collection;)Z
com.android.mms.data.WorkingMessage.updateSendStats(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage.access$800(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage$2.run()V
com.android.mms.data.WorkingMessage$3.run()V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.commit()V
com.android.exchange.adapter.AbstractSyncParser.commit()V
com.android.vcard.VCardEntry$PhoneData.constructInsertOperation(Ljava/util/List;I)V
com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.contacts.list.ProfileAndContactsLoader.loadProfile()Landroid/database/MatrixCursor;
com.android.contacts.list.ProfileAndContactsLoader.loadInBackground()Landroid/database/Cursor;
com.android.contacts.list.ProfileAndContactsLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.list.LegacyContactListAdapter.getPersonUri(I)Landroid/net/Uri;
com.android.contacts.list.ContactPickerFragment.onItemClick(IJ)V
com.android.mms.data.Contact$ContactsCache.getContactInfoForPhoneNumber(Ljava/lang/String;)Lcom/android/mms/data/Contact;
com.android.mms.data.Contact$ContactsCache.getContactInfo(Lcom/android/mms/data/Contact;)Lcom/android/mms/data/Contact;
com.android.mms.data.Contact$ContactsCache.updateContact(Lcom/android/mms/data/Contact;)V
com.android.mms.data.Contact$ContactsCache.access$700(Lcom/android/mms/data/Contact$ContactsCache;Lcom/android/mms/data/Contact;)V
com.android.mms.data.Contact$ContactsCache$1.run()V
com.android.phone.BluetoothAtPhonebook.processCpbrCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook.access$1000(Lcom/android/phone/BluetoothAtPhonebook;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook.handleAccessPermissionResult(Landroid/content/Intent;)V
com.android.phone.BluetoothAtPhonebook$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
android.bluetooth.HeadsetBase$1.run()V
com.android.mms.data.Contact$ContactsCache.getContactInfoForSelf()Lcom/android/mms/data/Contact;
com.android.providers.contacts.LegacyApiSupport.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.queryLocal(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;JLandroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.LegacyApiSupport.getContactMethodType(Landroid/net/Uri;)Ljava/lang/String;
com.android.providers.contacts.ContactsProvider2.updateData(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.contacts.LegacyApiSupport.getType(Landroid/net/Uri;)Ljava/lang/String;
com.android.providers.contacts.ContactsProvider2.cleanupPhotoStore()V
com.android.providers.contacts.ContactsProvider2.getType(Landroid/net/Uri;)Ljava/lang/String;
com.android.providers.contacts.ContactsProvider2.performBackgroundTask(ILjava/lang/Object;)V
com.android.mms.ui.RecipientsAdapter.runQueryOnBackgroundThread(Ljava/lang/CharSequence;)Landroid/database/Cursor;
com.android.providers.contacts.LegacyApiSupport.updateContactMethods(JLandroid/content/ContentValues;)I
android.provider.Contacts$Settings.getSetting(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.activities.ConfirmAddDetailActivity.startExtraInfoQuery()V
com.android.contacts.activities.ConfirmAddDetailActivity.access$1200(Lcom/android/contacts/activities/ConfirmAddDetailActivity;)V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.queryPhotosForPreload()V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.preloadPhotosInBackground()V
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getContactNamesByNumber(Ljava/lang/String;)Ljava/util/ArrayList;
com.android.bluetooth.pbap.BluetoothPbapObexServer.createList(IILjava/lang/String;Ljava/lang/StringBuilder;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.sendVcardListingXml(ILjavax/obex/Operation;IILjava/lang/String;Ljava/lang/String;)I
com.android.contacts.list.DirectoryListLoader.loadInBackground()Landroid/database/Cursor;
com.android.contacts.list.DirectoryListLoader.loadInBackground()Ljava/lang/Object;
com.android.mms.data.Contact.getPhoneUri()Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.launchMultiplePhonePicker()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.launchMultiplePhonePicker()V
com.android.mms.ui.ComposeMessageActivity.onClick(Landroid/view/View;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onClick(Landroid/view/View;)V
com.android.mms.data.Contact$ContactsCache.getContactInfoForEmailAddress(Ljava/lang/String;)Lcom/android/mms/data/Contact;
com.android.providers.contacts.LegacyApiSupport.updateGroups(JLandroid/content/ContentValues;)I
com.android.contacts.ContactSaveService.removeMembersFromGroup(Landroid/content/ContentResolver;[JJ)V
com.android.contacts.ContactSaveService.updateGroup(Landroid/content/Intent;)V
com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMemberFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.voicedialer.VoiceContact.getVoiceContacts(Landroid/app/Activity;)Ljava/util/List;
com.android.voicedialer.CommandRecognizerEngine.setupGrammar()V
com.android.voicedialer.RecognizerEngine.setupGrammar()V
com.android.voicedialer.RecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.CommandRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.PhoneTypeChoiceRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.VoiceDialerActivity$3.run()V
com.android.voicedialer.VoiceDialerActivity$4.run()V
com.android.browser.AutofillHandler$LoadFromDb.run()V
com.android.browser.AutofillHandler.asyncLoadFromDb()V
com.android.browser.BrowserSettings.<init>(Landroid/content/Context;)V
com.android.browser.BrowserSettings.initialize(Landroid/content/Context;)V
com.android.browser.Browser.onCreate()V
com.android.vcard.VCardEntry$PhotoData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$ImData.constructInsertOperation(Ljava/util/List;I)V
android.provider.ContactsContract$SyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
android.provider.ContactsContract$SyncState.getWithUri(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)Landroid/util/Pair;
com.android.contacts.activities.ShowOrCreateActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.TransactionSafeActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.ContactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.DialtactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.AttachPhotoActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactSelectionActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupBrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.JoinContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.NonPhoneActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.CallContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.AccountFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.CustomContactListFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.test.FragmentTestActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.ImportVCardActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.SelectAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.ContactLoader.loadDirectoryMetaData(Lcom/android/contacts/ContactLoader$Result;)V
android.provider.ContactsContract$ProfileSyncState.getWithUri(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)Landroid/util/Pair;
com.android.vcard.VCardComposer.initWithRawContactsEntityUri(Landroid/net/Uri;)Z
com.android.inputmethod.latin.ContactsDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask.run()V
com.android.inputmethod.latin.WhitelistDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ContactsDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ExpandableDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ExpandableDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ExpandableDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ExpandableDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.UserDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.UserHistoryDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.WhitelistDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ContactsDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.Dictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.UserDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.WhitelistDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ExpandableDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.UserDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.UserHistoryDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.WhitelistDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ContactsDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.Dictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserHistoryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.WhitelistDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.loadDictionary()V
com.android.inputmethod.latin.UserDictionary.loadDictionary()V
com.android.inputmethod.latin.UserHistoryDictionary.loadDictionary()V
com.android.inputmethod.latin.WhitelistDictionary.loadDictionary()V
com.android.inputmethod.latin.AutoCorrection.isValidWord(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/CharSequence;Z)Z
com.android.inputmethod.latin.DictionaryCollection.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestions(Landroid/view/textservice/TextInfo;Ljava/lang/String;I)Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserHistoryDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.WhitelistDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ContactsDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.Dictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserHistoryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.WhitelistDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.DictionaryCollection.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.Suggest.getSuggestedWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/keyboard/ProximityInfo;I)Lcom/android/inputmethod/latin/SuggestedWords;
com.android.inputmethod.latin.ContactsDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserHistoryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;ILandroid/content/SharedPreferences;)V
com.android.inputmethod.latin.AutoCorrection.allowsToBeAutoCorrected(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/CharSequence;Z)Z
com.android.inputmethod.latin.LatinIME.pickSuggestionManuallyWhileInBatchEdit(ILjava/lang/CharSequence;IILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestions(Landroid/view/textservice/TextInfo;I)Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestionsMultiple([Landroid/view/textservice/TextInfo;IZ)[Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.DictionaryCollection.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.Suggest.getAllBigrams(Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/WordComposer;)V
com.android.inputmethod.latin.LatinIME.updateSuggestions()V
com.android.inputmethod.latin.ExpandableDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.<init>(Landroid/content/Context;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.UserHistoryDictionary.getInstance(Landroid/content/Context;Ljava/lang/String;ILandroid/content/SharedPreferences;)Lcom/android/inputmethod/latin/UserHistoryDictionary;
com.android.inputmethod.latin.AutoCorrection.hasAutoCorrectionForConsideredWord(Ljava/util/concurrent/ConcurrentHashMap;Lcom/android/inputmethod/latin/WordComposer;Ljava/util/ArrayList;Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.LatinIME.pickSuggestionManually(ILjava/lang/CharSequence;II)V
com.android.inputmethod.latin.Suggest.getBigramPredictions(Ljava/lang/CharSequence;)Lcom/android/inputmethod/latin/SuggestedWords;
com.android.inputmethod.latin.LatinIME.commitCurrentAutoCorrection(ILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.commitTyped(Landroid/view/inputmethod/InputConnection;I)V
com.android.inputmethod.latin.LatinIME.resetEntireInputState()V
com.android.inputmethod.latin.LatinIME$UIHandler.postUpdateSuggestions()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserHistoryDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.WhitelistDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.WhitelistDictionary.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.LatinIME.initSuggest()V
com.android.inputmethod.latin.AutoCorrection.computeAutoCorrectionWord(Ljava/util/concurrent/ConcurrentHashMap;Lcom/android/inputmethod/latin/WordComposer;Ljava/util/ArrayList;Ljava/lang/CharSequence;FLjava/lang/CharSequence;)Ljava/lang/CharSequence;
com.android.inputmethod.latin.suggestions.SuggestionsView$Listener.pickSuggestionManually(ILjava/lang/CharSequence;II)V
com.android.inputmethod.latin.LatinIME.updateBigramPredictions()V
com.android.inputmethod.latin.LatinIME.handleSeparator(IIII)Z
com.android.inputmethod.latin.LatinIME.handleClose()V
com.android.inputmethod.latin.LatinIME.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.inputmethod.latin.LatinIME.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.onUpdateSelection(IIIIII)V
com.android.inputmethod.latin.LatinIME.addWordToDictionary(Ljava/lang/String;)Z
com.android.inputmethod.latin.LatinIME.handleBackspaceWhileInBatchEdit(ILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.handleCharacterWhileInBatchEdit(IIIILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.onRefreshKeyboard()V
com.android.inputmethod.latin.LatinIME.onStartInputViewInternal(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.LatinIME.restartSuggestionsOnWordBeforeCursor(Landroid/view/inputmethod/InputConnection;Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.revertCommit(Landroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.switchToKeyboardView()V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.createDictAndProximity(Ljava/util/Locale;)Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.Suggest.initWhitelistAndAutocorrectAndPool(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.LatinIME.onCreate()V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.SuggestionsView.onClick(Landroid/view/View;)V
com.android.inputmethod.latin.LatinIME$UIHandler.postUpdateBigramPredictions()V
com.android.inputmethod.latin.LatinIME.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.launchSettingsClass(Ljava/lang/Class;)V
com.android.inputmethod.keyboard.KeyboardActionListener.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.suggestions.SuggestionsView$Listener.addWordToDictionary(Ljava/lang/String;)Z
com.android.inputmethod.latin.LatinIME.handleBackspace(I)V
com.android.inputmethod.latin.LatinIME.handleCharacter(IIII)V
com.android.inputmethod.latin.SubtypeSwitcher.updateSubtype(Landroid/view/inputmethod/InputMethodSubtype;)V
com.android.inputmethod.latin.LatinIME.access$300(Lcom/android/inputmethod/latin/LatinIME;Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.LatinIME.restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(Landroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.spellcheck.DictionaryPool.take()Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.Suggest.<init>(Landroid/content/Context;Ljava/io/File;JJLjava/util/Locale;)V
com.android.inputmethod.latin.Suggest.initAsynchronously(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onCustomRequest(I)Z
com.android.inputmethod.keyboard.KeyboardActionListener.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.launchDebugSettings()V
com.android.inputmethod.latin.LatinIME.launchSettings()V
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.callListenerOnCodeInput(Lcom/android/inputmethod/keyboard/Key;III)V
com.android.inputmethod.latin.suggestions.SuggestionsView.addToDictionary(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.onCurrentInputMethodSubtypeChanged(Landroid/view/inputmethod/InputMethodSubtype;)V
com.android.inputmethod.latin.SubtypeSwitcher.updateAllParameters()V
com.android.inputmethod.latin.SubtypeSwitcher.updateEnabledSubtypes()V
com.android.inputmethod.latin.LatinIME$UIHandler.onStartInputView(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.spellcheck.DictionaryPool.takeOrGetNull()Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.spellcheck.DictionaryPool.take()Ljava/lang/Object;
com.android.inputmethod.latin.Suggest.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.keyboard.KeyboardActionListener.onCustomRequest(I)Z
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onCustomRequest(I)Z
com.android.inputmethod.keyboard.LatinKeyboardView.invokeCodeInput(I)V
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.access$700(Lcom/android/inputmethod/latin/LatinIME;)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.detectAndSendKey(Lcom/android/inputmethod/keyboard/Key;II)V
com.android.inputmethod.latin.SubtypeSwitcher.init(Lcom/android/inputmethod/latin/LatinIME;)V
com.android.inputmethod.latin.SubtypeSwitcher.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.inputmethod.latin.SubtypeSwitcher.updateParametersOnStartInputView()V
com.android.inputmethod.latin.LatinIME.onStartInputView(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.keyboard.LatinKeyboardView.invokeCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onCodeInput(III)V
com.android.inputmethod.keyboard.LatinKeyboardView.onLongPress(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME$3.onClick(Landroid/content/DialogInterface;I)V
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.onRegisterKey(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.PointerTracker.onUpEventInternal()V
com.android.inputmethod.keyboard.LatinKeyboardView.openMoreKeysKeyboardIfRequired(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onCodeInput(III)V
com.android.inputmethod.keyboard.PointerTracker.startRepeatKey(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.PointerTracker.onMoveEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker.onPhantomUpEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker.onUpEvent(IIJ)V
com.android.inputmethod.keyboard.LatinKeyboardView.access$000(Lcom/android/inputmethod/keyboard/LatinKeyboardView;Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.PointerTracker.onDownEventInternal(IIJ)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.LatinKeyboardView.processMotionEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.PointerTracker.processMotionEvent(IIIJLcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointersExcept(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointersOlderThan(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startLongPressTimer(I)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startLongPressTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.PointerTracker.onDownEvent(IIJLcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler$ProcessMotionEvent.processMotionEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.latin.suggestions.SuggestionsView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointers(J)V
com.android.inputmethod.keyboard.PointerTracker.onCancelEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startLongPressTimer(I)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startLongPressTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.PointerTracker.onShowMoreKeysPanel(IILcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler.handleSuddenJumping(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardSwitcher.startLongPressTimer(I)V
com.android.inputmethod.keyboard.PointerTracker.startLongPressTimer(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.LatinKeyboardView.openMoreKeysPanel(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.LatinKeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.accessibility.AccessibilityEntityProvider.simulateKeyPress(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions.startLongPressTimer(I)V
com.android.inputmethod.accessibility.AccessibilityEntityProvider.performActionForKey(Lcom/android/inputmethod/keyboard/Key;ILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.dispatchHoverEvent(Landroid/view/MotionEvent;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.internal.KeyboardState.onPressShift()V
com.android.inputmethod.accessibility.AccessibilityEntityProvider.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onHoverKey(Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.LatinKeyboardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.internal.KeyboardState.onPressKey(IZI)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onTransitionKey(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardSwitcher.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.latin.LatinIME.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.keyboard.KeyboardActionListener.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onPressKey(I)V
com.android.inputmethod.keyboard.PointerTracker.callListenerOnPressAndCheckKeyboardLayoutChange(Lcom/android/inputmethod/keyboard/Key;)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onPressKey(I)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onPressKey(I)V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onPressKey(I)V
com.android.contacts.model.EntityModifier.parseStructuredNameExtra(Landroid/content/Context;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Landroid/os/Bundle;)V
com.android.contacts.model.EntityModifier.parseExtras(Landroid/content/Context;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity.setEntityDeltaList(Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment.setIntentExtras(Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity.access$300(Lcom/android/contacts/activities/ConfirmAddDetailActivity;Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.ContactEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForExistingContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.onPostExecute(Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.TransactionSafeActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.setData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.activities.GroupEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.AttachPhotoActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactSelectionActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupBrowserActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.JoinContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.NonPhoneActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ShowOrCreateActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.CallContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService$Listener.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.AccountFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.CustomContactListFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.test.FragmentTestActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.ImportVCardActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.SelectAccountActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.ContactSaveService.deliverCallbackOnUiThread(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService$2.run()V
android.provider.ContactsContract$Contacts.getLookupUri(JLjava/lang/String;)Landroid/net/Uri;
android.provider.ContactsContract$Contacts.getLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.provider.ContactsContract$Data.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.provider.ContactsContract$RawContacts.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.widget.QuickContactBadge$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.event.AttendeesView$PresenceQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.activities.ShowOrCreateActivity.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.lookupContactFromUri(Landroid/net/Uri;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.editor.AggregationSuggestionView.handleItemClickEvent()Z
com.android.contacts.group.GroupEditorFragment$Member.<init>(JLjava/lang/String;JLjava/lang/String;Ljava/lang/String;)V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactEntryListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.buildUri()Ljava/lang/String;
com.android.calendar.EventInfoFragment.showContactInfo(Lcom/android/calendar/CalendarEventModel$Attendee;Landroid/graphics/Rect;)V
com.android.contacts.ContactSaveService.createRawContact(Landroid/content/Intent;)V
com.android.contacts.quickcontact.QuickContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.NfcImportVCardActivity.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.vcard.NotificationImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.queryContactInfoForPhoneNumber(Ljava/lang/String;Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.editor.ContactEditorFragment$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.group.GroupEditorFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment$4.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.ContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.EmailAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyPostalAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.PostalAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.asList([Ljava/lang/String;)Ljava/util/ArrayList;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.addColumnValue(Ljava/util/ArrayList;Ljava/lang/String;)V
com.android.contacts.vcard.VCardImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.util.NotifyingAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.group.GroupEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.DefaultContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.EmailAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.JoinContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyPhoneNumberListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyPostalAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.PhoneNumberListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.PostalAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.ContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(IJ)V
com.android.contacts.list.DefaultContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport.addSearchSuggestionsBasedOnFilter(Landroid/database/MatrixCursor;Landroid/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.contacts.list.DefaultContactListAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.PhoneNumberListAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.ContactBrowseListFragment.checkSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.JoinContactListFragment.onItemClick(IJ)V
com.android.providers.contacts.GlobalSearchSupport.handleSearchShortcutRefresh(Landroid/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.GlobalSearchSupport.handleSearchSuggestionsQuery(Landroid/database/sqlite/SQLiteDatabase;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.common.widget.CompositeCursorAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.ContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.checkSelection()V
com.android.common.widget.CompositeCursorAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.refreshSelectedContactUri()V
com.android.contacts.list.DefaultContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.calendar.EmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.contacts.BaseEmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.widget.CompositeCursorAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.DefaultContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.EmailAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.JoinContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPostalAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneNumberListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PostalAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.IndexerListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.EmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.DefaultContactBrowseListFragment.refreshSelectedContactUri()V
com.android.calendar.EmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.contacts.BaseEmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.DefaultContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.EmailAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.JoinContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPostalAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneNumberListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PostalAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.IndexerListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.EmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.ContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.PhoneFavoriteMergedAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactEntryListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragmentForRequest()V
com.android.contacts.list.ContactPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.EmailAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.JoinContactListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PhoneNumberPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PostalAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.list.ContactEntryListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setSearchMode(Z)V
com.android.contacts.list.EmailAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.list.JoinContactListFragment.setSearchMode(Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setSearchMode(Z)V
com.android.contacts.list.PostalAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureFragments(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragment()V
com.android.contacts.activities.PeopleActivity.onContactListFilterChanged()V
com.android.contacts.list.OnContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.activities.ContactSelectionActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.list.ContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.EmailAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.JoinContactListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PostalAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.PeopleActivity.onAction(I)V
com.android.contacts.activities.PeopleActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onStart()V
com.android.contacts.list.ContactListFilterController$ContactListFilterListener.onContactListFilterChanged()V
com.android.contacts.list.ContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.JoinContactActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.DialtactsActivity$7.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter$Listener.onAction(I)V
com.android.contacts.activities.TransactionSafeActivity.onStart()V
com.android.contacts.ContactsActivity.onStart()V
com.android.contacts.list.ContactListFilterControllerImpl.notifyContactListFilterChanged()V
com.android.contacts.list.DefaultContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.activities.PeopleActivity.setQueryTextToFragment(Ljava/lang/String;)V
com.android.contacts.activities.ActionBarAdapter.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter.update()V
com.android.contacts.activities.AttachPhotoActivity.onStart()V
com.android.contacts.activities.ContactDetailActivity.onStart()V
com.android.contacts.activities.ContactEditorActivity.onStart()V
com.android.contacts.activities.ContactSelectionActivity.onStart()V
com.android.contacts.activities.DialtactsActivity.onStart()V
com.android.contacts.activities.GroupBrowserActivity.onStart()V
com.android.contacts.activities.GroupDetailActivity.onStart()V
com.android.contacts.activities.GroupEditorActivity.onStart()V
com.android.contacts.activities.JoinContactActivity.onStart()V
com.android.contacts.activities.NonPhoneActivity.onStart()V
com.android.contacts.activities.ShowOrCreateActivity.onStart()V
com.android.contacts.CallContactActivity.onStart()V
com.android.contacts.list.AccountFilterActivity.onStart()V
com.android.contacts.test.FragmentTestActivity.onStart()V
com.android.contacts.vcard.ImportVCardActivity.onStart()V
com.android.contacts.vcard.SelectAccountActivity.onStart()V
com.android.contacts.list.CustomContactListFilterActivity.onStart()V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;ZZ)V
com.android.contacts.activities.ActionBarAdapter.initialize(Landroid/os/Bundle;Lcom/android/contacts/list/ContactsRequest;)V
com.android.contacts.activities.ActionBarAdapter.setSearchMode(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.checkFilterValidity(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.activities.PeopleActivity.createViewsAndFragments(Landroid/os/Bundle;)V
com.android.contacts.activities.ActionBarAdapter.onClose()Z
com.android.contacts.activities.PeopleActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity.onBackPressed()V
com.android.contacts.list.ContactListFilterControllerImpl.<init>(Landroid/content/Context;)V
com.android.contacts.list.ContactListFilterController.checkFilterValidity(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.selectCustomFilter()V
com.android.contacts.list.ContactListFilterController.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.activities.PeopleActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.TransactionSafeActivity.onSearchRequested()Z
com.android.contacts.ContactsActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onFinishAction()V
com.android.contacts.activities.TransactionSafeActivity.onBackPressed()V
com.android.contacts.ContactsActivity.onBackPressed()V
com.android.contacts.list.ContactListFilterController.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.model.AccountTypeManagerImpl$1.run()V
com.android.contacts.list.ContactListFilterController.selectCustomFilter()V
com.android.contacts.util.AccountFilterUtil.handleAccountFilterResult(Lcom/android/contacts/list/ContactListFilterController;ILandroid/content/Intent;)V
com.android.contacts.activities.TransactionSafeActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactsActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.OnContactBrowserActionListener.onFinishAction()V
com.android.contacts.activities.DialtactsActivity.onBackPressed()V
com.android.contacts.activities.GroupEditorActivity.onBackPressed()V
com.android.contacts.ContactsApplication.getSystemService(Ljava/lang/String;)Ljava/lang/Object;
com.android.contacts.list.ContactListFilterControllerImpl.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.list.DefaultContactBrowseListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneFavoriteFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneNumberPickerFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.activities.ContactSelectionActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.GroupDetailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.JoinContactActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.AccountFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.CustomContactListFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.ContactBrowseListFragment.finish()V
com.android.contacts.list.ContactEntryListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.ContactEntryListFragment.finish()V
com.android.contacts.list.DefaultContactBrowseListFragment.finish()V
com.android.contacts.list.ContactEntryListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.finish()V
com.android.contacts.list.EmailAddressPickerFragment.finish()V
com.android.contacts.list.JoinContactListFragment.finish()V
com.android.contacts.list.PhoneNumberPickerFragment.finish()V
com.android.contacts.list.PostalAddressPickerFragment.finish()V
com.android.contacts.list.ContactBrowseListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.onClose()V
com.android.contacts.list.DefaultContactBrowseListFragment.onClose()V
com.android.contacts.list.EmailAddressPickerFragment.onClose()V
com.android.contacts.list.JoinContactListFragment.onClose()V
com.android.contacts.list.PhoneNumberPickerFragment.onClose()V
com.android.contacts.list.PostalAddressPickerFragment.onClose()V
com.android.contacts.ContactLoader.loadStreamItems(Lcom/android/contacts/ContactLoader$Result;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.hasContentChanged()Z
com.android.inputmethod.latin.ExpandableBinaryDictionary.hasContentChanged()Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.hasContentChanged()Z
com.android.inputmethod.latin.ExpandableBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ContactsBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.UserBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ContactsBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary$AsyncReloadDictionaryTask.run()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.UserBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ExpandableBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ContactsBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.UserBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.UserBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.<init>(Landroid/content/Context;ILjava/util/Locale;)V
com.android.inputmethod.latin.UserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.LatinIME.resetContactsDictionary(Lcom/android/inputmethod/latin/Dictionary;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.<init>(Landroid/content/Context;ILjava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.LatinIME.loadSettings()V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.startUsingContactsDictionaryLocked()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.onCreate()V
com.android.exchange.ContactsSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.contacts.model.EntityDeltaList.buildSplitContactDiff(Ljava/util/ArrayList;II[I)V
com.android.contacts.model.EntityDeltaList.buildSplitContactDiff(Ljava/util/ArrayList;[I)V
com.android.calendar.event.AttendeesView.addOneAttendee(Lcom/android/calendar/CalendarEventModel$Attendee;)V
com.android.calendar.event.AttendeesView.addAttendees(Ljava/lang/String;)V
com.android.calendar.event.AttendeesView.addAttendees(Ljava/util/ArrayList;)V
com.android.calendar.event.AttendeesView.addAttendees(Ljava/util/HashMap;)V
com.android.calendar.EventInfoFragment.updateAttendees(Landroid/view/View;)V
com.android.calendar.EventInfoFragment.initAttendeesCursor(Landroid/view/View;)V
com.android.calendar.EventInfoFragment.access$1900(Lcom/android/calendar/EventInfoFragment;Landroid/view/View;)V
com.android.calendar.EventInfoFragment$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.AsyncQueryService.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.internal.telephony.CallerInfoAsyncQuery.startQuery(ILandroid/content/Context;Ljava/lang/String;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/internal/telephony/CallerInfoAsyncQuery;
com.android.phone.PhoneUtils.startGetCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Connection;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/phone/PhoneUtils$CallerInfoToken;
com.android.phone.CallCard.displaySecondaryCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallNotifier.showMissedCallNotification(Lcom/android/internal/telephony/Connection;J)V
com.android.phone.CallNotifier.startIncomingCallQuery(Lcom/android/internal/telephony/Connection;)V
com.android.phone.ManageConferenceUtils.updateManageConferenceRow(ILcom/android/internal/telephony/Connection;Z)V
com.android.phone.PhoneUtils.startGetCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Call;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/phone/PhoneUtils$CallerInfoToken;
com.android.phone.CallCard.updateAlreadyDisconnected(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallNotifier.onCdmaCallWaitingReject()V
com.android.phone.CallNotifier.onNewRingingConnection(Landroid/os/AsyncResult;)V
com.android.phone.ManageConferenceUtils.updateManageConferencePanel(Ljava/util/List;)V
com.android.phone.NotificationMgr.updateInCallNotification(Z)V
com.android.phone.CallNotifier.sendCdmaCallWaitingReject()V
com.android.phone.InCallScreen.setInCallScreenMode(Lcom/android/phone/InCallUiState$InCallScreenMode;)V
com.android.phone.NotificationMgr.updateInCallNotification()V
com.android.phone.NotificationMgr.updateNotificationAndLaunchIncomingCallUi()V
com.android.phone.PhoneUtils.hangupRingingCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.InCallScreen.checkOtaspStateOnResume()Z
com.android.phone.InCallScreen.endInCallScreenSession(Z)V
com.android.phone.InCallScreen.internalResolveIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.resetInCallScreenMode()V
com.android.phone.InCallScreen.onPause()V
com.android.phone.NotificationMgr.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.NotificationMgr.updateNotificationsAtStartup()V
com.android.phone.CallNotifier.showIncomingCall()V
com.android.phone.BluetoothHandsfree$16.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.CallNotifier.onCustomRingtoneQueryTimeout(Ljava/lang/String;)V
com.android.phone.CallNotifier.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.InCallScreen.hangupRingingCall()V
com.android.phone.PhoneUtils.hangup(Lcom/android/internal/telephony/CallManager;)Z
com.android.phone.PhoneUtils.hangupRingingAndActive(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.InCallScreen.bailOutAfterErrorDialog()V
com.android.phone.InCallScreen.endInCallScreenSession()V
com.android.phone.InCallScreen.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.onNewIntent(Landroid/content/Intent;)V
com.android.phone.PhoneApp.clearInCallScreenMode()V
com.android.phone.NotificationMgr.init(Lcom/android/phone/PhoneApp;)Lcom/android/phone/NotificationMgr;
com.android.phone.CallNotifier.onCustomRingQueryComplete()V
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalHangup()V
com.android.phone.PhoneApp$NotificationBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneUtils.handleHeadsetHook(Lcom/android/internal/telephony/Phone;Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.access$2300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.addVoiceMailNumberPanel()V
com.android.phone.InCallScreen.delayedCleanupAfterDisconnect()V
com.android.phone.InCallScreen.dontAddVoiceMailNumber()V
com.android.phone.InCallScreen.onMMICancel()V
com.android.phone.InCallScreen.onMMIComplete(Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.otaShowHome()V
com.android.phone.CallNotifier.ignoreAllIncomingCalls(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.doReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.onCreate()V
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen$12.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$13.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.InCallScreen.access$1100(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1200(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$800(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$900(Lcom/android/phone/InCallScreen;Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.onClickOtaActivateNextButton()V
com.android.phone.OtaUtils.otaShowActivateScreen()V
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.InCallScreen$14.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$15.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.OtaUtils.onClickOtaTryAgainButton()V
com.android.phone.OtaUtils.onOtaCloseFailureNotice()V
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getPhonebookNameList(I)Ljava/util/ArrayList;
com.android.contacts.model.EntityDeltaList.beginKeepTogether()Landroid/content/ContentProviderOperation$Builder;
com.android.contacts.model.AccountWithDataSet.hasData(Landroid/content/Context;)Z
com.android.contacts.list.AccountFilterActivity.loadAccountFilters(Landroid/content/Context;)Ljava/util/List;
com.android.contacts.list.AccountFilterActivity.access$100(Landroid/content/Context;)Ljava/util/List;
com.android.contacts.list.AccountFilterActivity$FilterLoader.loadInBackground()Ljava/util/List;
com.android.contacts.list.AccountFilterActivity$FilterLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.calllog.CallLogAdapter.getBetterNumberFromContacts(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.calllog.CallLogFragment.callSelectedEntry()V
com.android.vcard.VCardEntry$AnniversaryData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.list.PostalAddressListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getPhoneUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(IJ)V
android.provider.ContactsContract$ProfileSyncState.get(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)[B
com.android.exchange.adapter.ContactsSyncAdapter.dirtyContactsWithinDirtyGroups()V
com.android.phone.BluetoothAtPhonebook.queryPhonebook(Ljava/lang/String;Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;)Z
com.android.phone.BluetoothAtPhonebook.getPhonebookResult(Ljava/lang/String;Z)Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;
com.android.phone.BluetoothAtPhonebook.access$500(Lcom/android/phone/BluetoothAtPhonebook;Ljava/lang/String;Z)Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;
com.android.phone.BluetoothAtPhonebook$2.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleReadCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.contacts.ContactsUtils.getThumbnailSize(Landroid/content/Context;)I
com.android.contacts.activities.AttachPhotoActivity.saveContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.PhotoEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.AttachPhotoActivity.access$000(Lcom/android/contacts/activities/AttachPhotoActivity;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.BaseRawContactEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.AttachPhotoActivity$1.onContactLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onRemovePictureChosen()V
com.android.contacts.editor.ContactEditorFragment.bindEditors()V
com.android.contacts.editor.ContactEditorFragment.setPhoto(JLandroid/graphics/Bitmap;Ljava/lang/String;)V
com.android.contacts.editor.RawContactEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.RawContactReadOnlyEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.AttachPhotoActivity$Listener.onContactLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onRemovePictureChosen()V
com.android.contacts.editor.ContactEditorFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.editor.ContactEditorFragment.access$2100(Lcom/android/contacts/editor/ContactEditorFragment;)V
com.android.contacts.editor.ContactEditorFragment.access$2300(Lcom/android/contacts/editor/ContactEditorFragment;JLandroid/graphics/Bitmap;Ljava/lang/String;)V
com.android.contacts.activities.AttachPhotoActivity$2.onLoadComplete(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onRemovePictureChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onRemovePictureChosen()V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onUseAsPrimaryChosen()V
com.android.contacts.activities.AttachPhotoActivity$2.onLoadComplete(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.editor.PhotoActionPopup$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onUseAsPrimaryChosen()V
com.android.contacts.detail.PhotoSelectionHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onUseAsPrimaryChosen()V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.doInBackground([Landroid/content/Intent;)Lcom/android/contacts/model/EntityDeltaList;
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.interactions.ImportExportDialogFragment.doShareVisibleContacts()V
com.android.contacts.interactions.ImportExportDialogFragment.access$100(Lcom/android/contacts/interactions/ImportExportDialogFragment;)V
com.android.contacts.interactions.ImportExportDialogFragment$2.onClick(Landroid/content/DialogInterface;I)V
com.android.inputmethod.latin.ContactsBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.ContactsBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.UserBinaryDictionary.generateBinaryDictionary()V
android.widget.QuickContactBadge.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.calendar.event.AttendeesView.updateAttendeeView(Lcom/android/calendar/event/EditEventHelper$AttendeeItem;)Landroid/view/View;
com.android.contacts.widget.LayoutSuppressingQuickContactBadge.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.mms.ui.QuickContactDivot.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.quicksearchbox.ui.ContactBadge.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.calendar.event.AttendeesView.access$100(Lcom/android/calendar/event/AttendeesView;Lcom/android/calendar/event/EditEventHelper$AttendeeItem;)Landroid/view/View;
com.android.calendar.event.AttendeesView.constructAttendeeView(Lcom/android/calendar/event/EditEventHelper$AttendeeItem;)Landroid/view/View;
com.android.calendar.event.AttendeesView.onClick(Landroid/view/View;)V
com.android.mms.ui.QuickContactDivot.assignContactFromEmail(Ljava/lang/String;)V
com.android.calendar.event.AttendeesView$PresenceQueryHandler$1.run()V
com.android.mms.ui.Divot.assignContactFromEmail(Ljava/lang/String;)V
com.android.contacts.list.ProviderStatusWatcher$2.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ProviderStatusWatcher$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactSaveService.addMembersToGroup(Landroid/content/ContentResolver;[JJ)V
com.android.contacts.model.AccountTypeWithDataSet.hasData(Landroid/content/Context;)Z
com.android.contacts.model.AccountTypeManagerImpl.findUsableInvitableAccountTypes(Landroid/content/Context;)Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl.access$400(Lcom/android/contacts/model/AccountTypeManagerImpl;Landroid/content/Context;)Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl.getUsableInvitableAccountTypes()Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl$FindInvitablesTask.doInBackground([Ljava/lang/Void;)Ljava/util/Map;
com.android.contacts.model.AccountTypeManager.getUsableInvitableAccountTypes()Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl$FindInvitablesTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactLoader.loadInvitableAccountTypes(Lcom/android/contacts/ContactLoader$Result;)V
com.android.mms.ui.ComposeMessageActivity.getContactUriForEmail(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getContactUriForEmail(Ljava/lang/String;)Landroid/net/Uri;
com.android.contacts.detail.ContactLoaderFragment.getPreAuthorizedUri(Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.detail.ContactLoaderFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.detail.PhotoSelectionHandler.getPhotoPickSize()I
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.getPhotoPickSize()I
com.android.contacts.detail.PhotoSelectionHandler.<init>(Landroid/content/Context;Landroid/view/View;IZLcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.getPhotoPickSize()I
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.<init>(Landroid/content/Context;Landroid/view/View;IZLcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.<init>(Lcom/android/contacts/activities/PhotoSelectionActivity;Landroid/content/Context;Landroid/view/View;ILcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.<init>(Landroid/content/Context;Landroid/view/View;IZLcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.<init>(Lcom/android/contacts/editor/ContactEditorFragment;Landroid/content/Context;Lcom/android/contacts/editor/BaseRawContactEditorView;ILcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.<init>(Lcom/android/contacts/activities/PhotoSelectionActivity;Landroid/content/Context;Landroid/view/View;ILcom/android/contacts/model/EntityDeltaList;Lcom/android/contacts/activities/PhotoSelectionActivity$1;)V
com.android.contacts.editor.ContactEditorFragment.bindPhotoHandler(Lcom/android/contacts/editor/BaseRawContactEditorView;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.PhotoSelectionActivity.attachPhotoHandler()V
com.android.contacts.activities.PhotoSelectionActivity.displayPhoto()V
com.android.contacts.activities.PhotoSelectionActivity.access$000(Lcom/android/contacts/activities/PhotoSelectionActivity;)V
com.android.contacts.activities.PhotoSelectionActivity$2.run()V
com.android.providers.contacts.LegacyApiSupport.updatePhones(JLandroid/content/ContentValues;)I
android.provider.ContactsContract$ProfileSyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
com.android.vcard.VCardEntry$SipData.constructInsertOperation(Ljava/util/List;I)V
com.android.providers.contacts.LegacyApiSupport.updateLegacyPhotoData(JJLandroid/content/ContentValues;)V
com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.common.contacts.DataUsageStatUpdater.update(Ljava/util/Collection;Ljava/util/Collection;Ljava/lang/String;)Z
com.android.vcard.VCardEntry$OrganizationData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.queryForContactId(Landroid/content/ContentResolver;J)J
com.android.contacts.calllog.DefaultVoicemailNotifier$DefaultNameLookupQuery.query(Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.calllog.DefaultVoicemailNotifier$NameLookupQuery.query(Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.calllog.DefaultVoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.calllog.CallLogNotificationsService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.calllog.VoicemailNotifier.updateNotification(Landroid/net/Uri;)V
android.provider.Contacts$Settings.setSetting(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.list.PhoneNumberListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneFavoriteFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.loadThumbnails(Z)V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.loadPhotosInBackground()V
com.android.providers.contacts.ContactsProvider2.query(Landroid/database/sqlite/SQLiteDatabase;Landroid/database/sqlite/SQLiteQueryBuilder;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.queryWithContactIdAndLookupKey(Landroid/database/sqlite/SQLiteQueryBuilder;Landroid/database/sqlite/SQLiteDatabase;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.vcard.VCardEntry$BirthdayData.constructInsertOperation(Ljava/util/List;I)V
com.android.inputmethod.latin.ContactsBinaryDictionary.getContactCount()I
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getContactCount()I
com.android.phone.ContactsAsyncHelper$ImageTracker.getPhotoUri()Landroid/net/Uri;
com.android.phone.CallCard.updatePhotoForCallState(Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
android.provider.ContactsContract$ProfileSyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.providers.contacts.LegacyApiSupport.updateSettings(Landroid/content/ContentValues;)I
com.android.providers.contacts.ContactsProvider2$PipeMonitor.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Contacts$People.tryGetMyContactsGroupId(Landroid/content/ContentResolver;)J
android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder.build()Landroid/net/Uri;
com.android.contacts.editor.AggregationSuggestionEngine.buildAggregationSuggestionUri(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)Landroid/net/Uri;
com.android.contacts.editor.AggregationSuggestionEngine.onNameChange(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.ContactEditorFragment.acquireAggregationSuggestions(Landroid/content/Context;Lcom/android/contacts/editor/RawContactEditorView;)V
com.android.contacts.editor.ContactEditorFragment.access$300(Lcom/android/contacts/editor/ContactEditorFragment;Landroid/content/Context;Lcom/android/contacts/editor/RawContactEditorView;)V
com.android.contacts.editor.ContactEditorFragment$2.onRequest(I)V
com.android.contacts.editor.Editor$EditorListener.onRequest(I)V
com.android.contacts.editor.LabeledEditorView.notifyEditorListener()V
com.android.contacts.editor.PhotoEditorView$1.onClick(Landroid/view/View;)V
com.android.contacts.editor.EventFieldEditorView.notifyEditorListener()V
com.android.contacts.editor.PhoneticNameEditorView.notifyEditorListener()V
com.android.contacts.editor.StructuredNameEditorView.notifyEditorListener()V
com.android.contacts.editor.TextFieldsEditorView.notifyEditorListener()V
Permission:android.permission.RECEIVE_BOOT_COMPLETED

208 Callers:

com.android.server.accessibility.AccessibilityManagerService.registerPackageChangeAndBootCompletedBroadcastReceiver()V
com.android.server.accessibility.AccessibilityManagerService.<init>(Landroid/content/Context;)V
com.android.server.ServerThread.run()V
com.android.server.WiredAccessoryObserver.<init>(Landroid/content/Context;)V
com.android.server.AppWidgetService.systemReady(Z)V
com.android.server.ServerThread$1.run()V
android.server.search.SearchManagerService.<init>(Landroid/content/Context;)V
com.android.server.am.ActivityManagerService.finishBooting()V
com.android.server.am.ActivityManagerService.ensureBootCompleted()V
com.android.server.am.ActivityStack.activityIdleInternal(Landroid/os/IBinder;ZLandroid/content/res/Configuration;)Lcom/android/server/am/ActivityRecord;
com.android.server.am.ActivityManagerService.appNotResponding(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ActivityRecord;Lcom/android/server/am/ActivityRecord;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.systemReady(Ljava/lang/Runnable;)V
com.android.server.am.ActivityManagerService.crashApplication(Lcom/android/server/am/ProcessRecord;Landroid/app/ApplicationErrorReport$CrashInfo;)V
com.android.server.am.ActivityStack.completeResumeLocked(Lcom/android/server/am/ActivityRecord;)V
com.android.server.am.ActivityStack.scheduleIdleLocked()V
com.android.server.am.ActivityRecord.windowsVisible()V
com.android.server.am.ActivityManagerService.serviceTimeout(Lcom/android/server/am/ProcessRecord;)V
com.android.server.am.ActivityRecord.keyDispatchingTimedOut()Z
com.android.server.am.BroadcastQueue$AppNotResponding.run()V
com.android.server.am.ActivityManagerService$9$1.run()V
com.android.server.am.ActivityManagerService.startRunning(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.handleApplicationWtf(Landroid/os/IBinder;Ljava/lang/String;Landroid/app/ApplicationErrorReport$CrashInfo;)Z
com.android.server.am.ActivityManagerService.handleApplicationCrash(Landroid/os/IBinder;Landroid/app/ApplicationErrorReport$CrashInfo;)V
com.android.server.am.ActivityManagerService.forceStopPackageLocked(Ljava/lang/String;IZZZZI)Z
com.android.server.am.ActivityStack.checkReadyForSleepLocked()V
com.android.server.am.ActivityStack.completePauseLocked()V
com.android.server.am.ActivityRecord$Token.windowsVisible()V
com.android.server.am.ActivityManagerService.bumpServiceExecutingLocked(Lcom/android/server/am/ServiceRecord;Ljava/lang/String;)V
com.android.server.am.ActivityRecord$Token.keyDispatchingTimedOut()Z
android.app.ActivityManagerNative.startRunning(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.main(I)Landroid/content/Context;
android.app.ActivityManagerNative.handleApplicationWtf(Landroid/os/IBinder;Ljava/lang/String;Landroid/app/ApplicationErrorReport$CrashInfo;)Z
android.app.ActivityManagerNative.handleApplicationCrash(Landroid/os/IBinder;Landroid/app/ApplicationErrorReport$CrashInfo;)V
com.android.server.am.ActivityManagerService.access$300(Lcom/android/server/am/ActivityManagerService;Ljava/lang/String;IZZZZI)Z
com.android.server.am.ActivityManagerService.broadcastIntentLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;ZZIII)I
com.android.server.am.ActivityManagerService.finishInstrumentationLocked(Lcom/android/server/am/ProcessRecord;ILandroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.forceStopPackageLocked(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.onUserRemoved(Landroid/content/Intent;)V
com.android.server.am.ActivityStack.activitySleptLocked(Lcom/android/server/am/ActivityRecord;)V
com.android.server.am.ActivityStack.stopIfSleepingLocked()V
com.android.server.am.ActivityStack.activityPaused(Landroid/os/IBinder;Z)V
android.view.IApplicationToken$Stub$Proxy.windowsVisible()V
android.view.IApplicationToken$Stub.windowsVisible()V
com.android.server.am.ActivityManagerService.requestServiceBindingLocked(Lcom/android/server/am/ServiceRecord;Lcom/android/server/am/IntentBindRecord;Z)Z
com.android.server.am.ActivityManagerService.bringDownServiceLocked(Lcom/android/server/am/ServiceRecord;Z)V
com.android.server.am.ActivityManagerService.realStartServiceLocked(Lcom/android/server/am/ServiceRecord;Lcom/android/server/am/ProcessRecord;)V
com.android.server.am.ActivityManagerService.removeConnectionLocked(Lcom/android/server/am/ConnectionRecord;Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ActivityRecord;)V
com.android.server.am.ActivityManagerService.sendServiceArgsLocked(Lcom/android/server/am/ServiceRecord;Z)V
android.view.IApplicationToken$Stub$Proxy.keyDispatchingTimedOut()Z
android.view.IApplicationToken$Stub.keyDispatchingTimedOut()Z
android.app.ActivityManagerNative.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IActivityManager.startRunning(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
android.app.IActivityManager.handleApplicationWtf(Landroid/os/IBinder;Ljava/lang/String;Landroid/app/ApplicationErrorReport$CrashInfo;)Z
android.app.IActivityManager.handleApplicationCrash(Landroid/os/IBinder;Landroid/app/ApplicationErrorReport$CrashInfo;)V
com.android.server.am.ActivityManagerService$6.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.am.ActivityManagerService.killApplicationWithUid(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.updateConfigurationLocked(Landroid/content/res/Configuration;Lcom/android/server/am/ActivityRecord;ZZ)Z
com.android.server.am.ActivityManagerService.access$100(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;ZZIII)I
com.android.server.am.ActivityManagerService.closeSystemDialogsLocked(ILjava/lang/String;)V
com.android.server.am.ActivityManagerService.handleAppDiedLocked(Lcom/android/server/am/ProcessRecord;ZZ)V
com.android.server.am.ActivityManagerService.access$700(Lcom/android/server/am/ActivityManagerService;Landroid/content/Intent;)V
com.android.server.am.ActivityManagerService.shutdown(I)Z
com.android.server.am.ActivityManagerService.goingToSleep()V
com.android.server.am.ActivityStack.startPausingLocked(ZZ)V
android.view.IApplicationToken$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IApplicationToken.windowsVisible()V
com.android.server.am.ActivityManagerService.requestServiceBindingsLocked(Lcom/android/server/am/ServiceRecord;)V
com.android.server.am.ActivityManagerService.bringUpServiceLocked(Lcom/android/server/am/ServiceRecord;IZ)Z
com.android.server.am.ActivityManagerService.killServicesLocked(Lcom/android/server/am/ProcessRecord;Z)V
com.android.server.am.ActivityManagerService.processStartTimedOutLocked(Lcom/android/server/am/ProcessRecord;)V
com.android.server.am.ActivityManagerService.stopServiceLocked(Lcom/android/server/am/ServiceRecord;)V
com.android.server.am.ActivityManagerService.attachApplicationLocked(Landroid/app/IApplicationThread;I)Z
com.android.server.am.ActivityManagerService.cleanUpRemovedTaskLocked(Lcom/android/server/am/TaskRecord;I)V
android.view.IApplicationToken.keyDispatchingTimedOut()Z
com.android.server.am.ActivityManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.os.RuntimeInit.wtf(Ljava/lang/String;Ljava/lang/Throwable;)V
com.android.internal.os.RuntimeInit$UncaughtHandler.uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;)V
android.app.ActivityManagerNative.killApplicationWithUid(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.retrieveSettings()V
com.android.server.am.ActivityManagerService.removeProcessLocked(Lcom/android/server/am/ProcessRecord;ZZLjava/lang/String;)Z
com.android.server.am.ActivityManagerService.startProcessLocked(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;ZILjava/lang/String;Landroid/content/ComponentName;ZZ)Lcom/android/server/am/ProcessRecord;
com.android.server.am.ActivityManagerService.appDiedLocked(Lcom/android/server/am/ProcessRecord;ILandroid/app/IApplicationThread;)V
com.android.server.am.ActivityManagerService$7.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.app.ActivityManagerNative.shutdown(I)Z
android.app.ActivityManagerNative.goingToSleep()V
com.android.server.am.ActivityRecord$Token.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.am.ActivityManagerService.startServiceLocked(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/ComponentName;
com.android.server.am.ActivityManagerService.performServiceRestartLocked(Lcom/android/server/am/ServiceRecord;)V
com.android.server.am.ActivityManagerService.cleanUpApplicationRecordLocked(Lcom/android/server/am/ProcessRecord;ZZI)V
com.android.server.am.ActivityManagerService.access$200(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;)V
com.android.server.wm.InputMonitor.notifyANR(Lcom/android/server/input/InputApplicationHandle;Lcom/android/server/input/InputWindowHandle;)J
android.util.Log$1.onTerribleFailure(Ljava/lang/String;Landroid/util/Log$TerribleFailure;)V
android.app.IActivityManager.killApplicationWithUid(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.handleAppCrashLocked(Lcom/android/server/am/ProcessRecord;)Z
com.android.server.am.ActivityManagerService.killPackageProcessesLocked(Ljava/lang/String;IIZZZZLjava/lang/String;)Z
com.android.server.am.ActivityManagerService.bindBackupAgent(Landroid/content/pm/ApplicationInfo;I)Z
com.android.server.am.BroadcastQueue.processNextBroadcast(Z)V
com.android.server.am.ActivityManagerService$AppDeathRecipient.binderDied()V
android.app.IActivityManager.shutdown(I)Z
android.app.IActivityManager.goingToSleep()V
com.android.server.am.ActivityManagerService$ServiceRestarter.run()V
com.android.server.am.ActivityManagerService.trimApplications()V
com.android.server.am.ActivityManagerService.startProcessLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.input.InputManagerService$Callbacks.notifyANR(Lcom/android/server/input/InputApplicationHandle;Lcom/android/server/input/InputWindowHandle;)J
com.android.server.pm.PackageManagerService.killApplication(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.makeAppCrashingLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.killAppAtUsersRequest(Lcom/android/server/am/ProcessRecord;Landroid/app/Dialog;)V
android.app.ActivityManagerNative.bindBackupAgent(Landroid/content/pm/ApplicationInfo;I)Z
com.android.server.am.BroadcastQueue.scheduleBroadcastsLocked()V
com.android.server.pm.ShutdownThread.run()V
com.android.server.PowerManagerService$4.run()V
com.android.server.am.ActivityManagerService.setProcessLimit(I)V
com.android.server.am.ActivityManagerService.addAppLocked(Landroid/content/pm/ApplicationInfo;Z)Lcom/android/server/am/ProcessRecord;
com.android.server.input.InputManagerService.notifyANR(Lcom/android/server/input/InputApplicationHandle;Lcom/android/server/input/InputWindowHandle;)J
com.android.server.pm.PackageManagerService.scanPackageLI(Landroid/content/pm/PackageParser$Package;IIJ)Landroid/content/pm/PackageParser$Package;
com.android.server.pm.PackageManagerService.deletePackageLI(Ljava/lang/String;ZILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;Z)Z
com.android.server.pm.PackageManagerService.replaceSystemPackageLI(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;IILjava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
android.app.IActivityManager.bindBackupAgent(Landroid/content/pm/ApplicationInfo;I)Z
com.android.server.am.ActivityManagerService.registerReceiver(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;)Landroid/content/Intent;
com.android.server.am.BroadcastQueue.sendPendingBroadcastsLocked(Lcom/android/server/am/ProcessRecord;)Z
com.android.server.am.BroadcastQueue.broadcastTimeoutLocked(Z)V
com.android.server.am.BroadcastQueue.skipCurrentReceiverLocked(Lcom/android/server/am/ProcessRecord;)V
com.android.server.am.BroadcastQueue.skipPendingBroadcastLocked(I)V
com.android.server.pm.ShutdownThread.beginShutdownSequence(Landroid/content/Context;)V
android.app.ActivityManagerNative.setProcessLimit(I)V
com.android.server.pm.PackageManagerService.scanPackageLI(Ljava/io/File;IIJ)Landroid/content/pm/PackageParser$Package;
com.android.server.pm.PackageManagerService.installNewPackageLI(Landroid/content/pm/PackageParser$Package;IILjava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.pm.PackageManagerService.replaceNonSystemPackageLI(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;IILjava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.pm.PackageManagerService.deletePackageX(Ljava/lang/String;ZZI)I
com.android.server.pm.PackageManagerService.unloadMediaPackages(Ljava/util/HashMap;[IZ)V
com.android.server.pm.PackageManagerService.replacePackageLI(Landroid/content/pm/PackageParser$Package;IILjava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.BackupManagerService.bindToAgentSynchronous(Landroid/content/pm/ApplicationInfo;I)Landroid/app/IBackupAgent;
android.app.ActivityManagerNative.registerReceiver(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;)Landroid/content/Intent;
com.android.server.am.ActivityManagerService.sendPendingBroadcastsLocked(Lcom/android/server/am/ProcessRecord;)Z
com.android.server.am.BroadcastQueue.setBroadcastTimeoutLocked(J)V
com.android.server.am.ActivityManagerService.skipCurrentReceiverLocked(Lcom/android/server/am/ProcessRecord;)V
com.android.server.am.ActivityManagerService.skipPendingBroadcastLocked(I)V
com.android.server.pm.ShutdownThread.access$000(Landroid/content/Context;)V
com.android.server.pm.ShutdownThread.shutdownInner(Landroid/content/Context;Z)V
android.app.IActivityManager.setProcessLimit(I)V
com.android.server.pm.PackageManagerService.access$1400(Lcom/android/server/pm/PackageManagerService;Ljava/io/File;IIJ)Landroid/content/pm/PackageParser$Package;
com.android.server.pm.PackageManagerService.deleteSystemPackageLI(Landroid/content/pm/PackageParser$Package;ILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;Z)Z
com.android.server.pm.PackageManagerService.loadMediaPackages(Ljava/util/HashMap;[ILjava/util/HashSet;)V
com.android.server.pm.PackageManagerService.scanDirLI(Ljava/io/File;IIJ)V
com.android.server.pm.PackageManagerService.installPackageLI(Lcom/android/server/pm/PackageManagerService$InstallArgs;ZLcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.pm.PackageManagerService.access$3300(Lcom/android/server/pm/PackageManagerService;Ljava/lang/String;ZZI)I
com.android.server.pm.PackageManagerService.updateExternalMediaStatusInner(ZZ)V
com.android.server.BackupManagerService$PerformBackupTask.invokeNextAgent()V
com.android.server.BackupManagerService$PerformFullBackupTask.backupOnePackage(Landroid/content/pm/PackageInfo;Ljava/io/OutputStream;)V
com.android.server.BackupManagerService$PerformFullRestoreTask.restoreOneFile(Ljava/io/InputStream;[B)Z
com.android.server.BackupManagerService$PerformRestoreTask.restoreNextAgent()V
android.app.IActivityManager.registerReceiver(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;)Landroid/content/Intent;
com.android.server.am.ActivityManagerService.startAppProblemLocked(Lcom/android/server/am/ProcessRecord;)V
com.android.server.pm.ShutdownThread$1.onClick(Landroid/content/DialogInterface;I)V
com.android.server.pm.ShutdownThread.reboot(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.server.pm.ShutdownThread.rebootSafeMode(Landroid/content/Context;Z)V
com.android.server.pm.ShutdownThread.shutdown(Landroid/content/Context;Z)V
com.android.settings.DevelopmentSettings.writeAppProcessLimitOptions(Ljava/lang/Object;)V
com.android.server.pm.PackageManagerService$AppDirObserver.onEvent(ILjava/lang/String;)V
com.android.server.pm.PackageManagerService.<init>(Landroid/content/Context;ZZ)V
com.android.server.pm.PackageManagerService.access$1600(Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/PackageManagerService$InstallArgs;ZLcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.pm.PackageManagerService$7.run()V
com.android.server.pm.PackageManagerService.access$3800(Lcom/android/server/pm/PackageManagerService;ZZ)V
com.android.server.pm.PackageManagerService.scanAvailableAsecs()V
com.android.server.BackupManagerService$PerformBackupTask.execute()V
com.android.server.BackupManagerService$PerformFullBackupTask.run()V
com.android.server.BackupManagerService$PerformFullRestoreTask.run()V
com.android.server.BackupManagerService$PerformRestoreTask.execute()V
com.android.commands.monkey.MonkeyNetworkMonitor.register(Landroid/app/IActivityManager;)V
com.android.server.am.ActivityManagerService.makeAppNotRespondingLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.PowerManagerService$10.run()V
com.android.server.ShutdownActivity$1.run()V
com.android.server.wm.WindowManagerService.rebootSafeMode()V
com.android.server.wm.WindowManagerService.shutdown()V
com.android.settings.DevelopmentSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.DevelopmentSettings.resetDangerousOptions()V
com.android.server.pm.PackageManagerService.main(Landroid/content/Context;ZZ)Landroid/content/pm/IPackageManager;
com.android.server.pm.PackageManagerService$5.run()V
com.android.server.pm.PackageManagerService$10.run()V
com.android.server.MountService$2.run()V
com.android.server.BackupManagerService$BackupRestoreTask.execute()V
com.android.commands.monkey.Monkey.getSystemInterfaces()Z
android.view.WindowManagerPolicy$WindowManagerFuncs.rebootSafeMode()V
android.view.WindowManagerPolicy$WindowManagerFuncs.shutdown()V
com.android.settings.DevelopmentSettings.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.server.MountService.onDaemonConnected()V
com.android.commands.monkey.Monkey.run([Ljava/lang/String;)I
com.android.internal.policy.impl.GlobalActions$2.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$2.onPress()V
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
com.android.server.INativeDaemonConnectorCallbacks.onDaemonConnected()V
com.android.commands.monkey.Monkey.main([Ljava/lang/String;)V
com.android.internal.policy.impl.GlobalActions$SinglePressAction.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$SinglePressAction.onPress()V
com.android.server.NativeDaemonConnector.listenToSocket()V
com.android.internal.policy.impl.GlobalActions$3.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$Action.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$Action.onPress()V
com.android.server.NativeDaemonConnector.run()V
com.android.internal.policy.impl.GlobalActions$4.onItemLongClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)Z
com.android.internal.policy.impl.GlobalActions.onClick(Landroid/content/DialogInterface;I)V
android.content.SyncManager.<init>(Landroid/content/Context;Z)V
android.content.ContentService.getSyncManager()Landroid/content/SyncManager;
android.content.ContentService.<init>(Landroid/content/Context;Z)V
android.content.ContentService.main(Landroid/content/Context;Z)Landroid/content/IContentService;
com.android.server.usb.UsbDeviceManager$UsbHandler.<init>(Lcom/android/server/usb/UsbDeviceManager;Landroid/os/Looper;)V
com.android.server.usb.UsbDeviceManager.<init>(Landroid/content/Context;Lcom/android/server/usb/UsbSettingsManager;)V
com.android.server.usb.UsbService.<init>(Landroid/content/Context;)V
Permission:android.permission.MOUNT_FORMAT_FILESYSTEMS

10 Callers:

com.android.server.MountService.formatVolume(Ljava/lang/String;)I
android.os.storage.IMountService$Stub$Proxy.formatVolume(Ljava/lang/String;)I
android.os.storage.IMountService$Stub.formatVolume(Ljava/lang/String;)I
android.os.storage.IMountService.formatVolume(Ljava/lang/String;)I
android.os.storage.IMountService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.os.storage.ExternalStorageFormatter$2.run()V
com.android.server.MountService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()V
com.android.internal.os.storage.ExternalStorageFormatter$1.onStorageStateChanged(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Landroid/content/Intent;II)I
Permission:android.permission.KILL_BACKGROUND_PROCESSES

16 Callers:

com.android.server.am.ActivityManagerService.killBackgroundProcesses(Ljava/lang/String;)V
android.app.ActivityManagerNative.killBackgroundProcesses(Ljava/lang/String;)V
android.app.ActivityManagerNative.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IActivityManager.killBackgroundProcesses(Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ActivityManager.killBackgroundProcesses(Ljava/lang/String;)V
com.android.commands.am.Am.runKill()V
com.android.development.PackageSummary$1.onClick(Landroid/view/View;)V
android.app.ActivityManager.restartPackage(Ljava/lang/String;)V
com.android.settings.applications.RunningServiceDetails$ActiveDetail.onClick(Landroid/view/View;)V
com.android.commands.am.Am.run([Ljava/lang/String;)V
com.android.commands.am.Am.main([Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.killAllBackgroundProcesses()V
android.app.ActivityManagerNative.killAllBackgroundProcesses()V
android.app.IActivityManager.killAllBackgroundProcesses()V
com.android.commands.am.Am.runKillAll()V
Permission:android.permission.READ_PHONE_STATE

1097 Callers:

com.android.internal.telephony.PhoneSubInfo.getDeviceId()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getDeviceId()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub.getDeviceId()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoProxy.getDeviceId()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo.getDeviceId()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.telephony.TelephonyManager.getDeviceId()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfo.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.PhoneSubInfoProxy.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.contacts.SpecialCharSequenceMgr.showIMEIPanel(Landroid/content/Context;ZLandroid/telephony/TelephonyManager;)V
com.android.contacts.SpecialCharSequenceMgr.showMEIDPanel(Landroid/content/Context;ZLandroid/telephony/TelephonyManager;)V
com.android.emailcommon.Device.getConsistentDeviceId(Landroid/content/Context;)Ljava/lang/String;
com.android.contacts.SpecialCharSequenceMgr.handleIMEIDisplay(Landroid/content/Context;Ljava/lang/String;Z)Z
com.android.emailcommon.Device.getDeviceIdInternal(Landroid/content/Context;)Ljava/lang/String;
com.android.contacts.SpecialCharSequenceMgr.handleChars(Landroid/content/Context;Ljava/lang/String;ZLandroid/widget/EditText;)Z
com.android.emailcommon.Device.getDeviceId(Landroid/content/Context;)Ljava/lang/String;
com.android.contacts.SpecialCharSequenceMgr.handleChars(Landroid/content/Context;Ljava/lang/String;Landroid/widget/EditText;)Z
com.android.contacts.SpecialCharSequenceMgr.handleChars(Landroid/content/Context;Ljava/lang/String;)Z
com.android.email.activity.setup.AccountSetupExchangeFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.emailcommon.service.EmailServiceProxy.<init>(Landroid/content/Context;Landroid/content/Intent;Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.emailcommon.service.EmailServiceProxy.<init>(Landroid/content/Context;Ljava/lang/String;Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.email.service.AccountService$1.getDeviceId()Ljava/lang/String;
com.android.email.service.AccountService.onBind(Landroid/content/Intent;)Landroid/os/IBinder;
com.android.contacts.dialpad.DialpadFragment.afterTextChanged(Landroid/text/Editable;)V
com.android.email.service.AttachmentDownloadService$DownloadSet.startDownload(Landroid/content/Intent;Lcom/android/email/service/AttachmentDownloadService$DownloadRequest;)V
com.android.email.service.EmailServiceUtils.isServiceAvailable(Landroid/content/Context;Ljava/lang/String;)Z
com.android.email.service.EmailServiceUtils.getService(Landroid/content/Context;Ljava/lang/String;Lcom/android/emailcommon/service/IEmailServiceCallback;)Lcom/android/emailcommon/service/IEmailService;
com.android.emailcommon.service.IAccountService$Stub$Proxy.getDeviceId()Ljava/lang/String;
com.android.emailcommon.service.IAccountService$Stub.getDeviceId()Ljava/lang/String;
com.android.contacts.dialpad.DialpadFragment.setFormattedDigits(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.AttachmentDownloadService$DownloadSet.tryStartDownload(Lcom/android/email/service/AttachmentDownloadService$DownloadRequest;)Z
com.android.email.service.EmailServiceUtils.isExchangeAvailable(Landroid/content/Context;)Z
com.android.email.service.EmailServiceUtils.getExchangeService(Landroid/content/Context;Lcom/android/emailcommon/service/IEmailServiceCallback;)Lcom/android/emailcommon/service/IEmailService;
com.android.emailcommon.service.IAccountService.getDeviceId()Ljava/lang/String;
com.android.emailcommon.service.IAccountService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.contacts.dialpad.DialpadFragment.fillDigitsIfNecessary(Landroid/content/Intent;)Z
com.android.email.service.AttachmentDownloadService$DownloadSet.processQueue()V
com.android.email.activity.setup.AccountSetupAccountType.onCreate(Landroid/os/Bundle;)V
com.android.email.activity.setup.DebugFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.email.activity.setup.AccountSetupExchangeFragment.saveSettingsAfterEdit()V
com.android.email.Controller.getExchangeEmailService()Lcom/android/emailcommon/service/IEmailService;
com.android.email.Controller.serviceLogging(I)V
com.android.email.mail.store.ExchangeStore.getService()Lcom/android/emailcommon/service/IEmailService;
com.android.emailcommon.service.AccountServiceProxy$6.run()V
com.android.email.service.AccountService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.contacts.dialpad.DialpadFragment.configureScreenFromIntent(Landroid/content/Intent;)V
com.android.contacts.dialpad.DialpadFragment.onResume()V
com.android.email.service.AttachmentDownloadService$DownloadSet.onWatchdogAlarm()V
com.android.email.service.AttachmentDownloadService.run()V
com.android.email.activity.setup.AccountSetupActivity.onCreate(Landroid/os/Bundle;)V
com.android.email.activity.setup.AccountServerBaseFragment.saveSettingsAfterEdit()V
com.android.email.Controller.getServiceForAccount(J)Lcom/android/emailcommon/service/IEmailService;
com.android.email.Email.updateLoggingFlags(Landroid/content/Context;)V
com.android.email.mail.store.ServiceStore.getService()Lcom/android/emailcommon/service/IEmailService;
com.android.emailcommon.service.ServiceProxy$ProxyTask.run()V
com.android.contacts.activities.DialtactsActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.dialpad.DialpadFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.email.service.AttachmentDownloadService$DownloadSet.access$800(Lcom/android/email/service/AttachmentDownloadService$DownloadSet;)V
com.android.email.activity.setup.AccountSetupBasics.onCreate(Landroid/os/Bundle;)V
com.android.email.activity.setup.AccountSetupExchange.onCreate(Landroid/os/Bundle;)V
com.android.email.activity.setup.AccountSetupIncoming.onCreate(Landroid/os/Bundle;)V
com.android.email.activity.setup.AccountSetupNames.onCreate(Landroid/os/Bundle;)V
com.android.email.activity.setup.AccountSetupOptions.onCreate(Landroid/os/Bundle;)V
com.android.email.activity.setup.AccountServerBaseFragment$4.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.email.Controller.access$100(Lcom/android/email/Controller;J)Lcom/android/emailcommon/service/IEmailService;
com.android.email.Controller.getServiceForMessage(J)Lcom/android/emailcommon/service/IEmailService;
com.android.email.Controller.searchMessages(JLcom/android/emailcommon/service/SearchParams;)I
com.android.email.Controller.deleteSyncedDataSync(J)V
com.android.email.Controller.sendPendingMessages(J)V
com.android.email.Controller.serviceCheckMail(JJJ)V
com.android.email.Controller.updateMailbox(JJZ)V
com.android.email.activity.setup.DebugFragment.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.email.Email.onCreate()V
com.android.email.service.AccountService$1$1.run()V
com.android.email.mail.store.ServiceStore.autoDiscover(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.email.mail.store.ServiceStore.checkSettings()Landroid/os/Bundle;
com.android.emailcommon.service.ServiceProxy$ProxyRunnable.run()V
com.android.contacts.activities.TransactionSafeActivity.onNewIntent(Landroid/content/Intent;)V
com.android.email.service.AttachmentDownloadService.watchdogAlarm()V
com.android.email.activity.setup.AccountServerBaseFragment$4.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.Controller$1.run()V
com.android.email.Controller.loadMessageForView(J)V
com.android.email.Controller.sendMeetingResponse(JI)V
com.android.email.activity.MessagesAdapter$SearchCursorLoader.loadInBackground()Landroid/database/Cursor;
com.android.email.Controller.searchMore(J)V
com.android.email.Controller.deleteAccountSync(JLandroid/content/Context;)V
com.android.email.SecurityPolicy.wipeExpiredAccounts(Landroid/content/Context;Lcom/android/email/Controller;)Z
com.android.email.Controller.sendMessage(Lcom/android/emailcommon/provider/EmailContent$Message;)V
com.android.email.RefreshManager.sendPendingMessages(J)Z
com.android.email.service.MailService$4.run()V
com.android.email.service.MailService.syncOneAccount(Lcom/android/email/Controller;JI)Z
com.android.email.RefreshManager.refreshMessageList(JJZZ)Z
com.android.email.service.PopImapSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.email.mail.Store.autoDiscover(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.email.mail.store.ExchangeStore.autoDiscover(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.email.mail.Store.checkSettings()Landroid/os/Bundle;
com.android.email.mail.store.ExchangeStore.checkSettings()Landroid/os/Bundle;
com.android.email.service.AttachmentDownloadService$Watchdog$1.run()V
com.android.email.activity.MessageViewFragmentBase.reloadUiFromMessage(Lcom/android/emailcommon/provider/EmailContent$Message;Z)V
com.android.email.activity.MessageViewFragment.onRespondToInvite(II)V
com.android.email.activity.MessagesAdapter$MessagesCursorLoader.loadInBackground()Landroid/database/Cursor;
com.android.email.activity.MessagesAdapter$SearchCursorLoader.loadInBackground()Ljava/lang/Object;
com.android.email.Controller$7.run()V
com.android.email.Controller$14.run()V
com.android.email.provider.AccountReconciler.reconcileAccountsInternal(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;Z)Z
com.android.email.SecurityPolicy.deleteSecuredAccounts(Landroid/content/Context;)V
com.android.email.service.MailService$3.run()V
com.android.email.SecurityPolicy.onPasswordExpiring(Landroid/content/Context;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Long;
com.android.email.activity.MessageListFragment.onSendPendingMessages()V
com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl.performAction(J)V
com.android.email.service.MailService.access$200(Lcom/android/email/service/MailService;Lcom/android/email/Controller;JI)Z
com.android.email.RefreshManager.loadMoreMessages(JJ)Z
com.android.email.RefreshManager.refreshMessageList(JJZ)Z
com.android.email.service.PopImapSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask.doInBackground([Ljava/lang/Void;)Lcom/android/emailcommon/mail/MessagingException;
com.android.email.mail.store.ImapStore.autoDiscover(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.email.mail.store.Pop3Store.autoDiscover(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.email.activity.MessageFileViewFragment.reloadUiFromMessage(Lcom/android/emailcommon/provider/EmailContent$Message;Z)V
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.onSuccess(Lcom/android/emailcommon/provider/EmailContent$Message;)V
com.android.email.activity.MessageViewFragment.reloadUiFromMessage(Lcom/android/emailcommon/provider/EmailContent$Message;Z)V
com.android.email.activity.MessageViewFragment.onClick(Landroid/view/View;)V
com.android.email.activity.MessagesAdapter$MessagesCursorLoader.loadInBackground()Ljava/lang/Object;
com.android.email.provider.AccountReconciler.accountsNeedReconciling(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;)Z
com.android.email.provider.AccountReconciler.reconcileAccounts(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;)V
com.android.email.SecurityPolicy.onAdminEnabled(Z)V
com.android.email.SecurityPolicy.onDeviceAdminReceiverMessage(Landroid/content/Context;I)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.emailcommon.utility.Utility$ForEachAccount.performAction(J)V
com.android.email.service.MailService$2.run()V
com.android.email.activity.MessageListFragment.onLoadMoreMessages()V
com.android.email.activity.MessageListFragment.onRefresh(Z)V
com.android.email.activity.setup.MailboxSettings$2.onSuccess(Ljava/lang/Void;)V
com.android.email.activity.UIControllerOnePane.onRefresh()V
com.android.email.activity.UIControllerTwoPane$RefreshTask.onSuccess(Ljava/lang/Boolean;)V
com.android.email.service.PopImapSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase.onClick(Landroid/view/View;)V
com.android.email.service.MailService.hasMismatchInPopImapAccounts(Landroid/content/Context;)Z
com.android.email.service.AccountService$1.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService.reconcileAccountsWithAccountManager(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;)V
com.android.email.service.EmailBroadcastProcessorService.onHandleIntent(Landroid/content/Intent;)V
com.android.emailcommon.utility.EmailAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.Utility$ForEachAccount.onPostExecute([Ljava/lang/Long;)V
com.android.email.activity.MessageListFragment.doFooterClick()V
com.android.email.activity.MessageListFragment.autoRefreshStaleMailbox()V
com.android.email.activity.setup.MailboxSettings$2.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.UIControllerBase.onRefresh()V
com.android.email.activity.UIControllerTwoPane$RefreshTask.onSuccess(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.MessageFileViewFragment.onClick(Landroid/view/View;)V
com.android.email.activity.Welcome$1.run()V
com.android.emailcommon.service.IAccountService$Stub$Proxy.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.emailcommon.service.IAccountService$Stub.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService$6.runInternal(Landroid/content/Context;)V
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.Utility$ForEachAccount.onPostExecute(Ljava/lang/Object;)V
com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl.onPostExecute([Ljava/lang/Long;)V
com.android.email.activity.MessageListFragment.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.email.activity.MessageListFragment.access$2200(Lcom/android/email/activity/MessageListFragment;)V
com.android.email.activity.UIControllerBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.emailcommon.utility.EmailAsyncTask$1.onSuccess(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.onPostExecute(Ljava/lang/Object;)V
com.android.emailcommon.service.IAccountService.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService$6.runInternal(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl.onPostExecute(Ljava/lang/Object;)V
com.android.email.activity.MessageListFragment$4.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.email.activity.EmailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.UIControllerOnePane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.UIControllerTwoPane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.emailcommon.utility.EmailAsyncTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.emailcommon.service.AccountServiceProxy$3.run()V
com.android.email.SingleRunningTask.runInternal(Ljava/lang/Object;)V
com.android.email.activity.MailboxFinder$FindMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$6.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$QuickResponseChecker.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageFileView$LoadFilenameTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageList$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment$MessageOpenTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSetupNames$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.UIControllerTwoPane$RefreshTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.email.activity.UIControllerSearchTwoPane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.MailboxFinder$FindMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$6.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$LoadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$QuickResponseChecker.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageFileView$LoadFilenameTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageList$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageListFragment$MessageOpenTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSetupNames$2.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$2.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.UIControllerTwoPane$RefreshTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.SingleRunningTask.run(Ljava/lang/Object;)V
com.android.email.service.MailService$6.run(Ljava/lang/Object;)V
com.android.email.service.MailService.reconcilePopImapAccountsSync(Landroid/content/Context;)V
com.android.email.service.EmailBroadcastProcessorService.onSystemAccountChanged()V
com.android.email.service.MailService$1.run()V
com.android.internal.telephony.PhoneSubInfo.getDeviceSvn()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getDeviceSvn()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub.getDeviceSvn()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoProxy.getDeviceSvn()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo.getDeviceSvn()Ljava/lang/String;
android.telephony.TelephonyManager.getDeviceSoftwareVersion()Ljava/lang/String;
com.android.settings.deviceinfo.Status.onCreate(Landroid/os/Bundle;)V
com.android.internal.telephony.PhoneSubInfo.getSubscriberId()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getSubscriberId()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub.getSubscriberId()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoProxy.getSubscriberId()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo.getSubscriberId()Ljava/lang/String;
android.telephony.TelephonyManager.getSubscriberId()Ljava/lang/String;
android.net.NetworkIdentity.buildNetworkIdentity(Landroid/content/Context;Landroid/net/NetworkState;)Landroid/net/NetworkIdentity;
com.android.phone.MobileNetworkSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.server.location.GpsLocationProvider.requestSetID(I)V
com.android.server.net.NetworkPolicyManagerService.isTemplateRelevant(Landroid/net/NetworkTemplate;)Z
com.android.server.net.NetworkPolicyManagerService.ensureActiveMobilePolicyLocked()V
com.android.server.net.NetworkPolicyManagerService.setNetworkTemplateEnabled(Landroid/net/NetworkTemplate;Z)V
com.android.server.ThrottleService$DataRecorder.getDataFile()Ljava/io/File;
com.android.server.ThrottleService$DataRecorder.checkForSubscriberId()V
com.android.settings.DataUsageSummary.getActiveSubscriberId(Landroid/content/Context;)Ljava/lang/String;
com.android.settings.net.DataUsageMeteredSettings.buildMobilePref(Landroid/content/Context;)Landroid/preference/Preference;
com.android.server.net.NetworkPolicyManagerService.getNetworkQuotaInfoUnchecked(Landroid/net/NetworkState;)Landroid/net/NetworkQuotaInfo;
com.android.server.net.NetworkPolicyManagerService.isNetworkMetered(Landroid/net/NetworkState;)Z
com.android.server.net.NetworkPolicyManagerService.updateNetworkRulesLocked()V
com.android.server.net.NetworkStatsService.updateIfacesLocked()V
com.android.server.net.NetworkPolicyManagerService.updateNotificationsLocked()V
com.android.server.net.NetworkPolicyManagerService.access$1300(Lcom/android/server/net/NetworkPolicyManagerService;)V
com.android.server.net.NetworkPolicyManagerService.updateNetworkEnabledLocked()V
com.android.server.ThrottleService$DataRecorder.record()V
com.android.server.ThrottleService$DataRecorder.retrieve()V
com.android.server.ThrottleService$DataRecorder.setNextPeriod(Ljava/util/Calendar;Ljava/util/Calendar;)Z
com.android.server.ThrottleService$DataRecorder.addData(JJ)V
com.android.settings.DataUsageSummary.isMobilePolicySplit()Z
com.android.settings.DataUsageSummary.buildLimitedNetworksList()Ljava/util/List;
com.android.settings.DataUsageSummary.setMobilePolicySplit(Z)V
com.android.settings.DataUsageSummary.updateBody()V
android.net.INetworkPolicyManager$Stub$Proxy.isNetworkMetered(Landroid/net/NetworkState;)Z
android.net.INetworkPolicyManager$Stub.isNetworkMetered(Landroid/net/NetworkState;)Z
com.android.server.net.NetworkPolicyManagerService.access$1100(Lcom/android/server/net/NetworkPolicyManagerService;)V
com.android.server.net.NetworkPolicyManagerService.addNetworkPolicyLocked(Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkPolicyManagerService.dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
com.android.server.net.NetworkPolicyManagerService.performSnooze(Landroid/net/NetworkTemplate;I)V
com.android.server.net.NetworkPolicyManagerService.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkStatsService.updateIfaces()V
com.android.server.net.NetworkPolicyManagerService.access$700(Lcom/android/server/net/NetworkPolicyManagerService;)V
com.android.server.net.NetworkPolicyManagerService.setRestrictBackground(Z)V
com.android.server.net.NetworkPolicyManagerService.systemReady()V
com.android.server.net.NetworkPolicyManagerService$10.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkPolicyManagerService.access$600(Lcom/android/server/net/NetworkPolicyManagerService;)V
com.android.server.ThrottleService$DataRecorder.<init>(Landroid/content/Context;Lcom/android/server/ThrottleService;)V
com.android.server.ThrottleService$MyHandler.onResetAlarm()V
com.android.server.ThrottleService$MyHandler.onPollAlarm()V
com.android.settings.DataUsageSummary.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.DataUsageSummary.onPrepareOptionsMenu(Landroid/view/Menu;)V
com.android.settings.DataUsageSummary.updateTabs()V
com.android.settings.DataUsageSummary.hasLimitedNetworks()Z
com.android.settings.DataUsageSummary.buildLimitedNetworksString()Ljava/lang/CharSequence;
com.android.settings.DataUsageSummary.access$100(Lcom/android/settings/DataUsageSummary;)V
android.net.INetworkPolicyManager.isNetworkMetered(Landroid/net/NetworkState;)Z
android.net.INetworkPolicyManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.net.NetworkPolicyManagerService$8.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkPolicyManagerService.access$1000(Lcom/android/server/net/NetworkPolicyManagerService;Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkPolicyManagerService.access$800(Lcom/android/server/net/NetworkPolicyManagerService;Landroid/net/NetworkTemplate;I)V
android.net.INetworkPolicyManager$Stub$Proxy.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
android.net.INetworkPolicyManager$Stub.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkStatsService.access$600(Lcom/android/server/net/NetworkStatsService;)V
com.android.server.net.NetworkPolicyManagerService$4.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.INetworkPolicyManager$Stub$Proxy.setRestrictBackground(Z)V
android.net.INetworkPolicyManager$Stub.setRestrictBackground(Z)V
com.android.server.net.NetworkPolicyManagerService$5.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.ServerThread$1.run()V
com.android.server.ThrottleService$MyHandler.onRebootRecovery()V
com.android.server.ThrottleService$MyHandler.onPolicyChanged()V
com.android.settings.DataUsageSummary.onResume()V
com.android.settings.DataUsageSummary$1.onPostExecute(Ljava/lang/Void;)V
com.android.settings.DataUsageSummary$3.onTabChanged(Ljava/lang/String;)V
com.android.settings.DataUsageSummary$AppDetailsFragment.onStart()V
com.android.settings.DataUsageSummary$AppDetailsFragment.onStop()V
com.android.server.ConnectivityService.isNetworkMeteredUnchecked(I)Z
com.android.server.net.NetworkPolicyManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.net.NetworkPolicyManagerService$6.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.INetworkPolicyManager.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkStatsService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.INetworkPolicyManager.setRestrictBackground(Z)V
com.android.settings.DataUsageSummary$1.onPostExecute(Ljava/lang/Object;)V
com.android.server.ConnectivityService.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.NetworkPolicyManager.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
android.net.NetworkPolicyManager.setRestrictBackground(Z)V
android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager$Stub.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
com.android.settings.net.NetworkPolicyEditor.write([Landroid/net/NetworkPolicy;)V
com.android.settings.DataUsageSummary.setRestrictBackground(Z)V
android.net.IConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.net.NetworkPolicyEditor$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.settings.DataUsageSummary$ConfirmRestrictFragment$1.onClick(Landroid/content/DialogInterface;I)V
android.net.ConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOnUpstreamMobileConnection(I)Z
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.net.NetworkPolicyEditor$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.development.Connectivity$3.onClick(Landroid/view/View;)V
com.android.development.Connectivity.onCrash()V
com.android.mms.transaction.TransactionService.beginMmsConnectivity()I
com.android.server.location.GpsLocationProvider.reportAGpsStatus(III)V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOnUpstreamMobileConnection(I)Z
com.android.development.Connectivity.access$2600(Lcom/android/development/Connectivity;)V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.processMessage(Landroid/os/Message;)Z
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.enter()V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.processMessage(Landroid/os/Message;)Z
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.internal.util.State.enter()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
com.android.mms.transaction.Observable.notifyObservers()V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.transaction.SendTransaction.run()V
com.android.mms.transaction.Transaction.process()V
com.android.internal.telephony.PhoneSubInfo.getIccSerialNumber()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getIccSerialNumber()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub.getIccSerialNumber()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoProxy.getIccSerialNumber()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo.getIccSerialNumber()Ljava/lang/String;
android.telephony.TelephonyManager.getSimSerialNumber()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfo.getLine1Number()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getLine1Number()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub.getLine1Number()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoProxy.getLine1Number()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo.getLine1Number()Ljava/lang/String;
android.telephony.TelephonyManager.getLine1Number()Ljava/lang/String;
com.android.bluetooth.pbap.BluetoothPbapService.startObexServerSession()V
com.android.mms.transaction.HttpUtils.httpConnection(Landroid/content/Context;JLjava/lang/String;[BIZLjava/lang/String;I)[B
com.android.mms.ui.MessageUtils.getLocalNumber()Ljava/lang/String;
com.android.bluetooth.pbap.BluetoothPbapService.access$500(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.parseIntent(Landroid/content/Intent;)V
com.android.mms.transaction.Transaction.getPdu(Ljava/lang/String;)[B
com.android.mms.transaction.Transaction.sendPdu(J[BLjava/lang/String;)[B
com.android.mms.transaction.RetrieveTransaction.sendAcknowledgeInd(Lcom/google/android/mms/pdu/RetrieveConf;)V
com.android.mms.ui.MessageUtils.isLocalNumber(Ljava/lang/String;)Z
com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread.run()V
com.android.bluetooth.pbap.BluetoothPbapService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.NotificationTransaction.getPdu(Ljava/lang/String;)[B
com.android.mms.transaction.ReadRecTransaction.getPdu(Ljava/lang/String;)[B
com.android.mms.transaction.RetrieveTransaction.getPdu(Ljava/lang/String;)[B
com.android.mms.transaction.SendTransaction.getPdu(Ljava/lang/String;)[B
com.android.mms.transaction.NotificationTransaction.sendPdu(J[BLjava/lang/String;)[B
com.android.mms.transaction.ReadRecTransaction.sendPdu(J[BLjava/lang/String;)[B
com.android.mms.transaction.RetrieveTransaction.sendPdu(J[BLjava/lang/String;)[B
com.android.mms.transaction.SendTransaction.sendPdu(J[BLjava/lang/String;)[B
com.android.mms.transaction.Transaction.sendPdu([BLjava/lang/String;)[B
com.android.mms.transaction.Transaction.sendPdu([B)[B
com.android.mms.transaction.Transaction.sendPdu(J[B)[B
com.android.bluetooth.pbap.BluetoothPbapService.startRfcommSocketListener()V
com.android.mms.transaction.NotificationTransaction.sendPdu([BLjava/lang/String;)[B
com.android.mms.transaction.ReadRecTransaction.sendPdu([BLjava/lang/String;)[B
com.android.mms.transaction.RetrieveTransaction.sendPdu([BLjava/lang/String;)[B
com.android.mms.transaction.SendTransaction.sendPdu([BLjava/lang/String;)[B
com.android.mms.transaction.NotificationTransaction.sendPdu([B)[B
com.android.mms.transaction.ReadRecTransaction.sendPdu([B)[B
com.android.mms.transaction.RetrieveTransaction.sendPdu([B)[B
com.android.mms.transaction.SendTransaction.sendPdu([B)[B
com.android.mms.transaction.NotificationTransaction.sendPdu(J[B)[B
com.android.mms.transaction.ReadRecTransaction.sendPdu(J[B)[B
com.android.mms.transaction.RetrieveTransaction.sendPdu(J[B)[B
com.android.mms.transaction.SendTransaction.sendPdu(J[B)[B
com.android.bluetooth.pbap.BluetoothPbapService.access$900(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.stopObexServerSession()V
com.android.mms.transaction.NotificationTransaction.sendNotifyRespInd(I)V
com.android.bluetooth.pbap.BluetoothPbapService.onCreate()V
com.android.bluetooth.pbap.BluetoothPbapService.access$1100(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.internal.telephony.PhoneSubInfo.getLine1AlphaTag()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getLine1AlphaTag()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub.getLine1AlphaTag()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoProxy.getLine1AlphaTag()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo.getLine1AlphaTag()Ljava/lang/String;
android.telephony.TelephonyManager.getLine1AlphaTag()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfo.getMsisdn()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getMsisdn()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub.getMsisdn()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoProxy.getMsisdn()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo.getMsisdn()Ljava/lang/String;
android.telephony.TelephonyManager.getMsisdn()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfo.getVoiceMailNumber()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getVoiceMailNumber()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub.getVoiceMailNumber()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoProxy.getVoiceMailNumber()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo.getVoiceMailNumber()Ljava/lang/String;
android.telephony.TelephonyManager.getVoiceMailNumber()Ljava/lang/String;
android.telephony.PhoneNumberUtils.isVoiceMailNumber(Ljava/lang/String;)Z
com.android.contacts.dialpad.DialpadFragment.isVoicemailAvailable()Z
com.android.contacts.calllog.PhoneNumberHelper.isVoicemailNumber(Ljava/lang/CharSequence;)Z
com.android.contacts.ContactsUtils.getCallUri(Ljava/lang/String;)Landroid/net/Uri;
com.android.internal.telephony.CallerInfoAsyncQuery.startQuery(ILandroid/content/Context;Ljava/lang/String;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/internal/telephony/CallerInfoAsyncQuery;
com.android.internal.telephony.CallerInfo.getCallerInfo(Landroid/content/Context;Ljava/lang/String;)Lcom/android/internal/telephony/CallerInfo;
com.android.contacts.dialpad.DialpadFragment.onLongClick(Landroid/view/View;)Z
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.onPostExecute([Lcom/android/contacts/PhoneCallDetails;)V
com.android.contacts.CallDetailActivity.getPhoneCallDetailsForUri(Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.bindView(Landroid/view/View;Landroid/database/Cursor;I)V
com.android.contacts.calllog.PhoneNumberHelper.canSendSmsTo(Ljava/lang/CharSequence;)Z
com.android.contacts.calllog.PhoneNumberHelper.getDisplayNumber(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/CharSequence;
com.android.contacts.PhoneCallDetailsHelper.setPhoneCallDetails(Lcom/android/contacts/PhoneCallDetailsViews;Lcom/android/contacts/PhoneCallDetails;Z)V
com.android.contacts.CallDetailActivity.onMenuEditNumberBeforeCall(Landroid/view/MenuItem;)V
com.android.contacts.ContactsUtils.getCallIntent(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
com.android.phone.PhoneUtils.startGetCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Connection;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/phone/PhoneUtils$CallerInfoToken;
com.android.internal.telephony.CallerInfo.getCallerId(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
com.android.phone.PhoneUtils.getCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Connection;)Lcom/android/internal/telephony/CallerInfo;
com.android.phone.PhoneUtils.placeCall(Landroid/content/Context;Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/net/Uri;ZLandroid/net/Uri;)I
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.CallDetailActivity.access$300(Lcom/android/contacts/CallDetailActivity;Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.calllog.CallLogAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.contacts.calllog.CallLogAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.calllog.CallLogListItemHelper.getCallActionDescription(Lcom/android/contacts/PhoneCallDetails;)Ljava/lang/CharSequence;
com.android.contacts.calllog.DefaultVoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.PhoneCallDetailsHelper.setCallDetailsHeader(Landroid/widget/TextView;Lcom/android/contacts/PhoneCallDetails;)V
com.android.contacts.calllog.CallLogListItemHelper.setPhoneCallDetails(Lcom/android/contacts/calllog/CallLogListItemViews;Lcom/android/contacts/PhoneCallDetails;Z)V
com.android.contacts.activities.DialtactsActivity$11.onCallNumberDirectly(Ljava/lang/String;)V
com.android.contacts.ContactsUtils.getCallIntent(Ljava/lang/String;)Landroid/content/Intent;
com.android.contacts.dialpad.DialpadFragment.dialButtonPressed()V
com.android.contacts.interactions.PhoneNumberInteraction.performAction(Landroid/content/Context;Ljava/lang/String;Lcom/android/contacts/interactions/PhoneNumberInteraction$InteractionType;Ljava/lang/String;)V
com.android.phone.CallCard.displayMainCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.displaySecondaryCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallNotifier.showMissedCallNotification(Lcom/android/internal/telephony/Connection;J)V
com.android.phone.CallNotifier.startIncomingCallQuery(Lcom/android/internal/telephony/Connection;)V
com.android.phone.ManageConferenceUtils.updateManageConferenceRow(ILcom/android/internal/telephony/Connection;Z)V
com.android.phone.PhoneUtils.startGetCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Call;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/phone/PhoneUtils$CallerInfoToken;
com.android.phone.PhoneUtils$4.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.CallNotifier.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OtaUtils.startNonInteractiveOtasp(Landroid/content/Context;)I
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Void;)[Lcom/android/contacts/PhoneCallDetails;
com.android.common.widget.GroupingListAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.common.widget.GroupingListAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.calllog.CallLogListItemHelper.configureCallSecondaryAction(Lcom/android/contacts/calllog/CallLogListItemViews;Lcom/android/contacts/PhoneCallDetails;)V
com.android.contacts.calllog.CallLogNotificationsService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.calllog.VoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.list.PhoneFavoriteFragment$Listener.onCallNumberDirectly(Ljava/lang/String;)V
com.android.contacts.calllog.IntentProvider$1.getIntent(Landroid/content/Context;)Landroid/content/Intent;
com.android.contacts.detail.ContactDetailFragment.buildEntries()V
com.android.contacts.dialpad.DialpadFragment.newFlashIntent()Landroid/content/Intent;
com.android.contacts.list.ContactsIntentResolver.resolveIntent(Landroid/content/Intent;)Lcom/android/contacts/list/ContactsRequest;
com.android.contacts.quickcontact.DataAction.<init>(Landroid/content/Context;Ljava/lang/String;Lcom/android/contacts/model/DataKind;JLandroid/content/ContentValues;)V
com.android.contacts.dialpad.DialpadFragment.onKey(Landroid/view/View;ILandroid/view/KeyEvent;)Z
com.android.contacts.dialpad.DialpadFragment.onClick(Landroid/view/View;)V
com.android.contacts.interactions.PhoneNumberInteraction.access$200(Landroid/content/Context;Ljava/lang/String;Lcom/android/contacts/interactions/PhoneNumberInteraction$InteractionType;Ljava/lang/String;)V
com.android.contacts.interactions.PhoneNumberInteraction.performAction(Ljava/lang/String;)V
com.android.phone.CallCard.updateForegroundCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateNoCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateRingingCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateAlreadyDisconnected(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallNotifier.onCdmaCallWaitingReject()V
com.android.phone.CallNotifier.onNewRingingConnection(Landroid/os/AsyncResult;)V
com.android.phone.ManageConferenceUtils.updateManageConferencePanel(Ljava/util/List;)V
com.android.phone.NotificationMgr.updateInCallNotification(Z)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.InCallScreenShowActivation.onCreate(Landroid/os/Bundle;)V
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.common.widget.GroupingListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneFavoriteFragment$ContactTileAdapterListener.onCallNumberDirectly(Ljava/lang/String;)V
com.android.contacts.calllog.IntentProvider.getIntent(Landroid/content/Context;)Landroid/content/Intent;
com.android.contacts.detail.ContactDetailFragment.bindData()V
com.android.contacts.dialpad.DialpadFragment.handleDialButtonClickWithEmptyDigits()V
com.android.contacts.activities.ContactSelectionActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.processIntent(Z)Z
com.android.contacts.quickcontact.QuickContactActivity.bindData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.interactions.PhoneNumberInteraction.onLoadComplete(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.phone.CallCard.updateState(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.sendCdmaCallWaitingReject()V
com.android.phone.InCallScreen.setInCallScreenMode(Lcom/android/phone/InCallUiState$InCallScreenMode;)V
com.android.phone.InCallScreen.updateManageConferencePanelIfNecessary()V
com.android.phone.NotificationMgr.updateInCallNotification()V
com.android.phone.NotificationMgr.updateNotificationAndLaunchIncomingCallUi()V
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.contacts.calllog.CallLogAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactTileView$Listener.onCallNumberDirectly(Ljava/lang/String;)V
com.android.contacts.calllog.CallLogAdapter$1.onClick(Landroid/view/View;)V
com.android.contacts.calllog.CallLogAdapter$2.onClick(Landroid/view/View;)V
com.android.contacts.detail.ContactDetailFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.detail.ContactDetailFragment.setData(Landroid/net/Uri;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.TransactionSafeActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.ContactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.quickcontact.QuickContactActivity.access$700(Lcom/android/contacts/quickcontact/QuickContactActivity;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.interactions.PhoneNumberInteraction.onLoadComplete(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.phone.InCallScreen.updateIncomingCallWidgetHint(II)V
com.android.phone.InCallScreen.updateScreen()V
com.android.phone.InCallScreen.onResume()V
com.android.phone.InCallScreen.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.showPausePromptDialog(Lcom/android/internal/telephony/Connection;Ljava/lang/String;)V
com.android.phone.InCallScreen.requestUpdateBluetoothIndication()V
com.android.phone.InCallScreen.requestCloseOtaFailureNotice(J)V
com.android.phone.InCallScreen.requestCloseSpcErrorNotice(J)V
com.android.phone.InCallScreen.requestRemoveProviderInfoWithDelay()V
com.android.phone.PhoneUtils.hangupRingingCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.InCallScreen.checkOtaspStateOnResume()Z
com.android.phone.InCallScreen.endInCallScreenSession(Z)V
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.InCallScreen.handleOtaCallEnd()V
com.android.phone.InCallScreen.internalResolveIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.onBackPressed()V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.resetInCallScreenMode()V
com.android.phone.InCallScreen.onPause()V
com.android.phone.NotificationMgr.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.NotificationMgr.updateNotificationsAtStartup()V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.showIncomingCall()V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.contacts.list.ContactTilePhoneFrequentView$1.onClick(Landroid/view/View;)V
com.android.contacts.detail.ContactDetailFragment.showEmptyState()V
com.android.contacts.detail.ContactDetailLayoutController.showContactWithoutUpdates()V
com.android.contacts.detail.ContactDetailLayoutController.showContactWithUpdates(Z)V
com.android.contacts.activities.DialtactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.AttachPhotoActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupBrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.JoinContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.NonPhoneActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ShowOrCreateActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.CallContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.AccountFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.CustomContactListFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.test.FragmentTestActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.ImportVCardActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.SelectAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.ContactsActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.quickcontact.QuickContactActivity$5.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.phone.InCallTouchUi.onGrabbedStateChange(Landroid/view/View;I)V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.syncWithPhoneState()Lcom/android/phone/InCallScreen$SyncWithPhoneStateStatus;
com.android.phone.InCallScreen.access$600(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$500(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.handlePostOnDialChars(Landroid/os/AsyncResult;C)V
com.android.phone.OtaUtils.otaShowProgramFailureNotice(I)V
com.android.phone.OtaUtils.otaShowSpcErrorNotice(I)V
com.android.phone.CallCard.updateCallStateWidgets(Lcom/android/internal/telephony/Call;)V
com.android.phone.BluetoothHandsfree$16.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.CallNotifier.onCustomRingtoneQueryTimeout(Ljava/lang/String;)V
com.android.phone.CallNotifier.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.InCallScreen.hangupRingingCall()V
com.android.phone.PhoneUtils.hangup(Lcom/android/internal/telephony/CallManager;)Z
com.android.phone.PhoneUtils.hangupRingingAndActive(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.InCallScreen.bailOutAfterErrorDialog()V
com.android.phone.InCallScreen.endInCallScreenSession()V
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.PhoneApp.dismissCallScreen()V
com.android.phone.InCallScreen.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.onNewIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.updateAfterRadioTechnologyChange()V
com.android.phone.PhoneApp.clearInCallScreenMode()V
com.android.phone.NotificationMgr.init(Lcom/android/phone/PhoneApp;)Lcom/android/phone/NotificationMgr;
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onCustomRingQueryComplete()V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.contacts.detail.ContactDetailLayoutController.showEmptyState()V
com.android.contacts.detail.ContactDetailLayoutController.initialize(Landroid/os/Bundle;)V
com.android.contacts.detail.ContactDetailLayoutController.setContactData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.ContactEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.GroupEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.quickcontact.QuickContactActivity$5.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.requestUpdateScreen()V
com.android.phone.InCallScreen.access$1000(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;C)V
com.android.phone.OtaUtils.otaShowProgramFailure(I)V
com.android.phone.OtaUtils.onOtaProvisionStatusChanged(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowProperScreen()V
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalHangup()V
com.android.phone.PhoneApp$NotificationBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneUtils.handleHeadsetHook(Lcom/android/internal/telephony/Phone;Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.access$2300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.addVoiceMailNumberPanel()V
com.android.phone.InCallScreen.delayedCleanupAfterDisconnect()V
com.android.phone.InCallScreen.dontAddVoiceMailNumber()V
com.android.phone.InCallScreen.onMMICancel()V
com.android.phone.InCallScreen.onMMIComplete(Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.otaShowHome()V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.PhoneApp.initForNewRadioTechnology()V
com.android.phone.CallNotifier.ignoreAllIncomingCalls(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.doReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.onCreate()V
com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener.onDetailsLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.ContactDetailLayoutController.<init>(Landroid/app/Activity;Landroid/os/Bundle;Landroid/app/FragmentManager;Lcom/android/contacts/widget/TransitionAnimationView;Landroid/view/View;Lcom/android/contacts/detail/ContactDetailFragment$Listener;)V
com.android.contacts.activities.ContactDetailActivity$3$1.run()V
com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener$1.run()V
com.android.contacts.activities.AttachPhotoActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactSelectionActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupBrowserActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.JoinContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.NonPhoneActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ShowOrCreateActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.CallContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService$Listener.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.AccountFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.CustomContactListFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.test.FragmentTestActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.ImportVCardActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.SelectAccountActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.InCallScreen.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp.updateInCallScreen()V
com.android.phone.OtaUtils.otaShowSuccessFailure()V
com.android.phone.PhoneApp.handleOtaspEvent(Landroid/os/Message;)V
com.android.phone.InCallScreen.onDialerClose(Z)V
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.InCallScreen$12.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$13.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.InCallScreen.access$1100(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1200(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$800(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$900(Lcom/android/phone/InCallScreen;Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.onClickOtaActivateNextButton()V
com.android.phone.OtaUtils.otaShowActivateScreen()V
com.android.phone.PhoneApp.access$1100(Lcom/android/phone/PhoneApp;)V
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.contacts.detail.ContactLoaderFragment$ContactLoaderFragmentListener.onDetailsLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PeopleActivity.createViewsAndFragments(Landroid/os/Bundle;)V
com.android.contacts.ContactSaveService.deliverCallbackOnUiThread(Landroid/content/Intent;)V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.phone.InCallScreen.access$400(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.EmergencyCallHelper.cleanup()V
com.android.phone.DTMFTwelveKeyDialer.onDialerClose(Z)V
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
com.android.phone.InCallScreen$14.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$15.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.OtaUtils.onClickOtaTryAgainButton()V
com.android.phone.OtaUtils.onOtaCloseFailureNotice()V
com.android.contacts.detail.ContactLoaderFragment$1.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.ContactLoaderFragment.loadUri(Landroid/net/Uri;)V
com.android.contacts.ContactSaveService$2.run()V
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.phone.DTMFTwelveKeyDialer.closeDialer(Z)V
android.bluetooth.HeadsetBase$1.run()V
com.android.contacts.detail.ContactLoaderFragment$1.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.activities.ContactDetailActivity.onAttachFragment(Landroid/app/Fragment;)V
com.android.contacts.activities.PeopleActivity.setupContactDetailFragment(Landroid/net/Uri;)V
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.DTMFTwelveKeyDialer.clearInCallScreenReference()V
com.android.phone.InCallScreen.closeDialpadInternal(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureDialog()V
com.android.phone.OtaUtils.otaShowProgramSuccessDialog()V
com.android.contacts.activities.TransactionSafeActivity.onAttachFragment(Landroid/app/Fragment;)V
com.android.contacts.ContactsActivity.onAttachFragment(Landroid/app/Fragment;)V
com.android.contacts.activities.PeopleActivity.access$700(Lcom/android/contacts/activities/PeopleActivity;Landroid/net/Uri;)V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onDestroy()V
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.InCallScreen.onOpenCloseDialpad()V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onSelectionChange()V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onViewContactAction(Landroid/net/Uri;)V
com.android.phone.InCallScreen.handleCallKey()Z
com.android.contacts.list.OnContactBrowserActionListener.onSelectionChange()V
com.android.contacts.list.OnContactBrowserActionListener.onViewContactAction(Landroid/net/Uri;)V
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.contacts.list.ContactBrowseListFragment.checkSelection()V
com.android.contacts.list.ContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.checkSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.refreshSelectedContactUri()V
com.android.contacts.list.DefaultContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(IJ)V
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.DefaultContactBrowseListFragment.refreshSelectedContactUri()V
com.android.contacts.list.ContactEntryListFragment.onItemClick(IJ)V
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.ContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.ContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.DefaultContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.JoinContactListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactEntryListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragmentForRequest()V
com.android.contacts.list.ContactPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.EmailAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.JoinContactListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PhoneNumberPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PostalAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.list.ContactEntryListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setSearchMode(Z)V
com.android.contacts.list.EmailAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.list.JoinContactListFragment.setSearchMode(Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setSearchMode(Z)V
com.android.contacts.list.PostalAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureFragments(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragment()V
com.android.contacts.activities.PeopleActivity.onContactListFilterChanged()V
com.android.contacts.list.OnContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.activities.ContactSelectionActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.list.ContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.EmailAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.JoinContactListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PostalAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.PeopleActivity.onAction(I)V
com.android.contacts.activities.PeopleActivity.onStart()V
com.android.contacts.list.ContactListFilterController$ContactListFilterListener.onContactListFilterChanged()V
com.android.contacts.list.ContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.JoinContactActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.DialtactsActivity$7.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter$Listener.onAction(I)V
com.android.contacts.activities.TransactionSafeActivity.onStart()V
com.android.contacts.ContactsActivity.onStart()V
com.android.contacts.list.ContactListFilterControllerImpl.notifyContactListFilterChanged()V
com.android.contacts.list.DefaultContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.activities.PeopleActivity.setQueryTextToFragment(Ljava/lang/String;)V
com.android.contacts.activities.ActionBarAdapter.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter.update()V
com.android.contacts.activities.AttachPhotoActivity.onStart()V
com.android.contacts.activities.ContactDetailActivity.onStart()V
com.android.contacts.activities.ContactEditorActivity.onStart()V
com.android.contacts.activities.ContactSelectionActivity.onStart()V
com.android.contacts.activities.DialtactsActivity.onStart()V
com.android.contacts.activities.GroupBrowserActivity.onStart()V
com.android.contacts.activities.GroupDetailActivity.onStart()V
com.android.contacts.activities.GroupEditorActivity.onStart()V
com.android.contacts.activities.JoinContactActivity.onStart()V
com.android.contacts.activities.NonPhoneActivity.onStart()V
com.android.contacts.activities.ShowOrCreateActivity.onStart()V
com.android.contacts.CallContactActivity.onStart()V
com.android.contacts.list.AccountFilterActivity.onStart()V
com.android.contacts.test.FragmentTestActivity.onStart()V
com.android.contacts.vcard.ImportVCardActivity.onStart()V
com.android.contacts.vcard.SelectAccountActivity.onStart()V
com.android.contacts.list.CustomContactListFilterActivity.onStart()V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;ZZ)V
com.android.contacts.activities.ActionBarAdapter.initialize(Landroid/os/Bundle;Lcom/android/contacts/list/ContactsRequest;)V
com.android.contacts.activities.ActionBarAdapter.setSearchMode(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.checkFilterValidity(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.activities.ActionBarAdapter.onClose()Z
com.android.contacts.activities.PeopleActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity.onBackPressed()V
com.android.contacts.list.ContactListFilterControllerImpl.<init>(Landroid/content/Context;)V
com.android.contacts.list.ContactListFilterController.checkFilterValidity(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.selectCustomFilter()V
com.android.contacts.list.ContactListFilterController.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.activities.PeopleActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.TransactionSafeActivity.onSearchRequested()Z
com.android.contacts.ContactsActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onFinishAction()V
com.android.contacts.activities.TransactionSafeActivity.onBackPressed()V
com.android.contacts.ContactsActivity.onBackPressed()V
com.android.contacts.list.ContactListFilterController.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.model.AccountTypeManagerImpl$1.run()V
com.android.contacts.list.ContactListFilterController.selectCustomFilter()V
com.android.contacts.util.AccountFilterUtil.handleAccountFilterResult(Lcom/android/contacts/list/ContactListFilterController;ILandroid/content/Intent;)V
com.android.contacts.activities.TransactionSafeActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactsActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.OnContactBrowserActionListener.onFinishAction()V
com.android.contacts.activities.DialtactsActivity.onBackPressed()V
com.android.contacts.activities.GroupEditorActivity.onBackPressed()V
com.android.contacts.ContactsApplication.getSystemService(Ljava/lang/String;)Ljava/lang/Object;
com.android.contacts.list.ContactListFilterControllerImpl.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.list.DefaultContactBrowseListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneFavoriteFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneNumberPickerFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.activities.ContactSelectionActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.GroupDetailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.JoinContactActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.AccountFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.CustomContactListFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.ContactBrowseListFragment.finish()V
com.android.contacts.list.ContactEntryListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.ContactEntryListFragment.finish()V
com.android.contacts.list.DefaultContactBrowseListFragment.finish()V
com.android.contacts.list.ContactEntryListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.finish()V
com.android.contacts.list.EmailAddressPickerFragment.finish()V
com.android.contacts.list.JoinContactListFragment.finish()V
com.android.contacts.list.PhoneNumberPickerFragment.finish()V
com.android.contacts.list.PostalAddressPickerFragment.finish()V
com.android.contacts.list.ContactBrowseListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.onClose()V
com.android.contacts.list.DefaultContactBrowseListFragment.onClose()V
com.android.contacts.list.EmailAddressPickerFragment.onClose()V
com.android.contacts.list.JoinContactListFragment.onClose()V
com.android.contacts.list.PhoneNumberPickerFragment.onClose()V
com.android.contacts.list.PostalAddressPickerFragment.onClose()V
com.android.internal.telephony.PhoneSubInfo.getVoiceMailAlphaTag()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getVoiceMailAlphaTag()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo$Stub.getVoiceMailAlphaTag()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoProxy.getVoiceMailAlphaTag()Ljava/lang/String;
com.android.internal.telephony.IPhoneSubInfo.getVoiceMailAlphaTag()Ljava/lang/String;
android.telephony.TelephonyManager.getVoiceMailAlphaTag()Ljava/lang/String;
com.android.internal.telephony.CallerInfo.markAsVoiceMail()Lcom/android/internal/telephony/CallerInfo;
com.android.server.net.NetworkPolicyManagerService.getNetworkPolicies()[Landroid/net/NetworkPolicy;
android.net.INetworkPolicyManager$Stub$Proxy.getNetworkPolicies()[Landroid/net/NetworkPolicy;
android.net.INetworkPolicyManager$Stub.getNetworkPolicies()[Landroid/net/NetworkPolicy;
android.net.INetworkPolicyManager.getNetworkPolicies()[Landroid/net/NetworkPolicy;
android.net.NetworkPolicyManager.getNetworkPolicies()[Landroid/net/NetworkPolicy;
com.android.settings.net.NetworkPolicyEditor.read()V
com.android.settings.DataUsageSummary.onCreate(Landroid/os/Bundle;)V
com.android.settings.net.DataUsageMeteredSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SettingsPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountPreferenceBase.onCreate(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onCreate(Landroid/os/Bundle;)V
com.android.settings.DeviceInfoSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onCreate(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.TetherSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WirelessSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountSyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.SyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.server.TelephonyRegistry.checkListenerPermission(I)V
com.android.server.TelephonyRegistry.listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
com.android.internal.telephony.ITelephonyRegistry$Stub.listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
com.android.internal.telephony.ITelephonyRegistry$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.ITelephonyRegistry.listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
com.android.server.TelephonyRegistry.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.telephony.TelephonyManager.listen(Landroid/telephony/PhoneStateListener;I)V
android.media.AudioService.<init>(Landroid/content/Context;)V
com.android.contacts.dialpad.DialpadFragment.onPause()V
com.android.deskclock.AlarmKlaxon.onCreate()V
com.android.deskclock.AlarmKlaxon.onDestroy()V
com.android.internal.policy.impl.GlobalActions.<init>(Landroid/content/Context;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;)V
com.android.phone.CallNotifier.<init>(Lcom/android/phone/PhoneApp;Lcom/android/internal/telephony/Phone;Lcom/android/phone/Ringer;Lcom/android/phone/BluetoothHandsfree;Lcom/android/phone/CallLogAsync;)V
com.android.phone.OtaStartupReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.location.ComprehensiveCountryDetector.addPhoneStateListener()V
com.android.server.location.ComprehensiveCountryDetector.removePhoneStateListener()V
com.android.settings.deviceinfo.Status.onPause()V
com.android.settings.deviceinfo.Status.onResume()V
com.android.settings.RadioInfo.onPause()V
com.android.settings.RadioInfo.onResume()V
com.android.systemui.statusbar.policy.NetworkController.<init>(Landroid/content/Context;)V
com.android.server.ServerThread.run()V
com.android.internal.policy.impl.PhoneWindowManager.showGlobalActionsDialog()V
com.android.phone.CallNotifier.init(Lcom/android/phone/PhoneApp;Lcom/android/internal/telephony/Phone;Lcom/android/phone/Ringer;Lcom/android/phone/BluetoothHandsfree;Lcom/android/phone/CallLogAsync;)Lcom/android/phone/CallNotifier;
com.android.server.location.ComprehensiveCountryDetector.setCountryListener(Landroid/location/CountryListener;)V
com.android.server.location.ComprehensiveCountryDetector.stop()V
com.android.systemui.statusbar.phone.PhoneStatusBar.makeStatusBarView()Lcom/android/systemui/statusbar/phone/PhoneStatusBarView;
com.android.systemui.statusbar.tablet.TabletStatusBar.makeStatusBarView()Landroid/view/View;
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
com.android.server.CountryDetectorService$2.run()V
com.android.server.location.CountryDetectorBase.setCountryListener(Landroid/location/CountryListener;)V
com.android.server.location.CountryDetectorBase.stop()V
com.android.systemui.statusbar.phone.PhoneStatusBar.addStatusBarWindow()V
com.android.systemui.statusbar.tablet.TabletStatusBar.addStatusBarWindow()V
com.android.server.location.ComprehensiveCountryDetector.startLocationBasedDetector(Landroid/location/CountryListener;)V
com.android.server.location.LocationBasedCountryDetector.setCountryListener(Landroid/location/CountryListener;)V
com.android.server.location.ComprehensiveCountryDetector.stopLocationBasedDetector()V
com.android.systemui.statusbar.phone.PhoneStatusBar.createAndAddWindows()V
com.android.systemui.statusbar.tablet.TabletStatusBar.createAndAddWindows()V
com.android.server.location.ComprehensiveCountryDetector.runAfterDetection(Landroid/location/Country;Landroid/location/Country;ZZ)V
com.android.server.location.ComprehensiveCountryDetector.access$200(Lcom/android/server/location/ComprehensiveCountryDetector;)V
com.android.systemui.statusbar.BaseStatusBar.createAndAddWindows()V
com.android.server.location.ComprehensiveCountryDetector$2.run()V
com.android.server.location.ComprehensiveCountryDetector$1.onCountryDetected(Landroid/location/Country;)V
com.android.systemui.statusbar.BaseStatusBar.start()V
com.android.systemui.statusbar.phone.PhoneStatusBar.start()V
com.android.systemui.statusbar.tablet.TabletStatusBar.start()V
com.android.systemui.SystemUI.start()V
com.android.systemui.SystemUIService.onCreate()V
com.android.phone.PhoneInterfaceManager.enforceReadPermission()V
com.android.phone.PhoneInterfaceManager.isSimPinEnabled()Z
com.android.internal.telephony.ITelephony$Stub$Proxy.isSimPinEnabled()Z
com.android.internal.telephony.ITelephony$Stub.isSimPinEnabled()Z
com.android.internal.telephony.ITelephony.isSimPinEnabled()Z
com.android.internal.telephony.ITelephony$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.phone.PhoneInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
Permission:android.permission.WRITE_CONTACTS

1665 Callers:

com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.IIccPhoneBook$Stub.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.IIccPhoneBook.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.IIccPhoneBook$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccProvider.addIccRecordToEf(ILjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.IccProvider.deleteIccRecordFromEf(ILjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.IccProvider.updateIccRecordInEf(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccPhoneBookInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.internal.telephony.IccProvider.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.internal.telephony.IccProvider.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.IIccPhoneBook$Stub.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.IIccPhoneBook.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.email.activity.setup.AccountSetupNames.access$100()Landroid/net/Uri;
com.android.email.activity.setup.AccountSetupNames$2.doInBackground([Ljava/lang/Void;)Ljava/lang/String;
com.android.email.activity.setup.AccountSetupNames$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxFinder$FindMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$6.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$QuickResponseChecker.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageFileView$LoadFilenameTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageList$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment$MessageOpenTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSetupNames$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.UIControllerTwoPane$RefreshTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.commit()V
com.android.exchange.adapter.AbstractSyncParser.commit()V
com.android.exchange.adapter.AbstractSyncParser.parse()Z
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.parse()Z
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser.parse()Z
com.android.exchange.adapter.Parser.parse()Z
com.android.exchange.adapter.CalendarSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.ContactsSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.EmailSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.AbstractSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.EasSyncService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasAccountService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasOutboxService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasSyncService.run()V
com.android.vcard.VCardEntry$PhoneData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$EntryElement.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$InsertOperationConstrutor.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z
com.android.vcard.VCardEntry$EntryElementIterator.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z
com.android.vcard.VCardEntry.iterateAllData(Lcom/android/vcard/VCardEntry$EntryElementIterator;)V
com.android.vcard.VCardEntry.iterateOneList(Ljava/util/List;Lcom/android/vcard/VCardEntry$EntryElementIterator;)V
com.android.vcard.VCardEntry.isIgnorable()Z
com.android.vcard.VCardEntry.toString()Ljava/lang/String;
com.android.vcard.VCardEntry.constructInsertOperations(Landroid/content/ContentResolver;Ljava/util/ArrayList;)Ljava/util/ArrayList;
com.android.contacts.vcard.NotificationImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.vcard.VCardEntryCommitter.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.VCardImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.vcard.VCardEntryHandler.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.ImportProcessor.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.vcard.VCardEntryConstructor.onEntryEnded()V
com.android.vcard.VCardInterpreter.onEntryEnded()V
com.android.vcard.VCardParserImpl_V21.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.handleNest()V
com.android.vcard.VCardParserImpl_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V40.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.parseItem()Z
com.android.vcard.VCardParserImpl_V30.handleNest()V
com.android.vcard.VCardParserImpl_V40.handleNest()V
com.android.vcard.VCardParserImpl_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseItems()V
com.android.vcard.VCardParserImpl_V30.parseItem()Z
com.android.vcard.VCardParserImpl_V40.parseItem()Z
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseItems()V
com.android.vcard.VCardParserImpl_V40.parseItems()V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.constructImportRequest([BLandroid/net/Uri;Ljava/lang/String;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.NfcImportVCardActivity.createImportRequest()Lcom/android/contacts/vcard/ImportRequest;
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.run()V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Lcom/android/contacts/vcard/VCardService;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.ImportProcessor.readOneVCard(Ljava/io/InputStream;ILjava/lang/String;Lcom/android/vcard/VCardInterpreter;[I)Z
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.vcard.ImportProcessor.runInternal()V
com.android.contacts.vcard.ImportProcessor.run()V
com.android.contacts.vcard.ProcessorBase.run()V
com.android.contacts.list.LegacyContactListAdapter.getPersonUri(I)Landroid/net/Uri;
com.android.contacts.list.ContactPickerFragment.onItemClick(IJ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(IJ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.JoinContactListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.providers.contacts.ContactsProvider2.insertStatusUpdate(Landroid/content/ContentValues;)J
com.android.providers.contacts.ContactsProvider2.insertInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.contacts.LegacyApiSupport.updateExtensions(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.update(IJLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.updateAll(Landroid/net/Uri;ILandroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.LegacyApiSupport.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.updateInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.LegacyApiSupport.updateContactMethods(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.updatePhoto(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.delete(Landroid/net/Uri;IJ)I
com.android.providers.contacts.LegacyApiSupport.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.deleteInTransaction(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.vcard.VCardEntry$EmailData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.dialog.ClearFrequentsDialog$1$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.dialog.ClearFrequentsDialog$1$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.data.Contact.getPhoneUri()Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.launchMultiplePhonePicker()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.launchMultiplePhonePicker()V
com.android.mms.ui.ComposeMessageActivity.onClick(Landroid/view/View;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onClick(Landroid/view/View;)V
com.android.contacts.ContactSaveService.removeMembersFromGroup(Landroid/content/ContentResolver;[JJ)V
com.android.contacts.ContactSaveService.updateGroup(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.util.ContactLoaderUtils.ensureIsContactUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.ContactLoader.loadInBackground()Lcom/android/contacts/ContactLoader$Result;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.doInBackground([Ljava/lang/Void;)Landroid/net/Uri;
com.android.contacts.ContactLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.providers.contacts.LegacyApiSupport.updateGroups(JLandroid/content/ContentValues;)I
android.provider.ContactsContract$SyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.vcard.VCardEntry$PhotoData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.model.EntityDelta.buildDiff(Ljava/util/ArrayList;)V
com.android.contacts.model.EntityDeltaList.buildDiff()Ljava/util/ArrayList;
com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask.doInBackground([Lcom/android/contacts/model/EntityDeltaList;)Ljava/lang/Integer;
com.android.contacts.ContactSaveService.saveContact(Landroid/content/Intent;)V
com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.vcard.VCardEntry$ImData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.list.CustomContactListFilterActivity$GroupDelta.buildDiff()Landroid/content/ContentProviderOperation;
com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay.buildDiff(Ljava/util/ArrayList;)V
com.android.contacts.list.CustomContactListFilterActivity$AccountSet.buildDiff()Ljava/util/ArrayList;
com.android.contacts.list.CustomContactListFilterActivity.doSaveAction()V
com.android.contacts.list.CustomContactListFilterActivity.onClick(Landroid/view/View;)V
android.provider.ContactsContract$SyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
com.android.providers.contacts.LegacyApiSupport.findFirstDataRow(JLjava/lang/String;)Landroid/net/Uri;
com.android.providers.contacts.LegacyApiSupport.updatePeople(JLandroid/content/ContentValues;)I
com.android.contacts.ContactSaveService.renameGroup(Landroid/content/Intent;)V
android.provider.ContactsContract$Contacts.getLookupUri(JLjava/lang/String;)Landroid/net/Uri;
android.provider.ContactsContract$Contacts.getLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.provider.ContactsContract$Data.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.provider.ContactsContract$RawContacts.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.widget.QuickContactBadge$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.event.AttendeesView$PresenceQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.activities.ShowOrCreateActivity.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.lookupContactFromUri(Landroid/net/Uri;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.editor.AggregationSuggestionView.handleItemClickEvent()Z
com.android.contacts.group.GroupEditorFragment$Member.<init>(JLjava/lang/String;JLjava/lang/String;Ljava/lang/String;)V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactEntryListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.buildUri()Ljava/lang/String;
com.android.calendar.EventInfoFragment.showContactInfo(Lcom/android/calendar/CalendarEventModel$Attendee;Landroid/graphics/Rect;)V
com.android.email.activity.ContactStatusLoader.getContactInfo(Landroid/content/Context;Ljava/lang/String;)Lcom/android/email/activity/ContactStatusLoader$Result;
com.android.contacts.ContactSaveService.createRawContact(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.joinContacts(Landroid/content/Intent;)V
com.android.contacts.quickcontact.QuickContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.NfcImportVCardActivity.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.vcard.NotificationImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.queryContactInfoForPhoneNumber(Ljava/lang/String;Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.calllog.ContactInfoHelper.queryContactInfoForSipAddress(Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.editor.ContactEditorFragment$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.group.GroupEditorFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment$4.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.ContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.EmailAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyPostalAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.PostalAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.asList([Ljava/lang/String;)Ljava/util/ArrayList;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.addColumnValue(Ljava/util/ArrayList;Ljava/lang/String;)V
com.android.email.activity.ContactStatusLoader.loadInBackground()Lcom/android/email/activity/ContactStatusLoader$Result;
com.android.email.NotificationController.getSenderPhoto(Lcom/android/emailcommon/provider/EmailContent$Message;)Landroid/graphics/Bitmap;
com.android.contacts.vcard.VCardImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.util.NotifyingAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.lookupNumber(Ljava/lang/String;Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.group.GroupEditorFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.group.GroupEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.DefaultContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.EmailAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.JoinContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyPhoneNumberListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyPostalAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.PhoneNumberListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.PostalAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.ContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(IJ)V
com.android.contacts.list.DefaultContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport.addSearchSuggestionsBasedOnFilter(Landroid/database/MatrixCursor;Landroid/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.email.activity.ContactStatusLoader.loadInBackground()Ljava/lang/Object;
com.android.email.NotificationController.createNewMessageNotification(JJLandroid/database/Cursor;JII)Landroid/app/Notification;
com.android.contacts.CallDetailActivity.getPhoneCallDetailsForUri(Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.queryContactInfo(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.list.DefaultContactListAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.PhoneNumberListAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.ContactBrowseListFragment.checkSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.JoinContactListFragment.onItemClick(IJ)V
com.android.providers.contacts.GlobalSearchSupport.handleSearchShortcutRefresh(Landroid/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.GlobalSearchSupport.handleSearchSuggestionsQuery(Landroid/database/sqlite/SQLiteDatabase;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.email.NotificationController$MessageContentObserver.onChange(Z)V
com.android.contacts.CallDetailActivity.access$300(Lcom/android/contacts/CallDetailActivity;Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.access$300(Lcom/android/contacts/calllog/CallLogAdapter;Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.common.widget.CompositeCursorAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.ContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.checkSelection()V
com.android.providers.contacts.ContactsProvider2.queryLocal(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;JLandroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.LegacyApiSupport.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Void;)[Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter$QueryThread.run()V
com.android.common.widget.CompositeCursorAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.refreshSelectedContactUri()V
com.android.contacts.list.DefaultContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.providers.contacts.ContactsProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.updateData(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.contacts.ContactsProvider2.insertSettings(Landroid/net/Uri;Landroid/content/ContentValues;)J
com.android.providers.contacts.LegacyApiSupport.getContactMethodType(Landroid/net/Uri;)Ljava/lang/String;
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.calllog.CallLogAdapter.startRequestProcessing()V
com.android.calendar.EmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.contacts.BaseEmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.widget.CompositeCursorAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.DefaultContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.EmailAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.JoinContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPostalAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneNumberListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PostalAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.IndexerListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.EmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.DefaultContactBrowseListFragment.refreshSelectedContactUri()V
com.android.providers.contacts.ContactsProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.cleanupPhotoStore()V
com.android.providers.contacts.LegacyApiSupport.getType(Landroid/net/Uri;)Ljava/lang/String;
com.android.contacts.calllog.CallLogAdapter.access$100(Lcom/android/contacts/calllog/CallLogAdapter;)V
com.android.contacts.calllog.CallLogAdapter.enqueueRequest(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;Z)V
com.android.calendar.EmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.contacts.BaseEmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.DefaultContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.EmailAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.JoinContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPostalAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneNumberListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PostalAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.IndexerListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.EmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.ContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.providers.contacts.ContactsProvider2.deleteData(Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.contacts.ContactsProvider2.deleteData(J[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.performBackgroundTask(ILjava/lang/Object;)V
com.android.providers.contacts.ContactsProvider2.getType(Landroid/net/Uri;)Ljava/lang/String;
com.android.contacts.calllog.CallLogAdapter.bindView(Landroid/view/View;Landroid/database/Cursor;I)V
com.android.contacts.list.PhoneFavoriteMergedAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.calllog.CallLogAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.calllog.CallLogAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.contacts.calllog.CallLogAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactEntryListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragmentForRequest()V
com.android.common.widget.GroupingListAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.common.widget.GroupingListAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.list.ContactPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.EmailAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.JoinContactListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PhoneNumberPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PostalAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.list.ContactEntryListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setSearchMode(Z)V
com.android.contacts.list.EmailAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.list.JoinContactListFragment.setSearchMode(Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setSearchMode(Z)V
com.android.contacts.list.PostalAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureFragments(Z)V
com.android.common.widget.GroupingListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.activities.PeopleActivity.configureContactListFragment()V
com.android.contacts.activities.PeopleActivity.onContactListFilterChanged()V
com.android.contacts.list.OnContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.activities.ContactSelectionActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.list.ContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.EmailAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.JoinContactListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PostalAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.PeopleActivity.onAction(I)V
com.android.contacts.activities.PeopleActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onStart()V
com.android.contacts.calllog.CallLogAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListFilterController$ContactListFilterListener.onContactListFilterChanged()V
com.android.contacts.list.ContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.JoinContactActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.DialtactsActivity$7.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter$Listener.onAction(I)V
com.android.contacts.activities.TransactionSafeActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.TransactionSafeActivity.onStart()V
com.android.contacts.ContactsActivity.onStart()V
com.android.contacts.list.ContactListFilterControllerImpl.notifyContactListFilterChanged()V
com.android.contacts.list.DefaultContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.activities.PeopleActivity.setQueryTextToFragment(Ljava/lang/String;)V
com.android.contacts.activities.ActionBarAdapter.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter.update()V
com.android.contacts.activities.ContactEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.GroupEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.AttachPhotoActivity.onStart()V
com.android.contacts.activities.ContactDetailActivity.onStart()V
com.android.contacts.activities.ContactEditorActivity.onStart()V
com.android.contacts.activities.ContactSelectionActivity.onStart()V
com.android.contacts.activities.DialtactsActivity.onStart()V
com.android.contacts.activities.GroupBrowserActivity.onStart()V
com.android.contacts.activities.GroupDetailActivity.onStart()V
com.android.contacts.activities.GroupEditorActivity.onStart()V
com.android.contacts.activities.JoinContactActivity.onStart()V
com.android.contacts.activities.NonPhoneActivity.onStart()V
com.android.contacts.activities.ShowOrCreateActivity.onStart()V
com.android.contacts.CallContactActivity.onStart()V
com.android.contacts.list.AccountFilterActivity.onStart()V
com.android.contacts.test.FragmentTestActivity.onStart()V
com.android.contacts.vcard.ImportVCardActivity.onStart()V
com.android.contacts.vcard.SelectAccountActivity.onStart()V
com.android.contacts.list.CustomContactListFilterActivity.onStart()V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;ZZ)V
com.android.contacts.activities.ActionBarAdapter.initialize(Landroid/os/Bundle;Lcom/android/contacts/list/ContactsRequest;)V
com.android.contacts.activities.ActionBarAdapter.setSearchMode(Z)V
com.android.contacts.activities.AttachPhotoActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactSelectionActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupBrowserActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.JoinContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.NonPhoneActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ShowOrCreateActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.CallContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService$Listener.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.AccountFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.CustomContactListFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.test.FragmentTestActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.ImportVCardActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.SelectAccountActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.ContactListFilterControllerImpl.checkFilterValidity(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.activities.PeopleActivity.createViewsAndFragments(Landroid/os/Bundle;)V
com.android.contacts.activities.ActionBarAdapter.onClose()Z
com.android.contacts.activities.PeopleActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity.onBackPressed()V
com.android.contacts.ContactSaveService.deliverCallbackOnUiThread(Landroid/content/Intent;)V
com.android.contacts.list.ContactListFilterControllerImpl.<init>(Landroid/content/Context;)V
com.android.contacts.list.ContactListFilterController.checkFilterValidity(Z)V
com.android.contacts.list.ContactListFilterControllerImpl.selectCustomFilter()V
com.android.contacts.list.ContactListFilterController.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.activities.PeopleActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.TransactionSafeActivity.onSearchRequested()Z
com.android.contacts.ContactsActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onFinishAction()V
com.android.contacts.activities.TransactionSafeActivity.onBackPressed()V
com.android.contacts.ContactsActivity.onBackPressed()V
com.android.contacts.ContactSaveService$2.run()V
com.android.contacts.list.ContactListFilterController.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.model.AccountTypeManagerImpl$1.run()V
com.android.contacts.list.ContactListFilterController.selectCustomFilter()V
com.android.contacts.util.AccountFilterUtil.handleAccountFilterResult(Lcom/android/contacts/list/ContactListFilterController;ILandroid/content/Intent;)V
com.android.contacts.activities.TransactionSafeActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.ContactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.TransactionSafeActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactsActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.OnContactBrowserActionListener.onFinishAction()V
com.android.contacts.activities.DialtactsActivity.onBackPressed()V
com.android.contacts.activities.GroupEditorActivity.onBackPressed()V
com.android.contacts.ContactsApplication.getSystemService(Ljava/lang/String;)Ljava/lang/Object;
com.android.contacts.list.ContactListFilterControllerImpl.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.list.DefaultContactBrowseListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneFavoriteFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneNumberPickerFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.activities.DialtactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.AttachPhotoActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactSelectionActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupBrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.JoinContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.NonPhoneActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ShowOrCreateActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.CallContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.AccountFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.CustomContactListFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.test.FragmentTestActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.ImportVCardActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.SelectAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactSelectionActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.GroupDetailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.JoinContactActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.AccountFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.CustomContactListFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.ContactBrowseListFragment.finish()V
com.android.contacts.list.ContactEntryListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.ContactEntryListFragment.finish()V
com.android.contacts.list.DefaultContactBrowseListFragment.finish()V
com.android.contacts.list.ContactEntryListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.finish()V
com.android.contacts.list.EmailAddressPickerFragment.finish()V
com.android.contacts.list.JoinContactListFragment.finish()V
com.android.contacts.list.PhoneNumberPickerFragment.finish()V
com.android.contacts.list.PostalAddressPickerFragment.finish()V
com.android.contacts.list.ContactBrowseListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.onClose()V
com.android.contacts.list.DefaultContactBrowseListFragment.onClose()V
com.android.contacts.list.EmailAddressPickerFragment.onClose()V
com.android.contacts.list.JoinContactListFragment.onClose()V
com.android.contacts.list.PhoneNumberPickerFragment.onClose()V
com.android.contacts.list.PostalAddressPickerFragment.onClose()V
com.android.providers.contacts.LegacyApiSupport.updateOrganizations(JLandroid/content/ContentValues;)I
com.android.contacts.model.EntityDeltaList.buildSplitContactDiff(Ljava/util/ArrayList;II[I)V
com.android.contacts.model.EntityDeltaList.buildSplitContactDiff(Ljava/util/ArrayList;[I)V
android.provider.Contacts$People.addToGroup(Landroid/content/ContentResolver;JJ)Landroid/net/Uri;
android.provider.Contacts$People.addToGroup(Landroid/content/ContentResolver;JLjava/lang/String;)Landroid/net/Uri;
android.provider.Contacts$People.addToMyContactsGroup(Landroid/content/ContentResolver;J)Landroid/net/Uri;
android.provider.Contacts$People.createPersonInMyContactsGroup(Landroid/content/ContentResolver;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.phone.SimContacts.actuallyImportOneSimContact(Landroid/database/Cursor;Landroid/content/ContentResolver;Landroid/accounts/Account;)V
com.android.phone.SimContacts.access$100(Landroid/database/Cursor;Landroid/content/ContentResolver;Landroid/accounts/Account;)V
com.android.phone.SimContacts.importOneSimContact(I)V
com.android.phone.SimContacts$ImportAllSimContactsThread.run()V
com.android.phone.SimContacts.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.SimContacts.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.phone.SimContacts.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.ADNList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.exchange.adapter.ContactsSyncAdapter.cleanup()V
com.android.exchange.adapter.AbstractSyncAdapter.cleanup()V
com.android.contacts.model.EntityDeltaList.beginKeepTogether()Landroid/content/ContentProviderOperation$Builder;
android.provider.Contacts$People.markAsContacted(Landroid/content/ContentResolver;J)V
android.provider.CallLog$Calls.addCall(Lcom/android/internal/telephony/CallerInfo;Landroid/content/Context;Ljava/lang/String;IIJI)Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Lcom/android/phone/CallLogAsync$AddCallArgs;)[Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.PostalAddressListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(IJ)V
com.android.vcard.VCardEntry$AnniversaryData.constructInsertOperation(Ljava/util/List;I)V
android.provider.Contacts$ContactMethods.addPostalLocation(Landroid/content/Context;JDD)V
com.android.contacts.list.LegacyPhoneNumberListAdapter.getPhoneUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(IJ)V
com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag.getStreamItemPhotoUri()Landroid/net/Uri;
com.android.contacts.detail.ContactDetailUpdatesFragment$2.onClick(Landroid/view/View;)V
com.android.exchange.adapter.ContactsSyncAdapter.dirtyContactsWithinDirtyGroups()V
com.android.exchange.adapter.ContactsSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.AbstractSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.contacts.ContactSaveService.setSuperPrimary(Landroid/content/Intent;)V
com.android.contacts.group.GroupBrowseListAdapter.getGroupUriFromId(J)Landroid/net/Uri;
com.android.contacts.group.GroupBrowseListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.group.GroupBrowseListAdapter.getSelectedGroupPosition()I
com.android.contacts.group.GroupBrowseListAdapter.setCursor(Landroid/database/Cursor;)V
com.android.contacts.group.GroupBrowseListFragment.requestSelectionToScreen()V
com.android.contacts.group.GroupBrowseListFragment.bindGroupList()V
com.android.contacts.group.GroupBrowseListFragment.access$400(Lcom/android/contacts/group/GroupBrowseListFragment;)V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.vcard.VCardEntry$NameData.constructInsertOperation(Ljava/util/List;I)V
android.provider.ContactsContract$Contacts.markAsContacted(Landroid/content/ContentResolver;J)V
com.android.contacts.list.ProviderStatusWatcher$2.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ProviderStatusWatcher$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactSaveService.addMembersToGroup(Landroid/content/ContentResolver;[JJ)V
com.android.contacts.ContactSaveService.createGroup(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity.getContactUriForEmail(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getContactUriForEmail(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.addCallAndContactMenuItems(Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addCallAndContactMenuItems(Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$2700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity$10.onCreateContextMenu(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$2700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
android.provider.ContactsContract$Directory.notifyDirectoryChange(Landroid/content/ContentResolver;)V
com.android.exchange.adapter.ContactsSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.AbstractSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.ContactsSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.AccountSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.EmailSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.AbstractSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.AccountSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.EmailSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.EmailSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.EmailSyncAdapter.getEstimate(Ljava/lang/String;)I
com.android.exchange.adapter.EmailSyncAdapter.getAutomaticLookback()V
com.android.contacts.detail.ContactLoaderFragment.getPreAuthorizedUri(Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.detail.ContactLoaderFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactSaveService.clearPrimary(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.buildJoinContactDiff(Ljava/util/ArrayList;JJ)V
com.android.providers.contacts.LegacyApiSupport.updatePhones(JLandroid/content/ContentValues;)I
android.provider.ContactsContract$ProfileSyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
com.android.providers.contacts.LegacyApiSupport.updateLegacyPhotoData(JJLandroid/content/ContentValues;)V
com.android.providers.contacts.LegacyApiSupport.updatePhotoByDataId(JLandroid/content/ContentValues;)I
com.android.vcard.VCardEntry$SipData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$NicknameData.constructInsertOperation(Ljava/util/List;I)V
com.android.common.contacts.DataUsageStatUpdater.update(Ljava/util/Collection;Ljava/util/Collection;Ljava/lang/String;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithAddress(Ljava/util/Collection;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithPhoneNumber(Ljava/util/Collection;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithRfc822Address(Ljava/util/Collection;)Z
com.android.mail.providers.UIProvider.incrementRecipientsTimesContacted(Landroid/content/Context;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage.updateSendStats(Lcom/android/mms/data/Conversation;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Long;
com.android.mms.data.WorkingMessage.access$800(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.data.WorkingMessage$2.run()V
com.android.mms.data.WorkingMessage$3.run()V
com.android.vcard.VCardEntry$OrganizationData.constructInsertOperation(Ljava/util/List;I)V
com.android.providers.telephony.SmsProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
android.provider.Contacts$Settings.setSetting(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.list.EmailAddressListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(IJ)V
com.android.contacts.list.LegacyPostalAddressListAdapter.getContactMethodUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneFavoriteFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.GroupMetaDataLoader.ensureIsGroupUri(Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.GroupMetaDataLoader.<init>(Landroid/content/Context;Landroid/net/Uri;)V
com.android.contacts.editor.ContactEditorFragment$5.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupDetailFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupEditorFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.editor.ContactEditorFragment$5.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupDetailFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupEditorFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.vcard.VCardEntry$AndroidCustomData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$WebsiteData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$BirthdayData.constructInsertOperation(Ljava/util/List;I)V
com.android.phone.ContactsAsyncHelper$ImageTracker.getPhotoUri()Landroid/net/Uri;
com.android.phone.CallCard.updatePhotoForCallState(Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.displayMainCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.phone.CallCard.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallCard.updateForegroundCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateNoCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateRingingCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallCard.updateState(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.phone.InCallScreen.updateIncomingCallWidgetHint(II)V
com.android.phone.InCallScreen.updateScreen()V
com.android.phone.InCallScreen.onResume()V
com.android.phone.InCallScreen.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.showPausePromptDialog(Lcom/android/internal/telephony/Connection;Ljava/lang/String;)V
com.android.phone.InCallScreen.requestUpdateBluetoothIndication()V
com.android.phone.InCallScreen.requestCloseOtaFailureNotice(J)V
com.android.phone.InCallScreen.requestCloseSpcErrorNotice(J)V
com.android.phone.InCallScreen.requestRemoveProviderInfoWithDelay()V
com.android.phone.InCallTouchUi.onGrabbedStateChange(Landroid/view/View;I)V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.syncWithPhoneState()Lcom/android/phone/InCallScreen$SyncWithPhoneStateStatus;
com.android.phone.InCallScreen.access$600(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.handleOtaCallEnd()V
com.android.phone.InCallScreen.access$500(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.handlePostOnDialChars(Landroid/os/AsyncResult;C)V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureNotice(I)V
com.android.phone.OtaUtils.otaShowSpcErrorNotice(I)V
com.android.phone.CallCard.updateCallStateWidgets(Lcom/android/internal/telephony/Call;)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.updateManageConferencePanelIfNecessary()V
com.android.phone.InCallScreen.requestUpdateScreen()V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.PhoneApp.dismissCallScreen()V
com.android.phone.InCallScreen.access$1000(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;C)V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.OtaUtils.otaShowProgramFailure(I)V
com.android.phone.OtaUtils.onOtaProvisionStatusChanged(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowProperScreen()V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.InCallScreen.onBackPressed()V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.updateAfterRadioTechnologyChange()V
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.PhoneApp.updateInCallScreen()V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowSuccessFailure()V
com.android.phone.PhoneApp.handleOtaspEvent(Landroid/os/Message;)V
com.android.phone.InCallScreen.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.access$400(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp.initForNewRadioTechnology()V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.EmergencyCallHelper.cleanup()V
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.DTMFTwelveKeyDialer.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.phone.PhoneApp.access$1100(Lcom/android/phone/PhoneApp;)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.DTMFTwelveKeyDialer.closeDialer(Z)V
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.DTMFTwelveKeyDialer.clearInCallScreenReference()V
com.android.phone.InCallScreen.closeDialpadInternal(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureDialog()V
com.android.phone.OtaUtils.otaShowProgramSuccessDialog()V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onDestroy()V
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.InCallScreen.onOpenCloseDialpad()V
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.vcard.VCardEntry$PostalData.constructInsertOperation(Ljava/util/List;I)V
android.provider.ContactsContract$ProfileSyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.providers.contacts.LegacyApiSupport.updateSettings(Landroid/content/ContentValues;)I
com.android.mms.data.Contact.getUri()Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.getContactUriForPhoneNumber(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationListItem.updateAvatarView()V
com.android.mms.ui.MessageListItem.updateAvatarView(Ljava/lang/String;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getContactUriForPhoneNumber(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationListItem.bind(Landroid/content/Context;Lcom/android/mms/data/Conversation;)V
com.android.mms.ui.ConversationListItem.updateFromView()V
com.android.mms.ui.MessageListItem.bindCommonMessage()V
com.android.mms.ui.MessageListItem.bindNotifInd()V
com.android.mms.ui.ConversationListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.ui.ConversationListItem.access$000(Lcom/android/mms/ui/ConversationListItem;)V
com.android.mms.ui.MessageListItem.access$500(Lcom/android/mms/ui/MessageListItem;)V
com.android.mms.ui.MessageListItem.bind(Lcom/android/mms/ui/MessageItem;ZI)V
com.android.mms.ui.ConversationListItem$1.run()V
com.android.mms.ui.MessageListItem$2.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.MessageListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.ui.MessageItem$PduLoadedCallback.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.util.ItemLoadedCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Lcom/android/mms/util/ThumbnailManager$ImageLoaded;Ljava/lang/Throwable;)V
com.android.mms.util.PduLoaderManager.getPdu(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.PduLoaderManager$PduTask$1.run()V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager$ThumbnailTask$1.run()V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MessageItem.<init>(Landroid/content/Context;Ljava/lang/String;Landroid/database/Cursor;Lcom/android/mms/ui/MessageListAdapter$ColumnsMap;Ljava/util/regex/Pattern;)V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager.getVideoThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.MessageListAdapter.getCachedMessageItem(Ljava/lang/String;JLandroid/database/Cursor;)Lcom/android/mms/ui/MessageItem;
com.android.mms.model.ImageModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.model.VideoModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.ComposeMessageActivity.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.data.WorkingMessage.setAttachment(ILandroid/net/Uri;Z)I
com.android.mms.ui.MmsThumbnailPresenter.presentImageThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/ImageModel;)V
com.android.mms.ui.MmsThumbnailPresenter.presentVideoThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/VideoModel;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.ui.ComposeMessageActivity$30.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivity.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivity.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.presentFirstSlide(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/SlideModel;)V
com.android.mms.ui.MessageUtils$ResizeImageResultCallback.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.MessageUtils$3$1.run()V
com.android.mms.ui.ComposeMessageActivity$32.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity$33.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.Presenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.ComposeMessageActivity$34.run()V
com.android.mms.ui.ComposeMessageActivity$35.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.AttachmentEditor.update(Lcom/android/mms/data/WorkingMessage;)Z
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.createViewFromResource(ILandroid/view/View;I)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivity.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.onRestart()V
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivity.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onRestart()V
com.android.mms.ui.ComposeMessageActivity$20.run()V
com.android.mms.ui.ComposeMessageActivity$40.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivity.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.vcard.VCardEntry$NoteData.constructInsertOperation(Ljava/util/List;I)V
com.android.providers.contacts.ContactsProvider2$PipeMonitor.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations.delete(J)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.deleteParser(Lcom/android/exchange/adapter/ContactsSyncAdapter$ContactOperations;)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.commandsParser()V
com.android.exchange.adapter.AbstractSyncParser.commandsParser()V
com.android.contacts.ContactSaveService.deleteGroup(Landroid/content/Intent;)V
com.android.contacts.GroupMemberLoader.createUri()Landroid/net/Uri;
com.android.contacts.GroupMemberLoader.<init>(Landroid/content/Context;J[Ljava/lang/String;)V
com.android.contacts.GroupMemberLoader.constructLoaderForGroupDetailQuery(Landroid/content/Context;J)Lcom/android/contacts/GroupMemberLoader;
com.android.contacts.GroupMemberLoader.constructLoaderForGroupEditorQuery(Landroid/content/Context;J)Lcom/android/contacts/GroupMemberLoader;
com.android.contacts.group.GroupDetailFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupEditorFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupDetailFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupEditorFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder.build()Landroid/net/Uri;
com.android.contacts.editor.AggregationSuggestionEngine.buildAggregationSuggestionUri(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)Landroid/net/Uri;
com.android.contacts.editor.AggregationSuggestionEngine.onNameChange(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.ContactEditorFragment.acquireAggregationSuggestions(Landroid/content/Context;Lcom/android/contacts/editor/RawContactEditorView;)V
com.android.contacts.editor.ContactEditorFragment.access$300(Lcom/android/contacts/editor/ContactEditorFragment;Landroid/content/Context;Lcom/android/contacts/editor/RawContactEditorView;)V
com.android.contacts.editor.ContactEditorFragment.bindEditors()V
com.android.contacts.editor.ContactEditorFragment$2.onRequest(I)V
com.android.contacts.editor.ContactEditorFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.editor.ContactEditorFragment.access$2100(Lcom/android/contacts/editor/ContactEditorFragment;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForExistingContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.Editor$EditorListener.onRequest(I)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onRemovePictureChosen()V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.ContactEditorFragment.setData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.ContactEditorFragment.rebindEditorsForNewContact(Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.LabeledEditorView.notifyEditorListener()V
com.android.contacts.editor.LabeledEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.PhotoEditorView$1.onClick(Landroid/view/View;)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onRemovePictureChosen()V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.createContact(Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.ContactEditorFragment.access$500(Lcom/android/contacts/editor/ContactEditorFragment;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.EventFieldEditorView.notifyEditorListener()V
com.android.contacts.editor.LabeledEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.PhoneticNameEditorView.notifyEditorListener()V
com.android.contacts.editor.StructuredNameEditorView.notifyEditorListener()V
com.android.contacts.editor.TextFieldsEditorView.notifyEditorListener()V
com.android.contacts.editor.EventFieldEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.PhoneticNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.detail.PhotoSelectionHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onRemovePictureChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onRemovePictureChosen()V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onUseAsPrimaryChosen()V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.editor.ContactEditorFragment.createContact()V
com.android.contacts.editor.ContactEditorFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.contacts.editor.ContactEditorFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.selectAccountAndCreateContact()V
com.android.contacts.editor.ContactEditorFragment$3$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.Editor.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.EventFieldEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.StructuredNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.StructuredNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView$1.onClick(Landroid/view/View;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.editor.PhotoActionPopup$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.EventFieldEditorView$2.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.EventFieldEditorView.clearAllFields()V
com.android.contacts.editor.EventFieldEditorView.onLabelRebuilt()V
com.android.contacts.editor.PhoneticNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView$2.afterTextChanged(Landroid/text/Editable;)V
com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.LabeledEditorView.onLabelRebuilt()V
com.android.contacts.datepicker.DatePickerDialog.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView$3.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.PhoneticNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.StructuredNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.TextFieldsEditorView.onLabelRebuilt()V
com.android.contacts.editor.EventFieldEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.LabeledEditorView$1.onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.PhoneticNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.StructuredNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.TextFieldsEditorView.onTypeSelectionChange(I)V
com.android.ex.chips.BaseRecipientAdapter$DefaultFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.providers.contacts.LegacyApiSupport.findFirstDataId(JLjava/lang/String;)J
com.android.contacts.vcard.ExportProcessor.runInternal()V
com.android.contacts.vcard.ExportProcessor.run()V
com.android.mms.ui.ComposeMessageActivity.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Boolean;
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.widget.QuickContactBadge.onClick(Landroid/view/View;)V
com.android.contacts.widget.LayoutSuppressingQuickContactBadge.onClick(Landroid/view/View;)V
com.android.mms.ui.QuickContactDivot.onClick(Landroid/view/View;)V
com.android.quicksearchbox.ui.ContactBadge.onClick(Landroid/view/View;)V
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendVCards(Ljavax/obex/Operation;Ljava/lang/String;ZLjava/lang/String;Z)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendCallLogVcards(ILjavax/obex/Operation;IIZ)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendPhonebookOneVcard(Ljavax/obex/Operation;IZLjava/lang/String;I)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendPhonebookVcards(Ljavax/obex/Operation;IIZLjava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullPhonebook([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/HeaderSet;Ljavax/obex/Operation;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullVcardEntry([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/Operation;Ljava/lang/String;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.onGet(Ljavax/obex/Operation;)I
com.android.mms.data.Conversation.blockingMarkAllSmsMessagesAsSeen(Landroid/content/Context;)V
com.android.mms.data.Conversation.access$800(Landroid/content/Context;)V
com.android.mms.data.Conversation$3.run()V
com.android.contacts.util.NameConverter.displayNameToStructuredName(Landroid/content/Context;Ljava/lang/String;)Ljava/util/Map;
com.android.contacts.editor.StructuredNameEditorView.rebuildStructuredName(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.StructuredNameEditorView.switchFromFullNameToStructuredName()V
com.android.contacts.util.NameConverter.displayNameToStructuredName(Landroid/content/Context;Ljava/lang/String;Landroid/content/ContentValues;)Landroid/content/ContentValues;
com.android.contacts.model.EntityModifier.migrateStructuredName(Landroid/content/Context;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/DataKind;)V
com.android.contacts.model.EntityModifier.migrateStateForNewContact(Landroid/content/Context;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/AccountType;)V
com.android.vcard.VCardComposer.init(Ljava/lang/String;[Ljava/lang/String;)Z
com.android.vcard.VCardComposer.init()Z
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getContactsSize()I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getPhonebookSize(I)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullVcardListing([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/HeaderSet;Ljavax/obex/Operation;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.<init>(Landroid/os/Handler;Landroid/content/Context;)V
com.android.bluetooth.pbap.BluetoothPbapService.startObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.access$500(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.parseIntent(Landroid/content/Intent;)V
com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread.run()V
com.android.bluetooth.pbap.BluetoothPbapService.onStartCommand(Landroid/content/Intent;II)I
com.android.bluetooth.pbap.BluetoothPbapService.startRfcommSocketListener()V
com.android.bluetooth.pbap.BluetoothPbapService.access$900(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.stopObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.onCreate()V
com.android.bluetooth.pbap.BluetoothPbapService.access$1100(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.contacts.ContactLoader.loadGroupMetaData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.mms.transaction.SmsReceiverService.storeMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.insertMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;ILjava/lang/String;)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.replaceMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.handleSmsReceived(Landroid/content/Intent;I)V
com.android.mms.transaction.SmsReceiverService.access$100(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
android.provider.Telephony$Sms$Outbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;ZJ)Landroid/net/Uri;
com.android.contacts.activities.ConfirmAddDetailActivity.startPhotoQuery(JLandroid/net/Uri;)V
com.android.contacts.activities.ConfirmAddDetailActivity.access$900(Lcom/android/contacts/activities/ConfirmAddDetailActivity;JLandroid/net/Uri;)V
com.android.phone.CallerInfoCache.refreshCacheEntry()V
com.android.phone.CallerInfoCache.access$400(Lcom/android/phone/CallerInfoCache;)V
com.android.phone.CallerInfoCache$CacheAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.phone.CallerInfoCache$CacheAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.transaction.MessageStatusService.updateMessageStatus(Landroid/content/Context;Landroid/net/Uri;[BLjava/lang/String;)Landroid/telephony/SmsMessage;
com.android.mms.transaction.MessageStatusService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.util.NameConverter.structuredNameToDisplayName(Landroid/content/Context;Ljava/util/Map;)Ljava/lang/String;
com.android.contacts.editor.StructuredNameEditorView.rebuildFullName(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.StructuredNameEditorView.switchFromStructuredNameToFullName()V
com.android.contacts.editor.AggregationSuggestionEngine.loadAggregationSuggestions(Landroid/net/Uri;)V
com.android.providers.contacts.ContactsProvider2.outputRawContactsAsVCard(Landroid/net/Uri;Ljava/io/OutputStream;Ljava/lang/String;[Ljava/lang/String;)V
com.android.providers.contacts.ContactsProvider2.openAssetFileLocal(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
com.android.providers.contacts.ContactsProvider2.openAssetFile(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader.loadInBackground()Lcom/android/contacts/list/CustomContactListFilterActivity$AccountSet;
com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader.loadInBackground()Ljava/lang/Object;
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.changeParser(Lcom/android/exchange/adapter/ContactsSyncAdapter$ContactOperations;)V
com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask.loadPhoto()V
com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask.loadPhoto()V
com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask.loadPhoto()V
com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.internal.telephony.CallerInfo.getCallerInfo(Landroid/content/Context;Ljava/lang/String;)Lcom/android/internal/telephony/CallerInfo;
com.android.internal.telephony.CallerInfo.getCallerId(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
com.android.phone.PhoneUtils.getCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Connection;)Lcom/android/internal/telephony/CallerInfo;
com.android.phone.PhoneUtils.placeCall(Landroid/content/Context;Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/net/Uri;ZLandroid/net/Uri;)I
com.android.phone.PhoneUtils$4.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallNotifier.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.startNonInteractiveOtasp(Landroid/content/Context;)I
com.android.phone.InCallScreenShowActivation.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity.startDisambiguationQuery(Ljava/lang/String;)V
com.android.contacts.activities.ConfirmAddDetailActivity.access$800(Lcom/android/contacts/activities/ConfirmAddDetailActivity;Ljava/lang/String;)V
com.android.contacts.util.NameConverter.structuredNameToDisplayName(Landroid/content/Context;Landroid/content/ContentValues;)Ljava/lang/String;
android.provider.Telephony$Sms$Sent.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.ui.ManageSimMessages.copyToPhoneMemory(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.internal.telephony.SMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.SMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processCdmaWapPdu([BILjava/lang/String;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.SMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.mms.ui.ManageSimMessages.deleteFromSim(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.access$500(Lcom/android/mms/ui/ManageSimMessages;Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.deleteAllFromSim()V
com.android.mms.ui.ManageSimMessages$2.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ManageSimMessages.access$600(Lcom/android/mms/ui/ManageSimMessages;)V
com.android.mms.ui.ManageSimMessages$3.onClick(Landroid/content/DialogInterface;I)V
android.widget.QuickContactBadge.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.contacts.widget.LayoutSuppressingQuickContactBadge.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.mms.ui.QuickContactDivot.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.quicksearchbox.ui.ContactBadge.assignContactFromPhone(Ljava/lang/String;Z)V
com.android.internal.telephony.CallerInfo.doSecondaryLookupIfNecessary(Landroid/content/Context;Ljava/lang/String;Lcom/android/internal/telephony/CallerInfo;)Lcom/android/internal/telephony/CallerInfo;
android.provider.Contacts$People.queryGroups(Landroid/content/ContentResolver;J)Landroid/database/Cursor;
android.provider.Telephony$Sms$Draft.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.util.Recycler$SmsRecycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.data.WorkingMessage.sendMmsWorker(Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.sendSmsWorker(Ljava/lang/String;Ljava/lang/String;J)V
com.android.mms.data.WorkingMessage.access$700(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.preSendSmsWorker(Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage.access$900(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.data.Contact$ContactsCache.getContactInfoForPhoneUris([Landroid/os/Parcelable;)Ljava/util/List;
com.android.mms.data.Contact.getByPhoneUris([Landroid/os/Parcelable;)Ljava/util/List;
com.android.mms.data.ContactList.blockingGetByUris([Landroid/os/Parcelable;)Lcom/android/mms/data/ContactList;
com.android.mms.ui.ComposeMessageActivity$29.run()V
com.android.mms.data.WorkingMessage.asyncDeleteDraftSmsMessage(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage$4.run()V
com.android.mms.data.WorkingMessage.readDraftSmsMessage(Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.data.WorkingMessage.discard()V
com.android.mms.data.WorkingMessage.access$000(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ComposeMessageActivity.saveDraft(Z)V
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Void;)Landroid/util/Pair;
com.android.mms.data.Conversation$ConversationQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.saveDraft(Z)V
com.android.mms.ui.ComposeMessageActivity.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivity.onStop()V
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.ui.ConversationList$ThreadListQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.data.WorkingMessage$MessageStatusListener.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onStop()V
com.android.contacts.list.CustomContactListFilterActivity$GroupDelta.fromSettings(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lcom/android/contacts/list/CustomContactListFilterActivity$GroupDelta;
android.provider.ContactsContract$SyncState.get(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)[B
com.android.phone.NotificationMgr$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.contacts.list.ProfileAndContactsLoader.loadProfile()Landroid/database/MatrixCursor;
com.android.contacts.list.ProfileAndContactsLoader.loadInBackground()Landroid/database/Cursor;
com.android.contacts.list.ProfileAndContactsLoader.loadInBackground()Ljava/lang/Object;
com.android.mms.data.Contact$ContactsCache.getContactInfoForPhoneNumber(Ljava/lang/String;)Lcom/android/mms/data/Contact;
com.android.mms.data.Contact$ContactsCache.getContactInfo(Lcom/android/mms/data/Contact;)Lcom/android/mms/data/Contact;
com.android.mms.data.Contact$ContactsCache.updateContact(Lcom/android/mms/data/Contact;)V
com.android.mms.data.Contact$ContactsCache.access$700(Lcom/android/mms/data/Contact$ContactsCache;Lcom/android/mms/data/Contact;)V
com.android.mms.data.Contact$ContactsCache$1.run()V
com.android.phone.BluetoothAtPhonebook.processCpbrCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook.access$1000(Lcom/android/phone/BluetoothAtPhonebook;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook.handleAccessPermissionResult(Landroid/content/Intent;)V
com.android.phone.BluetoothAtPhonebook$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
android.bluetooth.HeadsetBase$1.run()V
com.android.mms.data.Contact$ContactsCache.getContactInfoForSelf()Lcom/android/mms/data/Contact;
com.android.mms.ui.RecipientsAdapter.runQueryOnBackgroundThread(Ljava/lang/CharSequence;)Landroid/database/Cursor;
android.provider.Contacts$Settings.getSetting(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.activities.ConfirmAddDetailActivity.startExtraInfoQuery()V
com.android.contacts.activities.ConfirmAddDetailActivity.access$1200(Lcom/android/contacts/activities/ConfirmAddDetailActivity;)V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.queryPhotosForPreload()V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.preloadPhotosInBackground()V
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getContactNamesByNumber(Ljava/lang/String;)Ljava/util/ArrayList;
com.android.bluetooth.pbap.BluetoothPbapObexServer.createList(IILjava/lang/String;Ljava/lang/StringBuilder;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.sendVcardListingXml(ILjavax/obex/Operation;IILjava/lang/String;Ljava/lang/String;)I
com.android.contacts.list.DirectoryListLoader.loadInBackground()Landroid/database/Cursor;
com.android.contacts.list.DirectoryListLoader.loadInBackground()Ljava/lang/Object;
com.android.mms.data.Contact$ContactsCache.getContactInfoForEmailAddress(Ljava/lang/String;)Lcom/android/mms/data/Contact;
com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMemberFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.voicedialer.VoiceContact.getVoiceContacts(Landroid/app/Activity;)Ljava/util/List;
com.android.voicedialer.CommandRecognizerEngine.setupGrammar()V
com.android.voicedialer.RecognizerEngine.setupGrammar()V
com.android.voicedialer.RecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.CommandRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.PhoneTypeChoiceRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.VoiceDialerActivity$3.run()V
com.android.voicedialer.VoiceDialerActivity$4.run()V
com.android.browser.AutofillHandler$LoadFromDb.run()V
com.android.browser.AutofillHandler.asyncLoadFromDb()V
com.android.browser.BrowserSettings.<init>(Landroid/content/Context;)V
com.android.browser.BrowserSettings.initialize(Landroid/content/Context;)V
com.android.browser.Browser.onCreate()V
com.android.mms.ui.ClassZeroActivity.storeMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.replaceMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.saveMessage()V
com.android.mms.ui.ClassZeroActivity.access$200(Lcom/android/mms/ui/ClassZeroActivity;)V
com.android.mms.ui.ClassZeroActivity$3.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.data.WorkingMessage.deleteDraftSmsMessage(J)V
android.provider.ContactsContract$SyncState.getWithUri(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)Landroid/util/Pair;
com.android.contacts.ContactLoader.loadDirectoryMetaData(Lcom/android/contacts/ContactLoader$Result;)V
android.provider.ContactsContract$ProfileSyncState.getWithUri(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)Landroid/util/Pair;
com.android.vcard.VCardComposer.initWithRawContactsEntityUri(Landroid/net/Uri;)Z
com.android.inputmethod.latin.ContactsDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask.run()V
com.android.inputmethod.latin.WhitelistDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ContactsDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ExpandableDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ExpandableDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ExpandableDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ExpandableDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.UserDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.UserHistoryDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.WhitelistDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.startDictionaryLoadingTaskLocked()V
com.android.inputmethod.latin.ContactsDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.Dictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.UserDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.WhitelistDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ExpandableDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.UserDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.UserHistoryDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.WhitelistDictionary.reloadDictionaryIfRequired()Z
com.android.inputmethod.latin.ContactsDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.Dictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserHistoryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.WhitelistDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.loadDictionary()V
com.android.inputmethod.latin.UserDictionary.loadDictionary()V
com.android.inputmethod.latin.UserHistoryDictionary.loadDictionary()V
com.android.inputmethod.latin.WhitelistDictionary.loadDictionary()V
com.android.inputmethod.latin.AutoCorrection.isValidWord(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/CharSequence;Z)Z
com.android.inputmethod.latin.DictionaryCollection.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestions(Landroid/view/textservice/TextInfo;Ljava/lang/String;I)Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserHistoryDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.WhitelistDictionary.blockingReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ContactsDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.Dictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserHistoryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.WhitelistDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.DictionaryCollection.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.Suggest.getSuggestedWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/keyboard/ProximityInfo;I)Lcom/android/inputmethod/latin/SuggestedWords;
com.android.inputmethod.latin.ContactsDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserHistoryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;ILandroid/content/SharedPreferences;)V
com.android.inputmethod.latin.AutoCorrection.allowsToBeAutoCorrected(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/CharSequence;Z)Z
com.android.inputmethod.latin.LatinIME.pickSuggestionManuallyWhileInBatchEdit(ILjava/lang/CharSequence;IILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestions(Landroid/view/textservice/TextInfo;I)Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession.onGetSuggestionsMultiple([Landroid/view/textservice/TextInfo;IZ)[Landroid/view/textservice/SuggestionsInfo;
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.DictionaryCollection.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.Suggest.getAllBigrams(Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/WordComposer;)V
com.android.inputmethod.latin.LatinIME.updateSuggestions()V
com.android.inputmethod.latin.ExpandableDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary.<init>(Landroid/content/Context;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.UserHistoryDictionary.getInstance(Landroid/content/Context;Ljava/lang/String;ILandroid/content/SharedPreferences;)Lcom/android/inputmethod/latin/UserHistoryDictionary;
com.android.inputmethod.latin.AutoCorrection.hasAutoCorrectionForConsideredWord(Ljava/util/concurrent/ConcurrentHashMap;Lcom/android/inputmethod/latin/WordComposer;Ljava/util/ArrayList;Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.LatinIME.pickSuggestionManually(ILjava/lang/CharSequence;II)V
com.android.inputmethod.latin.Suggest.getBigramPredictions(Ljava/lang/CharSequence;)Lcom/android/inputmethod/latin/SuggestedWords;
com.android.inputmethod.latin.LatinIME.commitCurrentAutoCorrection(ILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.commitTyped(Landroid/view/inputmethod/InputConnection;I)V
com.android.inputmethod.latin.LatinIME.resetEntireInputState()V
com.android.inputmethod.latin.LatinIME$UIHandler.postUpdateSuggestions()V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.UserHistoryDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.WhitelistDictionary.<init>(Landroid/content/Context;I)V
com.android.inputmethod.latin.WhitelistDictionary.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.LatinIME.initSuggest()V
com.android.inputmethod.latin.AutoCorrection.computeAutoCorrectionWord(Ljava/util/concurrent/ConcurrentHashMap;Lcom/android/inputmethod/latin/WordComposer;Ljava/util/ArrayList;Ljava/lang/CharSequence;FLjava/lang/CharSequence;)Ljava/lang/CharSequence;
com.android.inputmethod.latin.suggestions.SuggestionsView$Listener.pickSuggestionManually(ILjava/lang/CharSequence;II)V
com.android.inputmethod.latin.LatinIME.updateBigramPredictions()V
com.android.inputmethod.latin.LatinIME.handleSeparator(IIII)Z
com.android.inputmethod.latin.LatinIME.handleClose()V
com.android.inputmethod.latin.LatinIME.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.inputmethod.latin.LatinIME.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.onUpdateSelection(IIIIII)V
com.android.inputmethod.latin.LatinIME.addWordToDictionary(Ljava/lang/String;)Z
com.android.inputmethod.latin.LatinIME.handleBackspaceWhileInBatchEdit(ILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.handleCharacterWhileInBatchEdit(IIIILandroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.onRefreshKeyboard()V
com.android.inputmethod.latin.LatinIME.onStartInputViewInternal(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.LatinIME.restartSuggestionsOnWordBeforeCursor(Landroid/view/inputmethod/InputConnection;Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.revertCommit(Landroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.LatinIME.switchToKeyboardView()V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.createDictAndProximity(Ljava/util/Locale;)Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.Suggest.initWhitelistAndAutocorrectAndPool(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.LatinIME.onCreate()V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.SuggestionsView.onClick(Landroid/view/View;)V
com.android.inputmethod.latin.LatinIME$UIHandler.postUpdateBigramPredictions()V
com.android.inputmethod.latin.LatinIME.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.launchSettingsClass(Ljava/lang/Class;)V
com.android.inputmethod.keyboard.KeyboardActionListener.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.suggestions.SuggestionsView$Listener.addWordToDictionary(Ljava/lang/String;)Z
com.android.inputmethod.latin.LatinIME.handleBackspace(I)V
com.android.inputmethod.latin.LatinIME.handleCharacter(IIII)V
com.android.inputmethod.latin.SubtypeSwitcher.updateSubtype(Landroid/view/inputmethod/InputMethodSubtype;)V
com.android.inputmethod.latin.LatinIME.access$300(Lcom/android/inputmethod/latin/LatinIME;Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.LatinIME.restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(Landroid/view/inputmethod/InputConnection;)V
com.android.inputmethod.latin.spellcheck.DictionaryPool.take()Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.Suggest.<init>(Landroid/content/Context;Ljava/io/File;JJLjava/util/Locale;)V
com.android.inputmethod.latin.Suggest.initAsynchronously(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onCustomRequest(I)Z
com.android.inputmethod.keyboard.KeyboardActionListener.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.launchDebugSettings()V
com.android.inputmethod.latin.LatinIME.launchSettings()V
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.callListenerOnCodeInput(Lcom/android/inputmethod/keyboard/Key;III)V
com.android.inputmethod.latin.suggestions.SuggestionsView.addToDictionary(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.LatinIME.onCurrentInputMethodSubtypeChanged(Landroid/view/inputmethod/InputMethodSubtype;)V
com.android.inputmethod.latin.SubtypeSwitcher.updateAllParameters()V
com.android.inputmethod.latin.SubtypeSwitcher.updateEnabledSubtypes()V
com.android.inputmethod.latin.LatinIME$UIHandler.onStartInputView(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.latin.spellcheck.DictionaryPool.takeOrGetNull()Lcom/android/inputmethod/latin/spellcheck/DictAndProximity;
com.android.inputmethod.latin.spellcheck.DictionaryPool.take()Ljava/lang/Object;
com.android.inputmethod.latin.Suggest.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.keyboard.KeyboardActionListener.onCustomRequest(I)Z
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onCustomRequest(I)Z
com.android.inputmethod.keyboard.LatinKeyboardView.invokeCodeInput(I)V
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME.access$700(Lcom/android/inputmethod/latin/LatinIME;)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.detectAndSendKey(Lcom/android/inputmethod/keyboard/Key;II)V
com.android.inputmethod.latin.SubtypeSwitcher.init(Lcom/android/inputmethod/latin/LatinIME;)V
com.android.inputmethod.latin.SubtypeSwitcher.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.inputmethod.latin.SubtypeSwitcher.updateParametersOnStartInputView()V
com.android.inputmethod.latin.LatinIME.onStartInputView(Landroid/view/inputmethod/EditorInfo;Z)V
com.android.inputmethod.keyboard.LatinKeyboardView.invokeCustomRequest(I)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onCodeInput(III)V
com.android.inputmethod.keyboard.LatinKeyboardView.onLongPress(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onCodeInput(III)V
com.android.inputmethod.latin.LatinIME$3.onClick(Landroid/content/DialogInterface;I)V
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onTextInput(Ljava/lang/CharSequence;)V
com.android.inputmethod.keyboard.PointerTracker.onRegisterKey(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.PointerTracker.onUpEventInternal()V
com.android.inputmethod.keyboard.LatinKeyboardView.openMoreKeysKeyboardIfRequired(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onCodeInput(III)V
com.android.inputmethod.keyboard.PointerTracker.startRepeatKey(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.PointerTracker.onMoveEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker.onPhantomUpEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker.onUpEvent(IIJ)V
com.android.inputmethod.keyboard.LatinKeyboardView.access$000(Lcom/android/inputmethod/keyboard/LatinKeyboardView;Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.PointerTracker.onDownEventInternal(IIJ)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.LatinKeyboardView.processMotionEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.PointerTracker.processMotionEvent(IIIJLcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointersExcept(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointersOlderThan(Lcom/android/inputmethod/keyboard/PointerTracker;J)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startLongPressTimer(I)V
com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler.startLongPressTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.PointerTracker.onDownEvent(IIJLcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startKeyRepeatTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler$ProcessMotionEvent.processMotionEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.latin.suggestions.SuggestionsView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointers(J)V
com.android.inputmethod.keyboard.PointerTracker.onCancelEvent(IIJ)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startLongPressTimer(I)V
com.android.inputmethod.keyboard.PointerTracker$TimerProxy.startLongPressTimer(Lcom/android/inputmethod/keyboard/PointerTracker;)V
com.android.inputmethod.keyboard.PointerTracker.onShowMoreKeysPanel(IILcom/android/inputmethod/keyboard/PointerTracker$KeyEventHandler;)V
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler.handleSuddenJumping(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.SuddenJumpingTouchEventHandler.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardSwitcher.startLongPressTimer(I)V
com.android.inputmethod.keyboard.PointerTracker.startLongPressTimer(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.LatinKeyboardView.openMoreKeysPanel(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.LatinKeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.accessibility.AccessibilityEntityProvider.simulateKeyPress(Lcom/android/inputmethod/keyboard/Key;)V
com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions.startLongPressTimer(I)V
com.android.inputmethod.accessibility.AccessibilityEntityProvider.performActionForKey(Lcom/android/inputmethod/keyboard/Key;ILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.dispatchHoverEvent(Landroid/view/MotionEvent;Lcom/android/inputmethod/keyboard/PointerTracker;)Z
com.android.inputmethod.keyboard.internal.KeyboardState.onPressShift()V
com.android.inputmethod.accessibility.AccessibilityEntityProvider.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onHoverKey(Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.LatinKeyboardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.internal.KeyboardState.onPressKey(IZI)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onTransitionKey(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.inputmethod.keyboard.KeyboardSwitcher.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.latin.LatinIME.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.keyboard.KeyboardActionListener.onPressKey(I)V
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1.performAction(IILandroid/os/Bundle;)Z
com.android.inputmethod.keyboard.MoreKeysKeyboardView$1.onPressKey(I)V
com.android.inputmethod.keyboard.PointerTracker.callListenerOnPressAndCheckKeyboardLayoutChange(Lcom/android/inputmethod/keyboard/Key;)Z
com.android.inputmethod.latin.suggestions.MoreSuggestionsView$1.onPressKey(I)V
com.android.inputmethod.keyboard.KeyboardActionListener$Adapter.onPressKey(I)V
com.android.inputmethod.latin.suggestions.SuggestionsView$2.onPressKey(I)V
com.android.contacts.model.EntityModifier.parseStructuredNameExtra(Landroid/content/Context;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Landroid/os/Bundle;)V
com.android.contacts.model.EntityModifier.parseExtras(Landroid/content/Context;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity.setEntityDeltaList(Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment.setIntentExtras(Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity.access$300(Lcom/android/contacts/activities/ConfirmAddDetailActivity;Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.onPostExecute(Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.ContactLoader.loadStreamItems(Lcom/android/contacts/ContactLoader$Result;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.hasContentChanged()Z
com.android.inputmethod.latin.ExpandableBinaryDictionary.hasContentChanged()Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.hasContentChanged()Z
com.android.inputmethod.latin.ExpandableBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ContactsBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.UserBinaryDictionary.syncReloadDictionaryInternal()V
com.android.inputmethod.latin.ContactsBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary$AsyncReloadDictionaryTask.run()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.UserBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserBinaryDictionary.syncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ExpandableBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ExpandableBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.UserBinaryDictionary.asyncReloadDictionaryIfRequired()V
com.android.inputmethod.latin.ContactsBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.UserBinaryDictionary.isValidWord(Ljava/lang/CharSequence;)Z
com.android.inputmethod.latin.ContactsBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.UserBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.UserBinaryDictionary.getWords(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;Lcom/android/inputmethod/keyboard/ProximityInfo;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.UserBinaryDictionary.loadDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getBigrams(Lcom/android/inputmethod/latin/WordComposer;Ljava/lang/CharSequence;Lcom/android/inputmethod/latin/Dictionary$WordCallback;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.<init>(Landroid/content/Context;ILjava/util/Locale;)V
com.android.inputmethod.latin.UserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.LatinIME.resetContactsDictionary(Lcom/android/inputmethod/latin/Dictionary;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.<init>(Landroid/content/Context;ILjava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.<init>(Landroid/content/Context;Ljava/util/Locale;)V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.inputmethod.latin.UserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.LatinIME.loadSettings()V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.startUsingContactsDictionaryLocked()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.onCreate()V
com.android.exchange.ContactsSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.calendar.event.AttendeesView.addOneAttendee(Lcom/android/calendar/CalendarEventModel$Attendee;)V
com.android.calendar.event.AttendeesView.addAttendees(Ljava/lang/String;)V
com.android.calendar.event.AttendeesView.addAttendees(Ljava/util/ArrayList;)V
com.android.calendar.event.AttendeesView.addAttendees(Ljava/util/HashMap;)V
com.android.calendar.EventInfoFragment.updateAttendees(Landroid/view/View;)V
com.android.calendar.EventInfoFragment.initAttendeesCursor(Landroid/view/View;)V
com.android.calendar.EventInfoFragment.access$1900(Lcom/android/calendar/EventInfoFragment;Landroid/view/View;)V
com.android.calendar.EventInfoFragment$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.AsyncQueryService.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.internal.telephony.CallerInfoAsyncQuery.startQuery(ILandroid/content/Context;Ljava/lang/String;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/internal/telephony/CallerInfoAsyncQuery;
com.android.phone.PhoneUtils.startGetCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Connection;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/phone/PhoneUtils$CallerInfoToken;
com.android.phone.CallCard.displaySecondaryCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.CallNotifier.showMissedCallNotification(Lcom/android/internal/telephony/Connection;J)V
com.android.phone.CallNotifier.startIncomingCallQuery(Lcom/android/internal/telephony/Connection;)V
com.android.phone.ManageConferenceUtils.updateManageConferenceRow(ILcom/android/internal/telephony/Connection;Z)V
com.android.phone.PhoneUtils.startGetCallerInfo(Landroid/content/Context;Lcom/android/internal/telephony/Call;Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;Ljava/lang/Object;)Lcom/android/phone/PhoneUtils$CallerInfoToken;
com.android.phone.CallCard.updateAlreadyDisconnected(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallNotifier.onCdmaCallWaitingReject()V
com.android.phone.CallNotifier.onNewRingingConnection(Landroid/os/AsyncResult;)V
com.android.phone.ManageConferenceUtils.updateManageConferencePanel(Ljava/util/List;)V
com.android.phone.NotificationMgr.updateInCallNotification(Z)V
com.android.phone.CallNotifier.sendCdmaCallWaitingReject()V
com.android.phone.InCallScreen.setInCallScreenMode(Lcom/android/phone/InCallUiState$InCallScreenMode;)V
com.android.phone.NotificationMgr.updateInCallNotification()V
com.android.phone.NotificationMgr.updateNotificationAndLaunchIncomingCallUi()V
com.android.phone.PhoneUtils.hangupRingingCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.InCallScreen.checkOtaspStateOnResume()Z
com.android.phone.InCallScreen.endInCallScreenSession(Z)V
com.android.phone.InCallScreen.internalResolveIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.resetInCallScreenMode()V
com.android.phone.InCallScreen.onPause()V
com.android.phone.NotificationMgr.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.NotificationMgr.updateNotificationsAtStartup()V
com.android.phone.CallNotifier.showIncomingCall()V
com.android.phone.BluetoothHandsfree$16.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.CallNotifier.onCustomRingtoneQueryTimeout(Ljava/lang/String;)V
com.android.phone.CallNotifier.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.InCallScreen.hangupRingingCall()V
com.android.phone.PhoneUtils.hangup(Lcom/android/internal/telephony/CallManager;)Z
com.android.phone.PhoneUtils.hangupRingingAndActive(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.InCallScreen.bailOutAfterErrorDialog()V
com.android.phone.InCallScreen.endInCallScreenSession()V
com.android.phone.InCallScreen.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.onNewIntent(Landroid/content/Intent;)V
com.android.phone.PhoneApp.clearInCallScreenMode()V
com.android.phone.NotificationMgr.init(Lcom/android/phone/PhoneApp;)Lcom/android/phone/NotificationMgr;
com.android.phone.CallNotifier.onCustomRingQueryComplete()V
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalHangup()V
com.android.phone.PhoneApp$NotificationBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneUtils.handleHeadsetHook(Lcom/android/internal/telephony/Phone;Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.access$2300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.addVoiceMailNumberPanel()V
com.android.phone.InCallScreen.delayedCleanupAfterDisconnect()V
com.android.phone.InCallScreen.dontAddVoiceMailNumber()V
com.android.phone.InCallScreen.onMMICancel()V
com.android.phone.InCallScreen.onMMIComplete(Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.otaShowHome()V
com.android.phone.CallNotifier.ignoreAllIncomingCalls(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.doReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.onCreate()V
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen$12.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$13.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.InCallScreen.access$1100(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1200(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$800(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$900(Lcom/android/phone/InCallScreen;Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.onClickOtaActivateNextButton()V
com.android.phone.OtaUtils.otaShowActivateScreen()V
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.InCallScreen$14.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$15.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.OtaUtils.onClickOtaTryAgainButton()V
com.android.phone.OtaUtils.onOtaCloseFailureNotice()V
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getPhonebookNameList(I)Ljava/util/ArrayList;
com.android.contacts.model.AccountWithDataSet.hasData(Landroid/content/Context;)Z
com.android.contacts.list.AccountFilterActivity.loadAccountFilters(Landroid/content/Context;)Ljava/util/List;
com.android.contacts.list.AccountFilterActivity.access$100(Landroid/content/Context;)Ljava/util/List;
com.android.contacts.list.AccountFilterActivity$FilterLoader.loadInBackground()Ljava/util/List;
com.android.contacts.list.AccountFilterActivity$FilterLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.calllog.CallLogAdapter.getBetterNumberFromContacts(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.calllog.CallLogFragment.callSelectedEntry()V
android.provider.ContactsContract$ProfileSyncState.get(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)[B
com.android.phone.BluetoothAtPhonebook.queryPhonebook(Ljava/lang/String;Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;)Z
com.android.phone.BluetoothAtPhonebook.getPhonebookResult(Ljava/lang/String;Z)Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;
com.android.phone.BluetoothAtPhonebook.access$500(Lcom/android/phone/BluetoothAtPhonebook;Ljava/lang/String;Z)Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;
com.android.phone.BluetoothAtPhonebook$2.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleReadCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.contacts.ContactsUtils.getThumbnailSize(Landroid/content/Context;)I
com.android.contacts.activities.AttachPhotoActivity.saveContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.PhotoEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.AttachPhotoActivity.access$000(Lcom/android/contacts/activities/AttachPhotoActivity;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.BaseRawContactEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.AttachPhotoActivity$1.onContactLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.setPhoto(JLandroid/graphics/Bitmap;Ljava/lang/String;)V
com.android.contacts.editor.RawContactEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.RawContactReadOnlyEditorView.setPhotoBitmap(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.AttachPhotoActivity$Listener.onContactLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.access$2300(Lcom/android/contacts/editor/ContactEditorFragment;JLandroid/graphics/Bitmap;Ljava/lang/String;)V
com.android.contacts.activities.AttachPhotoActivity$2.onLoadComplete(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.AttachPhotoActivity$2.onLoadComplete(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.doInBackground([Landroid/content/Intent;)Lcom/android/contacts/model/EntityDeltaList;
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.interactions.ImportExportDialogFragment.doShareVisibleContacts()V
com.android.contacts.interactions.ImportExportDialogFragment.access$100(Lcom/android/contacts/interactions/ImportExportDialogFragment;)V
com.android.contacts.interactions.ImportExportDialogFragment$2.onClick(Landroid/content/DialogInterface;I)V
com.android.inputmethod.latin.ContactsBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.loadDictionaryAsync()V
com.android.inputmethod.latin.ExpandableBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.ContactsBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.generateBinaryDictionary()V
com.android.inputmethod.latin.UserBinaryDictionary.generateBinaryDictionary()V
android.widget.QuickContactBadge.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.calendar.event.AttendeesView.updateAttendeeView(Lcom/android/calendar/event/EditEventHelper$AttendeeItem;)Landroid/view/View;
com.android.contacts.widget.LayoutSuppressingQuickContactBadge.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.mms.ui.QuickContactDivot.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.quicksearchbox.ui.ContactBadge.assignContactFromEmail(Ljava/lang/String;Z)V
com.android.calendar.event.AttendeesView.access$100(Lcom/android/calendar/event/AttendeesView;Lcom/android/calendar/event/EditEventHelper$AttendeeItem;)Landroid/view/View;
com.android.calendar.event.AttendeesView.constructAttendeeView(Lcom/android/calendar/event/EditEventHelper$AttendeeItem;)Landroid/view/View;
com.android.calendar.event.AttendeesView.onClick(Landroid/view/View;)V
com.android.mms.ui.QuickContactDivot.assignContactFromEmail(Ljava/lang/String;)V
com.android.calendar.event.AttendeesView$PresenceQueryHandler$1.run()V
com.android.mms.ui.Divot.assignContactFromEmail(Ljava/lang/String;)V
com.android.contacts.model.AccountTypeWithDataSet.hasData(Landroid/content/Context;)Z
com.android.contacts.model.AccountTypeManagerImpl.findUsableInvitableAccountTypes(Landroid/content/Context;)Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl.access$400(Lcom/android/contacts/model/AccountTypeManagerImpl;Landroid/content/Context;)Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl.getUsableInvitableAccountTypes()Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl$FindInvitablesTask.doInBackground([Ljava/lang/Void;)Ljava/util/Map;
com.android.contacts.model.AccountTypeManager.getUsableInvitableAccountTypes()Ljava/util/Map;
com.android.contacts.model.AccountTypeManagerImpl$FindInvitablesTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactLoader.loadInvitableAccountTypes(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.PhotoSelectionHandler.getPhotoPickSize()I
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.getPhotoPickSize()I
com.android.contacts.detail.PhotoSelectionHandler.<init>(Landroid/content/Context;Landroid/view/View;IZLcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.getPhotoPickSize()I
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.<init>(Landroid/content/Context;Landroid/view/View;IZLcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.<init>(Lcom/android/contacts/activities/PhotoSelectionActivity;Landroid/content/Context;Landroid/view/View;ILcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.<init>(Landroid/content/Context;Landroid/view/View;IZLcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.<init>(Lcom/android/contacts/editor/ContactEditorFragment;Landroid/content/Context;Lcom/android/contacts/editor/BaseRawContactEditorView;ILcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.<init>(Lcom/android/contacts/activities/PhotoSelectionActivity;Landroid/content/Context;Landroid/view/View;ILcom/android/contacts/model/EntityDeltaList;Lcom/android/contacts/activities/PhotoSelectionActivity$1;)V
com.android.contacts.editor.ContactEditorFragment.bindPhotoHandler(Lcom/android/contacts/editor/BaseRawContactEditorView;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.PhotoSelectionActivity.attachPhotoHandler()V
com.android.contacts.activities.PhotoSelectionActivity.displayPhoto()V
com.android.contacts.activities.PhotoSelectionActivity.access$000(Lcom/android/contacts/activities/PhotoSelectionActivity;)V
com.android.contacts.activities.PhotoSelectionActivity$2.run()V
com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.contacts.calllog.DefaultVoicemailNotifier$DefaultNameLookupQuery.query(Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.calllog.DefaultVoicemailNotifier$NameLookupQuery.query(Ljava/lang/String;)Ljava/lang/String;
com.android.contacts.calllog.DefaultVoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.calllog.CallLogNotificationsService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.calllog.VoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.queryForContactId(Landroid/content/ContentResolver;J)J
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.loadThumbnails(Z)V
com.android.contacts.ContactPhotoManagerImpl$LoaderThread.loadPhotosInBackground()V
com.android.providers.contacts.ContactsProvider2.query(Landroid/database/sqlite/SQLiteDatabase;Landroid/database/sqlite/SQLiteQueryBuilder;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.queryWithContactIdAndLookupKey(Landroid/database/sqlite/SQLiteQueryBuilder;Landroid/database/sqlite/SQLiteDatabase;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.mms.transaction.SmsReceiverService.moveOutboxMessagesToFailedBox()I
com.android.mms.transaction.SmsReceiverService.handleBootCompleted()V
com.android.mms.transaction.SmsReceiverService.access$200(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.inputmethod.latin.ContactsBinaryDictionary.getContactCount()I
com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.getContactCount()I
android.provider.Contacts$People.tryGetMyContactsGroupId(Landroid/content/ContentResolver;)J
android.provider.Telephony$Sms$Inbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;Z)Landroid/net/Uri;
com.android.contacts.ContactsListActivity.getContactUri(I)Landroid/net/Uri;
com.android.contacts.ContactsListActivity.getUriToQuery()Landroid/net/Uri;
com.android.contacts.ContactsListActivity.getSelectedUri(I)Landroid/net/Uri;
Permission:android.permission.SEND_SMS

155 Callers:

com.android.internal.telephony.IccSmsInterfaceManager.enforceReceiveAndSend(Ljava/lang/String;)V
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.enforceReceiveAndSend(Ljava/lang/String;)V
com.android.internal.telephony.gsm.SimSmsInterfaceManager.enforceReceiveAndSend(Ljava/lang/String;)V
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.IccSmsInterfaceManager.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.ISms$Stub.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.IccSmsInterfaceManager.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.ISms$Stub.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.ISms$Stub$Proxy.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.ISms.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.ISms$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.ISms$Stub$Proxy.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.ISms.updateMessageOnIccEf(II[B)Z
android.telephony.SmsManager.copyMessageToIcc([B[BI)Z
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccSmsInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.telephony.SmsManager.deleteMessageFromIcc(I)Z
android.telephony.SmsManager.updateMessageOnIcc(II[B)Z
android.telephony.gsm.SmsManager.copyMessageToSim([B[BI)Z
android.telephony.gsm.SmsManager.deleteMessageFromSim(I)Z
com.android.providers.telephony.SmsProvider.deleteMessageFromIcc(Ljava/lang/String;)I
android.telephony.gsm.SmsManager.updateMessageOnSim(II[B)Z
com.android.providers.telephony.SmsProvider.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.internal.telephony.IccSmsInterfaceManager.sendData(Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.ISms$Stub$Proxy.sendData(Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.sendData(Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.gsm.SimSmsInterfaceManager.sendData(Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.IccSmsInterfaceManagerProxy.sendData(Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.ISms$Stub.sendData(Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.ISms.sendData(Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
android.telephony.SmsManager.sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
android.telephony.gsm.SmsManager.sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.IccSmsInterfaceManager.sendText(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.ISms$Stub$Proxy.sendText(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.sendText(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.gsm.SimSmsInterfaceManager.sendText(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.IccSmsInterfaceManagerProxy.sendText(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.ISms$Stub.sendText(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.ISms.sendText(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
android.telephony.SmsManager.sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
android.telephony.gsm.SmsManager.sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
android.telephony.SmsManager.sendMultipartTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V
android.telephony.gsm.SmsManager.sendMultipartTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V
com.android.mms.transaction.SmsSingleRecipientSender.sendMessage(J)Z
com.android.mms.transaction.SmsMessageSender.sendMessage(J)Z
com.android.mms.transaction.MessageSender.sendMessage(J)Z
com.android.mms.transaction.SmsReceiverService.sendFirstQueuedMessage()V
com.android.mms.ui.NoConfirmationSendService.onHandleIntent(Landroid/content/Intent;)V
com.android.mms.data.WorkingMessage.sendMmsWorker(Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.sendSmsWorker(Ljava/lang/String;Ljava/lang/String;J)V
com.android.mms.transaction.SmsReceiverService.handleBootCompleted()V
com.android.mms.transaction.SmsReceiverService.handleSendMessage()V
com.android.mms.transaction.SmsReceiverService.handleServiceStateChanged(Landroid/content/Intent;)V
com.android.mms.transaction.SmsReceiverService.handleSmsSent(Landroid/content/Intent;I)V
com.android.mms.data.WorkingMessage.access$700(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.preSendSmsWorker(Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.transaction.SmsReceiverService.access$200(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.mms.transaction.SmsReceiverService.access$400(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.mms.transaction.SmsReceiverService.access$300(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;)V
com.android.mms.transaction.SmsReceiverService.access$000(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
com.android.mms.data.WorkingMessage$2.run()V
com.android.mms.data.WorkingMessage.access$900(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage$3.run()V
com.android.internal.telephony.IccSmsInterfaceManager.sendMultipartText(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V
com.android.internal.telephony.ISms$Stub$Proxy.sendMultipartText(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.sendMultipartText(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V
com.android.internal.telephony.gsm.SimSmsInterfaceManager.sendMultipartText(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V
com.android.internal.telephony.IccSmsInterfaceManagerProxy.sendMultipartText(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V
com.android.internal.telephony.ISms$Stub.sendMultipartText(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V
com.android.internal.telephony.ISms.sendMultipartText(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V
android.provider.Telephony$Sms$Draft.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.util.Recycler$SmsRecycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.transaction.SmsReceiverService.storeMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.insertMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;ILjava/lang/String;)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.replaceMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.handleSmsReceived(Landroid/content/Intent;I)V
com.android.mms.transaction.SmsReceiverService.access$100(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
android.provider.Telephony$Sms$Outbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;ZJ)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.replaceMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.saveMessage()V
com.android.mms.ui.ClassZeroActivity.access$200(Lcom/android/mms/ui/ClassZeroActivity;)V
com.android.mms.ui.ClassZeroActivity$3.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ClassZeroActivity.storeMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.data.WorkingMessage.deleteDraftSmsMessage(J)V
com.android.mms.ui.ComposeMessageActivity.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.data.WorkingMessage.asyncDeleteDraftSmsMessage(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage$4.run()V
com.android.mms.data.WorkingMessage.readDraftSmsMessage(Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.data.WorkingMessage.discard()V
com.android.mms.data.WorkingMessage.access$000(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ComposeMessageActivity.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.saveDraft(Z)V
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Void;)Landroid/util/Pair;
com.android.mms.data.Conversation$ConversationQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.saveDraft(Z)V
com.android.mms.ui.ComposeMessageActivity.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivity.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity.onStop()V
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.ui.ConversationList$ThreadListQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.data.WorkingMessage$MessageStatusListener.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onStop()V
com.android.mms.transaction.MessageStatusService.updateMessageStatus(Landroid/content/Context;Landroid/net/Uri;[BLjava/lang/String;)Landroid/telephony/SmsMessage;
com.android.mms.transaction.MessageStatusService.onHandleIntent(Landroid/content/Intent;)V
android.provider.Telephony$Sms$Sent.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.ui.ManageSimMessages.copyToPhoneMemory(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.internal.telephony.SMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.SMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processCdmaWapPdu([BILjava/lang/String;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.SMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.mms.transaction.SmsReceiverService.moveOutboxMessagesToFailedBox()I
com.android.mms.data.Conversation.blockingMarkAllSmsMessagesAsSeen(Landroid/content/Context;)V
com.android.mms.data.Conversation.access$800(Landroid/content/Context;)V
com.android.mms.data.Conversation$3.run()V
android.provider.Telephony$Sms$Inbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;Z)Landroid/net/Uri;
com.android.mms.ui.ManageSimMessages.deleteFromSim(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.access$500(Lcom/android/mms/ui/ManageSimMessages;Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.deleteAllFromSim()V
com.android.mms.ui.ManageSimMessages$2.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ManageSimMessages.access$600(Lcom/android/mms/ui/ManageSimMessages;)V
com.android.mms.ui.ManageSimMessages$3.onClick(Landroid/content/DialogInterface;I)V
Permission:com.android.voicemail.permission.ADD_VOICEMAIL

268 Callers:

com.android.providers.contacts.VoicemailPermissions.packageHasOwnVoicemailAccess(Ljava/lang/String;)Z
com.android.providers.contacts.VoicemailContentProvider.getCallingPackage()Ljava/lang/String;
com.android.providers.contacts.VoicemailContentProvider.getPackageRestrictionClause()Ljava/lang/String;
com.android.providers.contacts.VoicemailContentProvider.checkAndAddSourcePackageIntoValues(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;Landroid/content/ContentValues;)V
com.android.providers.contacts.VoicemailContentProvider.checkPackagePermission(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;)V
com.android.providers.contacts.VoicemailContentProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.VoicemailContentProvider.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.VoicemailContentProvider.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.VoicemailContentProvider.checkPermissionsAndCreateUriData(Landroid/net/Uri;)Lcom/android/providers/contacts/VoicemailContentProvider$UriData;
com.android.providers.contacts.VoicemailContentProvider.openFile(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
com.android.providers.contacts.VoicemailContentProvider.checkPermissionsAndCreateUriData(Landroid/net/Uri;[Landroid/content/ContentValues;)Lcom/android/providers/contacts/VoicemailContentProvider$UriData;
com.android.providers.contacts.VoicemailContentProvider.checkPermissionsAndCreateUriDataForReadOperation(Landroid/net/Uri;)Lcom/android/providers/contacts/VoicemailContentProvider$UriData;
com.android.providers.contacts.VoicemailContentProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.contacts.VoicemailPermissions.packageHasFullAccess(Ljava/lang/String;)Z
com.android.providers.contacts.DbModifierWithNotification.notifyVoicemailChange(Landroid/net/Uri;Ljava/util/Set;[Ljava/lang/String;)V
com.android.providers.contacts.DbModifierWithNotification.delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.DbModifierWithNotification.update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.DbModifierWithNotification.notifyVoicemailChangeOnInsert(Landroid/net/Uri;Ljava/util/Set;)V
com.android.providers.contacts.DatabaseModifier.delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.DatabaseModifier.update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.DbModifierWithNotification.insert(Landroid/content/ContentValues;)J
com.android.providers.contacts.DbModifierWithNotification.insert(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J
com.android.providers.contacts.CallLogProvider.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.VoicemailContentTable.delete(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.VoicemailStatusTable.delete(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.CallLogProvider.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.VoicemailContentTable.update(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.VoicemailStatusTable.update(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.DatabaseModifier.insert(Landroid/content/ContentValues;)J
com.android.providers.contacts.DatabaseModifier.insert(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J
com.android.providers.contacts.VoicemailTable$Delegate.delete(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.VoicemailTable$Delegate.update(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.CallLogProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.contacts.VoicemailContentTable.insert(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.contacts.VoicemailStatusTable.insert(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.contacts.VoicemailTable$Delegate.insert(Lcom/android/providers/contacts/VoicemailContentProvider$UriData;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.contacts.VoicemailPermissions.callerHasOwnVoicemailAccess()Z
com.android.providers.contacts.VoicemailPermissions.checkCallerHasOwnVoicemailAccess()V
com.android.providers.contacts.VoicemailPermissions.callerHasFullAccess()Z
com.android.providers.contacts.VoicemailPermissions.checkCallerHasFullAccess()V
com.android.providers.contacts.CallLogProvider.checkVoicemailPermissionAndAddRestriction(Landroid/net/Uri;Lcom/android/providers/contacts/util/SelectionBuilder;)V
com.android.providers.contacts.CallLogProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
android.provider.VoicemailContract$Status.buildSourceUri(Ljava/lang/String;)Landroid/net/Uri;
com.android.contacts.CallDetailActivityQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.providers.contacts.VoicemailCleanupService.handleIntentInternal(Landroid/content/Intent;Landroid/content/ContentResolver;)V
com.android.providers.contacts.VoicemailCleanupService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.calllog.CallLogQueryHandler.fetchVoicemailStatus()V
com.android.contacts.calllog.CallLogFragment.startVoicemailStatusQuery()V
com.android.contacts.calllog.CallLogFragment.refreshData()V
com.android.contacts.calllog.CallLogFragment.onResume()V
com.android.contacts.calllog.CallLogFragment.setMenuVisibility(Z)V
android.provider.VoicemailContract$Voicemails.buildSourceUri(Ljava/lang/String;)Landroid/net/Uri;
com.android.voicedialer.VoiceContact.redialNumber(Landroid/app/Activity;)Ljava/lang/String;
com.android.voicedialer.CommandRecognizerEngine.onRecognitionSuccess(Lcom/android/voicedialer/RecognizerClient;)V
com.android.voicedialer.RecognizerEngine.onRecognitionSuccess(Lcom/android/voicedialer/RecognizerClient;)V
com.android.voicedialer.RecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.CommandRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.PhoneTypeChoiceRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.VoiceDialerActivity$3.run()V
com.android.voicedialer.VoiceDialerActivity$4.run()V
android.provider.CallLog$Calls.addCall(Lcom/android/internal/telephony/CallerInfo;Landroid/content/Context;Ljava/lang/String;IIJI)Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Lcom/android/phone/CallLogAsync$AddCallArgs;)[Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.bluetooth.pbap.BluetoothPbapVcardManager.loadCallHistoryList(I)Ljava/util/ArrayList;
com.android.bluetooth.pbap.BluetoothPbapObexServer.sendVcardListingXml(ILjavax/obex/Operation;IILjava/lang/String;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullVcardListing([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/HeaderSet;Ljavax/obex/Operation;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.onGet(Ljavax/obex/Operation;)I
com.android.contacts.calllog.CallLogQueryHandler.markMissedCallsAsRead()V
com.android.contacts.calllog.CallLogFragment.updateOnTransition(Z)V
com.android.contacts.calllog.CallLogFragment.updateOnEntry()V
com.android.contacts.calllog.CallLogFragment.updateOnExit()V
com.android.contacts.calllog.CallLogFragment.onStop()V
com.android.contacts.calllog.DefaultVoicemailNotifier$DefaultNewCallsQuery.query()[Lcom/android/contacts/calllog/DefaultVoicemailNotifier$NewCall;
com.android.contacts.calllog.DefaultVoicemailNotifier$NewCallsQuery.query()[Lcom/android/contacts/calllog/DefaultVoicemailNotifier$NewCall;
com.android.contacts.calllog.DefaultVoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.calllog.CallLogNotificationsService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.calllog.VoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.phone.BluetoothAtPhonebook.queryPhonebook(Ljava/lang/String;Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;)Z
com.android.phone.BluetoothAtPhonebook.getPhonebookResult(Ljava/lang/String;Z)Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;
com.android.phone.BluetoothAtPhonebook.processCpbrCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook.access$500(Lcom/android/phone/BluetoothAtPhonebook;Ljava/lang/String;Z)Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;
com.android.phone.BluetoothAtPhonebook.access$1000(Lcom/android/phone/BluetoothAtPhonebook;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook.handleAccessPermissionResult(Landroid/content/Intent;)V
com.android.phone.BluetoothAtPhonebook$2.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.AtCommandHandler.handleReadCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleTestCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleTestCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
android.bluetooth.HeadsetBase$1.run()V
android.provider.CallLog$Calls.getLastOutgoingCall(Landroid/content/Context;)Ljava/lang/String;
com.android.phone.CallLogAsync$GetLastOutgoingCallTask.doInBackground([Lcom/android/phone/CallLogAsync$GetLastOutgoingCallArgs;)Ljava/lang/String;
com.android.phone.CallLogAsync$GetLastOutgoingCallTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getCallHistorySize(I)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getPhonebookSize(I)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullPhonebook([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/HeaderSet;Ljavax/obex/Operation;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullVcardEntry([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/Operation;Ljava/lang/String;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.<init>(Landroid/os/Handler;Landroid/content/Context;)V
com.android.bluetooth.pbap.BluetoothPbapService.startObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.access$500(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.parseIntent(Landroid/content/Intent;)V
com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread.run()V
com.android.bluetooth.pbap.BluetoothPbapService.onStartCommand(Landroid/content/Intent;II)I
com.android.bluetooth.pbap.BluetoothPbapService.startRfcommSocketListener()V
com.android.bluetooth.pbap.BluetoothPbapService.access$900(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.stopObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.onCreate()V
com.android.bluetooth.pbap.BluetoothPbapService.access$1100(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.phone.ClearMissedCallsService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.calllog.CallLogAdapter.updateCallLogContactInfoCache(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;Lcom/android/contacts/calllog/ContactInfo;)V
com.android.contacts.calllog.CallLogAdapter.queryContactInfo(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.calllog.CallLogAdapter.access$300(Lcom/android/contacts/calllog/CallLogAdapter;Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.calllog.CallLogAdapter$QueryThread.run()V
com.android.contacts.calllog.CallLogAdapter.startRequestProcessing()V
com.android.contacts.calllog.CallLogAdapter.access$100(Lcom/android/contacts/calllog/CallLogAdapter;)V
com.android.contacts.calllog.CallLogAdapter.enqueueRequest(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;Z)V
com.android.contacts.calllog.CallLogAdapter.bindView(Landroid/view/View;Landroid/database/Cursor;I)V
com.android.contacts.calllog.CallLogAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.calllog.CallLogAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.contacts.calllog.CallLogAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.common.widget.GroupingListAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.calllog.CallLogAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.calllog.CallLogQueryHandler.fetchCalls(IIZZ)V
com.android.contacts.calllog.CallLogQueryHandler.fetchAllCalls()V
com.android.contacts.calllog.CallLogQueryHandler.fetchVoicemailOnly()V
com.android.contacts.calllog.CallLogFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.calllog.CallLogFragment.fetchCalls()V
com.android.contacts.calllog.CallLogFragment.startCallsQuery()V
com.android.contacts.calllog.CallLogAdapter$CallFetcher.fetchCalls()V
com.android.contacts.calllog.CallLogAdapter.onContentChanged()V
com.android.common.widget.GroupingListAdapter.onContentChanged()V
com.android.common.widget.GroupingListAdapter$1.onChange(Z)V
com.android.phone.NotificationMgr.updateNotificationsAtStartup()V
com.android.phone.NotificationMgr.init(Lcom/android/phone/PhoneApp;)Lcom/android/phone/NotificationMgr;
com.android.phone.PhoneApp.onCreate()V
com.android.contacts.calllog.CallLogQueryHandler.markNewCallsAsOld()V
android.provider.CallLog$Calls.removeExpiredEntries(Landroid/content/Context;)V
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendCallLogVcards(ILjavax/obex/Operation;IIZ)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendVCards(Ljavax/obex/Operation;Ljava/lang/String;ZLjava/lang/String;Z)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendPhonebookOneVcard(Ljavax/obex/Operation;IZLjava/lang/String;I)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendPhonebookVcards(Ljavax/obex/Operation;IIZLjava/lang/String;)I
com.android.contacts.CallDetailActivity$6.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.CallDetailActivity$6.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.phone.BluetoothAtPhonebook.getLastDialledNumber()Ljava/lang/String;
com.android.phone.BluetoothHandsfree.redial()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.access$6000(Lcom/android/phone/BluetoothHandsfree;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$1.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$7.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$9.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.contacts.calllog.CallLogQueryHandler.markNewVoicemailsAsOld()V
com.android.contacts.calllog.ClearCallLogDialog$1$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.calllog.ClearCallLogDialog$1$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
Permission:android.permission.WRITE_CALL_LOG

36 Callers:

android.provider.CallLog$Calls.addCall(Lcom/android/internal/telephony/CallerInfo;Landroid/content/Context;Ljava/lang/String;IIJI)Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Lcom/android/phone/CallLogAsync$AddCallArgs;)[Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.calllog.CallLogQueryHandler.markNewCallsAsOld()V
com.android.contacts.calllog.CallLogFragment.updateOnTransition(Z)V
com.android.contacts.calllog.CallLogFragment.updateOnEntry()V
com.android.contacts.calllog.CallLogFragment.updateOnExit()V
com.android.contacts.calllog.CallLogFragment.refreshData()V
com.android.contacts.calllog.CallLogFragment.onStop()V
com.android.contacts.calllog.CallLogFragment.setMenuVisibility(Z)V
com.android.contacts.calllog.CallLogFragment.onResume()V
com.android.phone.ClearMissedCallsService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.calllog.CallLogAdapter.updateCallLogContactInfoCache(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;Lcom/android/contacts/calllog/ContactInfo;)V
com.android.contacts.calllog.CallLogAdapter.queryContactInfo(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.calllog.CallLogAdapter.access$300(Lcom/android/contacts/calllog/CallLogAdapter;Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.calllog.CallLogAdapter$QueryThread.run()V
com.android.contacts.calllog.CallLogAdapter.startRequestProcessing()V
com.android.contacts.calllog.CallLogAdapter.access$100(Lcom/android/contacts/calllog/CallLogAdapter;)V
com.android.contacts.calllog.CallLogAdapter.enqueueRequest(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;Z)V
com.android.contacts.calllog.CallLogAdapter.bindView(Landroid/view/View;Landroid/database/Cursor;I)V
com.android.contacts.calllog.CallLogAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.calllog.CallLogAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.contacts.calllog.CallLogAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.common.widget.GroupingListAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.calllog.CallLogAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.calllog.CallLogQueryHandler.markMissedCallsAsRead()V
android.provider.CallLog$Calls.removeExpiredEntries(Landroid/content/Context;)V
com.android.contacts.calllog.CallLogQueryHandler.markNewVoicemailsAsOld()V
com.android.contacts.calllog.CallLogNotificationsService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.CallDetailActivity$6.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.CallDetailActivity$6.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.calllog.ClearCallLogDialog$1$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.calllog.ClearCallLogDialog$1$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
Permission:android.permission.SYSTEM_ALERT_WINDOW

14 Callers:

com.android.internal.policy.impl.PhoneWindowManager.checkAddPermission(Landroid/view/WindowManager$LayoutParams;)I
android.view.WindowManagerPolicy.checkAddPermission(Landroid/view/WindowManager$LayoutParams;)I
com.android.server.wm.WindowManagerService.addWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;Landroid/view/InputChannel;)I
com.android.server.wm.Session.add(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;Landroid/view/InputChannel;)I
com.android.server.wm.Session.addWithoutInputChannel(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;)I
android.view.IWindowSession$Stub$Proxy.add(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;Landroid/view/InputChannel;)I
android.view.IWindowSession$Stub.add(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;Landroid/view/InputChannel;)I
android.view.IWindowSession$Stub$Proxy.addWithoutInputChannel(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;)I
android.view.IWindowSession$Stub.addWithoutInputChannel(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;)I
android.view.IWindowSession.add(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;Landroid/view/InputChannel;)I
android.view.IWindowSession$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IWindowSession.addWithoutInputChannel(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;)I
com.android.server.wm.Session.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.SurfaceView.updateWindow(ZZ)V
Permission:android.permission.RESTART_PACKAGES

12 Callers:

com.android.server.am.ActivityManagerService.killBackgroundProcesses(Ljava/lang/String;)V
android.app.ActivityManagerNative.killBackgroundProcesses(Ljava/lang/String;)V
android.app.ActivityManagerNative.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IActivityManager.killBackgroundProcesses(Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ActivityManager.killBackgroundProcesses(Ljava/lang/String;)V
com.android.commands.am.Am.runKill()V
com.android.development.PackageSummary$1.onClick(Landroid/view/View;)V
android.app.ActivityManager.restartPackage(Ljava/lang/String;)V
com.android.settings.applications.RunningServiceDetails$ActiveDetail.onClick(Landroid/view/View;)V
com.android.commands.am.Am.run([Ljava/lang/String;)V
com.android.commands.am.Am.main([Ljava/lang/String;)V
Permission:android.permission.CHANGE_NETWORK_STATE

402 Callers:

com.android.server.ConnectivityService.enforceChangePermission()V
com.android.server.ConnectivityService.requestRouteToHostAddress(I[B)Z
com.android.server.ConnectivityService.setRadio(IZ)Z
com.android.server.ConnectivityService.setRadios(Z)Z
com.android.server.ConnectivityService.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
com.android.server.ConnectivityService.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.ConnectivityService.setGlobalProxy(Landroid/net/ProxyProperties;)V
com.android.server.ConnectivityService.setMobileDataEnabled(Z)V
com.android.server.ConnectivityService.setNetworkPreference(I)V
android.net.IConnectivityManager$Stub$Proxy.requestRouteToHostAddress(I[B)Z
android.net.IConnectivityManager$Stub.requestRouteToHostAddress(I[B)Z
com.android.server.ConnectivityService.requestRouteToHost(II)Z
android.net.IConnectivityManager$Stub$Proxy.setRadio(IZ)Z
android.net.IConnectivityManager$Stub.setRadio(IZ)Z
android.net.IConnectivityManager$Stub$Proxy.setRadios(Z)Z
android.net.IConnectivityManager$Stub.setRadios(Z)Z
android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager$Stub.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager$Stub$Proxy.stopUsingNetworkFeature(ILjava/lang/String;)I
android.net.IConnectivityManager$Stub.stopUsingNetworkFeature(ILjava/lang/String;)I
android.net.IConnectivityManager$Stub$Proxy.setGlobalProxy(Landroid/net/ProxyProperties;)V
android.net.IConnectivityManager$Stub.setGlobalProxy(Landroid/net/ProxyProperties;)V
com.android.server.ConnectivityService.handleDeprecatedGlobalHttpProxy()V
android.net.IConnectivityManager$Stub$Proxy.setMobileDataEnabled(Z)V
android.net.IConnectivityManager$Stub.setMobileDataEnabled(Z)V
android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(I)V
android.net.IConnectivityManager$Stub.setNetworkPreference(I)V
android.net.IConnectivityManager.requestRouteToHostAddress(I[B)Z
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager$Stub$Proxy.requestRouteToHost(II)Z
android.net.IConnectivityManager$Stub.requestRouteToHost(II)Z
android.net.IConnectivityManager.setRadio(IZ)Z
android.net.IConnectivityManager.setRadios(Z)Z
android.net.IConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I
android.net.IConnectivityManager.setGlobalProxy(Landroid/net/ProxyProperties;)V
com.android.server.ConnectivityService.access$2000(Lcom/android/server/ConnectivityService;)V
android.net.IConnectivityManager.setMobileDataEnabled(Z)V
android.net.IConnectivityManager.setNetworkPreference(I)V
android.net.ConnectivityManager.requestRouteToHostAddress(ILjava/net/InetAddress;)Z
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager.requestRouteToHost(II)Z
android.net.ConnectivityManager.setRadio(IZ)Z
android.net.ConnectivityManager.setRadios(Z)Z
android.net.ConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOnUpstreamMobileConnection(I)Z
android.net.ConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOffUpstreamMobileConnection()Z
android.net.ConnectivityManager.setGlobalProxy(Landroid/net/ProxyProperties;)V
com.android.server.ConnectivityService.systemReady()V
android.net.ConnectivityManager.setMobileDataEnabled(Z)V
android.net.ConnectivityManager.setNetworkPreference(I)V
com.android.commands.svc.DataCommand.run([Ljava/lang/String;)V
com.android.commands.svc.WifiCommand.run([Ljava/lang/String;)V
android.net.ConnectivityManager.requestRouteToHost(II)Z
com.android.development.Connectivity.onRoutedRequest(I)V
com.android.development.Connectivity$3.onClick(Landroid/view/View;)V
com.android.development.Connectivity.onCrash()V
com.android.mms.transaction.TransactionService.beginMmsConnectivity()I
com.android.server.location.GpsLocationProvider.reportAGpsStatus(III)V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOnUpstreamMobileConnection(I)Z
com.android.mms.transaction.TransactionService.endMmsConnectivity()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOffUpstreamMobileConnection()Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOffUpstreamMobileConnection()Z
com.android.settings.ProxySelector.saveToDb()Z
com.android.server.ServerThread$1.run()V
com.android.phone.MobileNetworkSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.phone.PhoneInterfaceManager.disableDataConnectivity()Z
com.android.phone.PhoneInterfaceManager.enableDataConnectivity()Z
com.android.settings.DataUsageSummary.setMobileDataEnabled(Z)V
com.android.settings.RadioInfo$12.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.commands.svc.Svc$Command.run([Ljava/lang/String;)V
com.android.mms.transaction.Transaction.ensureRouteToHost(Ljava/lang/String;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.server.location.GpsLocationProvider.handleUpdateNetworkState(ILandroid/net/NetworkInfo;)V
com.android.development.Connectivity.onRoutedHttpRequest()V
com.android.development.Connectivity.onRoutedSocketRequest()V
com.android.development.Connectivity.access$2600(Lcom/android/development/Connectivity;)V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.processMessage(Landroid/os/Message;)Z
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.exit()V
com.android.settings.ProxySelector$1.onClick(Landroid/view/View;)V
com.android.internal.telephony.ITelephony$Stub$Proxy.disableDataConnectivity()Z
com.android.internal.telephony.ITelephony$Stub.disableDataConnectivity()Z
com.android.internal.telephony.ITelephony$Stub$Proxy.enableDataConnectivity()Z
com.android.internal.telephony.ITelephony$Stub.enableDataConnectivity()Z
com.android.settings.DataUsageSummary.access$500(Lcom/android/settings/DataUsageSummary;Z)V
com.android.commands.svc.Svc.main([Ljava/lang/String;)V
com.android.mms.transaction.NotificationTransaction.ensureRouteToHost(Ljava/lang/String;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.ReadRecTransaction.ensureRouteToHost(Ljava/lang/String;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.RetrieveTransaction.ensureRouteToHost(Ljava/lang/String;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.SendTransaction.ensureRouteToHost(Ljava/lang/String;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.Transaction.getPdu(Ljava/lang/String;)[B
com.android.mms.transaction.Transaction.sendPdu(J[BLjava/lang/String;)[B
com.android.server.location.GpsLocationProvider.access$1000(Lcom/android/server/location/GpsLocationProvider;ILandroid/net/NetworkInfo;)V
com.android.development.Connectivity.access$2100(Lcom/android/development/Connectivity;)V
com.android.development.Connectivity.access$2000(Lcom/android/development/Connectivity;)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.enter()V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.processMessage(Landroid/os/Message;)Z
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.internal.util.State.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.exit()V
com.android.internal.telephony.ITelephony.disableDataConnectivity()Z
com.android.internal.telephony.ITelephony$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.ITelephony.enableDataConnectivity()Z
com.android.settings.DataUsageSummary$4.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.DataUsageSummary$ConfirmDataDisableFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.transaction.NotificationTransaction.getPdu(Ljava/lang/String;)[B
com.android.mms.transaction.ReadRecTransaction.getPdu(Ljava/lang/String;)[B
com.android.mms.transaction.RetrieveTransaction.getPdu(Ljava/lang/String;)[B
com.android.mms.transaction.SendTransaction.getPdu(Ljava/lang/String;)[B
com.android.mms.transaction.NotificationTransaction.sendPdu(J[BLjava/lang/String;)[B
com.android.mms.transaction.ReadRecTransaction.sendPdu(J[BLjava/lang/String;)[B
com.android.mms.transaction.RetrieveTransaction.sendPdu(J[BLjava/lang/String;)[B
com.android.mms.transaction.SendTransaction.sendPdu(J[BLjava/lang/String;)[B
com.android.mms.transaction.Transaction.sendPdu([BLjava/lang/String;)[B
com.android.mms.transaction.Transaction.sendPdu([B)[B
com.android.mms.transaction.Transaction.sendPdu(J[B)[B
com.android.internal.util.State.enter()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
com.android.mms.transaction.Observable.notifyObservers()V
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.exit()V
android.bluetooth.BluetoothProfileState$PendingCommandState.exit()V
android.bluetooth.BluetoothProfileState$StableState.exit()V
android.net.DhcpStateMachine$DefaultState.exit()V
android.net.DhcpStateMachine$RunningState.exit()V
android.net.DhcpStateMachine$StoppedState.exit()V
android.net.DhcpStateMachine$WaitBeforeStartState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState.exit()V
android.net.wifi.SupplicantStateTracker$CompletedState.exit()V
android.net.wifi.SupplicantStateTracker$DefaultState.exit()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.exit()V
android.net.wifi.SupplicantStateTracker$DormantState.exit()V
android.net.wifi.SupplicantStateTracker$HandshakeState.exit()V
android.net.wifi.SupplicantStateTracker$InactiveState.exit()V
android.net.wifi.SupplicantStateTracker$ScanState.exit()V
android.net.wifi.SupplicantStateTracker$UninitializedState.exit()V
android.net.wifi.WifiApConfigStore$ActiveState.exit()V
android.net.wifi.WifiApConfigStore$DefaultState.exit()V
android.net.wifi.WifiApConfigStore$InactiveState.exit()V
android.net.wifi.WifiStateMachine$ConnectModeState.exit()V
android.net.wifi.WifiStateMachine$DefaultState.exit()V
android.net.wifi.WifiStateMachine$DisconnectingState.exit()V
android.net.wifi.WifiStateMachine$DriverFailedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadingState.exit()V
android.net.wifi.WifiStateMachine$DriverStartingState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppedState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppingState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadedState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadingState.exit()V
android.net.wifi.WifiStateMachine$InitialState.exit()V
android.net.wifi.WifiStateMachine$ObtainingIpState.exit()V
android.net.wifi.WifiStateMachine$ScanModeState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartedState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartingState.exit()V
android.net.wifi.WifiStateMachine$SoftApStoppingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStartingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStoppingState.exit()V
android.net.wifi.WifiStateMachine$TetheredState.exit()V
android.net.wifi.WifiStateMachine$TetheringState.exit()V
android.net.wifi.WifiStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$ConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$DefaultState.exit()V
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState.exit()V
android.net.wifi.WifiWatchdogStateMachine$RssiMonitoringState.exit()V
android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WalledGardenCheckState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState.exit()V
android.server.BluetoothAdapterStateMachine$BluetoothOn.exit()V
android.server.BluetoothAdapterStateMachine$HotOff.exit()V
android.server.BluetoothAdapterStateMachine$PerProcessState.exit()V
android.server.BluetoothAdapterStateMachine$PowerOff.exit()V
android.server.BluetoothAdapterStateMachine$Switching.exit()V
android.server.BluetoothAdapterStateMachine$WarmUp.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.exit()V
com.android.internal.telephony.DataConnection$DcActivatingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.exit()V
com.android.internal.util.IState.exit()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.exit()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.exit()V
com.android.internal.util.StateMachine$SmHandler.invokeExitMethods(Lcom/android/internal/util/StateMachine$SmHandler$StateInfo;)V
com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState.exit()V
com.android.server.NsdService$NsdStateMachine$DefaultState.exit()V
com.android.server.NsdService$NsdStateMachine$DisabledState.exit()V
com.android.phone.PhoneInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.transaction.NotificationTransaction.sendPdu([BLjava/lang/String;)[B
com.android.mms.transaction.ReadRecTransaction.sendPdu([BLjava/lang/String;)[B
com.android.mms.transaction.RetrieveTransaction.sendPdu([BLjava/lang/String;)[B
com.android.mms.transaction.SendTransaction.sendPdu([BLjava/lang/String;)[B
com.android.mms.transaction.NotificationTransaction.sendPdu([B)[B
com.android.mms.transaction.ReadRecTransaction.sendPdu([B)[B
com.android.mms.transaction.RetrieveTransaction.sendPdu([B)[B
com.android.mms.transaction.SendTransaction.sendPdu([B)[B
com.android.mms.transaction.NotificationTransaction.sendPdu(J[B)[B
com.android.mms.transaction.ReadRecTransaction.sendPdu(J[B)[B
com.android.mms.transaction.RetrieveTransaction.sendPdu(J[B)[B
com.android.mms.transaction.SendTransaction.sendPdu(J[B)[B
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
com.android.mms.transaction.NotificationTransaction.sendNotifyRespInd(I)V
com.android.mms.transaction.RetrieveTransaction.sendAcknowledgeInd(Lcom/google/android/mms/pdu/RetrieveConf;)V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.SendTransaction.run()V
com.android.mms.transaction.Transaction.process()V
com.android.server.ConnectivityService.enforceTetherChangePermission()V
com.android.server.ConnectivityService.tether(Ljava/lang/String;)I
com.android.server.ConnectivityService.untether(Ljava/lang/String;)I
android.net.IConnectivityManager$Stub$Proxy.tether(Ljava/lang/String;)I
android.net.IConnectivityManager$Stub.tether(Ljava/lang/String;)I
android.net.IConnectivityManager$Stub$Proxy.untether(Ljava/lang/String;)I
android.net.IConnectivityManager$Stub.untether(Ljava/lang/String;)I
android.net.IConnectivityManager.tether(Ljava/lang/String;)I
android.net.IConnectivityManager.untether(Ljava/lang/String;)I
android.net.ConnectivityManager.tether(Ljava/lang/String;)I
android.net.ConnectivityManager.untether(Ljava/lang/String;)I
android.net.wifi.WifiStateMachine.startTethering(Ljava/util/ArrayList;)Z
android.server.BluetoothPanProfileHandler.enableTethering(Ljava/lang/String;)Ljava/lang/String;
android.net.wifi.WifiStateMachine.stopTethering()V
com.android.settings.TetherSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
android.net.wifi.WifiStateMachine.access$16000(Landroid/net/wifi/WifiStateMachine;Ljava/util/ArrayList;)Z
android.server.BluetoothPanProfileHandler.handlePanDeviceStateChange(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;II)V
android.net.wifi.WifiStateMachine.access$16800(Landroid/net/wifi/WifiStateMachine;)V
android.net.wifi.WifiStateMachine$SoftApStartedState.processMessage(Landroid/os/Message;)Z
android.server.BluetoothPanProfileHandler.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothPanProfileHandler.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothPanProfileHandler.disconnectPanServerDevices()Z
android.server.BluetoothService.handlePanDeviceStateChange(Landroid/bluetooth/BluetoothDevice;II)V
android.server.BluetoothService.handlePanDeviceStateChange(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;II)V
android.net.wifi.WifiStateMachine$TetheredState.processMessage(Landroid/os/Message;)Z
android.server.BluetoothService.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothPanProfileHandler.setBluetoothTethering(Z)V
android.server.BluetoothEventLoop.onNetworkDeviceDisconnected(Ljava/lang/String;)V
android.server.BluetoothEventLoop.onPanDeviceConnectionResult(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onPanDevicePropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothEventLoop.onNetworkDeviceConnected(Ljava/lang/String;Ljava/lang/String;I)V
android.bluetooth.IBluetooth$Stub$Proxy.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub$Proxy.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectDevices()V
android.server.BluetoothService.setBluetoothTethering(Z)V
android.bluetooth.IBluetooth.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.IBluetooth.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothAdapterStateMachine$BluetoothOn.processMessage(Landroid/os/Message;)Z
android.server.BluetoothAdapterStateMachine$PerProcessState.processMessage(Landroid/os/Message;)Z
android.bluetooth.IBluetooth$Stub$Proxy.setBluetoothTethering(Z)V
android.bluetooth.IBluetooth$Stub.setBluetoothTethering(Z)V
android.bluetooth.BluetoothPan.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.BluetoothPan.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth.setBluetoothTethering(Z)V
com.android.settings.bluetooth.PanProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothTetheringDataTracker.teardown()Z
com.android.settings.bluetooth.PanProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothPan.setBluetoothTethering(Z)V
com.android.settings.bluetooth.LocalBluetoothProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.net.NetworkStateTracker.teardown()Z
com.android.settings.bluetooth.LocalBluetoothProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.TetherSettings$TetherChangeReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.TetherSettings.startTethering()V
com.android.settings.bluetooth.CachedBluetoothDevice.connectInt(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.server.ConnectivityService.teardown(Landroid/net/NetworkStateTracker;)Z
com.android.server.ConnectivityService.stopUsingNetworkFeature(Lcom/android/server/ConnectivityService$FeatureUser;Z)I
com.android.settings.bluetooth.CachedBluetoothDevice.disconnect(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.TetherSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.startProvisioningIfNecessary(I)V
com.android.settings.bluetooth.CachedBluetoothDevice.connectAutoConnectableProfiles()V
com.android.settings.bluetooth.CachedBluetoothDevice.connectProfile(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.CachedBluetoothDevice.connectWithoutResettingTimer(Z)V
com.android.server.ConnectivityService.enforcePreference()V
com.android.server.ConnectivityService.handleConnect(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.access$200(Lcom/android/server/ConnectivityService;Lcom/android/server/ConnectivityService$FeatureUser;Z)I
com.android.settings.bluetooth.CachedBluetoothDevice.disconnect()V
com.android.settings.bluetooth.DeviceProfilesSettings$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.applyBtSettings(Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.SettingsPreferenceFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.bluetooth.DeviceProfilesSettings.onProfileClicked(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.DockService.handleUnexpectedDisconnect(Landroid/bluetooth/BluetoothDevice;Lcom/android/settings/bluetooth/LocalBluetoothProfile;I)V
com.android.settings.bluetooth.CachedBluetoothDevice.connect(Z)V
com.android.settings.bluetooth.CachedBluetoothDevice.onUuidChanged()V
com.android.server.ConnectivityService.handleSetNetworkPreference(I)V
com.android.server.ConnectivityService.access$1100(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService$FeatureUser.binderDied()V
com.android.server.ConnectivityService$FeatureUser.expire()V
com.android.settings.bluetooth.BluetoothDevicePreference$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.CachedBluetoothDevice.unpair()V
com.android.settings.bluetooth.DockService.handleUndocked(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DockService.access$700(Lcom/android/settings/bluetooth/DockService;Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.bluetooth.DockService.handleBluetoothStateOn(I)V
com.android.settings.bluetooth.DockService.handleDocked(Landroid/bluetooth/BluetoothDevice;II)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.LocationSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.SecuritySettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.bluetooth.DockService.onStartCommand(Landroid/content/Intent;II)I
com.android.settings.bluetooth.BluetoothDevicePreference.onClicked()V
com.android.settings.bluetooth.CachedBluetoothDevice.onBondingDockConnect()V
com.android.settings.bluetooth.CachedBluetoothDevice.onBondingStateChanged(I)V
com.android.settings.bluetooth.DockService.connectIfEnabled(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onUuidChanged(Landroid/bluetooth/BluetoothDevice;)V
com.android.server.ConnectivityService.access$1800(Lcom/android/server/ConnectivityService;I)V
com.android.server.ConnectivityService$FeatureUser.<init>(Lcom/android/server/ConnectivityService;ILjava/lang/String;Landroid/os/IBinder;)V
com.android.settings.bluetooth.DeviceProfilesSettings.unpairDevice()V
com.android.settings.bluetooth.DockService.msgTypeDocked(Landroid/bluetooth/BluetoothDevice;II)Z
com.android.settings.bluetooth.DockService.msgTypeUndockedPermanent(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.settings.bluetooth.DockService$5.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.handleBtStateChange(Landroid/content/Intent;I)V
com.android.settings.bluetooth.DockService.access$200(Lcom/android/settings/bluetooth/DockService;Landroid/bluetooth/BluetoothDevice;II)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DockService.processMessage(Landroid/os/Message;)V
com.android.settings.bluetooth.DockService$1.run()V
com.android.settings.bluetooth.BluetoothSettings.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DevicePickerFragment.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.BluetoothEventManager$Handler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DockService.access$100(Lcom/android/settings/bluetooth/DockService;Landroid/os/Message;)V
com.android.settings.bluetooth.BluetoothSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DevicePickerFragment.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.BluetoothEventManager$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
Permission:android.permission.ACCESS_COARSE_LOCATION

492 Callers:

com.android.server.LocationManagerService.checkPermissionsSafe(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.LocationManagerService._getLastKnownLocationLocked(Ljava/lang/String;)Landroid/location/Location;
com.android.server.LocationManagerService._getProviderInfoLocked(Ljava/lang/String;)Landroid/os/Bundle;
com.android.server.LocationManagerService._isProviderEnabledLocked(Ljava/lang/String;)Z
com.android.server.LocationManagerService.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
com.android.server.LocationManagerService.requestLocationUpdatesLocked(Ljava/lang/String;JFZLcom/android/server/LocationManagerService$Receiver;)V
com.android.server.LocationManagerService.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
com.android.server.LocationManagerService.getProviderInfo(Ljava/lang/String;)Landroid/os/Bundle;
com.android.server.LocationManagerService.isProviderEnabled(Ljava/lang/String;)Z
android.location.ILocationManager$Stub$Proxy.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
android.location.ILocationManager$Stub.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
com.android.server.LocationManagerService.addProximityAlertLocked(DDFJLandroid/app/PendingIntent;)V
com.android.server.LocationManagerService.requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/location/ILocationListener;)V
com.android.server.LocationManagerService.requestLocationUpdatesPI(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/app/PendingIntent;)V
android.location.ILocationManager$Stub$Proxy.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
android.location.ILocationManager$Stub.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
android.location.ILocationManager$Stub$Proxy.getProviderInfo(Ljava/lang/String;)Landroid/os/Bundle;
android.location.ILocationManager$Stub.getProviderInfo(Ljava/lang/String;)Landroid/os/Bundle;
android.location.ILocationManager$Stub$Proxy.isProviderEnabled(Ljava/lang/String;)Z
android.location.ILocationManager$Stub.isProviderEnabled(Ljava/lang/String;)Z
android.location.ILocationManager.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
android.location.ILocationManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.LocationManagerService.addProximityAlert(DDFJLandroid/app/PendingIntent;)V
android.location.ILocationManager$Stub$Proxy.requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/location/ILocationListener;)V
android.location.ILocationManager$Stub.requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/location/ILocationListener;)V
android.location.ILocationManager$Stub$Proxy.requestLocationUpdatesPI(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/app/PendingIntent;)V
android.location.ILocationManager$Stub.requestLocationUpdatesPI(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/app/PendingIntent;)V
android.location.ILocationManager.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
android.location.ILocationManager.getProviderInfo(Ljava/lang/String;)Landroid/os/Bundle;
android.location.ILocationManager.isProviderEnabled(Ljava/lang/String;)Z
android.location.LocationManager.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
com.android.server.LocationManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.location.ILocationManager$Stub$Proxy.addProximityAlert(DDFJLandroid/app/PendingIntent;)V
android.location.ILocationManager$Stub.addProximityAlert(DDFJLandroid/app/PendingIntent;)V
android.location.ILocationManager.requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/location/ILocationListener;)V
android.location.ILocationManager.requestLocationUpdatesPI(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/app/PendingIntent;)V
android.location.LocationManager.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
android.location.LocationManager.getProvider(Ljava/lang/String;)Landroid/location/LocationProvider;
android.location.LocationManager.isProviderEnabled(Ljava/lang/String;)Z
android.location.ILocationManager.addProximityAlert(DDFJLandroid/app/PendingIntent;)V
android.location.LocationManager._requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/location/LocationListener;Landroid/os/Looper;)V
android.location.LocationManager._requestLocationUpdates(Ljava/lang/String;Landroid/location/Criteria;JFZLandroid/app/PendingIntent;)V
com.android.gallery3d.util.ReverseGeocoder.computeAddress(Lcom/android/gallery3d/util/ReverseGeocoder$SetLatLong;)Ljava/lang/String;
com.android.server.location.LocationBasedCountryDetector.getLastKnownLocation()Landroid/location/Location;
com.android.server.UiModeManagerService$8.retrieveLocation()V
com.android.wallpaper.grass.GrassRS.updateLocation()V
com.android.server.UiModeManagerService.systemReady()V
android.location.LocationManager.addProximityAlert(DDFJLandroid/app/PendingIntent;)V
android.location.LocationManager.requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;Landroid/os/Looper;)V
android.location.LocationManager.requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;)V
android.location.LocationManager.requestLocationUpdates(JFLandroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V
android.location.LocationManager.requestSingleUpdate(Landroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V
android.location.LocationManager.requestSingleUpdate(Ljava/lang/String;Landroid/location/LocationListener;Landroid/os/Looper;)V
android.location.LocationManager.requestLocationUpdates(Ljava/lang/String;JFLandroid/app/PendingIntent;)V
android.location.LocationManager.requestLocationUpdates(JFLandroid/location/Criteria;Landroid/app/PendingIntent;)V
android.location.LocationManager.requestSingleUpdate(Landroid/location/Criteria;Landroid/app/PendingIntent;)V
android.location.LocationManager.requestSingleUpdate(Ljava/lang/String;Landroid/app/PendingIntent;)V
com.android.gallery3d.data.LocationClustering.generateName(Ljava/util/ArrayList;Lcom/android/gallery3d/util/ReverseGeocoder;)Ljava/lang/String;
com.android.server.location.LocationBasedCountryDetector$2.run()V
com.android.server.location.LocationBasedCountryDetector.detectCountry()Landroid/location/Country;
com.android.wallpaper.grass.GrassRS.access$300(Lcom/android/wallpaper/grass/GrassRS;)V
com.android.wallpaper.grass.GrassRS.start()V
com.android.server.ServerThread$1.run()V
android.webkit.GeolocationService.registerForLocationUpdates()V
com.android.camera.LocationManager.startReceivingLocationUpdates()V
com.android.server.location.LocationBasedCountryDetector.registerListener(Ljava/lang/String;Landroid/location/LocationListener;)V
com.android.gallery3d.data.LocationClustering.run(Lcom/android/gallery3d/data/MediaSet;)V
com.android.server.location.CountryDetectorBase.detectCountry()Landroid/location/Country;
com.android.wallpaper.grass.GrassRS$TimezoneTracker.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.wallpaper.grass.GrassView.surfaceChanged(Landroid/view/SurfaceHolder;III)V
com.android.wallpaper.RenderScriptScene.start()V
android.webkit.GeolocationService.start()Z
android.webkit.GeolocationService.setEnableGps(Z)V
com.android.camera.LocationManager.recordLocation(Z)V
com.android.gallery3d.data.Clustering.run(Lcom/android/gallery3d/data/MediaSet;)V
com.android.server.location.ComprehensiveCountryDetector.startLocationBasedDetector(Landroid/location/CountryListener;)V
com.android.wallpaper.fall.FallRS.start()V
com.android.wallpaper.galaxy.GalaxyRS.start()V
com.android.wallpaper.nexus.NexusRS.start()V
com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine.onSurfaceChanged(Landroid/view/SurfaceHolder;III)V
com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine.onVisibilityChanged(Z)V
com.android.camera.Camera.initializeFirstTime()V
com.android.camera.Camera.initializeSecondTime()V
com.android.camera.Camera.onPause()V
com.android.camera.Camera.onSharedPreferenceChanged()V
com.android.camera.VideoCamera.onPause()V
com.android.camera.VideoCamera.onResume()V
com.android.camera.VideoCamera.onSharedPreferenceChanged()V
com.android.gallery3d.data.ClusterAlbumSet.updateClusters()V
com.android.server.location.ComprehensiveCountryDetector.runAfterDetection(Landroid/location/Country;Landroid/location/Country;ZZ)V
com.android.wallpaper.fall.FallView.surfaceChanged(Landroid/view/SurfaceHolder;III)V
com.android.wallpaper.galaxy.GalaxyView.surfaceChanged(Landroid/view/SurfaceHolder;III)V
com.android.camera.Camera.access$1300(Lcom/android/camera/Camera;)V
com.android.camera.Camera.onResume()V
com.android.camera.ActivityBase.onPause()V
com.android.gallery3d.app.AbstractGalleryActivity.onPause()V
com.android.camera.CameraPreference$OnPreferenceChangedListener.onSharedPreferenceChanged()V
com.android.camera.Camera.restorePreferences()V
com.android.camera.ActivityBase.onResume()V
com.android.gallery3d.app.AbstractGalleryActivity.onResume()V
com.android.camera.VideoCamera.onCancelBgTraining(Landroid/view/View;)V
com.android.camera.VideoCamera.restorePreferences()V
com.android.gallery3d.data.ClusterAlbumSet.reload()J
com.android.server.location.ComprehensiveCountryDetector$2.run()V
com.android.camera.PanoramaActivity.onPause()V
com.android.gallery3d.app.AlbumPicker.onPause()V
com.android.gallery3d.app.CropImage.onPause()V
com.android.gallery3d.app.DialogPicker.onPause()V
com.android.gallery3d.app.Gallery.onPause()V
com.android.gallery3d.app.PickerActivity.onPause()V
com.android.camera.ui.IndicatorControl.onSettingChanged()V
com.android.camera.Camera.access$4300(Lcom/android/camera/Camera;)V
com.android.camera.PanoramaActivity.onResume()V
com.android.gallery3d.app.AlbumPicker.onResume()V
com.android.gallery3d.app.CropImage.onResume()V
com.android.gallery3d.app.DialogPicker.onResume()V
com.android.gallery3d.app.Gallery.onResume()V
com.android.gallery3d.app.PickerActivity.onResume()V
com.android.camera.VideoCamera.access$2100(Lcom/android/camera/VideoCamera;)V
com.android.gallery3d.data.MediaSet.reload()J
com.android.camera.ui.IndicatorButton$Listener.onSettingChanged()V
com.android.camera.ui.IndicatorControlBarContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlBar.onSettingChanged()V
com.android.camera.ui.IndicatorControlContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlWheelContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlWheel.onSettingChanged()V
com.android.camera.ui.OtherSettingsPopup$Listener.onSettingChanged()V
com.android.camera.ui.SecondLevelIndicatorControlBar.onSettingChanged()V
com.android.camera.Camera$4.run()V
com.android.camera.VideoCamera$3.run()V
com.android.gallery3d.app.AlbumDataLoader$ReloadTask.run()V
com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask.run()V
com.android.gallery3d.app.PhotoDataAdapter$ReloadTask.run()V
com.android.gallery3d.app.SlideshowPage$SequentialSource.reload()J
com.android.gallery3d.app.SlideshowPage$ShuffleSource.reload()J
com.android.gallery3d.data.ClusterAlbum.reload()J
com.android.gallery3d.data.ComboAlbum.reload()J
com.android.gallery3d.data.ComboAlbumSet.reload()J
com.android.gallery3d.data.FilterDeleteSet.reload()J
com.android.gallery3d.data.FilterTypeSet.reload()J
com.android.gallery3d.data.FilterTypeSet.updateData()V
com.android.gallery3d.data.LocalAlbumSet.reload()J
com.android.gallery3d.data.LocalMergeAlbum.reload()J
com.android.gallery3d.data.MtpDeviceSet.reload()J
com.android.gallery3d.gadget.MediaSetSource.reload()V
com.android.camera.ui.IndicatorButton.onSettingChanged()V
com.android.camera.ui.OtherSettingsPopup.onSettingChanged()V
com.android.gallery3d.app.AlbumDataLoader.resume()V
com.android.gallery3d.app.AlbumSetDataLoader.resume()V
com.android.gallery3d.app.PhotoDataAdapter.resume()V
com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource.reload()J
com.android.gallery3d.gadget.WidgetSource.reload()V
com.android.camera.ui.BasicSettingPopup$Listener.onSettingChanged()V
com.android.camera.ui.EffectSettingPopup$Listener.onSettingChanged()V
com.android.camera.ui.InLineSettingItem$Listener.onSettingChanged()V
com.android.gallery3d.app.AlbumPage.onResume()V
com.android.gallery3d.app.AlbumSetPage.onResume()V
com.android.gallery3d.app.ManageCachePage.onResume()V
com.android.gallery3d.app.PhotoPage$Model.resume()V
com.android.gallery3d.app.SlideshowDataAdapter.loadItem()Lcom/android/gallery3d/data/MediaItem;
com.android.gallery3d.gadget.WidgetService$PhotoRVFactory.onDataSetChanged()V
com.android.camera.ui.BasicSettingPopup.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.camera.ui.EffectSettingPopup.onClick(Landroid/view/View;)V
com.android.camera.ui.EffectSettingPopup.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.camera.ui.InLineSettingItem.changeIndex(I)Z
com.android.gallery3d.app.ActivityState.onResume()V
com.android.gallery3d.app.PhotoPage.onResume()V
com.android.gallery3d.app.SlideshowDataAdapter.access$500(Lcom/android/gallery3d/app/SlideshowDataAdapter;)Lcom/android/gallery3d/data/MediaItem;
com.android.camera.ui.InLineSettingKnob.changeIndex(I)Z
com.android.camera.ui.InLineSettingRestore.changeIndex(I)Z
com.android.camera.ui.InLineSettingSwitch.changeIndex(I)Z
com.android.gallery3d.app.ActivityState.resume()V
com.android.gallery3d.app.SlideshowPage.onResume()V
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.camera.ui.InLineSettingKnob$1.run()V
com.android.camera.ui.InLineSettingKnob$2.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.camera.ui.InLineSettingKnob$3.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.camera.ui.InLineSettingSwitch$1.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.gallery3d.app.AlbumPage.resume()V
com.android.gallery3d.app.AlbumSetPage.resume()V
com.android.gallery3d.app.ManageCachePage.resume()V
com.android.gallery3d.app.PhotoPage.resume()V
com.android.gallery3d.app.SlideshowPage.resume()V
com.android.gallery3d.app.StateManager.finishState(Lcom/android/gallery3d/app/ActivityState;)V
com.android.gallery3d.app.StateManager.resume()V
com.android.gallery3d.app.StateManager.startStateForResult(Ljava/lang/Class;ILandroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.startState(Ljava/lang/Class;Landroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.switchState(Lcom/android/gallery3d/app/ActivityState;Ljava/lang/Class;Landroid/os/Bundle;)V
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.ActivityState.onBackPressed()V
com.android.gallery3d.app.AlbumPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage.clearLoadingBit(I)V
com.android.gallery3d.app.AlbumSetPage.clearLoadingBit(I)V
com.android.gallery3d.app.PhotoPage$2.onLoadingFinished()V
com.android.gallery3d.app.SlideshowPage.showPendingBitmap()V
com.android.gallery3d.app.AlbumPage.doCluster(I)V
com.android.gallery3d.app.AlbumPage.pickPhoto(I)V
com.android.gallery3d.app.AlbumSetPage.pickAlbum(I)V
com.android.gallery3d.app.PhotoPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.ActivityBase.createCameraScreenNail(Z)V
com.android.gallery3d.app.AlbumPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumSetPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.DialogPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.startDefaultPage()V
com.android.gallery3d.app.Gallery.startGetContent(Landroid/content/Intent;)V
com.android.gallery3d.app.Gallery.startViewAction(Landroid/content/Intent;)V
com.android.gallery3d.ui.ImportCompleteListener.goToImportedAlbum()V
com.android.gallery3d.app.AlbumPage.onUpPressed()V
com.android.gallery3d.app.AlbumSetPage.doCluster(I)V
com.android.gallery3d.app.PhotoPage.onUpPressed()V
com.android.gallery3d.util.ThreadPool$Job.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumSetPage.onBackPressed()V
com.android.gallery3d.app.ManageCachePage.onBackPressed()V
com.android.gallery3d.app.PhotoPage.onBackPressed()V
com.android.gallery3d.app.SlideshowPage.onBackPressed()V
com.android.gallery3d.app.StateManager.itemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.StateManager.onBackPressed()V
com.android.gallery3d.app.ActivityState.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage$5.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage.access$1600(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumPage.onPause()V
com.android.gallery3d.app.AlbumSetPage.access$1600(Lcom/android/gallery3d/app/AlbumSetPage;I)V
com.android.gallery3d.app.AlbumSetPage.onPause()V
com.android.gallery3d.app.LoadingListener.onLoadingFinished()V
com.android.gallery3d.app.PhotoDataAdapter$DataListener.onLoadingFinished()V
com.android.gallery3d.app.SlideshowPage.access$100(Lcom/android/gallery3d/app/SlideshowPage;)V
com.android.gallery3d.app.GalleryActionBar$ClusterRunner.doCluster(I)V
com.android.gallery3d.app.AlbumPage.access$900(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumSetPage.access$1000(Lcom/android/gallery3d/app/AlbumSetPage;I)V
com.android.camera.Camera.createCameraScreenNail(Z)V
com.android.camera.PanoramaActivity.createCameraScreenNail(Z)V
com.android.camera.VideoCamera.createCameraScreenNail(Z)V
com.android.gallery3d.app.AbstractGalleryActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.PickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumSetPage$4.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.Gallery.initializeByIntent()V
com.android.gallery3d.ui.ImportCompleteListener.onProgressComplete(I)V
com.android.gallery3d.app.AlbumPage.onBackPressed()V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/Bitmap;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Lcom/android/gallery3d/ui/ScreenNail;
com.android.gallery3d.gadget.WidgetUtils.createWidgetBitmap(Lcom/android/gallery3d/data/MediaItem;)Landroid/graphics/Bitmap;
com.android.gallery3d.ui.AlbumSetSlidingWindow.getLoadingTexture()Lcom/android/gallery3d/ui/BitmapTexture;
com.android.gallery3d.util.JobLimiter$JobWrapper.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.util.ThreadPool$Worker.run()V
com.android.gallery3d.app.ManageCachePage.onClick(Landroid/view/View;)V
com.android.gallery3d.app.ManageCachePage.onProgressComplete(I)V
com.android.gallery3d.app.SlideshowPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AbstractGalleryActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AbstractGalleryActivity.onBackPressed()V
com.android.gallery3d.app.ManageCachePage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.SlideshowPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.ActionModeHandler$ActionModeListener.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage$7.run()V
com.android.gallery3d.app.AlbumPage$MyLoadingListener.onLoadingFinished()V
com.android.gallery3d.app.ActivityState.onPause()V
com.android.gallery3d.app.AlbumSetPage$6.run()V
com.android.gallery3d.app.AlbumSetPage$MyLoadingListener.onLoadingFinished()V
com.android.gallery3d.app.AlbumSetDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.GalleryActionBar$1.onClick(Landroid/content/DialogInterface;I)V
com.android.gallery3d.app.GalleryActionBar.onNavigationItemSelected(IJ)Z
com.android.camera.Camera.onCreate(Landroid/os/Bundle;)V
com.android.camera.PanoramaActivity.onCreate(Landroid/os/Bundle;)V
com.android.camera.VideoCamera.onCreate(Landroid/os/Bundle;)V
com.android.camera.ActivityBase.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.CropImage.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.ui.MenuExecutor$ProgressListener.onProgressComplete(I)V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.gadget.LocalPhotoSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.gadget.MediaSetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.ui.GLView.onTouch(Landroid/view/MotionEvent;)Z
com.android.camera.ActivityBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.Camera.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.PanoramaActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.VideoCamera.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.Gallery.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.PickerActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.ActivityBase.onBackPressed()V
com.android.gallery3d.app.AlbumPicker.onBackPressed()V
com.android.gallery3d.app.DialogPicker.onBackPressed()V
com.android.gallery3d.app.Gallery.onBackPressed()V
com.android.gallery3d.app.PickerActivity.onBackPressed()V
com.android.gallery3d.ui.ActionModeHandler.onActionItemClicked(Landroid/view/ActionMode;Landroid/view/MenuItem;)Z
com.android.gallery3d.app.ManageCachePage.onPause()V
com.android.gallery3d.app.PhotoPage.onPause()V
com.android.gallery3d.app.SlideshowPage.onPause()V
com.android.gallery3d.app.StateManager.pause()V
com.android.gallery3d.app.AlbumSetDataLoader.access$1900(Lcom/android/gallery3d/app/AlbumSetDataLoader;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.access$2500(Lcom/android/gallery3d/app/PhotoDataAdapter;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumDataLoader.access$1700(Lcom/android/gallery3d/app/AlbumDataLoader;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.ui.MenuExecutor.onProgressComplete(ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.gallery3d.gadget.WidgetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.app.AlbumPage$2.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumSetPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ManageCachePage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.PhotoPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.EdgeView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.ScrollBarView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlideshowView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.TileImageView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumPicker.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.DialogPicker.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.Camera.onBackPressed()V
com.android.camera.PanoramaActivity.onBackPressed()V
com.android.camera.VideoCamera.onBackPressed()V
com.android.gallery3d.ui.ActionModeHandler$1.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.MenuExecutor.access$700(Lcom/android/gallery3d/ui/MenuExecutor;ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.gallery3d.gadget.WidgetService$PhotoRVFactory.getViewAt(I)Landroid/widget/RemoteViews;
com.android.gallery3d.app.AlbumPage$2.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumSetPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ManageCachePage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.PhotoPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.SlideshowPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.EdgeView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLRootView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLRootView.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.GLView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.GLView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.ScrollBarView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlideshowView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlotView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.TileImageView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.UndoBarView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.MenuExecutor$MediaOperation.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.gallery3d.ui.GLRoot.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage$2.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.AlbumSetPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.ManageCachePage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.PhotoPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.SlideshowPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.EdgeView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.PhotoView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.ScrollBarView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.SlideshowView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.SlotView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.TileImageView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.UndoBarView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.AlbumPage$2.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$FaceHighlightView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$HighlightRectangle.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.EdgeView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.GLView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.GLView.removeAllComponents()V
com.android.gallery3d.ui.PhotoView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.ScrollBarView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlideshowView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlotView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.TileImageView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.UndoBarView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.MenuExecutor$MediaOperation.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.ActivityState.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage$2.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.AlbumSetPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.ManageCachePage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.PhotoPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.SlideshowPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.EdgeView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.PhotoView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.ScrollBarView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.SlideshowView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.SlotView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.TileImageView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.UndoBarView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.AlbumPage$2.removeAllComponents()V
com.android.gallery3d.app.AlbumSetPage$1.removeAllComponents()V
com.android.gallery3d.app.ManageCachePage$1.removeAllComponents()V
com.android.gallery3d.app.PhotoPage$1.removeAllComponents()V
com.android.gallery3d.app.SlideshowPage$1.removeAllComponents()V
com.android.gallery3d.ui.CropView$FaceHighlightView.removeAllComponents()V
com.android.gallery3d.ui.CropView$HighlightRectangle.removeAllComponents()V
com.android.gallery3d.ui.CropView.removeAllComponents()V
com.android.gallery3d.ui.EdgeView.removeAllComponents()V
com.android.gallery3d.ui.PhotoView.removeAllComponents()V
com.android.gallery3d.ui.ScrollBarView.removeAllComponents()V
com.android.gallery3d.ui.SlideshowView.removeAllComponents()V
com.android.gallery3d.ui.SlotView.removeAllComponents()V
com.android.gallery3d.ui.TileImageView.removeAllComponents()V
com.android.gallery3d.ui.UndoBarView.removeAllComponents()V
com.android.gallery3d.app.AlbumPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage.initializeViews()V
com.android.gallery3d.app.SlideshowPage.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.app.ActivityState.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.restoreFromState(Landroid/os/Bundle;)V
com.android.server.LocationManagerService.isAllowedProviderSafe(Ljava/lang/String;)Z
com.android.server.LocationManagerService._getProvidersLocked(Landroid/location/Criteria;Z)Ljava/util/List;
com.android.server.LocationManagerService.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
android.location.ILocationManager$Stub$Proxy.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
android.location.ILocationManager$Stub.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
com.android.server.LocationManagerService.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
android.location.ILocationManager.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
android.location.ILocationManager$Stub$Proxy.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
android.location.ILocationManager$Stub.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
android.location.LocationManager.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
android.location.LocationManager.getProviders(Z)Ljava/util/List;
android.location.ILocationManager.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
com.android.server.location.LocationBasedCountryDetector.getEnabledProviders()Ljava/util/List;
android.location.LocationManager.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
com.android.server.TelephonyRegistry.checkListenerPermission(I)V
com.android.server.TelephonyRegistry.listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
com.android.internal.telephony.ITelephonyRegistry$Stub.listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
com.android.internal.telephony.ITelephonyRegistry$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.ITelephonyRegistry.listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
com.android.server.TelephonyRegistry.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.telephony.TelephonyManager.listen(Landroid/telephony/PhoneStateListener;I)V
android.media.AudioService.<init>(Landroid/content/Context;)V
com.android.contacts.dialpad.DialpadFragment.onPause()V
com.android.contacts.dialpad.DialpadFragment.onResume()V
com.android.deskclock.AlarmKlaxon.onCreate()V
com.android.deskclock.AlarmKlaxon.onDestroy()V
com.android.internal.policy.impl.GlobalActions.<init>(Landroid/content/Context;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;)V
com.android.phone.CallNotifier.<init>(Lcom/android/phone/PhoneApp;Lcom/android/internal/telephony/Phone;Lcom/android/phone/Ringer;Lcom/android/phone/BluetoothHandsfree;Lcom/android/phone/CallLogAsync;)V
com.android.phone.OtaStartupReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.location.ComprehensiveCountryDetector.addPhoneStateListener()V
com.android.server.location.ComprehensiveCountryDetector.removePhoneStateListener()V
com.android.settings.deviceinfo.Status.onPause()V
com.android.settings.deviceinfo.Status.onResume()V
com.android.settings.RadioInfo.onPause()V
com.android.settings.RadioInfo.onResume()V
com.android.systemui.statusbar.policy.NetworkController.<init>(Landroid/content/Context;)V
com.android.server.ServerThread.run()V
com.android.internal.policy.impl.PhoneWindowManager.showGlobalActionsDialog()V
com.android.phone.CallNotifier.init(Lcom/android/phone/PhoneApp;Lcom/android/internal/telephony/Phone;Lcom/android/phone/Ringer;Lcom/android/phone/BluetoothHandsfree;Lcom/android/phone/CallLogAsync;)Lcom/android/phone/CallNotifier;
com.android.server.location.ComprehensiveCountryDetector.setCountryListener(Landroid/location/CountryListener;)V
com.android.server.location.ComprehensiveCountryDetector.stop()V
com.android.systemui.statusbar.phone.PhoneStatusBar.makeStatusBarView()Lcom/android/systemui/statusbar/phone/PhoneStatusBarView;
com.android.systemui.statusbar.tablet.TabletStatusBar.makeStatusBarView()Landroid/view/View;
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
com.android.phone.PhoneApp.onCreate()V
com.android.server.CountryDetectorService$2.run()V
com.android.server.location.CountryDetectorBase.setCountryListener(Landroid/location/CountryListener;)V
com.android.server.location.CountryDetectorBase.stop()V
com.android.systemui.statusbar.phone.PhoneStatusBar.addStatusBarWindow()V
com.android.systemui.statusbar.tablet.TabletStatusBar.addStatusBarWindow()V
com.android.server.location.LocationBasedCountryDetector.setCountryListener(Landroid/location/CountryListener;)V
com.android.server.location.ComprehensiveCountryDetector.stopLocationBasedDetector()V
com.android.systemui.statusbar.phone.PhoneStatusBar.createAndAddWindows()V
com.android.systemui.statusbar.tablet.TabletStatusBar.createAndAddWindows()V
com.android.server.location.ComprehensiveCountryDetector.access$200(Lcom/android/server/location/ComprehensiveCountryDetector;)V
com.android.systemui.statusbar.BaseStatusBar.createAndAddWindows()V
com.android.server.location.ComprehensiveCountryDetector$1.onCountryDetected(Landroid/location/Country;)V
com.android.systemui.statusbar.BaseStatusBar.start()V
com.android.systemui.statusbar.phone.PhoneStatusBar.start()V
com.android.systemui.statusbar.tablet.TabletStatusBar.start()V
com.android.systemui.SystemUI.start()V
com.android.systemui.SystemUIService.onCreate()V
com.android.phone.PhoneInterfaceManager.getCellLocation()Landroid/os/Bundle;
com.android.internal.telephony.ITelephony$Stub$Proxy.getCellLocation()Landroid/os/Bundle;
com.android.internal.telephony.ITelephony$Stub.getCellLocation()Landroid/os/Bundle;
com.android.internal.telephony.ITelephony.getCellLocation()Landroid/os/Bundle;
com.android.internal.telephony.ITelephony$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.telephony.TelephonyManager.getCellLocation()Landroid/telephony/CellLocation;
com.android.phone.PhoneInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.location.GpsLocationProvider.requestRefLocation(I)V
com.android.phone.PhoneInterfaceManager.getNeighboringCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony$Stub$Proxy.getNeighboringCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony$Stub.getNeighboringCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony.getNeighboringCellInfo()Ljava/util/List;
android.telephony.TelephonyManager.getNeighboringCellInfo()Ljava/util/List;
com.android.phone.PhoneInterfaceManager.getAllCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony$Stub$Proxy.getAllCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony$Stub.getAllCellInfo()Ljava/util/List;
com.android.internal.telephony.ITelephony.getAllCellInfo()Ljava/util/List;
android.telephony.TelephonyManager.getAllCellInfo()Ljava/util/List;
Permission:android.permission.CALL_PHONE

26 Callers:

com.android.phone.PhoneInterfaceManager.enforceCallPermission()V
com.android.phone.PhoneInterfaceManager.endCall()Z
com.android.phone.PhoneInterfaceManager.call(Ljava/lang/String;)V
com.android.internal.telephony.ITelephony$Stub$Proxy.endCall()Z
com.android.internal.telephony.ITelephony$Stub.endCall()Z
com.android.internal.telephony.ITelephony$Stub$Proxy.call(Ljava/lang/String;)V
com.android.internal.telephony.ITelephony$Stub.call(Ljava/lang/String;)V
com.android.internal.telephony.ITelephony.endCall()Z
com.android.internal.telephony.ITelephony$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.ITelephony.call(Ljava/lang/String;)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.phone.PhoneInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.WindowManagerPolicy.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.interceptFallback(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Z
com.android.server.wm.InputMonitor.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
android.view.WindowManagerPolicy.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.input.InputManagerService.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.wm.InputMonitor.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.input.InputManagerService$Callbacks.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.server.input.InputManagerService.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.mms.ui.ComposeMessageActivity.dialRecipient()V
com.android.mms.ui.ComposeMessageActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.dialRecipient()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onOptionsItemSelected(Landroid/view/MenuItem;)Z
Permission:android.permission.WRITE_SETTINGS

1106 Callers:

com.android.server.PowerManagerService.setStayOnSetting(I)V
android.os.IPowerManager$Stub$Proxy.setStayOnSetting(I)V
android.os.IPowerManager$Stub.setStayOnSetting(I)V
android.os.IPowerManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.os.IPowerManager.setStayOnSetting(I)V
com.android.server.PowerManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.commands.svc.PowerCommand.run([Ljava/lang/String;)V
com.android.commands.svc.Svc$Command.run([Ljava/lang/String;)V
com.android.commands.svc.Svc.main([Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.updatePersistentConfiguration(Landroid/content/res/Configuration;)V
android.app.ActivityManagerNative.updatePersistentConfiguration(Landroid/content/res/Configuration;)V
android.app.ActivityManagerNative.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IActivityManager.updatePersistentConfiguration(Landroid/content/res/Configuration;)V
com.android.server.am.ActivityManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.AccessibilitySettings.handleToggleLargeTextPreferenceClick()V
com.android.settings.DisplaySettings.writeFontSizePreference(Ljava/lang/Object;)V
com.android.settings.Display.onClick(Landroid/view/View;)V
com.android.settings.AccessibilitySettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.DisplaySettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.providers.settings.SettingsBackupAgent.onRestore(Landroid/app/backup/BackupDataInput;ILandroid/os/ParcelFileDescriptor;)V
android.provider.Settings$Bookmarks.add(Landroid/content/ContentResolver;Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;CI)Landroid/net/Uri;
com.android.settings.quicklaunch.QuickLaunchSettings.updateShortcut(CLandroid/content/Intent;)V
com.android.settings.quicklaunch.QuickLaunchSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.quicklaunch.QuickLaunchSettings.clearShortcut(C)V
com.android.settings.quicklaunch.QuickLaunchSettings.onClick(Landroid/content/DialogInterface;I)V
com.android.providers.settings.SettingsBackupAgent.onRestoreFile(Landroid/os/ParcelFileDescriptor;JILjava/lang/String;Ljava/lang/String;JJ)V
android.provider.Settings$System.getUriFor(Ljava/lang/String;)Landroid/net/Uri;
android.media.AudioService$SettingsObserver.<init>(Landroid/media/AudioService;)V
android.preference.VolumePreference$SeekBarVolumizer.initSeekBar(Landroid/widget/SeekBar;Landroid/net/Uri;)V
android.widget.DateTimeView.registerReceivers()V
com.android.contacts.preference.ContactsPreferences.registerChangeListener(Lcom/android/contacts/preference/ContactsPreferences$ChangeListener;)V
com.android.internal.policy.impl.GlobalActions.<init>(Landroid/content/Context;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;)V
com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver.observe()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.<init>(Lcom/android/internal/telephony/cdma/CDMAPhone;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.<init>(Lcom/android/internal/telephony/gsm/GSMPhone;)V
com.android.internal.view.RotationPolicy.registerRotationPolicyListener(Landroid/content/Context;Lcom/android/internal/view/RotationPolicy$RotationPolicyListener;)V
com.android.server.input.InputManagerService.registerPointerSpeedSettingObserver()V
com.android.server.input.InputManagerService.registerShowTouchesSettingObserver()V
com.android.server.NetworkTimeUpdateService$SettingsObserver.observe(Landroid/content/Context;)V
com.android.server.NotificationManagerService$SettingsObserver.observe()V
com.android.server.VibratorService.systemReady()V
com.android.settings.AirplaneModeEnabler.resume()V
com.android.settings.BrightnessPreference.showDialog(Landroid/os/Bundle;)V
com.android.settings.PointerSpeedPreference.showDialog(Landroid/os/Bundle;)V
com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver.startObserving()V
android.media.AudioService.<init>(Landroid/content/Context;)V
android.preference.VolumePreference$SeekBarVolumizer.<init>(Landroid/preference/VolumePreference;Landroid/content/Context;Landroid/widget/SeekBar;ILandroid/net/Uri;)V
android.widget.DateTimeView.onAttachedToWindow()V
com.android.contacts.list.ContactEntryListFragment.onStart()V
com.android.contacts.list.PhoneFavoriteFragment.onStart()V
com.android.internal.policy.impl.PhoneWindowManager.showGlobalActionsDialog()V
com.android.internal.policy.impl.PhoneWindowManager.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.<init>(Lcom/android/internal/telephony/cdma/CDMALTEPhone;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.<init>(Lcom/android/internal/telephony/cdma/CDMAPhone;)V
com.android.internal.telephony.cdma.CDMAPhone.initSstIcc()V
com.android.internal.telephony.gsm.GSMPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.settings.AccessibilitySettings.onResume()V
com.android.settings.DisplaySettings.onResume()V
com.android.systemui.statusbar.policy.AutoRotateController.<init>(Landroid/content/Context;Landroid/widget/CompoundButton;Lcom/android/systemui/statusbar/policy/AutoRotateController$RotationLockCallbacks;)V
com.android.server.input.InputManagerService.start()V
com.android.server.NetworkTimeUpdateService.systemReady()V
com.android.server.NotificationManagerService.<init>(Landroid/content/Context;Lcom/android/server/StatusBarManagerService;Lcom/android/server/LightsService;)V
com.android.server.ServerThread.run()V
com.android.settings.WirelessSettings.onResume()V
com.android.settings.widget.SettingsAppWidgetProvider.checkObserver(Landroid/content/Context;)V
android.preference.VolumePreference$SeekBarVolumizer.<init>(Landroid/preference/VolumePreference;Landroid/content/Context;Landroid/widget/SeekBar;I)V
com.android.settings.RingerVolumePreference.onBindDialogView(Landroid/view/View;)V
com.android.contacts.list.ContactBrowseListFragment.onStart()V
com.android.contacts.list.ContactPickerFragment.onStart()V
com.android.contacts.list.DefaultContactBrowseListFragment.onStart()V
com.android.contacts.list.EmailAddressPickerFragment.onStart()V
com.android.contacts.list.JoinContactListFragment.onStart()V
com.android.contacts.list.PhoneNumberPickerFragment.onStart()V
com.android.contacts.list.PostalAddressPickerFragment.onStart()V
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
android.view.WindowManagerPolicy.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.telephony.cdma.CDMALTEPhone.initSstIcc()V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.settings.SettingsPreferenceFragment.onResume()V
com.android.systemui.statusbar.RotationToggle.onAttachedToWindow()V
com.android.systemui.statusbar.tablet.SettingsView.onFinishInflate()V
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)V
com.android.server.ServerThread$1.run()V
com.android.settings.widget.SettingsAppWidgetProvider.onEnabled(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider.updateWidget(Landroid/content/Context;)V
android.preference.VolumePreference.onBindDialogView(Landroid/view/View;)V
com.android.server.wm.WindowManagerService$PolicyThread.run()V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.PhoneFactory.getCdmaPhone()Lcom/android/internal/telephony/Phone;
com.android.internal.telephony.PhoneFactory.makeDefaultPhone(Landroid/content/Context;)V
com.android.internal.telephony.PhoneFactory.getGsmPhone()Lcom/android/internal/telephony/Phone;
com.android.settings.accounts.AccountPreferenceBase.onResume()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onResume()V
com.android.settings.bluetooth.DeviceProfilesSettings.onResume()V
com.android.settings.DateTimeSettings.onResume()V
com.android.settings.deviceinfo.Memory.onResume()V
com.android.settings.deviceinfo.UsbSettings.onResume()V
com.android.settings.DockSettings.onResume()V
com.android.settings.DreamSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onResume()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onResume()V
com.android.settings.inputmethod.SpellCheckersSettings.onResume()V
com.android.settings.inputmethod.UserDictionaryList.onResume()V
com.android.settings.LocationSettings.onResume()V
com.android.settings.PrivacySettings.onResume()V
com.android.settings.SecuritySettings.onResume()V
com.android.settings.SoundSettings.onResume()V
com.android.settings.users.UserDetailsSettings.onResume()V
com.android.settings.users.UserSettings.onResume()V
com.android.settings.vpn2.VpnSettings.onResume()V
com.android.settings.wifi.AdvancedWifiSettings.onResume()V
com.android.settings.wifi.p2p.WifiP2pSettings.onResume()V
com.android.settings.wifi.WifiSettings.onResume()V
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZLcom/android/server/wm/WindowManagerService$1;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.onPostExecute(Ljava/lang/Boolean;)V
com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver.onChange(Z)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.onPostExecute(Ljava/lang/Boolean;)V
com.android.settings.widget.SettingsAppWidgetProvider.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.telephony.PhoneProxy.deleteAndCreatePhone(I)V
com.android.internal.telephony.PhoneFactory.makeDefaultPhones(Landroid/content/Context;)V
com.android.settings.accounts.AccountSyncSettings.onResume()V
com.android.settings.accounts.ManageAccountsSettings.onResume()V
com.android.settings.accounts.SyncSettings.onResume()V
com.android.settings.bluetooth.BluetoothSettings.onResume()V
com.android.settings.bluetooth.DevicePickerFragment.onResume()V
com.android.server.wm.WindowManagerService$WMThread.run()V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.onPostExecute(Ljava/lang/Object;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.onPostExecute(Ljava/lang/Object;)V
com.android.internal.telephony.PhoneProxy.updatePhoneObject(I)V
com.android.phone.PhoneApp.onCreate()V
com.android.server.wm.WindowManagerService.main(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)Lcom/android/server/wm/WindowManagerService;
android.provider.Settings$Secure.putString(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.setAndPersistDeviceName(Ljava/lang/String;)Z
android.net.wifi.WifiStateMachine.setCountryCode(Ljava/lang/String;Z)V
android.provider.Settings$Secure.putFloat(Landroid/content/ContentResolver;Ljava/lang/String;F)Z
android.provider.Settings$Secure.putInt(Landroid/content/ContentResolver;Ljava/lang/String;I)Z
android.provider.Settings$Secure.putLong(Landroid/content/ContentResolver;Ljava/lang/String;J)Z
android.provider.Settings$Secure.setLocationProviderEnabled(Landroid/content/ContentResolver;Ljava/lang/String;Z)V
android.service.dreams.DreamManagerService.setDreamComponent(Landroid/content/ComponentName;)V
android.speech.tts.TtsEngines.updateLocalePrefForEngine(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.accessibility.AccessibilityManagerService.persistComponentNamesToSettingLocked(Ljava/lang/String;Ljava/util/Set;)V
com.android.server.BackupManagerService.selectBackupTransport(Ljava/lang/String;)Ljava/lang/String;
com.android.server.ConnectivityService.setGlobalProxy(Landroid/net/ProxyProperties;)V
com.android.server.DevicePolicyManagerService.saveGlobalProxyLocked(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.InputMethodManagerService$InputMethodSettings.putEnabledInputMethodsStr(Ljava/lang/String;)V
com.android.server.InputMethodManagerService$InputMethodSettings.putSelectedInputMethod(Ljava/lang/String;)V
com.android.server.InputMethodManagerService$InputMethodSettings.putSubtypeHistoryStr(Ljava/lang/String;)V
com.android.server.RecognitionManagerService.setCurRecognizer(Landroid/content/ComponentName;)V
com.android.server.wm.WindowManagerService.clearForcedDisplaySize()V
com.android.server.wm.WindowManagerService.setForcedDisplaySize(II)V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onPreferenceToggled(Ljava/lang/String;Z)V
com.android.settings.inputmethod.InputMethodAndSubtypeUtil.saveInputMethodSubtypeList(Lcom/android/settings/SettingsPreferenceFragment;Landroid/content/ContentResolver;Ljava/util/List;Z)V
com.android.settings.OwnerInfoSettings.saveToDb()V
com.android.settings.tts.TextToSpeechSettings.onVoiceDataIntegrityCheckDone(Landroid/content/Intent;)V
com.android.settings.VoiceInputOutputSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
android.net.wifi.p2p.WifiP2pService$P2pStateMachine.access$2900(Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;Ljava/lang/String;)Z
android.net.wifi.WifiStateMachine.setCountryCode()V
com.android.server.WifiService.setCountryCode(Ljava/lang/String;Z)V
android.net.wifi.WifiStateMachine.setFrequencyBand(IZ)V
android.net.wifi.WifiWatchdogStateMachine.putSettingsBoolean(Landroid/content/ContentResolver;Ljava/lang/String;Z)Z
android.server.BluetoothA2dpService.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.server.BluetoothInputProfileHandler.setInputDevicePriority(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.internal.telephony.cdma.CdmaServiceStateTracker.saveCdmaSubscriptionSource(I)V
com.android.internal.telephony.DataConnectionTracker.onSetUserDataEnabled(Z)V
com.android.internal.telephony.DataConnectionTracker.setDataOnRoamingEnabled(Z)V
com.android.phone.BluetoothHeadsetService$6.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.phone.CallFeaturesSetting.handleTTYChange(Landroid/preference/Preference;Ljava/lang/Object;)V
com.android.phone.CdmaSubscriptionListPreference$CdmaSubscriptionButtonHandler.handleSetCdmaSubscriptionMode(Landroid/os/Message;)V
com.android.phone.CdmaSystemSelectListPreference$MyHandler.handleQueryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.phone.CdmaSystemSelectListPreference$MyHandler.handleSetCdmaRoamingPreference(Landroid/os/Message;)V
com.android.phone.CdmaSystemSelectListPreference$MyHandler.resetCdmaRoamingModeToDefault()V
com.android.phone.CdmaSystemSelectListPreference.onDialogClosed(Z)V
com.android.phone.CdmaVoicePrivacyCheckBoxPreference$MyHandler.handleGetVPResponse(Landroid/os/Message;)V
com.android.phone.CellBroadcastSms.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.phone.MobileNetworkSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.phone.MobileNetworkSettings$MyHandler.handleGetPreferredNetworkTypeResponse(Landroid/os/Message;)V
com.android.phone.MobileNetworkSettings$MyHandler.handleSetPreferredNetworkTypeResponse(Landroid/os/Message;)V
com.android.phone.MobileNetworkSettings$MyHandler.resetNetworkModeToDefault()V
com.android.phone.Use2GOnlyCheckBoxPreference$MyHandler.handleGetPreferredNetworkTypeResponse(Landroid/os/Message;)V
com.android.phone.Use2GOnlyCheckBoxPreference.onClick()V
com.android.provision.DefaultActivity.onCreate(Landroid/os/Bundle;)V
com.android.server.accessibility.AccessibilityManagerService$MainHanler$2.onClick(Landroid/content/DialogInterface;I)V
com.android.server.accessibility.AccessibilityManagerService.manageServicesLocked()V
com.android.server.BackupManagerService.setAutoRestore(Z)V
com.android.server.BackupManagerService.setBackupEnabled(Z)V
com.android.server.ConnectivityService.handleSetNetworkPreference(I)V
com.android.server.InputMethodManagerService$InputMethodSettings.putSelectedSubtype(I)V
com.android.server.NsdService.setEnabled(Z)V
com.android.server.ThrottleService$MyHandler.onPolicyChanged()V
com.android.server.usb.UsbDeviceManager.systemReady()V
com.android.server.WifiService.testAndClearWifiSavedState()Z
com.android.server.WifiService.getPersistedWifiState()I
com.android.server.WifiService.persistWifiState(I)V
com.android.settings.AccessibilityEnableScriptInjectionPreference.setSystemSetting(Z)V
com.android.settings.AccessibilitySettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.AccessibilitySettings.handleTogglePowerButtonEndsCallPreferenceClick()V
com.android.settings.AccessibilitySettings.handleToggleSpeakPasswordPreferenceClick()V
com.android.settings.ApplicationSettings.setAdvancedSettingsEnabled(Z)V
com.android.settings.DataUsageSummary.setDataRoaming(Z)V
com.android.settings.DevelopmentSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.DevelopmentSettings.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.DevelopmentSettings.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.DevelopmentSettings.onResume()V
com.android.settings.DevelopmentSettings.writeShowAllANRsOptions()V
com.android.settings.DreamSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.DreamSettings.setScreenSaverEnabled(Landroid/content/Context;Z)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.saveInputMethodSelectorVisibility(Ljava/lang/String;)V
com.android.settings.inputmethod.InputMethodAndSubtypeUtil.putSelectedInputMethodSubtype(Landroid/content/ContentResolver;I)V
com.android.settings.LocationSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.OwnerInfoSettings$1.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.SecuritySettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.SecuritySettings.setNonMarketAppsAllowed(Z)V
com.android.settings.tts.TextToSpeechSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.wifi.AdvancedWifiSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.wifi.WifiApEnabler.setSoftapEnabled(Z)V
com.android.providers.settings.SettingsHelper.setGpsLocation(Ljava/lang/String;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Boolean;
android.service.dreams.IDreamManager$Stub$Proxy.setDreamComponent(Landroid/content/ComponentName;)V
android.service.dreams.IDreamManager$Stub.setDreamComponent(Landroid/content/ComponentName;)V
com.android.settings.tts.TtsEngineSettingsFragment.updateLanguageTo(Ljava/lang/String;)V
com.android.server.accessibility.AccessibilityManagerService.access$500(Lcom/android/server/accessibility/AccessibilityManagerService;Ljava/lang/String;Ljava/util/Set;)V
android.app.backup.IBackupManager$Stub$Proxy.selectBackupTransport(Ljava/lang/String;)Ljava/lang/String;
android.app.backup.IBackupManager$Stub.selectBackupTransport(Ljava/lang/String;)Ljava/lang/String;
android.net.IConnectivityManager$Stub$Proxy.setGlobalProxy(Landroid/net/ProxyProperties;)V
android.net.IConnectivityManager$Stub.setGlobalProxy(Landroid/net/ProxyProperties;)V
com.android.server.ConnectivityService.handleDeprecatedGlobalHttpProxy()V
com.android.server.DevicePolicyManagerService.resetGlobalProxyLocked()V
com.android.server.InputMethodManagerService$InputMethodSettings.buildAndPutEnabledInputMethodsStrRemovingIdLocked(Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/String;)Z
com.android.server.InputMethodManagerService$InputMethodSettings.appendAndPutEnabledInputMethodLocked(Ljava/lang/String;Z)V
com.android.server.InputMethodManagerService$InputMethodSettings.enableAllIMEsIfThereIsNoEnabledIME()V
com.android.server.InputMethodManagerService.setSelectedInputMethodAndSubtypeLocked(Landroid/view/inputmethod/InputMethodInfo;IZ)V
com.android.server.InputMethodManagerService$InputMethodSettings.saveSubtypeHistory(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.RecognitionManagerService$MyPackageMonitor.onSomePackagesChanged()V
com.android.server.RecognitionManagerService.systemReady()V
android.view.IWindowManager$Stub$Proxy.clearForcedDisplaySize()V
android.view.IWindowManager$Stub.clearForcedDisplaySize()V
android.view.IWindowManager$Stub$Proxy.setForcedDisplaySize(II)V
android.view.IWindowManager$Stub.setForcedDisplaySize(II)V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment$2.onBeforeCheckedChanged(Lcom/android/settings/AccessibilitySettings$ToggleSwitch;Z)Z
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onPause()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onPause()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.setSubtypeAutoSelectionEnabled(Ljava/lang/String;Z)V
com.android.settings.inputmethod.InputMethodPreference.saveImeSettings()V
com.android.settings.OwnerInfoSettings.onPause()V
com.android.settings.tts.TextToSpeechSettings.onActivityResult(IILandroid/content/Intent;)V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine.access$7900(Landroid/net/wifi/WifiStateMachine;)V
android.net.wifi.IWifiManager$Stub$Proxy.setCountryCode(Ljava/lang/String;Z)V
android.net.wifi.IWifiManager$Stub.setCountryCode(Ljava/lang/String;Z)V
android.net.wifi.WifiStateMachine.setFrequencyBand()V
com.android.server.WifiService.setFrequencyBand(IZ)V
android.net.wifi.WifiWatchdogStateMachine.makeWifiWatchdogStateMachine(Landroid/content/Context;)Landroid/net/wifi/WifiWatchdogStateMachine;
android.bluetooth.IBluetoothA2dp$Stub$Proxy.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.BluetoothDeviceProfileState.processCommand(I)Z
android.bluetooth.IBluetoothA2dp$Stub.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.server.BluetoothA2dpService.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.adjustOtherSinkPriorities(Landroid/bluetooth/BluetoothDevice;)V
android.server.BluetoothA2dpService.handleSinkStateChange(Landroid/bluetooth/BluetoothDevice;II)V
android.server.BluetoothInputProfileHandler.handleInputDeviceStateChange(Landroid/bluetooth/BluetoothDevice;I)V
android.server.BluetoothInputProfileHandler.setInitialInputDevicePriority(Landroid/bluetooth/BluetoothDevice;I)V
android.server.BluetoothService.setInputDevicePriority(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.saveCdmaSubscriptionSource(I)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.handleCdmaSubscriptionSource(I)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onSetUserDataEnabled(Z)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onSetUserDataEnabled(Z)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.setDataOnRoamingEnabled(Z)V
com.android.internal.telephony.cdma.CDMAPhone.setDataRoamingEnabled(Z)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.setDataOnRoamingEnabled(Z)V
com.android.internal.telephony.gsm.GSMPhone.setDataRoamingEnabled(Z)V
android.bluetooth.IBluetoothHeadset$Stub$Proxy.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetoothHeadset$Stub.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.phone.CallFeaturesSetting.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.server.accessibility.AccessibilityManagerService.access$300(Lcom/android/server/accessibility/AccessibilityManagerService;)V
com.android.server.accessibility.AccessibilityManagerService.handleAccessibilityEnabledSettingChangedLocked()V
android.app.backup.IBackupManager$Stub$Proxy.setAutoRestore(Z)V
android.app.backup.IBackupManager$Stub.setAutoRestore(Z)V
android.app.backup.IBackupManager$Stub$Proxy.setBackupEnabled(Z)V
android.app.backup.IBackupManager$Stub.setBackupEnabled(Z)V
com.android.server.BackupManagerService.<init>(Landroid/content/Context;)V
com.android.server.ConnectivityService.access$1800(Lcom/android/server/ConnectivityService;I)V
android.net.nsd.INsdManager$Stub$Proxy.setEnabled(Z)V
android.net.nsd.INsdManager$Stub.setEnabled(Z)V
com.android.server.usb.UsbService.systemReady()V
com.android.server.WifiService.checkAndStartWifi()V
com.android.server.WifiService.handleAirplaneModeToggled(Z)V
com.android.server.WifiService.handleWifiToggled(Z)V
com.android.settings.AccessibilityEnableScriptInjectionPreference.onClick()V
com.android.settings.AccessibilityEnableScriptInjectionPreference.onDialogClosed(Z)V
com.android.settings.ApplicationSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.DataUsageSummary.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.DataUsageSummary.access$2800(Lcom/android/settings/DataUsageSummary;Z)V
com.android.settings.DevelopmentSettings.resetDangerousOptions()V
com.android.settings.DreamSettings$Enabler.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.SecuritySettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.SecuritySettings.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.TetherSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.TetherSettings.startTethering()V
com.android.providers.settings.SettingsHelper.restoreValue(Ljava/lang/String;Ljava/lang/String;)Z
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.service.dreams.IDreamManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.service.dreams.IDreamManager.setDreamComponent(Landroid/content/ComponentName;)V
com.android.settings.tts.TtsEngineSettingsFragment.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.tts.TtsEngineSettingsFragment.updateDefaultLocalePref(Ljava/util/ArrayList;)V
com.android.server.accessibility.AccessibilityManagerService$1.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.server.accessibility.AccessibilityManagerService$1.onPackageRemoved(Ljava/lang/String;I)V
android.app.backup.IBackupManager.selectBackupTransport(Ljava/lang/String;)Ljava/lang/String;
android.app.backup.IBackupManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager.setGlobalProxy(Landroid/net/ProxyProperties;)V
com.android.server.ConnectivityService.access$2000(Lcom/android/server/ConnectivityService;)V
com.android.server.DevicePolicyManagerService.access$200(Lcom/android/server/DevicePolicyManagerService;)V
com.android.server.InputMethodManagerService.setInputMethodEnabledLocked(Ljava/lang/String;Z)Z
com.android.server.InputMethodManagerService.<init>(Landroid/content/Context;Lcom/android/server/wm/WindowManagerService;)V
com.android.server.InputMethodManagerService.resetDefaultImeLocked(Landroid/content/Context;)V
com.android.server.InputMethodManagerService.resetSelectedInputMethodAndSubtypeLocked(Ljava/lang/String;)V
com.android.server.InputMethodManagerService$InputMethodSettings.addSubtypeToHistory(Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.content.PackageMonitor.onSomePackagesChanged()V
android.view.IWindowManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IWindowManager.clearForcedDisplaySize()V
android.view.IWindowManager.setForcedDisplaySize(II)V
com.android.settings.AccessibilitySettings$ToggleSwitch$OnBeforeCheckedChangeListener.onBeforeCheckedChanged(Lcom/android/settings/AccessibilitySettings$ToggleSwitch;Z)Z
com.android.settings.SettingsPreferenceFragment.onPause()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.updateAutoSelectionCB()V
com.android.settings.inputmethod.InputMethodPreference.setChecked(ZZ)V
com.android.settings.SettingsPreferenceFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$DriverStartedState.enter()V
android.net.wifi.IWifiManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.IWifiManager.setCountryCode(Ljava/lang/String;Z)V
android.net.wifi.WifiStateMachine.access$8000(Landroid/net/wifi/WifiStateMachine;)V
android.net.wifi.IWifiManager$Stub$Proxy.setFrequencyBand(IZ)V
android.net.wifi.IWifiManager$Stub.setFrequencyBand(IZ)V
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.enter()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.enter()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.enter()V
android.bluetooth.IBluetoothA2dp.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetoothA2dp$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.access$300(Landroid/server/BluetoothA2dpService;Landroid/bluetooth/BluetoothDevice;II)V
android.server.BluetoothA2dpService.onBluetoothDisable()V
android.server.BluetoothA2dpService.onConnectSinkResult(Ljava/lang/String;Z)V
android.server.BluetoothA2dpService.onSinkPropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothInputProfileHandler.connectInputDeviceInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothInputProfileHandler.disconnectInputDeviceInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothInputProfileHandler.handleInputDevicePropertyChange(Ljava/lang/String;Z)V
android.server.BluetoothBondState.setProfilePriorities(Ljava/lang/String;I)V
android.bluetooth.IBluetooth$Stub$Proxy.setInputDevicePriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetooth$Stub.setInputDevicePriority(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.handleCdmaSubscriptionSource(I)V
com.android.internal.telephony.cdma.CDMALTEPhone.setDataRoamingEnabled(Z)V
android.bluetooth.IBluetoothHeadset.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetoothHeadset$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.phone.BluetoothHeadsetService.setPriority(Landroid/bluetooth/BluetoothDevice;I)V
com.android.phone.CallFeaturesSetting.onCreate(Landroid/os/Bundle;)V
com.android.server.accessibility.AccessibilityManagerService$1.onSomePackagesChanged()V
com.android.server.accessibility.AccessibilityManagerService$4.onChange(Z)V
com.android.server.accessibility.AccessibilityManagerService$5.onChange(Z)V
com.android.server.accessibility.AccessibilityManagerService$Service.binderDied()V
com.android.server.accessibility.AccessibilityManagerService.access$900(Lcom/android/server/accessibility/AccessibilityManagerService;)V
android.app.backup.IBackupManager.setAutoRestore(Z)V
android.app.backup.IBackupManager.setBackupEnabled(Z)V
com.android.server.ConnectivityService.setNetworkPreference(I)V
android.net.nsd.INsdManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.nsd.INsdManager.setEnabled(Z)V
com.android.server.WifiService.access$1000(Lcom/android/server/WifiService;Z)V
com.android.settings.DataUsageSummary$ConfirmDataRoamingFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.TetherSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.startProvisioningIfNecessary(I)V
com.android.providers.settings.SettingsBackupAgent.restoreSettings([BILandroid/net/Uri;)V
android.service.dreams.DreamManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.DreamComponentPreference$2.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.tts.TtsEngineSettingsFragment.updateVoiceDetails()V
com.android.internal.content.PackageMonitor.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.internal.content.PackageMonitor.onPackageRemoved(Ljava/lang/String;I)V
com.android.commands.bmgr.Bmgr.doTransport()V
com.android.server.BackupManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.ConnectivityManager.setGlobalProxy(Landroid/net/ProxyProperties;)V
com.android.server.ConnectivityService.systemReady()V
com.android.server.DevicePolicyManagerService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.InputMethodManagerService$MyPackageMonitor.onSomePackagesChanged()V
com.android.server.InputMethodManagerService.buildInputMethodListLocked(Ljava/util/ArrayList;Ljava/util/HashMap;)V
com.android.server.InputMethodManagerService.checkCurrentLocaleChangedLocked()V
com.android.server.InputMethodManagerService.chooseNewDefaultIMELocked()Z
com.android.server.InputMethodManagerService.access$200(Lcom/android/server/InputMethodManagerService;Ljava/lang/String;)V
com.android.server.InputMethodManagerService.saveCurrentInputMethodAndSubtypeToHistory()V
com.android.internal.content.PackageMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.am.UsageStatsService$2.onSomePackagesChanged()V
com.android.server.LocationManagerService$2.onSomePackagesChanged()V
com.android.server.usb.UsbSettingsManager$MyPackageMonitor.onSomePackagesChanged()V
com.android.settings.AccessibilitySettings$SettingsPackageMonitor.onSomePackagesChanged()V
com.android.server.wm.WindowManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.commands.am.Am.runDisplaySize()V
com.android.settings.AccessibilitySettings$ToggleSwitch.setChecked(Z)V
com.android.settings.AccessibilitySettings.onPause()V
com.android.settings.accounts.AccountPreferenceBase.onPause()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onPause()V
com.android.settings.bluetooth.DeviceProfilesSettings.onPause()V
com.android.settings.DateTimeSettings.onPause()V
com.android.settings.deviceinfo.Memory.onPause()V
com.android.settings.deviceinfo.UsbSettings.onPause()V
com.android.settings.DisplaySettings.onPause()V
com.android.settings.DockSettings.onPause()V
com.android.settings.DreamSettings.onPause()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onPause()V
com.android.settings.inputmethod.SpellCheckersSettings.onPause()V
com.android.settings.tts.TextToSpeechSettings.onPause()V
com.android.settings.vpn2.VpnSettings.onPause()V
com.android.settings.wifi.p2p.WifiP2pSettings.onPause()V
com.android.settings.wifi.WifiSettings.onPause()V
com.android.settings.WirelessSettings.onPause()V
com.android.settings.inputmethod.InputMethodPreference$1.onClick(Landroid/view/View;)V
com.android.settings.inputmethod.InputMethodPreference$6.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.inputmethod.InputMethodPreference.setChecked(Z)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.LocationSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.SecuritySettings.onActivityResult(IILandroid/content/Intent;)V
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
com.android.internal.util.State.enter()V
com.android.server.WifiService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.WifiManager.setCountryCode(Ljava/lang/String;Z)V
android.net.wifi.IWifiManager.setFrequencyBand(IZ)V
android.bluetooth.BluetoothA2dp.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.server.BluetoothA2dpService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.IBluetoothA2dp.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.server.BluetoothA2dpService.access$100(Landroid/server/BluetoothA2dpService;)V
android.server.BluetoothService.connectInputDeviceInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectInputDeviceInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.handleInputDevicePropertyChange(Ljava/lang/String;Z)V
android.server.BluetoothBondState.setBondState(Ljava/lang/String;II)V
android.bluetooth.IBluetooth.setInputDevicePriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.IBluetooth$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.BluetoothHeadset.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.phone.BluetoothHeadsetService$6.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.phone.BluetoothHeadsetService.adjustOtherHeadsetPriorities(Landroid/bluetooth/BluetoothDevice;)V
com.android.phone.BluetoothHeadsetService.getSdpRecordsAndConnect(Landroid/bluetooth/BluetoothDevice;)V
com.android.phone.BluetoothHeadsetService.setState(Landroid/bluetooth/BluetoothDevice;I)V
com.android.server.accessibility.AccessibilityManagerService.unregisterUiTestAutomationService(Landroid/accessibilityservice/IAccessibilityServiceClient;)V
com.android.server.accessibility.AccessibilityManagerService$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.accessibility.AccessibilityManagerService$2.onChange(Z)V
com.android.providers.settings.SettingsHelper.setAutoRestore(Z)V
com.android.settings.PrivacySettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.commands.bmgr.Bmgr.doEnable()V
com.android.settings.PrivacySettings.setBackupEnabled(Z)V
android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(I)V
android.net.IConnectivityManager$Stub.setNetworkPreference(I)V
com.android.server.NsdService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.nsd.NsdManager.setEnabled(Z)V
com.android.server.WifiService$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.TetherSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.providers.settings.SettingsBackupAgent.restoreSettings(Landroid/app/backup/BackupDataInput;Landroid/net/Uri;)V
com.android.settings.tts.TtsEngineSettingsFragment.access$100(Lcom/android/settings/tts/TtsEngineSettingsFragment;)V
android.server.search.SearchManagerService$MyPackageMonitor.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
android.widget.ActivityChooserModel$DataModelPackageMonitor.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.internal.app.ResolverActivity$1.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.providers.applications.ApplicationsProvider$MyPackageMonitor.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.server.am.UsageStatsService$2.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.server.DevicePolicyManagerService$MyPackageMonitor.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.server.LocationManagerService$2.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.server.RecognitionManagerService$MyPackageMonitor.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.server.TextServicesManagerService$TextServicesMonitor.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.server.usb.UsbSettingsManager$MyPackageMonitor.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
com.android.settings.AccessibilitySettings$SettingsPackageMonitor.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
android.server.search.SearchManagerService$MyPackageMonitor.onPackageRemoved(Ljava/lang/String;I)V
android.widget.ActivityChooserModel$DataModelPackageMonitor.onPackageRemoved(Ljava/lang/String;I)V
com.android.internal.app.ResolverActivity$1.onPackageRemoved(Ljava/lang/String;I)V
com.android.providers.applications.ApplicationsProvider$MyPackageMonitor.onPackageRemoved(Ljava/lang/String;I)V
com.android.server.DevicePolicyManagerService$MyPackageMonitor.onPackageRemoved(Ljava/lang/String;I)V
com.android.server.InputMethodManagerService$MyPackageMonitor.onPackageRemoved(Ljava/lang/String;I)V
com.android.server.LocationManagerService$2.onPackageRemoved(Ljava/lang/String;I)V
com.android.server.RecognitionManagerService$MyPackageMonitor.onPackageRemoved(Ljava/lang/String;I)V
com.android.server.TextServicesManagerService$TextServicesMonitor.onPackageRemoved(Ljava/lang/String;I)V
com.android.server.WallpaperManagerService$MyPackageMonitor.onPackageRemoved(Ljava/lang/String;I)V
com.android.commands.bmgr.Bmgr.run([Ljava/lang/String;)V
com.android.settings.ProxySelector.saveToDb()Z
com.android.server.InputMethodManagerService.systemReady(Lcom/android/server/StatusBarManagerService;)V
com.android.server.InputMethodManagerService.access$900(Lcom/android/server/InputMethodManagerService;)V
com.android.server.InputMethodManagerService.access$300(Lcom/android/server/InputMethodManagerService;)Z
com.android.server.InputMethodManagerService.updateFromSettingsLocked()V
com.android.server.InputMethodManagerService$MyPackageMonitor.onHandleForceStop(Landroid/content/Intent;[Ljava/lang/String;IZ)Z
android.server.search.SearchManagerService$MyPackageMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.widget.ActivityChooserModel$DataModelPackageMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.app.ResolverActivity$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.providers.applications.ApplicationsProvider$MyPackageMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.am.UsageStatsService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.DevicePolicyManagerService$MyPackageMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.InputMethodManagerService$MyPackageMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.LocationManagerService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.RecognitionManagerService$MyPackageMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.TextServicesManagerService$TextServicesMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.usb.UsbSettingsManager$MyPackageMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.WallpaperManagerService$MyPackageMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.AccessibilitySettings$SettingsPackageMonitor.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.commands.am.Am.run([Ljava/lang/String;)V
com.android.settings.accounts.AccountSyncSettings.onPause()V
com.android.settings.accounts.ManageAccountsSettings.onPause()V
com.android.settings.accounts.SyncSettings.onPause()V
com.android.settings.bluetooth.BluetoothSettings.onPause()V
com.android.settings.bluetooth.DevicePickerFragment.onPause()V
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
com.android.internal.telephony.MccTable.setWifiCountryCodeFromMcc(Landroid/content/Context;I)V
com.android.internal.telephony.PhoneBase.setPropertiesByCarrier()V
android.net.wifi.WifiManager.setFrequencyBand(IZ)V
com.android.settings.bluetooth.A2dpProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
android.bluetooth.IBluetoothA2dp.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothEventLoop.onInputDeviceConnectionResult(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onInputDevicePropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothBondState.setBondState(Ljava/lang/String;I)V
android.server.BluetoothService.cancelBondProcess(Ljava/lang/String;)Z
android.server.BluetoothService.cancelPairingUserInput(Ljava/lang/String;)Z
android.server.BluetoothService.setBondState(Ljava/lang/String;II)Z
android.server.BluetoothService.finishDisable()V
android.bluetooth.BluetoothInputDevice.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.server.BluetoothService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.bluetooth.HeadsetProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.HeadsetProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
com.android.phone.BluetoothHeadsetService.access$1500(Lcom/android/phone/BluetoothHeadsetService;Landroid/bluetooth/BluetoothDevice;)V
com.android.phone.BluetoothHeadsetService.access$2000(Lcom/android/phone/BluetoothHeadsetService;Landroid/bluetooth/BluetoothDevice;I)V
com.android.phone.BluetoothHeadsetService.onDestroy()V
android.view.accessibility.IAccessibilityManager$Stub$Proxy.unregisterUiTestAutomationService(Landroid/accessibilityservice/IAccessibilityServiceClient;)V
android.view.accessibility.IAccessibilityManager$Stub.unregisterUiTestAutomationService(Landroid/accessibilityservice/IAccessibilityServiceClient;)V
com.android.settings.PrivacySettings.onClick(Landroid/content/DialogInterface;I)V
android.net.IConnectivityManager.setNetworkPreference(I)V
com.android.settings.NsdEnabler.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.tts.TtsEngineSettingsFragment$1$1.run()V
com.android.commands.bmgr.Bmgr.main([Ljava/lang/String;)V
com.android.settings.ProxySelector$1.onClick(Landroid/view/View;)V
com.android.server.InputMethodManagerService$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.InputMethodManagerService$SettingsObserver.onChange(Z)V
com.android.commands.am.Am.main([Ljava/lang/String;)V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
com.android.internal.telephony.MccTable.updateMccMncConfiguration(Landroid/content/Context;Ljava/lang/String;)V
com.android.internal.telephony.cdma.CDMALTEPhone.setPropertiesByCarrier()V
com.android.internal.telephony.cdma.CDMAPhone.setPropertiesByCarrier()V
com.android.internal.telephony.gsm.GSMPhone.setPropertiesByCarrier()V
com.android.internal.telephony.PhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.sip.SipPhoneBase.setPropertiesByCarrier()V
com.android.internal.telephony.sip.SipPhone.setPropertiesByCarrier()V
com.android.settings.wifi.AdvancedWifiSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.bluetooth.LocalBluetoothProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
android.server.BluetoothService.createBond(Ljava/lang/String;)Z
android.server.BluetoothService.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth$Stub$Proxy.cancelBondProcess(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.cancelBondProcess(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.cancelPairingUserInput(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.cancelPairingUserInput(Ljava/lang/String;)Z
android.server.BluetoothEventLoop.checkPairingRequestAndGetAddress(Ljava/lang/String;I)Ljava/lang/String;
android.server.BluetoothEventLoop.onDeviceRemoved(Ljava/lang/String;)V
android.server.BluetoothService.setBondState(Ljava/lang/String;I)Z
android.server.BluetoothService.onCreatePairedDeviceResult(Ljava/lang/String;I)V
android.server.BluetoothService.pairingAttempt(Ljava/lang/String;I)V
android.server.BluetoothAdapterStateMachine$Switching.processMessage(Landroid/os/Message;)Z
android.server.BluetoothAdapterStateMachine.finishSwitchingOff()V
com.android.settings.bluetooth.HidProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
com.android.settings.bluetooth.LocalBluetoothProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.BluetoothHeadsetService$6.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.view.accessibility.IAccessibilityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.accessibility.IAccessibilityManager.unregisterUiTestAutomationService(Landroid/accessibilityservice/IAccessibilityServiceClient;)V
android.net.ConnectivityManager.setNetworkPreference(I)V
com.android.commands.svc.DataCommand.run([Ljava/lang/String;)V
com.android.commands.svc.WifiCommand.run([Ljava/lang/String;)V
com.android.internal.telephony.cdma.CDMAPhone.updateCurrentCarrierInProvider(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.PhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhoneBase.<init>(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.sip.SipPhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.sip.SipPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.settings.bluetooth.CachedBluetoothDevice.connectAutoConnectableProfiles()V
com.android.settings.bluetooth.DeviceProfilesSettings$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DeviceProfilesSettings.onProfileClicked(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.DockService.applyBtSettings(Landroid/bluetooth/BluetoothDevice;I)V
android.bluetooth.IBluetooth$Stub$Proxy.createBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.createBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth$Stub.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth.cancelBondProcess(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.cancelPairingUserInput(Ljava/lang/String;)Z
android.server.BluetoothEventLoop.onDisplayPasskey(Ljava/lang/String;II)V
android.server.BluetoothEventLoop.onRequestOobData(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onRequestPairingConsent(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onRequestPasskeyConfirmation(Ljava/lang/String;II)V
android.server.BluetoothEventLoop.onRequestPasskey(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onRequestPinCode(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onDevicePropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothEventLoop.onCreatePairedDeviceResult(Ljava/lang/String;I)V
android.server.BluetoothAdapterStateMachine.access$5300(Landroid/server/BluetoothAdapterStateMachine;)V
com.android.settings.bluetooth.CachedBluetoothDevice.disconnect(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
android.bluetooth.IBluetoothHeadset$Stub$Proxy.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.server.accessibility.AccessibilityManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.accessibilityservice.UiTestAutomationBridge.disconnect()V
com.android.internal.telephony.cdma.CDMALTEPhone.updateCurrentCarrierInProvider(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CDMAPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;Landroid/net/sip/SipProfile;)V
com.android.internal.telephony.sip.SipPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.settings.bluetooth.CachedBluetoothDevice.connectWithoutResettingTimer(Z)V
com.android.settings.bluetooth.DeviceProfilesSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.bluetooth.DockService.access$700(Lcom/android/settings/bluetooth/DockService;Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.bluetooth.DockService.handleBluetoothStateOn(I)V
com.android.settings.bluetooth.DockService.handleDocked(Landroid/bluetooth/BluetoothDevice;II)V
android.bluetooth.IBluetooth.createBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.BluetoothDevice.cancelBondProcess()Z
android.bluetooth.BluetoothDevice.cancelPairingUserInput()Z
android.server.BluetoothAdapterStateMachine$PerProcessState.processMessage(Landroid/os/Message;)Z
com.android.settings.bluetooth.CachedBluetoothDevice.disconnect()V
android.bluetooth.IBluetoothHeadset.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.commands.uiautomator.DumpCommand.run([Ljava/lang/String;)V
com.android.commands.uiautomator.EventsCommand$1.disconnect()V
com.android.uiautomator.core.UiAutomatorBridge.disconnect()V
com.android.internal.telephony.cdma.CDMALTEPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.sip.SipPhoneFactory.makePhone(Ljava/lang/String;Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)Lcom/android/internal/telephony/sip/SipPhone;
com.android.settings.bluetooth.CachedBluetoothDevice.connect(Z)V
com.android.settings.bluetooth.CachedBluetoothDevice.onUuidChanged()V
com.android.settings.bluetooth.DockService$5.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.handleBtStateChange(Landroid/content/Intent;I)V
com.android.settings.bluetooth.DockService.msgTypeDocked(Landroid/bluetooth/BluetoothDevice;II)Z
com.android.settings.bluetooth.DockService.access$200(Lcom/android/settings/bluetooth/DockService;Landroid/bluetooth/BluetoothDevice;II)V
android.bluetooth.BluetoothDevice.createBond()Z
android.bluetooth.BluetoothDevice.createBondOutOfBand([B[B)Z
com.android.settings.bluetooth.CachedBluetoothDevice.unpair()V
com.android.settings.bluetooth.BluetoothPairingDialog.onCancel()V
com.android.settings.bluetooth.BluetoothDevicePreference$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.handleUndocked(Landroid/bluetooth/BluetoothDevice;)V
android.bluetooth.BluetoothHeadset.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.commands.uiautomator.Launcher$Command.run([Ljava/lang/String;)V
com.android.internal.telephony.PhoneFactory.makeSipPhone(Ljava/lang/String;)Lcom/android/internal/telephony/sip/SipPhone;
com.android.settings.bluetooth.BluetoothDevicePreference.onClicked()V
com.android.settings.bluetooth.CachedBluetoothDevice.onBondingDockConnect()V
com.android.settings.bluetooth.CachedBluetoothDevice.onBondingStateChanged(I)V
com.android.settings.bluetooth.DockService.connectIfEnabled(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onUuidChanged(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DockService.onStartCommand(Landroid/content/Intent;II)I
com.android.settings.bluetooth.DockService.processMessage(Landroid/os/Message;)V
com.android.settings.bluetooth.DockService$1.run()V
com.android.nfc.handover.BluetoothHeadsetHandover.startBonding()V
com.android.settings.bluetooth.CachedBluetoothDevice.startPairing()Z
com.android.settings.bluetooth.DeviceProfilesSettings.unpairDevice()V
com.android.settings.bluetooth.BluetoothPairingDialog.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.settings.bluetooth.BluetoothPairingDialog.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.msgTypeUndockedPermanent(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.BluetoothDeviceProfileState.handleIncomingConnection(IZ)Z
com.android.commands.uiautomator.Launcher.main([Ljava/lang/String;)V
com.android.phone.SipBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler.createSipPhoneIfNeeded(Landroid/net/sip/SipProfile;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DockService.access$100(Lcom/android/settings/bluetooth/DockService;Landroid/os/Message;)V
com.android.nfc.handover.BluetoothHeadsetHandover.nextStepConnect()V
com.android.settings.bluetooth.BluetoothDevicePreference.pair()V
com.android.settings.bluetooth.CachedBluetoothDevice.ensurePaired()Z
com.android.settings.bluetooth.DeviceProfilesSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
android.bluetooth.BluetoothDeviceProfileState.access$6700(Landroid/bluetooth/BluetoothDeviceProfileState;IZ)Z
android.bluetooth.BluetoothDeviceProfileState.processIncomingConnectCommand(I)V
com.android.phone.SipCallOptionHandler.access$300(Lcom/android/phone/SipCallOptionHandler;Landroid/net/sip/SipProfile;)V
com.android.settings.bluetooth.BluetoothSettings.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DevicePickerFragment.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.BluetoothEventManager$Handler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.nfc.handover.BluetoothHeadsetHandover.handleIntent(Landroid/content/Intent;)V
com.android.nfc.handover.BluetoothHeadsetHandover.nextStep()V
com.android.settings.bluetooth.CachedBluetoothDevice.connectInt(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.processMessage(Landroid/os/Message;)Z
com.android.phone.SipCallOptionHandler$1.run()V
com.android.settings.bluetooth.BluetoothSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DevicePickerFragment.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.BluetoothEventManager$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.nfc.handover.BluetoothHeadsetHandover$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.nfc.handover.BluetoothHeadsetHandover.start()V
com.android.settings.bluetooth.CachedBluetoothDevice.connectProfile(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.nfc.handover.HandoverManager.tryHandover(Landroid/nfc/NdefMessage;)Z
com.android.settings.bluetooth.DockService.handleUnexpectedDisconnect(Landroid/bluetooth/BluetoothDevice;Lcom/android/settings/bluetooth/LocalBluetoothProfile;I)V
com.android.nfc.NfcDispatcher.dispatchTag(Landroid/nfc/Tag;)Z
com.android.nfc.NfcService$NfcAdapterService.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.NfcService$NfcServiceHandler.dispatchTagEndpoint(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.NfcService.sendMessage(ILjava/lang/Object;)V
android.nfc.INfcAdapter$Stub$Proxy.dispatch(Landroid/nfc/Tag;)V
android.nfc.INfcAdapter$Stub.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.NfcService.onCardEmulationAidSelected([B)V
com.android.nfc.NfcService.onCardEmulationDeselected()V
com.android.nfc.NfcService.onLlcpLinkActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.NfcService.onLlcpLinkDeactivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.NfcService.onRemoteEndpointDiscovered(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.NfcService.onRemoteFieldActivated()V
com.android.nfc.NfcService.onRemoteFieldDeactivated()V
com.android.nfc.NfcService.onSeApduReceived([B)V
com.android.nfc.NfcService.onSeEmvCardRemoval()V
com.android.nfc.NfcService.onSeMifareAccess([B)V
com.android.nfc.NfcService.sendMockNdefTag(Landroid/nfc/NdefMessage;)V
android.nfc.INfcAdapter$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.INfcAdapter.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.DeviceHost$DeviceHostListener.onCardEmulationAidSelected([B)V
com.android.nfc.DeviceHost$DeviceHostListener.onCardEmulationDeselected()V
com.android.nfc.DeviceHost$DeviceHostListener.onLlcpLinkActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onLlcpLinkDeactivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteEndpointDiscovered(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteFieldActivated()V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteFieldDeactivated()V
com.android.nfc.DeviceHost$DeviceHostListener.onSeApduReceived([B)V
com.android.nfc.DeviceHost$DeviceHostListener.onSeEmvCardRemoval()V
com.android.nfc.DeviceHost$DeviceHostListener.onSeMifareAccess([B)V
com.android.nfc.NfcService$NfcAdapterService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.NfcAdapter.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.nxp.NativeNfcManager.notifyTransactionListeners([B)V
com.android.nfc.nxp.NativeNfcManager.notifyTargetDeselected()V
com.android.nfc.nxp.NativeNfcManager.notifyLlcpLinkActivation(Lcom/android/nfc/nxp/NativeP2pDevice;)V
com.android.nfc.nxp.NativeNfcManager.notifyLlcpLinkDeactivated(Lcom/android/nfc/nxp/NativeP2pDevice;)V
com.android.nfc.nxp.NativeNfcManager.notifyNdefMessageListeners(Lcom/android/nfc/nxp/NativeNfcTag;)V
com.android.nfc.nxp.NativeNfcManager.notifySeFieldActivated()V
com.android.nfc.nxp.NativeNfcManager.notifySeFieldDeactivated()V
com.android.nfc.nxp.NativeNfcManager.notifySeApduReceived([B)V
com.android.nfc.nxp.NativeNfcManager.notifySeEmvCardRemoval()V
com.android.nfc.nxp.NativeNfcManager.notifySeMifareAccess([B)V
android.provider.Settings$Secure.getUriFor(Ljava/lang/String;)Landroid/net/Uri;
android.net.wifi.WifiWatchdogStateMachine.registerForSettingsChanges()V
android.net.wifi.WifiWatchdogStateMachine.registerForWatchdogToggle()V
android.server.search.SearchManagerService$GlobalSearchProviderObserver.<init>(Landroid/server/search/SearchManagerService;Landroid/content/ContentResolver;)V
com.android.browser.SystemAllowGeolocationOrigins.start()V
com.android.internal.policy.impl.KeyguardUpdateMonitor.<init>(Landroid/content/Context;)V
com.android.internal.telephony.DataConnectionTracker$DataRoamingSettingObserver.register(Landroid/content/Context;)V
com.android.server.accessibility.AccessibilityManagerService.registerSettingsContentObservers()V
com.android.server.am.CoreSettingsObserver.beginObserveCoreSettings()V
com.android.server.CertBlacklister.registerObservers(Landroid/content/ContentResolver;)V
com.android.server.ConnectivityService$SettingsObserver.observe(Landroid/content/Context;)V
com.android.server.InputMethodManagerService$SettingsObserver.<init>(Lcom/android/server/InputMethodManagerService;Landroid/os/Handler;)V
com.android.server.NsdService$NsdStateMachine.registerForNsdSetting()V
com.android.server.SamplingProfilerService.registerSettingObserver(Landroid/content/Context;)V
com.android.server.ThrottleService$SettingsObserver.register(Landroid/content/Context;)V
com.android.server.usb.UsbDeviceManager$UsbHandler.<init>(Lcom/android/server/usb/UsbDeviceManager;Landroid/os/Looper;)V
com.android.server.WifiService$NotificationEnabledSettingObserver.register()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings$SettingsObserver.<init>(Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings;Landroid/os/Handler;Landroid/content/Context;)V
com.android.systemui.statusbar.BaseStatusBar.start()V
android.net.wifi.WifiWatchdogStateMachine.<init>(Landroid/content/Context;)V
android.server.search.SearchManagerService.<init>(Landroid/content/Context;)V
com.android.browser.Controller.<init>(Landroid/app/Activity;)V
com.android.internal.policy.impl.KeyguardViewMediator.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/PhoneWindowManager;Landroid/os/LocalPowerManager;)V
com.android.internal.telephony.DataConnectionTracker.<init>(Lcom/android/internal/telephony/PhoneBase;)V
com.android.server.accessibility.AccessibilityManagerService.<init>(Landroid/content/Context;)V
com.android.server.am.CoreSettingsObserver.<init>(Lcom/android/server/am/ActivityManagerService;)V
com.android.server.CertBlacklister.<init>(Landroid/content/Context;)V
com.android.server.ConnectivityService.<init>(Landroid/content/Context;Landroid/os/INetworkManagementService;Landroid/net/INetworkStatsService;Landroid/net/INetworkPolicyManager;)V
com.android.server.NsdService$NsdStateMachine.<init>(Lcom/android/server/NsdService;Ljava/lang/String;)V
com.android.server.SamplingProfilerService.<init>(Landroid/content/Context;)V
com.android.server.ThrottleService.systemReady()V
com.android.server.usb.UsbDeviceManager.<init>(Landroid/content/Context;Lcom/android/server/usb/UsbSettingsManager;)V
com.android.server.WifiService.<init>(Landroid/content/Context;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onCreate(Landroid/os/Bundle;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.start()V
com.android.systemui.statusbar.tablet.TabletStatusBar.start()V
com.android.systemui.SystemUI.start()V
com.android.browser.BrowserActivity.createController()Lcom/android/browser/Controller;
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.<init>(Lcom/android/internal/telephony/cdma/CDMAPhone;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.<init>(Lcom/android/internal/telephony/PhoneBase;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.<init>(Lcom/android/internal/telephony/PhoneBase;)V
com.android.server.am.ActivityManagerService.installSystemProviders()V
com.android.server.NsdService.<init>(Landroid/content/Context;)V
com.android.server.usb.UsbService.<init>(Landroid/content/Context;)V
com.android.settings.SettingsPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.systemui.SystemUIService.onCreate()V
com.android.browser.BrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.pollStateDone()V
com.android.server.NsdService.create(Landroid/content/Context;)Lcom/android/server/NsdService;
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountPreferenceBase.onCreate(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onCreate(Landroid/os/Bundle;)V
com.android.settings.DeviceInfoSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onCreate(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.net.DataUsageMeteredSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.TetherSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WirelessSettings.onCreate(Landroid/os/Bundle;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.pollState()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.pollStateDone()V
com.android.settings.accounts.AccountSyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.SyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.pollState()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.getSubscriptionInfoAndStartPollingThreads()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.ServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.getSubscriptionInfoAndStartPollingThreads()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.queueNextSignalStrengthPoll()V
android.provider.Settings$System.putString(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z
android.media.AudioService$AudioHandler.onHandlePersistMediaButtonReceiver(Landroid/content/ComponentName;)V
android.media.MediaScanner$MyMediaScannerClient.setSettingIfNotSet(Ljava/lang/String;Landroid/net/Uri;J)V
android.media.RingtoneManager.setActualDefaultRingtoneUri(Landroid/content/Context;ILandroid/net/Uri;)V
android.provider.Settings$System.putFloat(Landroid/content/ContentResolver;Ljava/lang/String;F)Z
android.provider.Settings$System.putInt(Landroid/content/ContentResolver;Ljava/lang/String;I)Z
android.provider.Settings$System.putLong(Landroid/content/ContentResolver;Ljava/lang/String;J)Z
com.android.deskclock.AlarmPreference.onSaveRingtone(Landroid/net/Uri;)V
com.android.deskclock.Alarms.saveNextAlarm(Landroid/content/Context;Ljava/lang/String;)V
com.android.music.MusicUtils.setRingtone(Landroid/content/Context;J)V
com.android.phone.sip.SipSharedPreferences.setSipCallOption(Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.setDebugApp(Ljava/lang/String;ZZ)V
com.android.settings.DateTimeSettings.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.settings.DateTimeSettings.set24Hour(Z)V
android.media.MediaScanner$MyMediaScannerClient.endFile(Landroid/media/MediaScanner$FileEntry;ZZZZZ)Landroid/net/Uri;
com.android.phone.DefaultRingtonePreference.onSaveRingtone(Landroid/net/Uri;)V
com.android.settings.DefaultRingtonePreference.onSaveRingtone(Landroid/net/Uri;)V
android.provider.Settings$System.putConfiguration(Landroid/content/ContentResolver;Landroid/content/res/Configuration;)Z
android.hardware.input.InputManager.setPointerSpeed(Landroid/content/Context;I)V
android.media.AudioService$AudioHandler.persistRingerMode(I)V
android.media.AudioService$AudioHandler.persistVolume(Landroid/media/AudioService$VolumeStreamState;II)V
android.media.AudioService.readPersistedSettings()V
android.provider.Settings$System.setShowGTalkServiceStatus(Landroid/content/ContentResolver;Z)V
com.android.contacts.preference.ContactsPreferences.setDisplayOrder(I)V
com.android.contacts.preference.ContactsPreferences.setSortOrder(I)V
com.android.deskclock.SettingsActivity.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.internal.policy.impl.GlobalActions.changeAirplaneModeSystemSetting(Z)V
com.android.internal.policy.impl.PhoneWindowManager.setUserRotationMode(II)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.putRecoveryAction(I)V
com.android.internal.view.RotationPolicy.setRotationLock(Landroid/content/Context;Z)V
com.android.internal.view.RotationPolicy.setRotationLockForAccessibility(Landroid/content/Context;Z)V
com.android.phone.CallFeaturesSetting.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.phone.EmergencyCallHelper.powerOnRadio()V
com.android.phone.sip.SipSharedPreferences.setReceivingCallsEnabled(Z)V
com.android.server.am.ActivityManagerService.setAlwaysFinish(Z)V
com.android.server.pm.PackageManagerService.setInstallLocation(I)Z
com.android.settings.AirplaneModeEnabler.setAirplaneModeOn(Z)V
com.android.settings.ApplicationSettings.handleUpdateAppInstallLocation(Ljava/lang/String;)V
com.android.settings.BrightnessPreference.setBrightness(IZ)V
com.android.settings.BrightnessPreference.setMode(I)V
com.android.settings.CryptKeeper.setAirplaneModeIfNecessary()V
com.android.settings.DateTimeSettingsSetupWizard.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.DateTimeSettingsSetupWizard.onClick(Landroid/view/View;)V
com.android.settings.DevelopmentSettings.writeCpuUsageOptions()V
com.android.settings.DevelopmentSettings.writePointerLocationOptions()V
com.android.settings.DevelopmentSettings.writeShowTouchesOptions()V
com.android.settings.DisplaySettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.DockSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.SoundSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.SoundSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.widget.SettingsAppWidgetProvider.toggleBrightness(Landroid/content/Context;)V
com.android.systemui.statusbar.policy.AirplaneModeController$1.run()V
com.android.systemui.statusbar.policy.BrightnessController$1.run()V
com.android.systemui.statusbar.policy.BrightnessController.setMode(I)V
com.android.deskclock.Alarms.disableAlert(Landroid/content/Context;)V
com.android.deskclock.Alarms.enableAlert(Landroid/content/Context;Lcom/android/deskclock/Alarm;J)V
com.android.music.MediaPlaybackActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.music.QueryBrowserActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.music.TrackBrowserActivity.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.CallFeaturesSetting.handleSipCallOptionsChange(Ljava/lang/Object;)V
android.app.ActivityManagerNative.setDebugApp(Ljava/lang/String;ZZ)V
com.android.settings.DateTimeSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
android.media.MediaScanner$MyMediaScannerClient.doScanFile(Ljava/lang/String;Ljava/lang/String;JJZZZ)Landroid/net/Uri;
com.android.server.am.ActivityManagerService.updateConfigurationLocked(Landroid/content/res/Configuration;Lcom/android/server/am/ActivityRecord;ZZ)Z
com.android.settings.PointerSpeedPreference.onDialogClosed(Z)V
android.media.AudioService.reloadAudioSettings()V
com.android.contacts.preference.DisplayOrderPreference.persistString(Ljava/lang/String;)Z
com.android.contacts.preference.SortOrderPreference.persistString(Ljava/lang/String;)Z
com.android.internal.policy.impl.GlobalActions.access$300(Lcom/android/internal/policy/impl/GlobalActions;Z)V
android.view.WindowManagerPolicy.setUserRotationMode(II)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.doRecovery()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.updateDataStallInfo()V
com.android.systemui.statusbar.policy.AutoRotateController.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.AccessibilitySettings.handleLockScreenRotationPreferenceClick()V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.phone.sip.SipSettings.handleSipReceiveCallsOption(Z)V
android.app.ActivityManagerNative.setAlwaysFinish(Z)V
android.content.pm.IPackageManager$Stub$Proxy.setInstallLocation(I)Z
android.content.pm.IPackageManager$Stub.setInstallLocation(I)Z
com.android.settings.AirplaneModeEnabler.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.AirplaneModeEnabler.setAirplaneModeInECM(ZZ)V
com.android.settings.ApplicationSettings$1.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.BrightnessPreference.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.BrightnessPreference.onDialogClosed(Z)V
com.android.settings.BrightnessPreference.onProgressChanged(Landroid/widget/SeekBar;IZ)V
com.android.settings.BrightnessPreference.onRestoreInstanceState(Landroid/os/Parcelable;)V
com.android.settings.BrightnessPreference.restoreOldState()V
com.android.settings.CryptKeeper.onCreate(Landroid/os/Bundle;)V
com.android.systemui.statusbar.policy.BrightnessController.onChanged(Lcom/android/systemui/statusbar/policy/ToggleSlider;ZZI)V
com.android.deskclock.Alarms.setNextAlert(Landroid/content/Context;)V
android.app.IActivityManager.setDebugApp(Ljava/lang/String;ZZ)V
android.media.MediaScanner.scanSingleFile(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;
android.media.MediaScanner$MyMediaScannerClient.scanFile(Ljava/lang/String;JJZZ)V
android.media.MediaScanner.scanMtpFile(Ljava/lang/String;Ljava/lang/String;II)V
com.android.server.am.ActivityManagerService.retrieveSettings()V
android.media.IAudioService$Stub$Proxy.reloadAudioSettings()V
android.media.IAudioService$Stub.reloadAudioSettings()V
com.android.internal.policy.impl.GlobalActions$1.onToggle(Z)V
com.android.internal.policy.impl.GlobalActions$5.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.wm.WindowManagerService.freezeRotation(I)V
com.android.server.wm.WindowManagerService.thawRotation()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDataStallAlarm(I)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onPollPdp()V
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.phone.sip.SipSettings.access$700(Lcom/android/phone/sip/SipSettings;Z)V
android.app.IActivityManager.setAlwaysFinish(Z)V
android.content.pm.IPackageManager.setInstallLocation(I)Z
android.content.pm.IPackageManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.WirelessSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.BrightnessPreference.onSaveInstanceState()Landroid/os/Parcelable;
com.android.systemui.statusbar.policy.ToggleSlider$Listener.onChanged(Lcom/android/systemui/statusbar/policy/ToggleSlider;ZZI)V
com.android.deskclock.AlarmInitReceiver$1.run()V
com.android.deskclock.AlarmReceiver.handleIntent(Landroid/content/Context;Landroid/content/Intent;)V
com.android.deskclock.Alarms.addAlarm(Landroid/content/Context;Lcom/android/deskclock/Alarm;)J
com.android.deskclock.Alarms.setAlarm(Landroid/content/Context;Lcom/android/deskclock/Alarm;)J
com.android.deskclock.Alarms.deleteAlarm(Landroid/content/Context;I)V
com.android.deskclock.Alarms.enableAlarm(Landroid/content/Context;IZ)V
com.android.deskclock.Alarms.saveSnoozeAlert(Landroid/content/Context;IJ)V
com.android.commands.am.Am.runClearDebugApp()V
com.android.commands.am.Am.runSetDebugApp()V
com.android.settings.DevelopmentSettings.resetDebuggerOptions()V
com.android.settings.DevelopmentSettings.writeDebuggerOptions()V
com.android.providers.media.MediaScannerService.scanFile(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;
android.media.MediaScannerClient.scanFile(Ljava/lang/String;JJZZ)V
android.mtp.MtpDatabase.endSendObject(Ljava/lang/String;IIZ)V
com.android.server.am.ActivityManagerService.systemReady(Ljava/lang/Runnable;)V
android.media.IAudioService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.IAudioService.reloadAudioSettings()V
com.android.internal.policy.impl.GlobalActions$ToggleAction.onToggle(Z)V
android.view.IWindowManager$Stub$Proxy.freezeRotation(I)V
android.view.IWindowManager$Stub.freezeRotation(I)V
android.view.IWindowManager$Stub$Proxy.thawRotation()V
android.view.IWindowManager$Stub.thawRotation()V
com.android.internal.telephony.DataConnectionTracker.onDataStallAlarm(I)V
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.sip.SipSettings$2$1.run()V
com.android.settings.DevelopmentSettings.writeImmediatelyDestroyActivitiesOptions()V
com.android.commands.pm.Pm.runSetInstallLocation()V
com.android.server.pm.PackageManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.systemui.statusbar.policy.ToggleSlider.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.systemui.statusbar.policy.ToggleSlider.onProgressChanged(Landroid/widget/SeekBar;IZ)V
com.android.systemui.statusbar.policy.ToggleSlider.onStartTrackingTouch(Landroid/widget/SeekBar;)V
com.android.systemui.statusbar.policy.ToggleSlider.onStopTrackingTouch(Landroid/widget/SeekBar;)V
com.android.deskclock.AlarmReceiver.access$000(Lcom/android/deskclock/AlarmReceiver;Landroid/content/Context;Landroid/content/Intent;)V
com.android.deskclock.SetAlarm.saveAlarm(Lcom/android/deskclock/Alarm;)J
com.android.deskclock.HandleSetAlarm.handleCursorResult(Landroid/database/Cursor;JZZ)Z
com.android.deskclock.AlarmClock$1.onClick(Landroid/content/DialogInterface;I)V
com.android.deskclock.SetAlarm$6.onClick(Landroid/content/DialogInterface;I)V
com.android.deskclock.SetAlarm.revert()V
com.android.deskclock.AlarmClock.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.deskclock.AlarmClock.updateAlarm(ZLcom/android/deskclock/Alarm;)V
com.android.deskclock.AlarmAlertFullScreen.snooze()V
com.android.settings.DevelopmentSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.providers.media.MediaScannerService.access$100(Lcom/android/providers/media/MediaScannerService;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;
com.android.server.am.ActivityManagerService$9$1.run()V
com.android.server.am.ActivityManagerService.startRunning(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
android.media.AudioService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.AudioManager.reloadAudioSettings()V
com.android.internal.policy.impl.GlobalActions$ToggleAction.onPress()V
android.view.IWindowManager.freezeRotation(I)V
android.view.IWindowManager.thawRotation()V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onDataStallAlarm(I)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.commands.pm.Pm.run([Ljava/lang/String;)V
com.android.deskclock.AlarmReceiver$1.run()V
com.android.deskclock.SetAlarm.access$100(Lcom/android/deskclock/SetAlarm;Lcom/android/deskclock/Alarm;)J
com.android.deskclock.SetAlarm.onTimeSet(Landroid/widget/TimePicker;II)V
com.android.deskclock.SetAlarm.saveAndExit()V
com.android.deskclock.HandleSetAlarm.onCreate(Landroid/os/Bundle;)V
com.android.deskclock.SetAlarm.access$300(Lcom/android/deskclock/SetAlarm;)V
com.android.deskclock.AlarmClock.access$100(Lcom/android/deskclock/AlarmClock;ZLcom/android/deskclock/Alarm;)V
com.android.deskclock.AlarmAlertFullScreen.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.deskclock.AlarmAlertFullScreen.access$000(Lcom/android/deskclock/AlarmAlertFullScreen;)V
com.android.deskclock.AlarmAlert.snooze()V
android.app.ActivityManagerNative.startRunning(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.main(I)Landroid/content/Context;
com.android.providers.settings.SettingsHelper.applyAudioSettings()V
com.android.internal.policy.impl.GlobalActions$1.onPress()V
com.android.internal.policy.impl.GlobalActions$Action.onPress()V
com.android.internal.policy.impl.GlobalActions$SilentModeToggleAction.onPress()V
com.android.commands.monkey.MonkeyRotationEvent.injectEvent(Landroid/view/IWindowManager;Landroid/app/IActivityManager;I)I
com.android.internal.view.RotationPolicy$1.run()V
com.android.internal.view.RotationPolicy$2.run()V
com.android.uiautomator.core.InteractionController.freezeRotation()V
com.android.uiautomator.core.InteractionController.setRotationLeft()V
com.android.uiautomator.core.InteractionController.setRotationNatural()V
com.android.uiautomator.core.InteractionController.setRotationRight()V
com.android.uiautomator.core.InteractionController.unfreezeRotation()V
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.commands.pm.Pm.main([Ljava/lang/String;)V
com.android.deskclock.SetAlarm$2.onClick(Landroid/view/View;)V
com.android.deskclock.SetAlarm$5.run()V
com.android.deskclock.SetAlarm.access$000(Lcom/android/deskclock/SetAlarm;)V
com.android.deskclock.SetAlarm.onBackPressed()V
com.android.deskclock.SetAlarm$3.onClick(Landroid/view/View;)V
com.android.deskclock.AlarmClock$AlarmTimeAdapter$1.onClick(Landroid/view/View;)V
com.android.deskclock.AlarmAlert.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.deskclock.AlarmAlertFullScreen$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.deskclock.AlarmAlertFullScreen$2.onClick(Landroid/view/View;)V
com.android.deskclock.AlarmAlert.access$000(Lcom/android/deskclock/AlarmAlertFullScreen;)V
android.app.IActivityManager.startRunning(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.policy.impl.GlobalActions.onClick(Landroid/content/DialogInterface;I)V
com.android.commands.monkey.MonkeyEvent.injectEvent(Landroid/view/IWindowManager;Landroid/app/IActivityManager;I)I
com.android.commands.monkey.Monkey.run([Ljava/lang/String;)I
com.android.uiautomator.core.UiDevice.freezeRotation()V
com.android.uiautomator.core.UiDevice.setRotationLeft()V
com.android.uiautomator.core.UiDevice.setRotationNatural()V
com.android.uiautomator.core.UiDevice.setRotationRight()V
com.android.uiautomator.core.UiDevice.unfreezeRotation()V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.deskclock.SetAlarm$1.onClick(Landroid/view/View;)V
com.android.commands.monkey.Monkey.runMonkeyCycles()I
com.android.commands.monkey.Monkey.main([Ljava/lang/String;)V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
Permission:android.permission.READ_CALENDAR

505 Callers:

com.android.providers.calendar.CalendarProvider2.updateEventAttendeeStatus(Landroid/database/sqlite/SQLiteDatabase;Landroid/content/ContentValues;)V
com.android.providers.calendar.CalendarProvider2.insertInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Z)Landroid/net/Uri;
com.android.providers.calendar.CalendarProvider2.updateEventRelatedTable(Landroid/net/Uri;Ljava/lang/String;ZLandroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.calendar.CalendarProvider2.updateInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.calendar.month.MonthByWeekFragment.updateUri()Landroid/net/Uri;
com.android.calendar.month.MonthByWeekFragment.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.calendar.month.MonthByWeekFragment.access$500(Lcom/android/calendar/month/MonthByWeekFragment;)Landroid/net/Uri;
com.android.calendar.month.MonthByWeekFragment$2.run()V
android.provider.CalendarContract$CalendarAlerts.findNextAlarmTime(Landroid/content/ContentResolver;J)J
com.android.providers.calendar.CalendarAlarmManager.scheduleNextAlarmLocked(Landroid/database/sqlite/SQLiteDatabase;Lcom/android/providers/calendar/CalendarProvider2;)V
com.android.providers.calendar.CalendarAlarmManager.runScheduleNextAlarm(ZLcom/android/providers/calendar/CalendarProvider2;)V
com.android.providers.calendar.CalendarProviderIntentService.onHandleIntent(Landroid/content/Intent;)V
com.android.calendar.alerts.AlertReceiver.getEventCursor(Landroid/content/Context;J)Landroid/database/Cursor;
com.android.calendar.alerts.AlertReceiver.createBroadcastMailIntent(Landroid/content/Context;JLjava/lang/String;)Landroid/app/PendingIntent;
com.android.calendar.alerts.AlertReceiver.createEmailIntent(Landroid/content/Context;JLjava/lang/String;)Landroid/content/Intent;
com.android.calendar.alerts.AlertReceiver.makeBasicNotificationBuilder(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;JJJIZZZ)Landroid/app/Notification$Builder;
com.android.calendar.alerts.QuickResponseActivity$QueryThread.run()V
com.android.calendar.alerts.AlertReceiver.makeBasicNotification(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;JJJIZ)Lcom/android/calendar/alerts/AlertService$NotificationWrapper;
com.android.calendar.alerts.AlertReceiver.makeExpandingNotification(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJJIZZ)Lcom/android/calendar/alerts/AlertService$NotificationWrapper;
com.android.calendar.alerts.QuickResponseActivity.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.calendar.alerts.AlertService.generateAlerts(Landroid/content/Context;Lcom/android/calendar/alerts/NotificationMgr;Landroid/content/SharedPreferences;Landroid/database/Cursor;JI)Z
com.android.calendar.alerts.AlertService.postNotification(Lcom/android/calendar/alerts/AlertService$NotificationInfo;Ljava/lang/String;Landroid/content/Context;ZLcom/android/calendar/alerts/AlertService$NotificationPrefs;Lcom/android/calendar/alerts/NotificationMgr;I)V
com.android.calendar.alerts.AlertService.updateAlertNotification(Landroid/content/Context;)Z
com.android.calendar.alerts.AlertActivity.onStop()V
com.android.calendar.alerts.AlertService.doTimeChanged()V
com.android.calendar.alerts.AlertService.processMessage(Landroid/os/Message;)V
com.android.calendar.alerts.SnoozeAlarmsService.onHandleIntent(Landroid/content/Intent;)V
android.provider.CalendarContract$CalendarAlerts.alarmExists(Landroid/content/ContentResolver;JJJ)Z
com.android.exchange.ExchangeService$CalendarObserver$1.run()V
com.android.calendar.CalendarUtils$TimeZoneUtils.getTimeZone(Landroid/content/Context;Ljava/lang/Runnable;)Ljava/lang/String;
com.android.calendar.CalendarUtils$TimeZoneUtils.formatDateRange(Landroid/content/Context;JJI)Ljava/lang/String;
com.android.calendar.CalendarUtils$TimeZoneUtils.forceDBRequery(Landroid/content/Context;Ljava/lang/Runnable;)V
com.android.calendar.Utils.getTimeZone(Landroid/content/Context;Ljava/lang/Runnable;)Ljava/lang/String;
com.android.calendar.Utils.formatDateRange(Landroid/content/Context;JJI)Ljava/lang/String;
com.android.calendar.Utils.getDayOfWeekString(IIJLandroid/content/Context;)Ljava/lang/String;
com.android.calendar.agenda.AgendaAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.calendar.agenda.AgendaByDayAdapter$1.run()V
com.android.calendar.agenda.AgendaByDayAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.calendar.agenda.AgendaByDayAdapter.<init>(Landroid/content/Context;)V
com.android.calendar.agenda.AgendaFragment$1.run()V
com.android.calendar.agenda.AgendaFragment.onAttach(Landroid/app/Activity;)V
com.android.calendar.agenda.AgendaListView$1.run()V
com.android.calendar.agenda.AgendaListView.initView(Landroid/content/Context;)V
com.android.calendar.agenda.AgendaWindowAdapter$1.run()V
com.android.calendar.agenda.AgendaWindowAdapter.<init>(Landroid/content/Context;Lcom/android/calendar/agenda/AgendaListView;Z)V
com.android.calendar.alerts.AlertAdapter.updateView(Landroid/content/Context;Landroid/view/View;Ljava/lang/String;Ljava/lang/String;JJZ)V
com.android.calendar.alerts.AlertUtils.formatTimeLocation(Landroid/content/Context;JZLjava/lang/String;)Ljava/lang/String;
com.android.calendar.AllInOneActivity$2.run()V
com.android.calendar.AllInOneActivity$3.run()V
com.android.calendar.AllInOneActivity.onCreate(Landroid/os/Bundle;)V
com.android.calendar.AllInOneActivity.updateSecondaryTitleFields(J)V
com.android.calendar.CalendarController$1.run()V
com.android.calendar.CalendarController.sendEventRelatedEventWithExtra(Ljava/lang/Object;JJJJIIJJ)V
com.android.calendar.CalendarEventModel.<init>(Landroid/content/Context;)V
com.android.calendar.CalendarViewAdapter.refresh(Landroid/content/Context;)V
com.android.calendar.DayFragment$1.run()V
com.android.calendar.DayView$1.run()V
com.android.calendar.DayView.init(Landroid/content/Context;)V
com.android.calendar.DayView.reloadEvents()V
com.android.calendar.event.EditEventFragment$Done.run()V
com.android.calendar.event.EditEventView.<init>(Landroid/app/Activity;Landroid/view/View;Lcom/android/calendar/event/EditEventHelper$EditDoneRunnable;)V
com.android.calendar.event.EditEventView.setModel(Lcom/android/calendar/CalendarEventModel;)V
com.android.calendar.event.EditEventView.updateHomeTime()V
com.android.calendar.EventInfoFragment.updateEvent(Landroid/view/View;)V
com.android.calendar.GeneralPreferences.onCreate(Landroid/os/Bundle;)V
com.android.calendar.month.MonthByWeekAdapter.init()V
com.android.calendar.month.MonthByWeekAdapter.refresh()V
com.android.calendar.month.MonthByWeekFragment$1.run()V
com.android.calendar.month.MonthListView$1.run()V
com.android.calendar.month.MonthListView.init(Landroid/content/Context;)V
com.android.calendar.month.MonthWeekEventsView.drawEvent(Landroid/graphics/Canvas;Lcom/android/calendar/Event;IIIZZZ)I
com.android.calendar.SearchActivity$2.run()V
com.android.calendar.SearchActivity.onCreateOptionsMenu(Landroid/view/Menu;)Z
com.android.calendar.SearchActivity.onResume()V
com.android.calendar.Utils.getWeekNumberFromTime(JLandroid/content/Context;)I
com.android.calendar.widget.CalendarAppWidgetModel.buildFromCursor(Landroid/database/Cursor;Ljava/lang/String;)V
com.android.calendar.widget.CalendarAppWidgetProvider.performUpdate(Landroid/content/Context;Landroid/appwidget/AppWidgetManager;[I[J)V
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.getViewAt(I)Landroid/widget/RemoteViews;
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.onLoadComplete(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.calendar.AllInOneActivity.setTitleInActionBar(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.DayView.onLongClick(Landroid/view/View;)Z
com.android.calendar.DayView.appendEventAccessibilityString(Ljava/lang/StringBuilder;Lcom/android/calendar/Event;)V
com.android.calendar.DayView.onCreateContextMenu(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V
com.android.calendar.DayView.updateEventDetails()V
com.android.calendar.month.MonthWeekEventsView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.calendar.month.SimpleWeekView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.calendar.Utils.formatMonthYear(Landroid/content/Context;Landroid/text/format/Time;)Ljava/lang/String;
com.android.calendar.Utils.getDisplayedDatetime(JJJLjava/lang/String;ZLandroid/content/Context;)Ljava/lang/String;
com.android.calendar.widget.CalendarAppWidgetModel.populateDayInfo(ILandroid/text/format/Time;)Lcom/android/calendar/widget/CalendarAppWidgetModel$DayInfo;
com.android.calendar.widget.CalendarAppWidgetModel.populateEventInfo(JZJJIILjava/lang/String;Ljava/lang/String;II)Lcom/android/calendar/widget/CalendarAppWidgetModel$EventInfo;
com.android.calendar.agenda.AgendaWindowAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo.<init>(Landroid/content/Context;)V
com.android.calendar.agenda.AgendaListView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;)V
com.android.calendar.alerts.AlertAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.calendar.alerts.AlertReceiver.makeDigestNotification(Landroid/content/Context;Ljava/util/ArrayList;Ljava/lang/String;Z)Lcom/android/calendar/alerts/AlertService$NotificationWrapper;
com.android.calendar.AllInOneActivity.access$700(Lcom/android/calendar/AllInOneActivity;J)V
com.android.calendar.AllInOneActivity.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.agenda.AgendaListView.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.agenda.AgendaWindowAdapter.refresh(Landroid/text/format/Time;JLjava/lang/String;ZZ)V
com.android.calendar.AllInOneActivity.onResume()V
com.android.calendar.CalendarController.sendEventRelatedEvent(Ljava/lang/Object;JJJJIIJ)V
com.android.calendar.DayView$8.onClick(Landroid/content/DialogInterface;I)V
com.android.calendar.DayView.doSingleTapUp(Landroid/view/MotionEvent;)V
com.android.calendar.DayView.switchViews(Z)V
com.android.calendar.CalendarEventModel.<init>(Landroid/content/Context;Landroid/content/Intent;)V
com.android.calendar.CalendarViewAdapter$1.run()V
com.android.calendar.CalendarViewAdapter.<init>(Landroid/content/Context;IZ)V
com.android.calendar.DayView.<init>(Landroid/content/Context;Lcom/android/calendar/CalendarController;Landroid/widget/ViewSwitcher;Lcom/android/calendar/EventLoader;I)V
com.android.calendar.DayFragment.eventsChanged()V
com.android.calendar.DayFragment.goTo(Landroid/text/format/Time;ZZ)V
com.android.calendar.DayView.switchViews(ZFFF)Landroid/view/View;
com.android.calendar.DayView.initNextView(I)Z
com.android.calendar.event.EditEventFragment.onActionBarItemSelected(I)Z
com.android.calendar.event.EditEventFragment$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.event.EditEventFragment.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.event.EditEventFragment.onPause()V
com.android.calendar.event.EditEventHelper$EditDoneRunnable.run()V
com.android.calendar.event.EditEventFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.calendar.event.EditEventFragment.onDestroy()V
com.android.calendar.event.EditEventFragment.setModelIfDone(I)V
com.android.calendar.event.EditEventView.access$500(Lcom/android/calendar/event/EditEventView;)V
com.android.calendar.event.EditEventView.onClick(Landroid/content/DialogInterface;I)V
com.android.calendar.event.EditEventView.setAllDayViewsVisibility(Z)V
com.android.calendar.event.EditEventView.setModification(I)V
com.android.calendar.EventInfoFragment.access$100(Lcom/android/calendar/EventInfoFragment;Landroid/view/View;)V
com.android.calendar.month.SimpleWeeksAdapter.init()V
com.android.calendar.month.MonthByWeekAdapter.setEvents(IILjava/util/ArrayList;)V
com.android.calendar.month.SimpleWeeksAdapter.refresh()V
com.android.calendar.month.MonthListView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V
com.android.calendar.month.MonthListView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;)V
com.android.calendar.month.MonthListView.<init>(Landroid/content/Context;)V
com.android.calendar.month.MonthWeekEventsView.drawEvents(Landroid/graphics/Canvas;)V
com.android.calendar.CalendarViewAdapter.buildWeekNum()Ljava/lang/String;
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.buildAppWidgetModel(Landroid/content/Context;Landroid/database/Cursor;Ljava/lang/String;)Lcom/android/calendar/widget/CalendarAppWidgetModel;
com.android.calendar.widget.CalendarAppWidgetProvider.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.calendar.widget.CalendarAppWidgetProvider.onUpdate(Landroid/content/Context;Landroid/appwidget/AppWidgetManager;[I)V
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.onLoadComplete(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.calendar.DayView.sendAccessibilityEventAsNeeded(Z)V
com.android.calendar.DayView.onDraw(Landroid/graphics/Canvas;)V
com.android.calendar.month.SimpleDayPickerFragment.setMonthDisplayed(Landroid/text/format/Time;Z)V
com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler.processNewCursor(Lcom/android/calendar/agenda/AgendaWindowAdapter$QuerySpec;Landroid/database/Cursor;)I
com.android.calendar.CalendarController$EventHandler.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.agenda.AgendaListView.goTo(Landroid/text/format/Time;JLjava/lang/String;ZZ)V
com.android.calendar.agenda.AgendaListView.refresh(Z)V
com.android.calendar.AllInOneActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.calendar.DayView$3.run()V
com.android.calendar.DayView$ContextMenuHandler.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.calendar.EventInfoFragment.doEdit()V
com.android.calendar.DayView.access$4500(Lcom/android/calendar/DayView;Landroid/view/MotionEvent;)V
com.android.calendar.DayView.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.calendar.DayView.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.calendar.DayView.onClick(Landroid/view/View;)V
com.android.calendar.event.EditEventFragment.onAttach(Landroid/app/Activity;)V
com.android.calendar.AllInOneActivity.createButtonsSpinner(IZ)V
com.android.calendar.DayFragment.makeView()Landroid/view/View;
com.android.calendar.CalendarController$EventHandler.eventsChanged()V
com.android.calendar.DayFragment.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.DayFragment.onResume()V
com.android.calendar.DayView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.calendar.DayView.doFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)V
com.android.calendar.DayView.doScroll(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)V
com.android.calendar.event.EditEventFragment.access$000(Lcom/android/calendar/event/EditEventFragment;I)Z
com.android.calendar.event.EditEventFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.calendar.event.EditEventView.onCancel(Landroid/content/DialogInterface;)V
com.android.calendar.event.EditEventView.setCalendarsCursor(Landroid/database/Cursor;Z)V
com.android.calendar.event.EditEventFragment.access$600(Lcom/android/calendar/event/EditEventFragment;I)V
com.android.calendar.event.EditEventView$DateListener.onDateSet(Landroid/widget/DatePicker;III)V
com.android.calendar.event.EditEventView$TimeListener.onTimeSet(Landroid/widget/TimePicker;II)V
com.android.calendar.event.EditEventView$3.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.calendar.event.EditEventView.setViewStates(I)V
com.android.calendar.event.EditEventFragment$2.onClick(Landroid/content/DialogInterface;I)V
com.android.calendar.event.EditEventFragment.startQuery()V
com.android.calendar.EventInfoFragment$1.run()V
com.android.calendar.EventInfoFragment$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.month.SimpleWeeksAdapter.<init>(Landroid/content/Context;Ljava/util/HashMap;)V
com.android.calendar.month.MonthByWeekFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.calendar.month.SimpleWeeksAdapter.updateParams(Ljava/util/HashMap;)V
com.android.calendar.month.MonthWeekEventsView.onDraw(Landroid/graphics/Canvas;)V
com.android.calendar.CalendarViewAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.calendar.DayView.setSelectionFromPosition(IIZ)Z
com.android.calendar.DayView.setSelected(Landroid/text/format/Time;ZZ)V
com.android.calendar.month.MonthByWeekFragment.setMonthDisplayed(Landroid/text/format/Time;Z)V
com.android.calendar.month.SimpleDayPickerFragment.goTo(JZZZ)Z
com.android.calendar.month.SimpleDayPickerFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.calendar.month.SimpleDayPickerFragment.updateMonthHighlight(Landroid/widget/AbsListView;)V
com.android.calendar.CalendarController.sendEvent(Ljava/lang/Object;Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.agenda.AgendaFragment.goTo(Lcom/android/calendar/CalendarController$EventInfo;Z)V
com.android.calendar.agenda.AgendaFragment.onResume()V
com.android.calendar.agenda.AgendaFragment.search(Ljava/lang/String;Landroid/text/format/Time;)V
com.android.calendar.agenda.AgendaFragment.eventsChanged()V
com.android.calendar.agenda.AgendaListView$2.run()V
com.android.calendar.agenda.AgendaListView$3.run()V
com.android.calendar.EventInfoFragment.access$4100(Lcom/android/calendar/EventInfoFragment;)V
com.android.calendar.DayView$CalendarGestureListener.onSingleTapUp(Landroid/view/MotionEvent;)Z
com.android.calendar.AllInOneActivity.configureActionBar(I)V
com.android.calendar.DayView.access$5000(Lcom/android/calendar/DayView;Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)V
com.android.calendar.DayView.access$4900(Lcom/android/calendar/DayView;Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)V
com.android.calendar.event.EditEventFragment$1.onClick(Landroid/view/View;)V
com.android.calendar.event.EditEventView.updateView()V
com.android.calendar.AsyncQueryService.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.month.MonthByWeekAdapter.<init>(Landroid/content/Context;Ljava/util/HashMap;)V
com.android.calendar.month.SimpleDayPickerFragment.setUpAdapter()V
com.android.calendar.month.MonthByWeekFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.calendar.month.MonthByWeekAdapter.updateParams(Ljava/util/HashMap;)V
com.android.calendar.month.MonthByWeekFragment.setUpAdapter()V
com.android.calendar.month.SimpleWeekView.onDraw(Landroid/graphics/Canvas;)V
com.android.calendar.DayView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.calendar.DayView.doDown(Landroid/view/MotionEvent;)V
com.android.calendar.DayView.doLongPress(Landroid/view/MotionEvent;)V
com.android.calendar.month.MonthByWeekFragment.goTo(JZZZ)Z
com.android.calendar.month.SimpleDayPickerFragment$2.onChanged()V
com.android.calendar.month.SimpleDayPickerFragment.doResumeUpdates()V
com.android.calendar.month.SimpleDayPickerFragment.<init>(J)V
com.android.calendar.month.SimpleDayPickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.calendar.month.MonthByWeekFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.calendar.month.MonthByWeekFragment.updateMonthHighlight(Landroid/widget/AbsListView;)V
com.android.calendar.month.SimpleDayPickerFragment.onScroll(Landroid/widget/AbsListView;III)V
com.android.calendar.CalendarController.sendEvent(Ljava/lang/Object;JLandroid/text/format/Time;Landroid/text/format/Time;Landroid/text/format/Time;JIJLjava/lang/String;Landroid/content/ComponentName;)V
com.android.calendar.SearchActivity.search(Ljava/lang/String;Landroid/text/format/Time;)V
com.android.calendar.agenda.AgendaFragment.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.EventInfoFragment$11.onClick(Landroid/view/View;)V
com.android.calendar.DayView$CalendarGestureListener.onFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z
com.android.calendar.DayView$CalendarGestureListener.onScroll(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z
com.android.calendar.month.SimpleDayPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.calendar.month.SimpleDayPickerFragment.onResume()V
com.android.calendar.DayView.access$5100(Lcom/android/calendar/DayView;Landroid/view/MotionEvent;)V
com.android.calendar.DayView.access$4600(Lcom/android/calendar/DayView;Landroid/view/MotionEvent;)V
com.android.calendar.month.MonthByWeekFragment.doResumeUpdates()V
com.android.calendar.month.MonthByWeekFragment.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.month.MonthByWeekFragment.<init>(JZ)V
com.android.calendar.month.MonthByWeekFragment.<init>(J)V
com.android.calendar.month.MonthByWeekFragment.onCreate(Landroid/os/Bundle;)V
com.android.calendar.month.MonthByWeekFragment.onScroll(Landroid/widget/AbsListView;III)V
com.android.calendar.agenda.AgendaFragment$2.run()V
com.android.calendar.AllInOneActivity.handleSelectSyncedCalendarsClicked(Landroid/view/View;)V
com.android.calendar.CalendarController.sendEvent(Ljava/lang/Object;JLandroid/text/format/Time;Landroid/text/format/Time;JIJLjava/lang/String;Landroid/content/ComponentName;)V
com.android.calendar.CalendarController.sendEvent(Ljava/lang/Object;JLandroid/text/format/Time;Landroid/text/format/Time;JI)V
com.android.calendar.DayView$GotoBroadcaster.onAnimationEnd(Landroid/view/animation/Animation;)V
com.android.calendar.DayView.updateTitle()V
com.android.calendar.SearchActivity.handleIntent(Landroid/content/Intent;)V
com.android.calendar.SearchActivity.initFragments(JLjava/lang/String;)V
com.android.calendar.month.MonthByWeekFragment.onAttach(Landroid/app/Activity;)V
com.android.calendar.month.MonthByWeekFragment.onResume()V
com.android.calendar.DayView$CalendarGestureListener.onDown(Landroid/view/MotionEvent;)Z
com.android.calendar.DayView$CalendarGestureListener.onLongPress(Landroid/view/MotionEvent;)V
com.android.calendar.AllInOneActivity.initFragments(JILandroid/os/Bundle;)V
com.android.calendar.AllInOneActivity.setMainPane(Landroid/app/FragmentTransaction;IIJZ)V
com.android.calendar.month.MonthByWeekFragment.<init>()V
com.android.calendar.AllInOneActivity.onQueryTextSubmit(Ljava/lang/String;)Z
com.android.calendar.month.MonthByWeekAdapter.onDayTapped(Landroid/text/format/Time;)V
com.android.calendar.SearchActivity.onQueryTextSubmit(Ljava/lang/String;)Z
com.android.calendar.AllInOneActivity.onNavigationItemSelected(IJ)Z
com.android.calendar.AllInOneActivity.eventsChanged()V
com.android.calendar.AllInOneActivity.onBackPressed()V
com.android.calendar.AllInOneActivity.onNewIntent(Landroid/content/Intent;)V
com.android.calendar.AllInOneActivity.onTabSelected(Landroid/app/ActionBar$Tab;Landroid/app/FragmentTransaction;)V
com.android.calendar.AllInOneActivity.onUserLeaveHint()V
com.android.calendar.SearchActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.calendar.SearchActivity.eventsChanged()V
com.android.calendar.DayFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.calendar.SearchActivity.onNewIntent(Landroid/content/Intent;)V
com.android.calendar.SearchActivity.onCreate(Landroid/os/Bundle;)V
com.android.calendar.AllInOneActivity.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.calendar.month.MonthByWeekAdapter$2.run()V
com.android.calendar.month.SimpleWeeksAdapter.onDayTapped(Landroid/text/format/Time;)V
com.android.calendar.AllInOneActivity$4.onChange(Z)V
com.android.calendar.SearchActivity$1.onChange(Z)V
com.android.calendar.month.SimpleWeeksAdapter.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.calendar.month.MonthByWeekAdapter.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
android.provider.CalendarContract$EventsEntity$EntityIteratorImpl.getEntityAndIncrementCursor(Landroid/database/Cursor;)Landroid/content/Entity;
android.content.CursorEntityIterator.getEntityAndIncrementCursor(Landroid/database/Cursor;)Landroid/content/Entity;
android.content.CursorEntityIterator.next()Landroid/content/Entity;
android.content.CursorEntityIterator.next()Ljava/lang/Object;
android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl.next()Landroid/content/Entity;
android.provider.CalendarContract$EventsEntity$EntityIteratorImpl.next()Landroid/content/Entity;
android.provider.ContactsContract$Groups$EntityIteratorImpl.next()Landroid/content/Entity;
android.provider.ContactsContract$RawContacts$EntityIteratorImpl.next()Landroid/content/Entity;
android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl.next()Ljava/lang/Object;
android.provider.CalendarContract$EventsEntity$EntityIteratorImpl.next()Ljava/lang/Object;
android.provider.ContactsContract$Groups$EntityIteratorImpl.next()Ljava/lang/Object;
android.provider.ContactsContract$RawContacts$EntityIteratorImpl.next()Ljava/lang/Object;
com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment.eventsChanged()V
com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.providers.calendar.CalendarProvider2.getOriginalId(Ljava/lang/String;Ljava/lang/String;)J
com.android.exchange.utility.CalendarUtilities.createMessageForEventId(Landroid/content/Context;JILjava/lang/String;Lcom/android/emailcommon/provider/Account;Ljava/lang/String;)Lcom/android/emailcommon/provider/EmailContent$Message;
com.android.exchange.adapter.CalendarSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.utility.CalendarUtilities.createMessageForEventId(Landroid/content/Context;JILjava/lang/String;Lcom/android/emailcommon/provider/Account;)Lcom/android/emailcommon/provider/EmailContent$Message;
com.android.exchange.adapter.AbstractSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.commit()V
com.android.exchange.EasSyncService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.adapter.AbstractSyncParser.commit()V
com.android.exchange.EasAccountService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasOutboxService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasSyncService.run()V
com.android.exchange.adapter.AbstractSyncParser.parse()Z
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.parse()Z
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser.parse()Z
com.android.exchange.adapter.Parser.parse()Z
com.android.exchange.adapter.CalendarSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.ContactsSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.EmailSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.AbstractSyncAdapter.parse(Ljava/io/InputStream;)Z
android.provider.CalendarContract$Reminders.query(Landroid/content/ContentResolver;J[Ljava/lang/String;)Landroid/database/Cursor;
com.android.calendar.GoogleCalendarUriIntentFilter.onCreate(Landroid/os/Bundle;)V
android.provider.CalendarContract$CalendarAlerts.rescheduleMissedAlarms(Landroid/content/ContentResolver;Landroid/content/Context;Landroid/app/AlarmManager;)V
com.android.providers.calendar.CalendarAlarmManager.rescheduleMissedAlarms(Landroid/content/ContentResolver;)V
com.android.providers.calendar.CalendarAlarmManager.rescheduleMissedAlarms()V
com.android.providers.calendar.CalendarProvider2.doUpdateTimezoneDependentFields()V
com.android.providers.calendar.CalendarProvider2.regenerateInstancesTable()V
com.android.providers.calendar.CalendarProvider2.doProcessEventRawTimes(Ljava/lang/String;Ljava/lang/String;)V
com.android.exchange.adapter.CalendarSyncAdapter.<init>(Lcom/android/exchange/EasSyncService;)V
com.android.exchange.adapter.AbstractSyncAdapter.<init>(Lcom/android/exchange/EasSyncService;)V
com.android.exchange.ExchangeService.deleteAccountPIMData(J)V
com.android.exchange.adapter.AccountSyncAdapter.<init>(Lcom/android/exchange/EasSyncService;)V
com.android.exchange.adapter.ContactsSyncAdapter.<init>(Lcom/android/exchange/EasSyncService;)V
com.android.exchange.adapter.EmailSyncAdapter.<init>(Lcom/android/exchange/EasSyncService;)V
com.android.exchange.adapter.FolderSyncParser.parse()Z
com.android.exchange.ExchangeService$2.deleteAccountPIMData(J)V
com.android.exchange.EasAccountService.sync()V
com.android.exchange.EasSyncService.validateAccount(Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.adapter.Search$SearchParser.parseStore()Z
com.android.emailcommon.service.IEmailService$Stub$Proxy.deleteAccountPIMData(J)V
com.android.emailcommon.service.IEmailService$Stub.deleteAccountPIMData(J)V
com.android.exchange.EasAccountService.run()V
com.android.exchange.AbstractSyncService.validateAccount(Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasAccountService.validateAccount(Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasOutboxService.validateAccount(Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.adapter.Search$SearchParser.parseResponse()Z
com.android.emailcommon.service.IEmailService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IEmailService.deleteAccountPIMData(J)V
com.android.exchange.AbstractSyncService.validate(Ljava/lang/Class;Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.adapter.Search$SearchParser.parse()Z
com.android.email.Controller$ControllerService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.exchange.ExchangeService$2.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.EmailServiceProxy$12.run()V
com.android.email.Controller.deleteSyncedDataSync(J)V
com.android.exchange.EasAccountService.validate(Ljava/lang/Class;Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasOutboxService.validate(Ljava/lang/Class;Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasSyncService.validate(Ljava/lang/Class;Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.ExchangeService$2.validate(Lcom/android/emailcommon/provider/HostAuth;)Landroid/os/Bundle;
com.android.exchange.adapter.Search.searchMessages(Landroid/content/Context;JLcom/android/emailcommon/service/SearchParams;J)I
com.android.emailcommon.service.ServiceProxy$ProxyTask.run()V
com.android.email.Controller.deleteAccountSync(JLandroid/content/Context;)V
com.android.email.SecurityPolicy.wipeExpiredAccounts(Landroid/content/Context;Lcom/android/email/Controller;)Z
com.android.emailcommon.service.IEmailService$Stub$Proxy.validate(Lcom/android/emailcommon/provider/HostAuth;)Landroid/os/Bundle;
com.android.emailcommon.service.IEmailService$Stub.validate(Lcom/android/emailcommon/provider/HostAuth;)Landroid/os/Bundle;
com.android.exchange.ExchangeService$2.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.emailcommon.service.ServiceProxy$ProxyRunnable.run()V
com.android.email.Controller$14.run()V
com.android.email.provider.AccountReconciler.reconcileAccountsInternal(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;Z)Z
com.android.email.SecurityPolicy.deleteSecuredAccounts(Landroid/content/Context;)V
com.android.email.service.MailService$3.run()V
com.android.email.SecurityPolicy.onPasswordExpiring(Landroid/content/Context;)V
com.android.emailcommon.service.IEmailService.validate(Lcom/android/emailcommon/provider/HostAuth;)Landroid/os/Bundle;
com.android.emailcommon.service.IEmailService$Stub$Proxy.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.emailcommon.service.IEmailService$Stub.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.email.provider.AccountReconciler.accountsNeedReconciling(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;)Z
com.android.email.provider.AccountReconciler.reconcileAccounts(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;)V
com.android.email.SecurityPolicy.onAdminEnabled(Z)V
com.android.email.SecurityPolicy.onDeviceAdminReceiverMessage(Landroid/content/Context;I)V
com.android.emailcommon.service.EmailServiceProxy$4.run()V
com.android.email.mail.store.ServiceStore.checkSettings()Landroid/os/Bundle;
com.android.emailcommon.service.IEmailService.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.email.service.MailService.hasMismatchInPopImapAccounts(Landroid/content/Context;)Z
com.android.email.service.AccountService$1.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService.reconcileAccountsWithAccountManager(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;)V
com.android.email.service.EmailBroadcastProcessorService.onHandleIntent(Landroid/content/Intent;)V
com.android.email.mail.Store.checkSettings()Landroid/os/Bundle;
com.android.email.mail.store.ExchangeStore.checkSettings()Landroid/os/Bundle;
com.android.emailcommon.service.EmailServiceProxy$13.run()V
com.android.email.Controller.searchMessages(JLcom/android/emailcommon/service/SearchParams;)I
com.android.email.activity.Welcome$1.run()V
com.android.emailcommon.service.IAccountService$Stub$Proxy.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.emailcommon.service.IAccountService$Stub.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService$6.runInternal(Landroid/content/Context;)V
com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask.doInBackground([Ljava/lang/Void;)Lcom/android/emailcommon/mail/MessagingException;
com.android.email.activity.MessagesAdapter$SearchCursorLoader.loadInBackground()Landroid/database/Cursor;
com.android.email.Controller.searchMore(J)V
com.android.emailcommon.service.IAccountService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IAccountService.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService$6.runInternal(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessagesAdapter$MessagesCursorLoader.loadInBackground()Landroid/database/Cursor;
com.android.email.activity.MessagesAdapter$SearchCursorLoader.loadInBackground()Ljava/lang/Object;
com.android.email.Controller$7.run()V
com.android.email.service.AccountService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.AccountServiceProxy$3.run()V
com.android.email.SingleRunningTask.runInternal(Ljava/lang/Object;)V
com.android.email.activity.MessagesAdapter$MessagesCursorLoader.loadInBackground()Ljava/lang/Object;
com.android.email.SingleRunningTask.run(Ljava/lang/Object;)V
com.android.email.service.MailService$6.run(Ljava/lang/Object;)V
com.android.email.service.MailService.reconcilePopImapAccountsSync(Landroid/content/Context;)V
com.android.email.service.EmailBroadcastProcessorService.onSystemAccountChanged()V
com.android.email.service.MailService$1.run()V
android.provider.CalendarContract$EventDays.query(Landroid/content/ContentResolver;II[Ljava/lang/String;)Landroid/database/Cursor;
com.android.calendar.EventLoader$LoadEventDaysRequest.processRequest(Lcom/android/calendar/EventLoader;)V
com.android.calendar.EventLoader$LoadRequest.processRequest(Lcom/android/calendar/EventLoader;)V
com.android.calendar.EventLoader$LoaderThread.run()V
com.android.calendar.EventLoader.startBackgroundThread()V
com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter$RefreshCalendars.run()V
com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter.getChildrenCursor(Landroid/database/Cursor;)Landroid/database/Cursor;
com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations.updatedExtendedProperty(Ljava/lang/String;Ljava/lang/String;J)V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.addEvent(Lcom/android/exchange/adapter/CalendarSyncAdapter$CalendarOperations;Ljava/lang/String;Z)V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.addParser(Lcom/android/exchange/adapter/CalendarSyncAdapter$CalendarOperations;)V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.changeParser(Lcom/android/exchange/adapter/CalendarSyncAdapter$CalendarOperations;)V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.commandsParser()V
com.android.exchange.adapter.AbstractSyncParser.commandsParser()V
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.createLoaderUri()Landroid/net/Uri;
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.access$200(Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory;)Landroid/net/Uri;
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.initLoader(Ljava/lang/String;)V
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$2.run()V
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$3$1.run()V
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.onCreate()V
com.android.providers.calendar.CalendarProvider2.getOriginalSyncId(J)Ljava/lang/String;
com.android.providers.calendar.CalendarProvider2.getOwner(J)Ljava/lang/String;
com.android.providers.calendar.CalendarProvider2.handleInsertException(JLandroid/content/ContentValues;Z)J
com.android.exchange.CalendarSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.CalendarSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.CalendarSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
android.provider.CalendarContract$Instances.query(Landroid/content/ContentResolver;[Ljava/lang/String;JJ)Landroid/database/Cursor;
com.android.calendar.DayView.getEventAccessLevel(Landroid/content/Context;Lcom/android/calendar/Event;)I
com.android.calendar.alerts.AlertReceiver.getAttendeesCursor(Landroid/content/Context;J)Landroid/database/Cursor;
android.provider.CalendarContract$Instances.query(Landroid/content/ContentResolver;[Ljava/lang/String;JJLjava/lang/String;)Landroid/database/Cursor;
com.android.calendar.alerts.AlertActivity.onResume()V
android.provider.CalendarContract$Attendees.query(Landroid/content/ContentResolver;J[Ljava/lang/String;)Landroid/database/Cursor;
com.android.calendar.DeleteEventHelper.delete(JJJI)V
com.android.calendar.agenda.AgendaListView.deleteSelectedEvent()V
com.android.calendar.CalendarController.launchDeleteEventAndFinish(Landroid/app/Activity;JJJI)V
com.android.calendar.DeleteEventHelper.delete(JJJILjava/lang/Runnable;)V
com.android.calendar.SearchActivity.deleteEvent(JJJ)V
com.android.calendar.CalendarController.launchDeleteEvent(JJJ)V
com.android.calendar.EventInfoFragment$5.onClick(Landroid/view/View;)V
com.android.calendar.EventInfoFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.calendar.EventInfoFragment.onResume()V
com.android.calendar.SearchActivity.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment.onResume()V
com.android.calendar.alerts.AlertService.rescheduleMissedAlarms(Landroid/content/ContentResolver;Landroid/content/Context;Landroid/app/AlarmManager;)V
com.android.calendar.agenda.AgendaWindowAdapter.buildQueryUri(IILjava/lang/String;)Landroid/net/Uri;
com.android.calendar.agenda.AgendaWindowAdapter.doQuery(Lcom/android/calendar/agenda/AgendaWindowAdapter$QuerySpec;)V
com.android.calendar.agenda.AgendaWindowAdapter.queueQuery(Lcom/android/calendar/agenda/AgendaWindowAdapter$QuerySpec;)Z
com.android.calendar.agenda.AgendaWindowAdapter.access$2400(Lcom/android/calendar/agenda/AgendaWindowAdapter;Lcom/android/calendar/agenda/AgendaWindowAdapter$QuerySpec;)V
com.android.calendar.agenda.AgendaWindowAdapter.access$1600(Lcom/android/calendar/agenda/AgendaWindowAdapter;Lcom/android/calendar/agenda/AgendaWindowAdapter$QuerySpec;)Z
com.android.calendar.agenda.AgendaWindowAdapter.queueQuery(IILandroid/text/format/Time;Ljava/lang/String;IJ)Z
com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler$1.onClick(Landroid/view/View;)V
com.android.providers.calendar.CalendarDebug$FetchInfoTask.doInBackground([Ljava/lang/Void;)Ljava/util/List;
com.android.providers.calendar.CalendarDebug$FetchInfoTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.providers.calendar.CalendarProvider2.query(Landroid/database/sqlite/SQLiteDatabase;Landroid/database/sqlite/SQLiteQueryBuilder;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.calendar.CalendarProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.calendar.CalendarProvider2.getAccount(J)Landroid/accounts/Account;
com.android.providers.calendar.CalendarProvider2.deleteFromEventRelatedTable(Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.calendar.CalendarProvider2.deleteMatchingColors(Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.calendar.CalendarProvider2.deleteReminders(Landroid/net/Uri;ZLjava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.calendar.CalendarProvider2.modifyCalendarSubscription(JZ)V
com.android.providers.calendar.CalendarProvider2.deleteInTransaction(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.calendar.CalendarProvider2.deleteMatchingCalendars(Ljava/lang/String;[Ljava/lang/String;)I
com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.calendar.EventInfoFragment.updateCalendar(Landroid/view/View;)V
com.android.calendar.EventInfoFragment.access$1000(Lcom/android/calendar/EventInfoFragment;Landroid/view/View;)V
com.android.calendar.Event.instancesQuery(Landroid/content/ContentResolver;[Ljava/lang/String;IILjava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.calendar.Event.loadEvents(Landroid/content/Context;Ljava/util/ArrayList;IIILjava/util/concurrent/atomic/AtomicInteger;)V
com.android.calendar.EventLoader$LoadEventsRequest.processRequest(Lcom/android/calendar/EventLoader;)V
com.android.exchange.ExchangeService$CalendarObserver.<init>(Lcom/android/exchange/ExchangeService;Landroid/os/Handler;Lcom/android/emailcommon/provider/Account;)V
com.android.exchange.ExchangeService.registerCalendarObserver(Lcom/android/emailcommon/provider/Account;)V
com.android.exchange.ExchangeService.isMailboxSyncable(Lcom/android/emailcommon/provider/Account;I)Z
com.android.exchange.ExchangeService.checkMailboxes()J
com.android.exchange.ExchangeService.run()V
com.android.calendar.EventInfoFragment.updateResponse(JJI)V
com.android.calendar.EventInfoFragment.saveResponse()Z
com.android.calendar.EventInfoFragment.onDestroyView()V
android.provider.CalendarContract$CalendarAlerts.insert(Landroid/content/ContentResolver;JJJJI)Landroid/net/Uri;
com.android.calendar.DeleteEventHelper$2.onClick(Landroid/content/DialogInterface;I)V
com.android.calendar.event.EditEventHelper.saveEvent(Lcom/android/calendar/CalendarEventModel;Lcom/android/calendar/CalendarEventModel;I)Z
com.android.calendar.EventInfoFragment.saveReminders()Z
com.android.calendar.event.EditEventHelper.saveReminders(Ljava/util/ArrayList;JLjava/util/ArrayList;Ljava/util/ArrayList;Z)Z
com.android.calendar.event.EditEventFragment.saveReminders()V
com.android.calendar.alerts.AlertActivity.dismissFiredAlarms()V
com.android.calendar.alerts.AlertActivity.onClick(Landroid/view/View;)V
com.android.calendar.selectcalendars.SelectCalendarsSyncFragment.onPause()V
com.android.calendar.EventInfoFragment.createExceptionResponse(JI)V
com.android.calendar.CalendarUtils$TimeZoneUtils.setTimeZone(Landroid/content/Context;Ljava/lang/String;)V
com.android.calendar.Utils.setTimeZone(Landroid/content/Context;Ljava/lang/String;)V
com.android.calendar.GeneralPreferences.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.calendar.alerts.AlertService.dismissOldAlerts(Landroid/content/Context;)V
com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter.doSaveAction()V
com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity.onClick(Landroid/view/View;)V
com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment.toggleVisibility(I)V
com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.calendar.DeleteEventHelper.deleteExceptionEvent()V
com.android.calendar.DeleteEventHelper.access$900(Lcom/android/calendar/DeleteEventHelper;)V
com.android.calendar.DeleteEventHelper$3.onClick(Landroid/content/DialogInterface;I)V
com.android.calendar.alerts.AlertService.processQuery(Landroid/database/Cursor;Landroid/content/Context;JLjava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)I
com.android.calendar.alerts.AlertActivity.dismissAlarm(J)V
com.android.calendar.alerts.AlertActivity.access$400(Lcom/android/calendar/alerts/AlertActivity;J)V
com.android.calendar.alerts.AlertActivity$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.calendar.DeleteEventHelper.deleteRepeatingEvent(I)V
com.android.calendar.DeleteEventHelper.access$1200(Lcom/android/calendar/DeleteEventHelper;I)V
com.android.calendar.DeleteEventHelper$5.onClick(Landroid/content/DialogInterface;I)V
com.android.providers.calendar.CalendarReceiver.removeScheduledAlarms(Landroid/content/ContentResolver;)V
com.android.providers.calendar.CalendarReceiver.access$000(Lcom/android/providers/calendar/CalendarReceiver;Landroid/content/ContentResolver;)V
com.android.providers.calendar.CalendarReceiver$1.run()V
com.android.calendar.alerts.DismissAlarmsService.onHandleIntent(Landroid/content/Intent;)V
com.android.calendar.event.EditEventHelper.saveRemindersWithBackRef(Ljava/util/ArrayList;ILjava/util/ArrayList;Ljava/util/ArrayList;Z)Z
com.android.calendar.AgendaWindowAdapter.buildQueryUri(II)Landroid/net/Uri;
Permission:android.permission.PROCESS_OUTGOING_CALLS

2 Callers:

com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
Permission:android.permission.CHANGE_CONFIGURATION

84 Callers:

com.android.server.am.ActivityStack.startActivityMayWait(Landroid/app/IApplicationThread;ILandroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILjava/lang/String;Landroid/os/ParcelFileDescriptor;Landroid/app/IActivityManager$WaitResult;Landroid/content/res/Configuration;Landroid/os/Bundle;I)I
com.android.server.am.ActivityManagerService.updatePersistentConfiguration(Landroid/content/res/Configuration;)V
android.app.ActivityManagerNative.updatePersistentConfiguration(Landroid/content/res/Configuration;)V
android.app.ActivityManagerNative.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IActivityManager.updatePersistentConfiguration(Landroid/content/res/Configuration;)V
com.android.server.am.ActivityManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.AccessibilitySettings.handleToggleLargeTextPreferenceClick()V
com.android.settings.DisplaySettings.writeFontSizePreference(Ljava/lang/Object;)V
com.android.settings.Display.onClick(Landroid/view/View;)V
com.android.settings.AccessibilitySettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.DisplaySettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.server.am.ActivityManagerService.updateConfiguration(Landroid/content/res/Configuration;)V
android.app.ActivityManagerNative.updateConfiguration(Landroid/content/res/Configuration;)V
android.app.IActivityManager.updateConfiguration(Landroid/content/res/Configuration;)V
com.android.internal.app.LocalePicker.updateLocale(Ljava/util/Locale;)V
com.android.internal.telephony.MccTable.setSystemLocale(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.MccTable.updateMccMncConfiguration(Landroid/content/Context;Ljava/lang/String;)V
com.android.providers.settings.SettingsHelper.setLocaleData([BI)V
com.android.server.UiModeManagerService.updateConfigurationLocked(Z)V
com.android.server.wm.WindowManagerService.displayReady()V
com.android.server.wm.WindowManagerService.sendNewConfiguration()V
com.android.settings.inputmethod.UserDictionaryLocalePicker.updateLocale(Ljava/util/Locale;)V
com.android.settings.LocalePicker.updateLocale(Ljava/util/Locale;)V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.setLocaleFromCsim()V
com.android.internal.telephony.MccTable.setLocaleFromMccIfNeeded(Landroid/content/Context;I)V
com.android.internal.telephony.PhoneBase.setPropertiesByCarrier()V
com.android.internal.telephony.cdma.CDMAPhone.updateCurrentCarrierInProvider(Ljava/lang/String;)Z
com.android.providers.settings.SettingsBackupAgent.onRestore(Landroid/app/backup/BackupDataInput;ILandroid/os/ParcelFileDescriptor;)V
com.android.providers.settings.SettingsBackupAgent.onRestoreFile(Landroid/os/ParcelFileDescriptor;JILjava/lang/String;Ljava/lang/String;JJ)V
com.android.server.UiModeManagerService$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.ServerThread.run()V
com.android.settings.LocalePicker.onLocaleSelected(Ljava/util/Locale;)V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.onAllRecordsLoaded()V
com.android.internal.telephony.cdma.CDMALTEPhone.setPropertiesByCarrier()V
com.android.internal.telephony.cdma.CDMAPhone.setPropertiesByCarrier()V
com.android.internal.telephony.gsm.GSMPhone.setPropertiesByCarrier()V
com.android.internal.telephony.PhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.sip.SipPhoneBase.setPropertiesByCarrier()V
com.android.internal.telephony.sip.SipPhone.setPropertiesByCarrier()V
com.android.internal.telephony.cdma.CDMALTEPhone.updateCurrentCarrierInProvider(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CDMAPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.app.LocalePicker$LocaleSelectionListener.onLocaleSelected(Ljava/util/Locale;)V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.onRecordLoaded()V
com.android.internal.telephony.gsm.SIMRecords.onAllRecordsLoaded()V
com.android.internal.telephony.IccRecords.onAllRecordsLoaded()V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.PhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhoneBase.<init>(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.sip.SipPhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.sip.SipPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Z)V
com.android.internal.telephony.cdma.CDMALTEPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.app.LocalePicker.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.internal.telephony.gsm.SIMRecords.onRecordLoaded()V
com.android.internal.telephony.IccRecords.onRecordLoaded()V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.PhoneFactory.getCdmaPhone()Lcom/android/internal/telephony/Phone;
com.android.internal.telephony.PhoneFactory.makeDefaultPhone(Landroid/content/Context;)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.gsm.GSMPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhoneBase.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhone.<init>(Lcom/android/internal/telephony/PhoneNotifier;Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;)V
com.android.internal.telephony.sip.SipPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;Landroid/net/sip/SipProfile;)V
com.android.internal.telephony.sip.SipPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.settings.inputmethod.UserDictionaryLocalePicker.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.settings.LocalePicker.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.internal.telephony.PhoneProxy.deleteAndCreatePhone(I)V
com.android.internal.telephony.PhoneFactory.makeDefaultPhones(Landroid/content/Context;)V
com.android.internal.telephony.PhoneFactory.getGsmPhone()Lcom/android/internal/telephony/Phone;
com.android.internal.telephony.sip.SipPhoneFactory.makePhone(Ljava/lang/String;Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)Lcom/android/internal/telephony/sip/SipPhone;
com.android.internal.telephony.PhoneProxy.updatePhoneObject(I)V
com.android.phone.PhoneApp.onCreate()V
com.android.internal.telephony.PhoneFactory.makeSipPhone(Ljava/lang/String;)Lcom/android/internal/telephony/sip/SipPhone;
com.android.phone.SipBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler.createSipPhoneIfNeeded(Landroid/net/sip/SipProfile;)V
com.android.phone.SipCallOptionHandler.access$300(Lcom/android/phone/SipCallOptionHandler;Landroid/net/sip/SipProfile;)V
com.android.phone.SipCallOptionHandler$1.run()V
Permission:android.permission.GET_PACKAGE_SIZE

7 Callers:

com.android.server.pm.PackageManagerService.getPackageSizeInfo(Ljava/lang/String;Landroid/content/pm/IPackageStatsObserver;)V
android.content.pm.IPackageManager$Stub$Proxy.getPackageSizeInfo(Ljava/lang/String;Landroid/content/pm/IPackageStatsObserver;)V
android.content.pm.IPackageManager$Stub.getPackageSizeInfo(Ljava/lang/String;Landroid/content/pm/IPackageStatsObserver;)V
android.content.pm.IPackageManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.content.pm.IPackageManager.getPackageSizeInfo(Ljava/lang/String;Landroid/content/pm/IPackageStatsObserver;)V
com.android.server.pm.PackageManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ApplicationPackageManager.getPackageSizeInfo(Ljava/lang/String;Landroid/content/pm/IPackageStatsObserver;)V
Permission:android.permission.RECEIVE_SMS

220 Callers:

com.android.internal.telephony.gsm.SimSmsInterfaceManager.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.IccSmsInterfaceManager.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.ISms$Stub.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.ISms$Stub$Proxy.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.IccSmsInterfaceManagerProxy.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.ISms.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.ISms$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.telephony.SmsManager.getAllMessagesFromIcc()Ljava/util/ArrayList;
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccSmsInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.telephony.gsm.SmsManager.getAllMessagesFromSim()Ljava/util/ArrayList;
com.android.providers.telephony.SmsProvider.getAllMessagesFromIcc()Landroid/database/Cursor;
com.android.providers.telephony.SmsProvider.getSingleMessageFromIcc(Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.telephony.SmsProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.internal.telephony.gsm.SimSmsInterfaceManager.enableCellBroadcastRange(II)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.enableCellBroadcast(I)Z
com.android.internal.telephony.IccSmsInterfaceManager.enableCellBroadcastRange(II)Z
com.android.internal.telephony.ISms$Stub.enableCellBroadcastRange(II)Z
com.android.internal.telephony.IccSmsInterfaceManager.enableCellBroadcast(I)Z
com.android.internal.telephony.ISms$Stub.enableCellBroadcast(I)Z
com.android.internal.telephony.ISms$Stub$Proxy.enableCellBroadcastRange(II)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.enableCellBroadcastRange(II)Z
com.android.internal.telephony.ISms.enableCellBroadcastRange(II)Z
com.android.internal.telephony.ISms$Stub$Proxy.enableCellBroadcast(I)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.enableCellBroadcast(I)Z
com.android.internal.telephony.ISms.enableCellBroadcast(I)Z
android.telephony.SmsManager.enableCellBroadcastRange(II)Z
android.telephony.SmsManager.enableCellBroadcast(I)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.disableCellBroadcastRange(II)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.disableCellBroadcast(I)Z
com.android.internal.telephony.IccSmsInterfaceManager.disableCellBroadcastRange(II)Z
com.android.internal.telephony.ISms$Stub.disableCellBroadcastRange(II)Z
com.android.internal.telephony.IccSmsInterfaceManager.disableCellBroadcast(I)Z
com.android.internal.telephony.ISms$Stub.disableCellBroadcast(I)Z
com.android.internal.telephony.ISms$Stub$Proxy.disableCellBroadcastRange(II)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.disableCellBroadcastRange(II)Z
com.android.internal.telephony.ISms.disableCellBroadcastRange(II)Z
com.android.internal.telephony.ISms$Stub$Proxy.disableCellBroadcast(I)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.disableCellBroadcast(I)Z
com.android.internal.telephony.ISms.disableCellBroadcast(I)Z
android.telephony.SmsManager.disableCellBroadcastRange(II)Z
android.telephony.SmsManager.disableCellBroadcast(I)Z
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.IccSmsInterfaceManager.enforceReceiveAndSend(Ljava/lang/String;)V
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.enforceReceiveAndSend(Ljava/lang/String;)V
com.android.internal.telephony.gsm.SimSmsInterfaceManager.enforceReceiveAndSend(Ljava/lang/String;)V
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.IccSmsInterfaceManager.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.ISms$Stub.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.IccSmsInterfaceManager.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.ISms$Stub.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.ISms$Stub$Proxy.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.ISms.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.ISms$Stub$Proxy.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.ISms.updateMessageOnIccEf(II[B)Z
android.telephony.SmsManager.copyMessageToIcc([B[BI)Z
android.telephony.SmsManager.deleteMessageFromIcc(I)Z
android.telephony.SmsManager.updateMessageOnIcc(II[B)Z
android.telephony.gsm.SmsManager.copyMessageToSim([B[BI)Z
android.telephony.gsm.SmsManager.deleteMessageFromSim(I)Z
com.android.providers.telephony.SmsProvider.deleteMessageFromIcc(Ljava/lang/String;)I
android.telephony.gsm.SmsManager.updateMessageOnSim(II[B)Z
com.android.providers.telephony.SmsProvider.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.mms.transaction.MessagingNotification.addSmsNotificationInfos(Landroid/content/Context;Ljava/util/Set;)V
com.android.mms.transaction.MessagingNotification.blockingUpdateNewMessageIndicator(Landroid/content/Context;JZ)V
com.android.mms.transaction.MessageStatusService.onHandleIntent(Landroid/content/Intent;)V
com.android.mms.transaction.MessagingNotification$1.run()V
com.android.mms.transaction.SmsReceiverService.handleBootCompleted()V
com.android.mms.transaction.SmsReceiverService.handleSmsReceived(Landroid/content/Intent;I)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.SmsReceiverService.access$200(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.mms.transaction.SmsReceiverService.access$100(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.Observable.notifyObservers()V
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.transaction.SendTransaction.run()V
com.android.mms.transaction.Transaction.process()V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
android.provider.Telephony$Sms$Draft.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.util.Recycler$SmsRecycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler.deleteMessagesForThread(Landroid/content/Context;JI)V
com.android.mms.util.Recycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessages(Landroid/content/Context;)V
com.android.mms.util.Recycler$MmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.util.Recycler$SmsRecycler.deleteOldMessagesByThreadId(Landroid/content/Context;J)V
com.android.mms.data.WorkingMessage.sendMmsWorker(Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.sendSmsWorker(Ljava/lang/String;Ljava/lang/String;J)V
com.android.mms.transaction.SmsReceiverService.storeMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.data.WorkingMessage.access$700(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Landroid/net/Uri;Lcom/google/android/mms/pdu/PduPersister;Lcom/android/mms/model/SlideshowModel;Lcom/google/android/mms/pdu/SendReq;)V
com.android.mms.data.WorkingMessage.preSendSmsWorker(Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.transaction.SmsReceiverService.insertMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;ILjava/lang/String;)Landroid/net/Uri;
com.android.mms.transaction.SmsReceiverService.replaceMessage(Landroid/content/Context;[Landroid/telephony/SmsMessage;I)Landroid/net/Uri;
com.android.mms.data.WorkingMessage$2.run()V
com.android.mms.data.WorkingMessage.access$900(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;Ljava/lang/String;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage$3.run()V
com.android.mms.ui.DeliveryReportActivity.getSmsReportItems()Ljava/util/List;
com.android.mms.ui.DeliveryReportActivity.getReportItems()Ljava/util/List;
com.android.mms.ui.DeliveryReportActivity.initListAdapter()V
com.android.mms.ui.DeliveryReportActivity.onCreate(Landroid/os/Bundle;)V
android.provider.Telephony$Sms$Outbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;ZJ)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.replaceMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.ui.ClassZeroActivity.saveMessage()V
com.android.mms.ui.ClassZeroActivity.access$200(Lcom/android/mms/ui/ClassZeroActivity;)V
com.android.mms.ui.ClassZeroActivity$3.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ManageSimMessages.startQuery()V
com.android.mms.ui.ManageSimMessages.init()V
com.android.mms.ui.ManageSimMessages.refreshMessageList()V
com.android.mms.ui.ManageSimMessages.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ManageSimMessages.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ManageSimMessages.access$000(Lcom/android/mms/ui/ManageSimMessages;)V
com.android.mms.ui.ManageSimMessages$1.onChange(Z)V
com.android.mms.ui.ClassZeroActivity.storeMessage(Landroid/telephony/SmsMessage;)Landroid/net/Uri;
com.android.mms.transaction.SmsMessageSender.getOutgoingServiceCenter(J)Ljava/lang/String;
com.android.mms.transaction.SmsMessageSender.<init>(Landroid/content/Context;[Ljava/lang/String;Ljava/lang/String;J)V
com.android.mms.transaction.SmsSingleRecipientSender.getOutgoingServiceCenter(J)Ljava/lang/String;
com.android.mms.transaction.SmsSingleRecipientSender.<init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;JZLandroid/net/Uri;)V
com.android.mms.transaction.SmsSingleRecipientSender.<init>(Landroid/content/Context;[Ljava/lang/String;Ljava/lang/String;J)V
com.android.mms.ui.NoConfirmationSendService.onHandleIntent(Landroid/content/Intent;)V
com.android.mms.transaction.SmsReceiverService.sendFirstQueuedMessage()V
com.android.mms.transaction.SmsReceiverService.handleSendMessage()V
com.android.mms.transaction.SmsReceiverService.handleServiceStateChanged(Landroid/content/Intent;)V
com.android.mms.transaction.SmsReceiverService.handleSmsSent(Landroid/content/Intent;I)V
com.android.mms.transaction.SmsReceiverService.access$400(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.mms.transaction.SmsReceiverService.access$300(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;)V
com.android.mms.transaction.SmsReceiverService.access$000(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
com.android.mms.data.WorkingMessage.deleteDraftSmsMessage(J)V
com.android.mms.ui.ComposeMessageActivity.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editSmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.data.WorkingMessage.asyncDeleteDraftSmsMessage(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage$4.run()V
com.android.mms.data.WorkingMessage.readDraftSmsMessage(Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.data.WorkingMessage.discard()V
com.android.mms.data.WorkingMessage.access$000(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)Ljava/lang/String;
com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ComposeMessageActivity.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.saveDraft(Z)V
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Void;)Landroid/util/Pair;
com.android.mms.data.Conversation$ConversationQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.saveDraft(Z)V
com.android.mms.ui.ComposeMessageActivity.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivity.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity.onStop()V
com.android.mms.data.WorkingMessage$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.ui.ConversationList$ThreadListQueryHandler.onDeleteComplete(ILjava/lang/Object;I)V
com.android.mms.data.WorkingMessage$MessageStatusListener.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onMaxPendingMessagesReached()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onStop()V
com.android.mms.transaction.MessageStatusService.updateMessageStatus(Landroid/content/Context;Landroid/net/Uri;[BLjava/lang/String;)Landroid/telephony/SmsMessage;
com.android.mms.transaction.MessagingNotification.getSmsNewDeliveryInfo(Landroid/content/Context;)Lcom/android/mms/transaction/MessagingNotification$MmsSmsDeliveryInfo;
android.provider.Telephony$Sms$Sent.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;
com.android.mms.ui.ManageSimMessages.copyToPhoneMemory(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.transaction.SmsReceiverService.moveOutboxMessagesToFailedBox()I
com.android.internal.telephony.SMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.SMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processCdmaWapPdu([BILjava/lang/String;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.SMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.mms.data.Conversation.dumpSmsTable(Landroid/content/Context;)V
com.android.mms.LogTag$1.run()V
android.provider.Telephony$Sms.query(Landroid/content/ContentResolver;[Ljava/lang/String;)Landroid/database/Cursor;
com.android.mms.data.Conversation.blockingMarkAllSmsMessagesAsSeen(Landroid/content/Context;)V
com.android.mms.data.Conversation.access$800(Landroid/content/Context;)V
com.android.mms.data.Conversation$3.run()V
com.android.mms.util.Recycler$SmsRecycler.anyThreadOverLimit(Landroid/content/Context;)Z
com.android.mms.util.Recycler.anyThreadOverLimit(Landroid/content/Context;)Z
com.android.mms.util.Recycler.checkForThreadsOverLimit(Landroid/content/Context;)Z
com.android.mms.ui.ConversationList$2.run()V
com.android.mms.util.Recycler$MmsRecycler.checkForThreadsOverLimit(Landroid/content/Context;)Z
com.android.mms.util.Recycler$SmsRecycler.checkForThreadsOverLimit(Landroid/content/Context;)Z
com.android.mms.util.Recycler$SmsRecycler.getAllThreads(Landroid/content/Context;)Landroid/database/Cursor;
com.android.mms.util.Recycler.getAllThreads(Landroid/content/Context;)Landroid/database/Cursor;
android.provider.Telephony$Sms.query(Landroid/content/ContentResolver;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.mms.ui.ManageSimMessages.deleteFromSim(Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.access$500(Lcom/android/mms/ui/ManageSimMessages;Landroid/database/Cursor;)V
com.android.mms.ui.ManageSimMessages.deleteAllFromSim()V
com.android.mms.ui.ManageSimMessages$2.onClick(Landroid/content/DialogInterface;I)V
com.android.mms.ui.ManageSimMessages.access$600(Lcom/android/mms/ui/ManageSimMessages;)V
com.android.mms.ui.ManageSimMessages$3.onClick(Landroid/content/DialogInterface;I)V
android.provider.Telephony$Sms$Inbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;Z)Landroid/net/Uri;
com.android.internal.telephony.cdma.CdmaSMSDispatcher.handleServiceCategoryProgramData(Lcom/android/internal/telephony/cdma/SmsMessage;)V
Permission:android.permission.AUTHENTICATE_ACCOUNTS

51 Callers:

android.accounts.AccountManagerService.checkAuthenticateAccountsPermission(Landroid/accounts/Account;)V
android.accounts.AccountManagerService.addAccount(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z
android.accounts.AccountManagerService.getPassword(Landroid/accounts/Account;)Ljava/lang/String;
android.accounts.AccountManagerService.getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.accounts.AccountManagerService.peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.accounts.AccountManagerService.setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.accounts.AccountManagerService.setPassword(Landroid/accounts/Account;Ljava/lang/String;)V
android.accounts.AccountManagerService.setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager$Stub$Proxy.addAccount(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z
android.accounts.IAccountManager$Stub.addAccount(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z
android.accounts.IAccountManager$Stub$Proxy.getPassword(Landroid/accounts/Account;)Ljava/lang/String;
android.accounts.IAccountManager$Stub.getPassword(Landroid/accounts/Account;)Ljava/lang/String;
android.accounts.IAccountManager$Stub$Proxy.getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.accounts.IAccountManager$Stub.getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.accounts.IAccountManager$Stub$Proxy.peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.accounts.IAccountManager$Stub.peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.accounts.IAccountManager$Stub$Proxy.setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager$Stub.setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager$Stub$Proxy.setPassword(Landroid/accounts/Account;Ljava/lang/String;)V
android.accounts.IAccountManager$Stub.setPassword(Landroid/accounts/Account;Ljava/lang/String;)V
android.accounts.IAccountManager$Stub$Proxy.setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager$Stub.setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager.addAccount(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z
android.accounts.IAccountManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.accounts.IAccountManager.getPassword(Landroid/accounts/Account;)Ljava/lang/String;
android.accounts.IAccountManager.getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.accounts.IAccountManager.peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.accounts.IAccountManager.setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.accounts.IAccountManager.setPassword(Landroid/accounts/Account;Ljava/lang/String;)V
android.accounts.IAccountManager.setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.accounts.AccountManager.addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z
android.accounts.AccountManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.accounts.AccountManager.getPassword(Landroid/accounts/Account;)Ljava/lang/String;
android.accounts.AccountManager.getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.accounts.AccountManager.peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.accounts.AccountManager.setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.accounts.AccountManager.setPassword(Landroid/accounts/Account;Ljava/lang/String;)V
android.accounts.AccountManager.setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z
com.android.email.provider.DBHelper.createAccountManagerAccount(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.EasAuthenticatorService$EasAuthenticator.addAccount(Landroid/accounts/AccountAuthenticatorResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.email.service.EasTestAuthenticatorService$EasAuthenticator.addAccount(Landroid/accounts/AccountAuthenticatorResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator.addAccount(Landroid/accounts/AccountAuthenticatorResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
android.test.IsolatedContext$MockAccountManager.getPassword(Landroid/accounts/Account;)Ljava/lang/String;
android.test.IsolatedContext$MockAccountManager.getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.test.IsolatedContext$MockAccountManager.peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
android.test.IsolatedContext$MockAccountManager.setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.setPassword(Landroid/accounts/Account;Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
com.android.email.provider.DBHelper.upgradeFromVersion21ToVersion22(Landroid/database/sqlite/SQLiteDatabase;Landroid/content/Context;)V
com.android.email.provider.DBHelper$DatabaseHelper.onUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V
Permission:android.permission.DISABLE_KEYGUARD

23 Callers:

com.android.server.wm.WindowManagerService.disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;)V
android.view.IWindowManager$Stub$Proxy.disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;)V
android.view.IWindowManager$Stub.disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;)V
android.view.IWindowManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IWindowManager.disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.wm.WindowManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.KeyguardManager$KeyguardLock.disableKeyguard()V
com.android.server.wm.WindowManagerService.reenableKeyguard(Landroid/os/IBinder;)V
android.view.IWindowManager$Stub$Proxy.reenableKeyguard(Landroid/os/IBinder;)V
android.view.IWindowManager$Stub.reenableKeyguard(Landroid/os/IBinder;)V
android.view.IWindowManager.reenableKeyguard(Landroid/os/IBinder;)V
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()V
com.android.server.wm.WindowManagerService.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.IWindowManager$Stub$Proxy.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.IWindowManager$Stub.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.IWindowManager.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.app.KeyguardManager.exitKeyguardSecurely(Landroid/app/KeyguardManager$OnKeyguardExitResult;)V
com.android.systemui.statusbar.BaseStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.systemui.statusbar.phone.PhoneStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.server.wm.WindowManagerService.dismissKeyguard()V
android.view.IWindowManager$Stub$Proxy.dismissKeyguard()V
android.view.IWindowManager$Stub.dismissKeyguard()V
android.view.IWindowManager.dismissKeyguard()V
Permission:android.permission.CLEAR_APP_CACHE

17 Callers:

com.android.server.pm.PackageManagerService.freeStorageAndNotify(JLandroid/content/pm/IPackageDataObserver;)V
android.content.pm.IPackageManager$Stub$Proxy.freeStorageAndNotify(JLandroid/content/pm/IPackageDataObserver;)V
android.content.pm.IPackageManager$Stub.freeStorageAndNotify(JLandroid/content/pm/IPackageDataObserver;)V
android.content.pm.IPackageManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.content.pm.IPackageManager.freeStorageAndNotify(JLandroid/content/pm/IPackageDataObserver;)V
com.android.server.pm.PackageManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ApplicationPackageManager.freeStorageAndNotify(JLandroid/content/pm/IPackageDataObserver;)V
com.android.server.DeviceStorageMonitorService.clearCache()V
com.android.server.DeviceStorageMonitorService.checkMemory(Z)V
com.android.server.DeviceStorageMonitorService.access$000(Lcom/android/server/DeviceStorageMonitorService;Z)V
com.android.server.DeviceStorageMonitorService.<init>(Landroid/content/Context;)V
com.android.server.ServerThread.run()V
com.android.server.pm.PackageManagerService.freeStorage(JLandroid/content/IntentSender;)V
android.content.pm.IPackageManager$Stub$Proxy.freeStorage(JLandroid/content/IntentSender;)V
android.content.pm.IPackageManager$Stub.freeStorage(JLandroid/content/IntentSender;)V
android.content.pm.IPackageManager.freeStorage(JLandroid/content/IntentSender;)V
android.app.ApplicationPackageManager.freeStorage(JLandroid/content/IntentSender;)V
Permission:android.permission.ACCESS_NETWORK_STATE

1431 Callers:

com.android.server.ConnectivityService.enforceAccessPermission()V
com.android.server.ConnectivityService.getLinkProperties(I)Landroid/net/LinkProperties;
com.android.server.ConnectivityService.getActiveNetworkInfo()Landroid/net/NetworkInfo;
com.android.server.ConnectivityService.getAllNetworkInfo()[Landroid/net/NetworkInfo;
com.android.server.ConnectivityService.getNetworkInfo(I)Landroid/net/NetworkInfo;
com.android.server.ConnectivityService.getActiveNetworkQuotaInfo()Landroid/net/NetworkQuotaInfo;
com.android.server.ConnectivityService.getAllNetworkState()[Landroid/net/NetworkState;
com.android.server.ConnectivityService.getMobileDataEnabled()Z
com.android.server.ConnectivityService.isActiveNetworkMetered()Z
com.android.server.ConnectivityService.isNetworkSupported(I)Z
com.android.server.ConnectivityService.getNetworkPreference()I
android.net.IConnectivityManager$Stub$Proxy.getLinkProperties(I)Landroid/net/LinkProperties;
android.net.IConnectivityManager$Stub.getLinkProperties(I)Landroid/net/LinkProperties;
com.android.server.ConnectivityService.getActiveLinkProperties()Landroid/net/LinkProperties;
android.net.IConnectivityManager$Stub$Proxy.getActiveNetworkInfo()Landroid/net/NetworkInfo;
android.net.IConnectivityManager$Stub.getActiveNetworkInfo()Landroid/net/NetworkInfo;
com.android.server.ConnectivityService.handleConnectionFailure(Landroid/net/NetworkInfo;)V
android.net.IConnectivityManager$Stub$Proxy.getAllNetworkInfo()[Landroid/net/NetworkInfo;
android.net.IConnectivityManager$Stub.getAllNetworkInfo()[Landroid/net/NetworkInfo;
android.net.IConnectivityManager$Stub$Proxy.getNetworkInfo(I)Landroid/net/NetworkInfo;
android.net.IConnectivityManager$Stub.getNetworkInfo(I)Landroid/net/NetworkInfo;
android.net.IConnectivityManager$Stub$Proxy.getActiveNetworkQuotaInfo()Landroid/net/NetworkQuotaInfo;
android.net.IConnectivityManager$Stub.getActiveNetworkQuotaInfo()Landroid/net/NetworkQuotaInfo;
android.net.IConnectivityManager$Stub$Proxy.getAllNetworkState()[Landroid/net/NetworkState;
android.net.IConnectivityManager$Stub.getAllNetworkState()[Landroid/net/NetworkState;
android.net.IConnectivityManager$Stub$Proxy.getMobileDataEnabled()Z
android.net.IConnectivityManager$Stub.getMobileDataEnabled()Z
android.net.IConnectivityManager$Stub$Proxy.isActiveNetworkMetered()Z
android.net.IConnectivityManager$Stub.isActiveNetworkMetered()Z
android.net.IConnectivityManager$Stub$Proxy.isNetworkSupported(I)Z
android.net.IConnectivityManager$Stub.isNetworkSupported(I)Z
android.net.IConnectivityManager$Stub$Proxy.getNetworkPreference()I
android.net.IConnectivityManager$Stub.getNetworkPreference()I
android.net.IConnectivityManager.getLinkProperties(I)Landroid/net/LinkProperties;
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager$Stub$Proxy.getActiveLinkProperties()Landroid/net/LinkProperties;
android.net.IConnectivityManager$Stub.getActiveLinkProperties()Landroid/net/LinkProperties;
android.net.IConnectivityManager.getActiveNetworkInfo()Landroid/net/NetworkInfo;
com.android.server.ConnectivityService.access$900(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
android.net.IConnectivityManager.getAllNetworkInfo()[Landroid/net/NetworkInfo;
android.net.IConnectivityManager.getNetworkInfo(I)Landroid/net/NetworkInfo;
android.net.IConnectivityManager.getActiveNetworkQuotaInfo()Landroid/net/NetworkQuotaInfo;
android.net.IConnectivityManager.getAllNetworkState()[Landroid/net/NetworkState;
android.net.IConnectivityManager.getMobileDataEnabled()Z
android.net.IConnectivityManager.isActiveNetworkMetered()Z
android.net.IConnectivityManager.isNetworkSupported(I)Z
android.net.IConnectivityManager.getNetworkPreference()I
android.net.ConnectivityManager.getLinkProperties(I)Landroid/net/LinkProperties;
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.chooseUpstreamType(Z)V
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager.getActiveLinkProperties()Landroid/net/LinkProperties;
android.net.ConnectivityManager.getActiveNetworkInfo()Landroid/net/NetworkInfo;
android.net.ConnectivityManager.getAllNetworkInfo()[Landroid/net/NetworkInfo;
android.net.ConnectivityManager.getNetworkInfo(I)Landroid/net/NetworkInfo;
android.net.ConnectivityManager.getActiveNetworkQuotaInfo()Landroid/net/NetworkQuotaInfo;
com.android.server.net.NetworkPolicyManagerService.updateNetworkRulesLocked()V
com.android.server.net.NetworkStatsService.updateIfacesLocked()V
android.net.ConnectivityManager.getMobileDataEnabled()Z
android.net.ConnectivityManager.isActiveNetworkMetered()Z
android.net.ConnectivityManager.isNetworkSupported(I)Z
android.net.ConnectivityManager.getNetworkPreference()I
android.net.DnsPinger.getCurrentLinkProperties()Landroid/net/LinkProperties;
com.android.settings.Utils.getWifiIpAddresses(Landroid/content/Context;)Ljava/lang/String;
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.chooseUpstreamType(Z)V
android.net.ConnectivityManager.getActiveLinkProperties()Landroid/net/LinkProperties;
com.android.settings.vpn2.VpnSettings.getDefaultNetwork()[Ljava/lang/String;
android.content.SyncManager.readDataConnectionState()Z
android.net.http.RequestQueue.setProxyConfig()V
android.support.v4.net.ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z
android.support.v4.net.ConnectivityManagerCompatGingerbread.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z
android.support.v4.net.ConnectivityManagerCompatHoneycombMR2.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z
com.android.browser.BrowserSettings.updateConnectionType()V
com.android.browser.NetworkStateHandler.<init>(Landroid/app/Activity;Lcom/android/browser/Controller;)V
com.android.browser.PreloadRequestReceiver.isOnWifi(Landroid/content/Context;)Z
com.android.browser.search.OpenSearchSearchEngine.getActiveNetworkInfo(Landroid/content/Context;)Landroid/net/NetworkInfo;
com.android.emailcommon.provider.Account.isAutomaticSyncDisabledByRoaming(Landroid/content/Context;J)Z
com.android.email.EmailConnectivityManager.hasConnectivity()Z
com.android.email.EmailConnectivityManager.getActiveNetworkType(Landroid/net/ConnectivityManager;)I
com.android.email.EmailConnectivityManager.waitForConnectivity()V
com.android.exchange.AbstractSyncService.hasConnectivity()Z
com.android.exchange.ExchangeService.waitForConnectivity()V
com.android.gallery3d.util.ReverseGeocoder.lookupAddress(DDZ)Landroid/location/Address;
com.android.inputmethod.latin.SubtypeSwitcher.initialize(Lcom/android/inputmethod/latin/LatinIME;)V
com.android.phone.SipCallOptionHandler.isNetworkConnected()Z
com.android.providers.downloads.DownloadReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.providers.downloads.RealSystemFacade.isNetworkRoaming()Z
com.android.quicksearchbox.google.GoogleSuggestClient.getActiveNetworkInfo()Landroid/net/NetworkInfo;
com.android.server.LocationManagerService$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.NetworkTimeUpdateService$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.sip.SipService.onConnectivityChanged(Landroid/net/NetworkInfo;)V
com.android.systemui.statusbar.policy.NetworkController.updateConnectivity(Landroid/content/Intent;)V
com.android.mms.transaction.RetryScheduler.isConnected()Z
com.android.mms.transaction.TransactionService.isNetworkAvailable()Z
com.android.settings.deviceinfo.Status.setWimaxStatus()V
com.android.settings.wifi.WifiSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.server.net.NetworkPolicyManagerService.access$1100(Lcom/android/server/net/NetworkPolicyManagerService;)V
com.android.server.net.NetworkPolicyManagerService.addNetworkPolicyLocked(Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkPolicyManagerService.dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
com.android.server.net.NetworkPolicyManagerService.performSnooze(Landroid/net/NetworkTemplate;I)V
com.android.server.net.NetworkPolicyManagerService.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkStatsService.updateIfaces()V
com.android.phone.MobileNetworkSettings.onResume()V
com.android.settings.DataUsageSummary.isMobileDataEnabled()Z
android.support.v4.net.ConnectivityManagerCompatJellyBean.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z
com.android.providers.downloads.RealSystemFacade.isActiveNetworkMetered()Z
android.net.wifi.WifiWatchdogStateMachine.makeWifiWatchdogStateMachine(Landroid/content/Context;)Landroid/net/wifi/WifiWatchdogStateMachine;
com.android.internal.policy.impl.GlobalActions.<init>(Landroid/content/Context;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;)V
com.android.internal.telephony.RIL.<init>(Landroid/content/Context;II)V
com.android.settings.DataUsageSummary.hasEthernet(Landroid/content/Context;)Z
com.android.settings.DataUsageSummary.hasReadyMobileRadio(Landroid/content/Context;)Z
com.android.settings.DataUsageSummary.hasWifiRadio(Landroid/content/Context;)Z
com.android.settings.Utils.isWifiOnly(Landroid/content/Context;)Z
com.android.systemui.statusbar.policy.NetworkController.<init>(Landroid/content/Context;)V
android.net.DnsPinger.getDnsList()Ljava/util/List;
com.android.settings.wifi.AdvancedWifiSettings.refreshWifiInfo()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.enter()V
com.android.settings.Utils.getDefaultIpAddresses(Landroid/content/Context;)Ljava/lang/String;
com.android.settings.vpn2.VpnSettings.connect(Lcom/android/settings/vpn2/VpnProfile;)V
android.content.SyncManager.access$500(Landroid/content/SyncManager;)Z
android.net.http.RequestQueue.access$300(Landroid/net/http/RequestQueue;)V
android.net.http.RequestQueue.enablePlatformNotifications()V
android.support.v4.net.ConnectivityManagerCompat$ConnectivityManagerCompatImpl.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z
android.support.v4.net.ConnectivityManagerCompat$GingerbreadConnectivityManagerCompatImpl.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z
android.support.v4.net.ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z
com.android.browser.BrowserSettings.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.browser.NetworkStateHandler$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.NetworkStateHandler.onResume()V
com.android.browser.Controller.<init>(Landroid/app/Activity;)V
com.android.browser.PreloadRequestReceiver.isPreloadEnabledOnCurrentNetwork(Landroid/content/Context;)Z
com.android.browser.search.OpenSearchSearchEngine.isNetworkConnected(Landroid/content/Context;)Z
com.android.email.Preferences.shouldShowRequireManualSync(Landroid/content/Context;Lcom/android/emailcommon/provider/Account;)Z
com.android.email.service.AttachmentDownloadService$DownloadSet.onWatchdogAlarm()V
com.android.email.EmailConnectivityManager.getActiveNetworkType(Landroid/content/Context;)I
com.android.email.EmailConnectivityManager.getActiveNetworkType()I
com.android.email.service.AttachmentDownloadService.run()V
com.android.exchange.EasAccountService.hasConnectivity()Z
com.android.exchange.EasOutboxService.hasConnectivity()Z
com.android.exchange.EasSyncService.hasConnectivity()Z
com.android.exchange.ExchangeService.run()V
com.android.gallery3d.ui.DetailsAddressResolver$AddressLookupJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/location/Address;
com.android.gallery3d.util.ReverseGeocoder.computeAddress(Lcom/android/gallery3d/util/ReverseGeocoder$SetLatLong;)Ljava/lang/String;
com.android.inputmethod.latin.SubtypeSwitcher.init(Lcom/android/inputmethod/latin/LatinIME;)V
com.android.phone.SipCallOptionHandler.access$100(Lcom/android/phone/SipCallOptionHandler;)Z
com.android.phone.SipCallOptionHandler.onCreate(Landroid/os/Bundle;)V
com.android.providers.downloads.SystemFacade.isNetworkRoaming()Z
com.android.quicksearchbox.google.GoogleSuggestClient.isNetworkConnected()Z
com.android.server.sip.SipService.access$1700(Lcom/android/server/sip/SipService;Landroid/net/NetworkInfo;)V
com.android.systemui.statusbar.policy.NetworkController.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.RetryScheduler.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.settings.deviceinfo.Status.onCreate(Landroid/os/Bundle;)V
com.android.settings.SettingsPreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.server.net.NetworkPolicyManagerService$10.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkPolicyManagerService$8.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkPolicyManagerService.access$1000(Lcom/android/server/net/NetworkPolicyManagerService;Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkPolicyManagerService.ensureActiveMobilePolicyLocked()V
com.android.server.net.NetworkPolicyManagerService.access$800(Lcom/android/server/net/NetworkPolicyManagerService;Landroid/net/NetworkTemplate;I)V
android.net.INetworkPolicyManager$Stub$Proxy.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
android.net.INetworkPolicyManager$Stub.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkStatsService.access$600(Lcom/android/server/net/NetworkStatsService;)V
com.android.settings.DataUsageSummary.updatePolicy(Z)V
android.support.v4.net.ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z
com.android.providers.downloads.SystemFacade.isActiveNetworkMetered()Z
com.android.server.WifiService.checkAndStartWifi()V
com.android.internal.policy.impl.PhoneWindowManager.showGlobalActionsDialog()V
com.android.internal.telephony.PhoneFactory.makeDefaultPhone(Landroid/content/Context;)V
com.android.settings.DataUsageSummary.onCreate(Landroid/os/Bundle;)V
com.android.settings.DataUsageSummary.onPrepareOptionsMenu(Landroid/view/Menu;)V
com.android.settings.DataUsageSummary.updateTabs()V
com.android.settings.DataUsageSummary.isMobilePolicySplit()Z
com.android.settings.DataUsageSummary.setMobilePolicySplit(Z)V
com.android.settings.DataUsageSummary.updateAppDetail()V
com.android.settings.net.DataUsageMeteredSettings.updateNetworks(Landroid/content/Context;)V
com.android.settings.DateTimeSettings.initUI()V
com.android.settings.DeviceInfoSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Status.onPause()V
com.android.settings.deviceinfo.Status.onResume()V
com.android.settings.fuelgauge.BatteryHistoryChart.setStats(Landroid/os/BatteryStats;)V
com.android.settings.fuelgauge.PowerUsageSummary.processMiscUsage()V
com.android.settings.wifi.AdvancedWifiSettings.initPreferences()V
com.android.settings.wifi.AdvancedWifiSettings.updateSleepPolicySummary(Landroid/preference/Preference;Ljava/lang/String;)V
com.android.settings.WirelessSettings.onCreate(Landroid/os/Bundle;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.makeStatusBarView()Lcom/android/systemui/statusbar/phone/PhoneStatusBarView;
com.android.systemui.statusbar.tablet.TabletStatusBar.makeStatusBarView()Landroid/view/View;
com.android.settings.wifi.AdvancedWifiSettings.onResume()V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.State.enter()V
com.android.settings.deviceinfo.Status.setIpAddressStatus()V
com.android.settings.vpn2.VpnSettings.onClick(Landroid/content/DialogInterface;I)V
android.content.SyncManager$4.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$ActiveSyncContext.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
android.content.SyncManager$ActiveSyncContext.onServiceDisconnected(Landroid/content/ComponentName;)V
android.content.SyncManager.sendSyncAlarmMessage()V
android.content.SyncManager.sendCheckAlarmsMessage()V
android.content.SyncManager.sendSyncFinishedOrCanceledMessage(Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/SyncResult;)V
android.content.SyncManager.sendCancelSyncsMessage(Landroid/accounts/Account;ILjava/lang/String;)V
android.net.http.RequestQueue$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.support.v4.net.ConnectivityManagerCompat.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z
com.android.browser.Controller.onResume()V
com.android.browser.BrowserActivity.createController()Lcom/android/browser/Controller;
com.android.browser.PreloadRequestReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.search.OpenSearchSearchEngine.getSuggestions(Landroid/content/Context;Ljava/lang/String;)Landroid/database/Cursor;
com.android.email.activity.UIControllerBase.showAccountSpecificWarning(J)V
com.android.email.service.AttachmentDownloadService$DownloadSet.access$800(Lcom/android/email/service/AttachmentDownloadService$DownloadSet;)V
com.android.email.AttachmentInfo.<init>(Landroid/content/Context;JJLjava/lang/String;Ljava/lang/String;JI)V
com.android.email.service.AttachmentDownloadService$DownloadSet.processQueue()V
com.android.exchange.EasSyncService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.gallery3d.ui.DetailsAddressResolver$AddressLookupJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.data.LocationClustering.generateName(Ljava/util/ArrayList;Lcom/android/gallery3d/util/ReverseGeocoder;)Ljava/lang/String;
com.android.inputmethod.latin.LatinIME.onCreate()V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.providers.downloads.DownloadInfo.checkCanUseNetwork()I
com.android.quicksearchbox.google.GoogleSuggestClient.query(Ljava/lang/String;)Lcom/android/quicksearchbox/SourceResult;
com.android.server.sip.SipService$ConnectivityReceiver$1.run()V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountPreferenceBase.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DeviceInfoSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.net.DataUsageMeteredSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.TetherSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.WirelessSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.server.net.NetworkPolicyManagerService.access$1300(Lcom/android/server/net/NetworkPolicyManagerService;)V
com.android.server.net.NetworkPolicyManagerService$6.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.INetworkPolicyManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.INetworkPolicyManager.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.server.net.NetworkStatsService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.DataUsageSummary.access$600(Lcom/android/settings/DataUsageSummary;Z)V
com.android.settings.DataUsageSummary.setMobileDataEnabled(Z)V
com.android.settings.DataUsageSummary.setPolicyLimitBytes(J)V
com.android.settings.DataUsageSummary.setPolicyWarningBytes(J)V
com.android.server.ServerThread.run()V
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
com.android.internal.telephony.PhoneFactory.makeDefaultPhones(Landroid/content/Context;)V
com.android.settings.DataUsageSummary.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.DataUsageSummary.onResume()V
com.android.settings.DataUsageSummary.access$1800(Lcom/android/settings/DataUsageSummary;)V
com.android.settings.net.DataUsageMeteredSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SettingsPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.fuelgauge.BatteryHistoryDetail.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.settings.fuelgauge.BatteryHistoryPreference.onBindView(Landroid/view/View;)V
com.android.settings.fuelgauge.PowerUsageSummary.refreshStats()V
com.android.settings.wifi.AdvancedWifiSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.systemui.statusbar.phone.PhoneStatusBar.addStatusBarWindow()V
com.android.systemui.statusbar.tablet.TabletStatusBar.addStatusBarWindow()V
com.android.settings.SettingsPreferenceFragment.onResume()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
android.content.SyncManager.access$900(Landroid/content/SyncManager;)V
android.content.SyncManager.access$100(Landroid/content/SyncManager;)V
android.content.SyncManager.onAccountsUpdated([Landroid/accounts/Account;)V
android.content.SyncManager.scheduleSyncOperation(Landroid/content/SyncOperation;)V
android.content.SyncManager.access$1100(Landroid/content/SyncManager;Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/SyncResult;)V
android.content.SyncManager.cancelActiveSync(Landroid/accounts/Account;ILjava/lang/String;)V
com.android.browser.ActivityController.onResume()V
com.android.browser.BrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.browser.search.SearchEngine.getSuggestions(Landroid/content/Context;Ljava/lang/String;)Landroid/database/Cursor;
com.android.email.activity.UIControllerBase.onActivityResume()V
com.android.email.activity.UIControllerBase.switchAccount(JZ)V
com.android.email.activity.UIControllerOnePane.showAccountSpecificWarning(J)V
com.android.email.activity.UIControllerSearchTwoPane.showAccountSpecificWarning(J)V
com.android.email.activity.UIControllerTwoPane.showAccountSpecificWarning(J)V
com.android.email.service.AttachmentDownloadService.watchdogAlarm()V
com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo.<init>(Landroid/content/Context;JJLjava/lang/String;Ljava/lang/String;JI)V
com.android.email.AttachmentInfo.<init>(Landroid/content/Context;Landroid/database/Cursor;)V
com.android.email.AttachmentInfo.<init>(Landroid/content/Context;Lcom/android/email/AttachmentInfo;)V
com.android.email.AttachmentInfo.<init>(Landroid/content/Context;Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.exchange.EasAccountService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasOutboxService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasSyncService.run()V
com.android.gallery3d.util.ThreadPool$Job.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.data.LocationClustering.run(Lcom/android/gallery3d/data/MediaSet;)V
com.android.providers.downloads.DownloadInfo.isReadyToStart(J)Z
com.android.providers.downloads.DownloadThread.getFinalStatusForHttpError(Lcom/android/providers/downloads/DownloadThread$State;)I
com.android.providers.downloads.DownloadThread.checkConnectivity()V
com.android.quicksearchbox.google.GoogleSuggestClient.queryExternal(Ljava/lang/String;)Lcom/android/quicksearchbox/SourceResult;
com.android.quicksearchbox.google.GoogleSuggestClient.queryInternal(Ljava/lang/String;)Lcom/android/quicksearchbox/SourceResult;
com.android.mms.transaction.Observable.notifyObservers()V
com.android.settings.accounts.AccountSyncSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.accounts.SyncSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.server.net.NetworkPolicyManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.NetworkPolicyManager.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
com.android.settings.DataUsageSummary$10.onLoadFinished(Landroid/content/Loader;Lcom/android/settings/net/ChartData;)V
com.android.settings.DataUsageSummary$4.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.DataUsageSummary$CycleEditorFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.DataUsageSummary$LimitEditorFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.DataUsageSummary$WarningEditorFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.DataUsageSummary.access$500(Lcom/android/settings/DataUsageSummary;Z)V
com.android.settings.DataUsageSummary.access$800(Lcom/android/settings/DataUsageSummary;J)V
com.android.settings.DataUsageSummary.access$2400(Lcom/android/settings/DataUsageSummary;J)V
com.android.phone.PhoneApp.onCreate()V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountPreferenceBase.onCreate(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onCreate(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.TetherSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.fuelgauge.PowerUsageSummary.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.fuelgauge.PowerUsageSummary.onResume()V
com.android.systemui.statusbar.phone.PhoneStatusBar.createAndAddWindows()V
com.android.systemui.statusbar.tablet.TabletStatusBar.createAndAddWindows()V
com.android.settings.AccessibilitySettings.onResume()V
com.android.settings.accounts.AccountPreferenceBase.onResume()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onResume()V
com.android.settings.bluetooth.DeviceProfilesSettings.onResume()V
com.android.settings.DateTimeSettings.onResume()V
com.android.settings.deviceinfo.Memory.onResume()V
com.android.settings.deviceinfo.UsbSettings.onResume()V
com.android.settings.DisplaySettings.onResume()V
com.android.settings.DockSettings.onResume()V
com.android.settings.DreamSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onResume()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onResume()V
com.android.settings.inputmethod.SpellCheckersSettings.onResume()V
com.android.settings.inputmethod.UserDictionaryList.onResume()V
com.android.settings.LocationSettings.onResume()V
com.android.settings.PrivacySettings.onResume()V
com.android.settings.SecuritySettings.onResume()V
com.android.settings.SoundSettings.onResume()V
com.android.settings.users.UserDetailsSettings.onResume()V
com.android.settings.users.UserSettings.onResume()V
com.android.settings.vpn2.VpnSettings.onResume()V
com.android.settings.wifi.p2p.WifiP2pSettings.onResume()V
com.android.settings.wifi.WifiSettings.onResume()V
com.android.settings.WirelessSettings.onResume()V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
android.content.SyncManager$SyncAlarmIntentReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$9.onStatusChanged(I)V
android.content.SyncManager.<init>(Landroid/content/Context;Z)V
android.content.SyncManager.onUserRemoved(Landroid/content/Intent;)V
android.content.SyncManager$SyncHandler.maybeStartNextSyncLocked()J
android.content.SyncManager$SyncHandler.scheduleReadyPeriodicSyncs()J
android.content.SyncManager$SyncHandler.runBoundToSyncAdapter(Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/ISyncAdapter;)V
android.content.SyncManager$SyncHandler.runSyncFinishedOrCanceledLocked(Landroid/content/SyncResult;Landroid/content/SyncManager$ActiveSyncContext;)V
android.content.SyncManager.maybeRescheduleSync(Landroid/content/SyncResult;Landroid/content/SyncOperation;)V
android.content.SyncManager.scheduleSync(Landroid/accounts/Account;ILjava/lang/String;Landroid/os/Bundle;JZ)V
android.content.SyncManager$ActiveSyncContext.binderDied()V
android.content.SyncManager$ActiveSyncContext.onFinished(Landroid/content/SyncResult;)V
com.android.browser.BrowserActivity.onResume()V
com.android.browser.provider.BrowserProvider.doSuggestQuery(Ljava/lang/String;[Ljava/lang/String;Z)Landroid/database/Cursor;
com.android.browser.SuggestionsAdapter$SuggestCursor.runQuery(Ljava/lang/CharSequence;)V
com.android.email.activity.EmailActivity.onResume()V
com.android.email.activity.UIControllerOnePane.onActivityResume()V
com.android.email.activity.UIControllerTwoPane.onActivityResume()V
com.android.email.activity.UIControllerOnePane.switchAccount(JZ)V
com.android.email.activity.UIControllerSearchTwoPane.switchAccount(JZ)V
com.android.email.activity.UIControllerTwoPane.switchAccount(JZ)V
com.android.email.service.AttachmentDownloadService$Watchdog$1.run()V
com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo.<init>(Landroid/content/Context;Landroid/database/Cursor;)V
com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo.<init>(Landroid/content/Context;Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;)V
com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo.<init>(Landroid/content/Context;Lcom/android/email/AttachmentInfo;)V
com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo.<init>(Landroid/content/Context;Lcom/android/emailcommon/provider/EmailContent$Attachment;Landroid/widget/ProgressBar;)V
com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo.<init>(Landroid/content/Context;Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/Bitmap;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Landroid/graphics/BitmapRegionDecoder;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Lcom/android/gallery3d/ui/ScreenNail;
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.gallery3d.gadget.WidgetUtils.createWidgetBitmap(Lcom/android/gallery3d/data/MediaItem;)Landroid/graphics/Bitmap;
com.android.gallery3d.ui.AlbumSetSlidingWindow.getLoadingTexture()Lcom/android/gallery3d/ui/BitmapTexture;
com.android.gallery3d.util.JobLimiter$JobWrapper.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.util.ThreadPool$Worker.run()V
com.android.gallery3d.data.Clustering.run(Lcom/android/gallery3d/data/MediaSet;)V
com.android.providers.downloads.DownloadInfo.startIfReady(JLcom/android/providers/downloads/StorageManager;)V
com.android.providers.downloads.DownloadThread.readFromResponse(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;[BLjava/io/InputStream;)I
com.android.providers.downloads.DownloadThread.openResponseEntity(Lcom/android/providers/downloads/DownloadThread$State;Lorg/apache/http/HttpResponse;)Ljava/io/InputStream;
com.android.providers.downloads.DownloadThread.sendRequest(Lcom/android/providers/downloads/DownloadThread$State;Landroid/net/http/AndroidHttpClient;Lorg/apache/http/client/methods/HttpGet;)Lorg/apache/http/HttpResponse;
com.android.providers.downloads.DownloadThread.handleEndOfStream(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;)V
com.android.providers.downloads.DownloadThread.checkPausedOrCanceled(Lcom/android/providers/downloads/DownloadThread$State;)V
com.android.providers.downloads.DownloadThread.executeDownload(Lcom/android/providers/downloads/DownloadThread$State;Landroid/net/http/AndroidHttpClient;Lorg/apache/http/client/methods/HttpGet;)V
com.android.providers.downloads.DownloadThread.processResponseHeaders(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;Lorg/apache/http/HttpResponse;)V
com.android.quicksearchbox.google.AbstractGoogleSource.queryExternal(Ljava/lang/String;)Lcom/android/quicksearchbox/SourceResult;
com.android.quicksearchbox.google.AbstractGoogleSource.queryInternal(Ljava/lang/String;)Lcom/android/quicksearchbox/SourceResult;
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.settings.net.NetworkPolicyEditor.write([Landroid/net/NetworkPolicy;)V
com.android.settings.DataUsageSummary$10.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.settings.DataUsageSummary$ConfirmDataDisableFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.DataUsageSummary$12.onLimitChanged()V
com.android.settings.DataUsageSummary$5.onClick(Landroid/view/View;)V
com.android.settings.DataUsageSummary$ConfirmLimitFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.DataUsageSummary$12.onWarningChanged()V
com.android.settings.accounts.AccountSyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.SyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.systemui.statusbar.BaseStatusBar.createAndAddWindows()V
com.android.settings.accounts.AccountSyncSettings.onResume()V
com.android.settings.accounts.ManageAccountsSettings.onResume()V
com.android.settings.accounts.SyncSettings.onResume()V
com.android.settings.bluetooth.BluetoothSettings.onResume()V
com.android.settings.bluetooth.DevicePickerFragment.onResume()V
android.content.ISyncStatusObserver$Stub$Proxy.onStatusChanged(I)V
android.content.ContentService.getSyncManager()Landroid/content/SyncManager;
android.content.SyncManager.access$700(Landroid/content/SyncManager;Landroid/content/Intent;)V
android.content.SyncManager$SyncHandler.cancelActiveSyncLocked(Landroid/accounts/Account;ILjava/lang/String;)V
android.content.SyncManager$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$7.onSyncRequest(Landroid/accounts/Account;ILjava/lang/String;Landroid/os/Bundle;)V
android.content.SyncManager$8.onServiceChanged(Landroid/content/SyncAdapterType;Z)V
android.content.SyncManager.scheduleLocalSync(Landroid/accounts/Account;ILjava/lang/String;)V
android.content.ISyncContext$Stub$Proxy.onFinished(Landroid/content/SyncResult;)V
com.android.browser.provider.BrowserProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.browser.SuggestionsAdapter$CursorSource.runQuery(Ljava/lang/CharSequence;)V
com.android.browser.SuggestionsAdapter$SlowFilterTask.doInBackground([Ljava/lang/CharSequence;)Ljava/util/List;
com.android.email.activity.UIControllerSearchTwoPane.onActivityResume()V
com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback.onAccountSelected(J)V
com.android.email.activity.UIControllerOnePane.onBackPressed(Z)Z
com.android.email.activity.UIControllerOnePane.onAccountSelected(J)V
com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback.onAccountSelected(J)V
com.android.email.activity.UIControllerTwoPane.onAccountSelected(J)V
com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo.<init>(Landroid/content/Context;Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;Lcom/android/email/activity/MessageViewFragmentBase$1;)V
com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo.<init>(Landroid/content/Context;Lcom/android/emailcommon/provider/EmailContent$Attachment;Landroid/widget/ProgressBar;Lcom/android/email/activity/MessageViewFragmentBase$1;)V
com.android.gallery3d.app.CropImage$LoadBitmapDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.CropImage$LoadDataTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$FullImageJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.gadget.LocalPhotoSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.gadget.MediaSetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.data.ClusterAlbumSet.updateClusters()V
com.android.providers.downloads.DownloadService.insertDownloadLocked(Lcom/android/providers/downloads/DownloadInfo$Reader;J)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadService.updateDownload(Lcom/android/providers/downloads/DownloadInfo$Reader;Lcom/android/providers/downloads/DownloadInfo;J)V
com.android.providers.downloads.DownloadThread.transferData(Lcom/android/providers/downloads/DownloadThread$State;Lcom/android/providers/downloads/DownloadThread$InnerState;[BLjava/io/InputStream;)V
com.android.providers.downloads.DownloadThread.run()V
com.android.quicksearchbox.google.AbstractGoogleSource.getSuggestionsExternal(Ljava/lang/String;)Lcom/android/quicksearchbox/SourceResult;
com.android.quicksearchbox.google.GoogleSource.queryExternal(Ljava/lang/String;)Lcom/android/quicksearchbox/SourceResult;
com.android.quicksearchbox.google.AbstractGoogleSource.getSuggestions(Ljava/lang/String;IZ)Lcom/android/quicksearchbox/SourceResult;
com.android.quicksearchbox.google.GoogleSource.queryInternal(Ljava/lang/String;)Lcom/android/quicksearchbox/SourceResult;
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.transaction.SendTransaction.run()V
com.android.settings.net.NetworkPolicyEditor$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.settings.widget.ChartDataUsageView$DataUsageChartListener.onLimitChanged()V
com.android.settings.widget.ChartDataUsageView$DataUsageChartListener.onWarningChanged()V
com.android.systemui.statusbar.BaseStatusBar.start()V
android.content.ContentService.<init>(Landroid/content/Context;Z)V
android.content.SyncManager$6.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$8.onServiceChanged(Ljava/lang/Object;Z)V
com.android.browser.SuggestionsAdapter$SuggestFilter.performFiltering(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;
com.android.browser.SuggestionsAdapter$SlowFilterTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.ActionBarController$Callback.onAccountSelected(J)V
com.android.email.activity.UIControllerBase.onBackPressed(Z)Z
com.android.email.activity.UIControllerSearchTwoPane.onAccountSelected(J)V
com.android.email.activity.MessageViewFragmentBase.updateAttachmentTab()V
com.android.email.activity.MessageViewFragmentBase.addAttachment(Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.gallery3d.gadget.WidgetSource.getImage(I)Landroid/graphics/Bitmap;
com.android.gallery3d.data.ClusterAlbumSet.reload()J
com.android.providers.downloads.DownloadService.access$600(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo$Reader;J)Lcom/android/providers/downloads/DownloadInfo;
com.android.providers.downloads.DownloadService.access$500(Lcom/android/providers/downloads/DownloadService;Lcom/android/providers/downloads/DownloadInfo$Reader;Lcom/android/providers/downloads/DownloadInfo;J)V
com.android.quicksearchbox.google.GoogleSuggestClient.getSuggestionsExternal(Ljava/lang/String;)Lcom/android/quicksearchbox/SourceResult;
com.android.quicksearchbox.google.GoogleSuggestionProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.quicksearchbox.google.AbstractGoogleSource.getSuggestions(Ljava/lang/String;IZ)Lcom/android/quicksearchbox/SuggestionCursor;
com.android.quicksearchbox.google.GoogleSuggestClient.getSuggestions(Ljava/lang/String;IZ)Lcom/android/quicksearchbox/SourceResult;
com.android.quicksearchbox.Source.getSuggestions(Ljava/lang/String;IZ)Lcom/android/quicksearchbox/SourceResult;
com.android.mms.transaction.Transaction.process()V
com.android.settings.net.NetworkPolicyEditor$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.settings.widget.ChartDataUsageView$3.onSweep(Lcom/android/settings/widget/ChartSweepView;Z)V
com.android.systemui.statusbar.phone.PhoneStatusBar.start()V
com.android.systemui.statusbar.tablet.TabletStatusBar.start()V
com.android.systemui.SystemUI.start()V
android.content.ContentService.main(Landroid/content/Context;Z)Landroid/content/IContentService;
com.android.email.activity.ActionBarController.onAccountSpinnerItemClicked(I)V
com.android.email.activity.ActionBarController.updateTitle()V
com.android.email.activity.EmailActivity.onBackPressed()V
com.android.email.activity.UIControllerBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.UIControllerBase.doAutoAdvance()V
com.android.email.activity.MessageFileViewFragment.updateAttachmentTab()V
com.android.email.activity.MessageViewFragmentBase.onResume()V
com.android.email.activity.MessageViewFragment.updateAttachmentTab()V
com.android.email.activity.MessageFileViewFragment.addAttachment(Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.email.activity.MessageViewFragmentBase.access$1900(Lcom/android/email/activity/MessageViewFragmentBase;Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.email.activity.MessageViewFragment.addAttachment(Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.gallery3d.gadget.WidgetService$PhotoRVFactory.getViewAt(I)Landroid/widget/RemoteViews;
com.android.gallery3d.data.MediaSet.reload()J
com.android.providers.downloads.DownloadService$UpdateThread.run()V
com.android.quicksearchbox.google.GoogleSuggestClient.getSuggestions(Ljava/lang/String;IZ)Lcom/android/quicksearchbox/SuggestionCursor;
com.android.quicksearchbox.SuggestionCursorProvider.getSuggestions(Ljava/lang/String;IZ)Lcom/android/quicksearchbox/SuggestionCursor;
com.android.quicksearchbox.SingleSourceCorpus.getSuggestions(Ljava/lang/String;IZ)Lcom/android/quicksearchbox/CorpusResult;
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.settings.widget.ChartSweepView$OnSweepListener.onSweep(Lcom/android/settings/widget/ChartSweepView;Z)V
com.android.systemui.SystemUIService.onCreate()V
com.android.email.activity.ActionBarController.access$800(Lcom/android/email/activity/ActionBarController;I)V
com.android.email.activity.ActionBarController.access$500(Lcom/android/email/activity/ActionBarController;)V
com.android.email.activity.ActionBarController.refreshInernal()V
com.android.email.activity.EmailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.UIControllerOnePane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.UIControllerTwoPane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.UIControllerBase$MessageOrderManagerCallback.onMessageNotFound()V
com.android.email.activity.UIControllerBase.onBeforeMessageGone()V
com.android.email.activity.UIControllerBase.onMessageNotExists()V
com.android.email.activity.UIControllerBase.onMessageSetUnread()V
com.android.email.activity.UIControllerBase.onRespondedToInvite(I)V
com.android.email.activity.UIControllerOnePane.doAutoAdvance()V
com.android.email.activity.UIControllerSearchTwoPane.doAutoAdvance()V
com.android.email.activity.UIControllerTwoPane.doAutoAdvance()V
com.android.email.activity.MessageFileViewFragment.onResume()V
com.android.email.activity.MessageViewFragment.onResume()V
com.android.email.activity.MessageFileViewFragment.access$1900(Lcom/android/email/activity/MessageViewFragmentBase;Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.onSuccess([Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.email.activity.MessageViewFragment.access$1900(Lcom/android/email/activity/MessageViewFragmentBase;Lcom/android/emailcommon/provider/EmailContent$Attachment;)V
com.android.gallery3d.app.AlbumDataLoader$ReloadTask.run()V
com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask.run()V
com.android.gallery3d.app.PhotoDataAdapter$ReloadTask.run()V
com.android.gallery3d.app.SlideshowPage$SequentialSource.reload()J
com.android.gallery3d.app.SlideshowPage$ShuffleSource.reload()J
com.android.gallery3d.data.ClusterAlbum.reload()J
com.android.gallery3d.data.ComboAlbum.reload()J
com.android.gallery3d.data.ComboAlbumSet.reload()J
com.android.gallery3d.data.FilterDeleteSet.reload()J
com.android.gallery3d.data.FilterTypeSet.reload()J
com.android.gallery3d.data.FilterTypeSet.updateData()V
com.android.gallery3d.data.LocalAlbumSet.reload()J
com.android.gallery3d.data.LocalMergeAlbum.reload()J
com.android.gallery3d.data.MtpDeviceSet.reload()J
com.android.gallery3d.gadget.MediaSetSource.reload()V
com.android.quicksearchbox.QueryTask.run()V
com.android.quicksearchbox.AppsCorpus.getSuggestions(Ljava/lang/String;IZ)Lcom/android/quicksearchbox/CorpusResult;
com.android.quicksearchbox.SingleSourceCorpus.getSuggestions(Ljava/lang/String;IZ)Lcom/android/quicksearchbox/SuggestionCursor;
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.settings.widget.ChartSweepView.dispatchOnSweep(Z)V
com.android.email.activity.ActionBarController$AccountDropdownPopup$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.email.activity.ActionBarController$3.onLoaderReset(Landroid/content/Loader;)V
com.android.email.activity.ActionBarController$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.email.activity.ActionBarController.access$200(Lcom/android/email/activity/ActionBarController;)V
com.android.email.activity.UIControllerSearchTwoPane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.MessageOrderManager$Callback.onMessageNotFound()V
com.android.email.activity.MessageViewFragment$Callback.onBeforeMessageGone()V
com.android.email.activity.UIControllerOnePane.onBeforeMessageGone()V
com.android.email.activity.UIControllerTwoPane.onBeforeMessageGone()V
com.android.email.activity.MessageViewFragmentBase$Callback.onMessageNotExists()V
com.android.email.activity.UIControllerOnePane.onMessageNotExists()V
com.android.email.activity.UIControllerTwoPane.onMessageNotExists()V
com.android.email.activity.MessageViewFragment$Callback.onMessageSetUnread()V
com.android.email.activity.UIControllerOnePane.onMessageSetUnread()V
com.android.email.activity.UIControllerTwoPane.onMessageSetUnread()V
com.android.email.activity.MessageViewFragment$Callback.onRespondedToInvite(I)V
com.android.email.activity.UIControllerOnePane.onRespondedToInvite(I)V
com.android.email.activity.UIControllerTwoPane.onRespondedToInvite(I)V
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.onSuccess(Ljava/lang/Object;)V
com.android.gallery3d.app.AlbumDataLoader.resume()V
com.android.gallery3d.app.AlbumSetDataLoader.resume()V
com.android.gallery3d.app.PhotoDataAdapter.resume()V
com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource.reload()J
com.android.gallery3d.gadget.WidgetSource.reload()V
com.android.quicksearchbox.util.NamedTask.run()V
com.android.quicksearchbox.AppsCorpus.getSuggestions(Ljava/lang/String;IZ)Lcom/android/quicksearchbox/SuggestionCursor;
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
com.android.settings.widget.ChartSweepView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.email.activity.ActionBarController$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.email.activity.ActionBarController$2.run()V
com.android.email.activity.MessageOrderManager$PostingCallback$2.run()V
com.android.email.activity.MessageOrderManager.adjustCursorPosition()V
com.android.email.activity.MessageViewFragment.onDelete()V
com.android.email.activity.MessageViewFragment.onMoveToMailboxSelected(J[J)V
com.android.email.activity.UIControllerSearchTwoPane.onBeforeMessageGone()V
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.onSuccess(Lcom/android/emailcommon/provider/EmailContent$Message;)V
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.onSuccess(Lcom/android/emailcommon/provider/EmailContent$Message;)V
com.android.email.activity.UIControllerSearchTwoPane.onMessageNotExists()V
com.android.email.activity.MessageViewFragment.onMarkMessageAsRead(Z)V
com.android.email.activity.UIControllerSearchTwoPane.onMessageSetUnread()V
com.android.email.activity.MessageViewFragment.onRespondToInvite(II)V
com.android.email.activity.UIControllerSearchTwoPane.onRespondedToInvite(I)V
com.android.emailcommon.utility.EmailAsyncTask.onSuccess(Ljava/lang/Object;)V
com.android.gallery3d.app.AlbumPage.onResume()V
com.android.gallery3d.app.AlbumSetPage.onResume()V
com.android.gallery3d.app.ManageCachePage.onResume()V
com.android.gallery3d.app.PhotoPage$Model.resume()V
com.android.gallery3d.app.SlideshowDataAdapter.loadItem()Lcom/android/gallery3d/data/MediaItem;
com.android.gallery3d.gadget.WidgetService$PhotoRVFactory.onDataSetChanged()V
com.android.quicksearchbox.util.SingleThreadNamedTaskExecutor$Worker.loop()V
com.android.email.activity.MessageOrderManager.moveTo(J)V
com.android.email.activity.MessageOrderManager.onCursorOpenDone(Landroid/database/Cursor;)V
com.android.email.activity.MessageViewFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.MoveMessageToDialog$Callback.onMoveToMailboxSelected(J[J)V
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragment.onMarkAsUnread()V
com.android.email.activity.MessageViewFragment.onPostLoadBody()V
com.android.email.activity.MessageViewFragment.onClick(Landroid/view/View;)V
com.android.emailcommon.utility.EmailAsyncTask$1.onSuccess(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.onPostExecute(Ljava/lang/Object;)V
com.android.gallery3d.app.ActivityState.onResume()V
com.android.gallery3d.app.PhotoPage.onResume()V
com.android.gallery3d.app.SlideshowDataAdapter.access$500(Lcom/android/gallery3d/app/SlideshowDataAdapter;)Lcom/android/gallery3d/data/MediaItem;
com.android.quicksearchbox.util.SingleThreadNamedTaskExecutor$Worker.run()V
com.android.email.activity.UIControllerBase.updateMessageOrderManager()V
com.android.email.activity.MessageOrderManager$LoadMessageListTask.onCancelled(Landroid/database/Cursor;)V
com.android.email.activity.MessageOrderManager$LoadMessageListTask.onSuccess(Landroid/database/Cursor;)V
com.android.email.activity.MessageViewFragmentBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.MoveMessageToDialog.onClick(Landroid/content/DialogInterface;I)V
com.android.email.activity.MessageViewFragmentBase.onPostLoadBody()V
com.android.email.activity.MessageViewFragmentBase.onClick(Landroid/view/View;)V
com.android.emailcommon.utility.EmailAsyncTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.gallery3d.app.ActivityState.resume()V
com.android.gallery3d.app.SlideshowPage.onResume()V
com.android.email.activity.UIControllerBase.installMessageViewFragment(Lcom/android/email/activity/MessageViewFragment;)V
com.android.email.activity.UIControllerBase.onActivityStart()V
com.android.email.activity.UIControllerOnePane.updateMessageOrderManager()V
com.android.email.activity.UIControllerSearchTwoPane.updateMessageOrderManager()V
com.android.email.activity.UIControllerTwoPane.updateMessageOrderManager()V
com.android.email.activity.MessageOrderManager$LoadMessageListTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageOrderManager$LoadMessageListTask.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.MessageFileViewFragment.onPostLoadBody()V
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.onSuccess([Ljava/lang/String;)V
com.android.email.activity.MessageFileViewFragment.onClick(Landroid/view/View;)V
com.android.email.activity.MailboxFinder$FindMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$6.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$LoadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$QuickResponseChecker.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageFileView$LoadFilenameTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageList$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageListFragment$MessageOpenTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSetupNames$2.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$2.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.UIControllerTwoPane$RefreshTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.gallery3d.app.AlbumPage.resume()V
com.android.gallery3d.app.AlbumSetPage.resume()V
com.android.gallery3d.app.ManageCachePage.resume()V
com.android.gallery3d.app.PhotoPage.resume()V
com.android.gallery3d.app.SlideshowPage.resume()V
com.android.gallery3d.app.StateManager.finishState(Lcom/android/gallery3d/app/ActivityState;)V
com.android.gallery3d.app.StateManager.resume()V
com.android.gallery3d.app.StateManager.startStateForResult(Ljava/lang/Class;ILandroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.startState(Ljava/lang/Class;Landroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.switchState(Lcom/android/gallery3d/app/ActivityState;Ljava/lang/Class;Landroid/os/Bundle;)V
com.android.email.activity.UIControllerBase.onInstallFragment(Landroid/app/Fragment;)V
com.android.email.activity.UIControllerOnePane.installMessageViewFragment(Lcom/android/email/activity/MessageViewFragment;)V
com.android.email.activity.UIControllerTwoPane.installMessageViewFragment(Lcom/android/email/activity/MessageViewFragment;)V
com.android.email.activity.EmailActivity.onStart()V
com.android.email.activity.UIControllerOnePane.onActivityStart()V
com.android.email.activity.UIControllerTwoPane.onActivityStart()V
com.android.emailcommon.utility.EmailAsyncTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.onSuccess(Ljava/lang/Object;)V
com.android.gallery3d.app.ActivityState.onBackPressed()V
com.android.gallery3d.app.AlbumPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage.clearLoadingBit(I)V
com.android.gallery3d.app.AlbumSetPage.clearLoadingBit(I)V
com.android.gallery3d.app.PhotoPage$2.onLoadingFinished()V
com.android.gallery3d.app.SlideshowPage.showPendingBitmap()V
com.android.gallery3d.app.AbstractGalleryActivity.onResume()V
com.android.gallery3d.app.AlbumPage.doCluster(I)V
com.android.gallery3d.app.AlbumPage.pickPhoto(I)V
com.android.gallery3d.app.AlbumSetPage.pickAlbum(I)V
com.android.gallery3d.app.PhotoPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.ActivityBase.createCameraScreenNail(Z)V
com.android.gallery3d.app.AlbumPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumSetPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.DialogPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.startDefaultPage()V
com.android.gallery3d.app.Gallery.startGetContent(Landroid/content/Intent;)V
com.android.gallery3d.app.Gallery.startViewAction(Landroid/content/Intent;)V
com.android.gallery3d.ui.ImportCompleteListener.goToImportedAlbum()V
com.android.gallery3d.app.AlbumPage.onUpPressed()V
com.android.gallery3d.app.AlbumSetPage.doCluster(I)V
com.android.gallery3d.app.PhotoPage.onUpPressed()V
com.android.email.activity.EmailActivity.onInstallFragment(Landroid/app/Fragment;)V
com.android.email.activity.UIControllerOnePane.onInstallFragment(Landroid/app/Fragment;)V
com.android.email.activity.UIControllerSearchTwoPane.onInstallFragment(Landroid/app/Fragment;)V
com.android.email.activity.UIControllerTwoPane.onInstallFragment(Landroid/app/Fragment;)V
com.android.email.activity.UIControllerSearchTwoPane.installMessageViewFragment(Lcom/android/email/activity/MessageViewFragment;)V
com.android.email.activity.UIControllerSearchTwoPane.onActivityStart()V
com.android.email.activity.MailboxFinder$FindMailboxTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$6.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$LoadMessageTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$QuickResponseChecker.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageFileView$LoadFilenameTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageList$1.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageListFragment$MessageOpenTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$1.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSetupNames$2.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$2.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.onCancelled(Ljava/lang/Object;)V
com.android.email.activity.UIControllerTwoPane$RefreshTask.onCancelled(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$1.onCancelled(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.onCancelled(Ljava/lang/Object;)V
com.android.gallery3d.app.AlbumSetPage.onBackPressed()V
com.android.gallery3d.app.ManageCachePage.onBackPressed()V
com.android.gallery3d.app.PhotoPage.onBackPressed()V
com.android.gallery3d.app.SlideshowPage.onBackPressed()V
com.android.gallery3d.app.StateManager.itemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.StateManager.onBackPressed()V
com.android.gallery3d.app.ActivityState.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage$5.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage.access$1600(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumPage.onPause()V
com.android.gallery3d.app.AlbumSetPage.access$1600(Lcom/android/gallery3d/app/AlbumSetPage;I)V
com.android.gallery3d.app.AlbumSetPage.onPause()V
com.android.gallery3d.app.LoadingListener.onLoadingFinished()V
com.android.gallery3d.app.PhotoDataAdapter$DataListener.onLoadingFinished()V
com.android.gallery3d.app.SlideshowPage.access$100(Lcom/android/gallery3d/app/SlideshowPage;)V
com.android.camera.ActivityBase.onResume()V
com.android.gallery3d.app.AlbumPicker.onResume()V
com.android.gallery3d.app.CropImage.onResume()V
com.android.gallery3d.app.DialogPicker.onResume()V
com.android.gallery3d.app.Gallery.onResume()V
com.android.gallery3d.app.PickerActivity.onResume()V
com.android.gallery3d.app.GalleryActionBar$ClusterRunner.doCluster(I)V
com.android.gallery3d.app.AlbumPage.access$900(Lcom/android/gallery3d/app/AlbumPage;I)V
com.android.gallery3d.app.AlbumSetPage.access$1000(Lcom/android/gallery3d/app/AlbumSetPage;I)V
com.android.camera.Camera.createCameraScreenNail(Z)V
com.android.camera.PanoramaActivity.createCameraScreenNail(Z)V
com.android.camera.VideoCamera.createCameraScreenNail(Z)V
com.android.gallery3d.app.AbstractGalleryActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.PickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumSetPage$4.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.Gallery.initializeByIntent()V
com.android.gallery3d.ui.ImportCompleteListener.onProgressComplete(I)V
com.android.gallery3d.app.AlbumPage.onBackPressed()V
com.android.email.activity.FragmentInstallable.onInstallFragment(Landroid/app/Fragment;)V
com.android.emailcommon.utility.EmailAsyncTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.gallery3d.app.ManageCachePage.onClick(Landroid/view/View;)V
com.android.gallery3d.app.ManageCachePage.onProgressComplete(I)V
com.android.gallery3d.app.SlideshowPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AbstractGalleryActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AbstractGalleryActivity.onBackPressed()V
com.android.gallery3d.app.ManageCachePage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.SlideshowPage.onItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.ui.ActionModeHandler$ActionModeListener.onActionItemClicked(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AlbumPage$7.run()V
com.android.gallery3d.app.AlbumPage$MyLoadingListener.onLoadingFinished()V
com.android.gallery3d.app.ActivityState.onPause()V
com.android.gallery3d.app.AlbumSetPage$6.run()V
com.android.gallery3d.app.AlbumSetPage$MyLoadingListener.onLoadingFinished()V
com.android.gallery3d.app.AlbumSetDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.camera.Camera.onResume()V
com.android.camera.PanoramaActivity.onResume()V
com.android.camera.VideoCamera.onResume()V
com.android.gallery3d.app.GalleryActionBar$1.onClick(Landroid/content/DialogInterface;I)V
com.android.gallery3d.app.GalleryActionBar.onNavigationItemSelected(IJ)Z
com.android.camera.Camera.onCreate(Landroid/os/Bundle;)V
com.android.camera.PanoramaActivity.onCreate(Landroid/os/Bundle;)V
com.android.camera.VideoCamera.onCreate(Landroid/os/Bundle;)V
com.android.camera.ActivityBase.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.CropImage.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.ui.MenuExecutor$ProgressListener.onProgressComplete(I)V
com.android.email.activity.UiUtilities.installFragment(Landroid/app/Fragment;)V
com.android.email.activity.MailboxFinder$FindMailboxTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$6.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$LoadMessageTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$QuickResponseChecker.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageFileView$LoadFilenameTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageList$1.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageListFragment$MessageOpenTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$1.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSetupNames$2.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$2.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.email.activity.UIControllerTwoPane$RefreshTask.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$1.callOnCancelledForTest(Ljava/lang/Object;)V
com.android.gallery3d.ui.GLView.onTouch(Landroid/view/MotionEvent;)Z
com.android.camera.ActivityBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.Camera.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.PanoramaActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.VideoCamera.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.Gallery.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.PickerActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.ActivityBase.onBackPressed()V
com.android.gallery3d.app.AlbumPicker.onBackPressed()V
com.android.gallery3d.app.DialogPicker.onBackPressed()V
com.android.gallery3d.app.Gallery.onBackPressed()V
com.android.gallery3d.app.PickerActivity.onBackPressed()V
com.android.gallery3d.ui.ActionModeHandler.onActionItemClicked(Landroid/view/ActionMode;Landroid/view/MenuItem;)Z
com.android.gallery3d.app.ManageCachePage.onPause()V
com.android.gallery3d.app.PhotoPage.onPause()V
com.android.gallery3d.app.SlideshowPage.onPause()V
com.android.gallery3d.app.StateManager.pause()V
com.android.gallery3d.app.AlbumSetDataLoader.access$1900(Lcom/android/gallery3d/app/AlbumSetDataLoader;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.PhotoDataAdapter.access$2500(Lcom/android/gallery3d/app/PhotoDataAdapter;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.app.AlbumDataLoader.access$1700(Lcom/android/gallery3d/app/AlbumDataLoader;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
com.android.gallery3d.ui.MenuExecutor.onProgressComplete(ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.email.activity.MailboxListFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.email.activity.MessageListFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.email.activity.MessageViewFragmentBase.onActivityCreated(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumPage$2.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumSetPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ManageCachePage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.PhotoPage$1.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.EdgeView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.ScrollBarView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlideshowView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.TileImageView.onTouch(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumPicker.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.DialogPicker.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.camera.Camera.onBackPressed()V
com.android.camera.PanoramaActivity.onBackPressed()V
com.android.camera.VideoCamera.onBackPressed()V
com.android.gallery3d.ui.ActionModeHandler$1.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.gallery3d.app.AbstractGalleryActivity.onPause()V
com.android.gallery3d.ui.MenuExecutor.access$700(Lcom/android/gallery3d/ui/MenuExecutor;ILcom/android/gallery3d/ui/MenuExecutor$ProgressListener;)V
com.android.email.activity.MessageFileViewFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.email.activity.MessageViewFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.gallery3d.app.AlbumPage$2.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.AlbumSetPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.ManageCachePage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.PhotoPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.SlideshowPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.EdgeView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLRootView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.GLRootView.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.GLView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.GLView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.ScrollBarView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlideshowView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.SlotView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.TileImageView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.ui.UndoBarView.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
com.android.camera.ActivityBase.onPause()V
com.android.gallery3d.app.AlbumPicker.onPause()V
com.android.gallery3d.app.CropImage.onPause()V
com.android.gallery3d.app.DialogPicker.onPause()V
com.android.gallery3d.app.Gallery.onPause()V
com.android.gallery3d.app.PickerActivity.onPause()V
com.android.gallery3d.ui.MenuExecutor$MediaOperation.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Void;
com.android.gallery3d.ui.GLRoot.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage$2.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.AlbumSetPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.ManageCachePage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.PhotoPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.SlideshowPage$1.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.EdgeView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.PhotoView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.ScrollBarView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.SlideshowView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.SlotView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.TileImageView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.ui.UndoBarView.dispatchTouchEvent(Landroid/view/MotionEvent;IILcom/android/gallery3d/ui/GLView;Z)Z
com.android.gallery3d.app.AlbumPage$2.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage$1.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$FaceHighlightView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$HighlightRectangle.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.EdgeView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.GLView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.GLView.removeAllComponents()V
com.android.gallery3d.ui.PhotoView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.ScrollBarView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlideshowView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlotView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.TileImageView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.UndoBarView.removeOneComponent(Lcom/android/gallery3d/ui/GLView;)V
com.android.camera.Camera.onPause()V
com.android.camera.PanoramaActivity.onPause()V
com.android.camera.VideoCamera.onPause()V
com.android.gallery3d.ui.MenuExecutor$MediaOperation.run(Lcom/android/gallery3d/util/ThreadPool$JobContext;)Ljava/lang/Object;
com.android.gallery3d.app.ActivityState.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumPage$2.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.AlbumSetPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.ManageCachePage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.PhotoPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.SlideshowPage$1.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView$FaceHighlightView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.CropView$HighlightRectangle.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.EdgeView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.PhotoView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.ScrollBarView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.SlideshowView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.SlotView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.TileImageView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.ui.UndoBarView.removeComponent(Lcom/android/gallery3d/ui/GLView;)Z
com.android.gallery3d.app.AlbumPage$2.removeAllComponents()V
com.android.gallery3d.app.AlbumSetPage$1.removeAllComponents()V
com.android.gallery3d.app.ManageCachePage$1.removeAllComponents()V
com.android.gallery3d.app.PhotoPage$1.removeAllComponents()V
com.android.gallery3d.app.SlideshowPage$1.removeAllComponents()V
com.android.gallery3d.ui.CropView$FaceHighlightView.removeAllComponents()V
com.android.gallery3d.ui.CropView$HighlightRectangle.removeAllComponents()V
com.android.gallery3d.ui.CropView.removeAllComponents()V
com.android.gallery3d.ui.EdgeView.removeAllComponents()V
com.android.gallery3d.ui.PhotoView.removeAllComponents()V
com.android.gallery3d.ui.ScrollBarView.removeAllComponents()V
com.android.gallery3d.ui.SlideshowView.removeAllComponents()V
com.android.gallery3d.ui.SlotView.removeAllComponents()V
com.android.gallery3d.ui.TileImageView.removeAllComponents()V
com.android.gallery3d.ui.UndoBarView.removeAllComponents()V
com.android.gallery3d.app.AlbumPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage.setContentPane(Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage.initializeViews()V
com.android.gallery3d.app.SlideshowPage.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.app.ActivityState.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V
com.android.gallery3d.app.StateManager.restoreFromState(Landroid/os/Bundle;)V
com.android.server.ConnectivityService.enforceTetherAccessPermission()V
com.android.server.ConnectivityService.isTetheringSupported()Z
com.android.server.ConnectivityService.getLastTetherError(Ljava/lang/String;)I
com.android.server.ConnectivityService.setUsbTethering(Z)I
com.android.server.ConnectivityService.getTetherableBluetoothRegexs()[Ljava/lang/String;
com.android.server.ConnectivityService.getTetherableIfaces()[Ljava/lang/String;
com.android.server.ConnectivityService.getTetherableUsbRegexs()[Ljava/lang/String;
com.android.server.ConnectivityService.getTetherableWifiRegexs()[Ljava/lang/String;
com.android.server.ConnectivityService.getTetheredIfacePairs()[Ljava/lang/String;
com.android.server.ConnectivityService.getTetheredIfaces()[Ljava/lang/String;
com.android.server.ConnectivityService.getTetheringErroredIfaces()[Ljava/lang/String;
android.net.IConnectivityManager$Stub$Proxy.isTetheringSupported()Z
android.net.IConnectivityManager$Stub.isTetheringSupported()Z
com.android.server.ConnectivityService.tether(Ljava/lang/String;)I
com.android.server.ConnectivityService.untether(Ljava/lang/String;)I
com.android.server.ConnectivityService.handleConnectivityChange(IZ)V
android.net.IConnectivityManager$Stub$Proxy.getLastTetherError(Ljava/lang/String;)I
android.net.IConnectivityManager$Stub.getLastTetherError(Ljava/lang/String;)I
android.net.IConnectivityManager$Stub$Proxy.setUsbTethering(Z)I
android.net.IConnectivityManager$Stub.setUsbTethering(Z)I
android.net.IConnectivityManager$Stub$Proxy.getTetherableBluetoothRegexs()[Ljava/lang/String;
android.net.IConnectivityManager$Stub.getTetherableBluetoothRegexs()[Ljava/lang/String;
android.net.IConnectivityManager$Stub$Proxy.getTetherableIfaces()[Ljava/lang/String;
android.net.IConnectivityManager$Stub.getTetherableIfaces()[Ljava/lang/String;
android.net.IConnectivityManager$Stub$Proxy.getTetherableUsbRegexs()[Ljava/lang/String;
android.net.IConnectivityManager$Stub.getTetherableUsbRegexs()[Ljava/lang/String;
android.net.IConnectivityManager$Stub$Proxy.getTetherableWifiRegexs()[Ljava/lang/String;
android.net.IConnectivityManager$Stub.getTetherableWifiRegexs()[Ljava/lang/String;
android.net.IConnectivityManager$Stub$Proxy.getTetheredIfacePairs()[Ljava/lang/String;
android.net.IConnectivityManager$Stub.getTetheredIfacePairs()[Ljava/lang/String;
android.net.IConnectivityManager$Stub$Proxy.getTetheredIfaces()[Ljava/lang/String;
android.net.IConnectivityManager$Stub.getTetheredIfaces()[Ljava/lang/String;
android.net.IConnectivityManager$Stub$Proxy.getTetheringErroredIfaces()[Ljava/lang/String;
android.net.IConnectivityManager$Stub.getTetheringErroredIfaces()[Ljava/lang/String;
android.net.IConnectivityManager.isTetheringSupported()Z
android.net.IConnectivityManager$Stub$Proxy.tether(Ljava/lang/String;)I
android.net.IConnectivityManager$Stub.tether(Ljava/lang/String;)I
android.net.IConnectivityManager$Stub$Proxy.untether(Ljava/lang/String;)I
android.net.IConnectivityManager$Stub.untether(Ljava/lang/String;)I
com.android.server.ConnectivityService.access$1200(Lcom/android/server/ConnectivityService;IZ)V
com.android.server.ConnectivityService.handleConnect(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.handleDisconnect(Landroid/net/NetworkInfo;)V
android.net.IConnectivityManager.getLastTetherError(Ljava/lang/String;)I
android.net.IConnectivityManager.setUsbTethering(Z)I
android.net.IConnectivityManager.getTetherableBluetoothRegexs()[Ljava/lang/String;
android.net.IConnectivityManager.getTetherableIfaces()[Ljava/lang/String;
android.net.IConnectivityManager.getTetherableUsbRegexs()[Ljava/lang/String;
android.net.IConnectivityManager.getTetherableWifiRegexs()[Ljava/lang/String;
android.net.IConnectivityManager.getTetheredIfacePairs()[Ljava/lang/String;
android.net.IConnectivityManager.getTetheredIfaces()[Ljava/lang/String;
android.net.IConnectivityManager.getTetheringErroredIfaces()[Ljava/lang/String;
android.net.ConnectivityManager.isTetheringSupported()Z
com.android.server.connectivity.Tethering.sendTetherStateChangedBroadcast()V
android.net.IConnectivityManager.tether(Ljava/lang/String;)I
android.net.IConnectivityManager.untether(Ljava/lang/String;)I
com.android.server.ConnectivityService.access$1100(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.access$1000(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
android.net.ConnectivityManager.getLastTetherError(Ljava/lang/String;)I
android.net.ConnectivityManager.setUsbTethering(Z)I
android.net.ConnectivityManager.getTetherableBluetoothRegexs()[Ljava/lang/String;
android.net.ConnectivityManager.getTetherableIfaces()[Ljava/lang/String;
android.net.ConnectivityManager.getTetherableUsbRegexs()[Ljava/lang/String;
android.net.ConnectivityManager.getTetherableWifiRegexs()[Ljava/lang/String;
com.android.server.net.NetworkStatsService.getNetworkStatsTethering()Landroid/net/NetworkStats;
android.net.ConnectivityManager.getTetheredIfaces()[Ljava/lang/String;
android.net.ConnectivityManager.getTetheringErroredIfaces()[Ljava/lang/String;
com.android.server.connectivity.Tethering.access$900(Lcom/android/server/connectivity/Tethering;)V
android.net.ConnectivityManager.tether(Ljava/lang/String;)I
android.net.ConnectivityManager.untether(Ljava/lang/String;)I
com.android.settings.TetherSettings.updateUsbState([Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.settings.TetherSettings.setUsbTethering(Z)V
android.server.BluetoothPanProfileHandler.enableTethering(Ljava/lang/String;)Ljava/lang/String;
com.android.settings.Utils.getTetheringLabel(Landroid/net/ConnectivityManager;)I
com.android.settings.TetherSettings.updateState()V
android.net.wifi.WifiStateMachine.isWifiTethered(Ljava/util/ArrayList;)Z
android.net.wifi.WifiStateMachine.startTethering(Ljava/util/ArrayList;)Z
com.android.settings.wifi.WifiApEnabler.<init>(Landroid/content/Context;Landroid/preference/CheckBoxPreference;)V
com.android.server.net.NetworkStatsService.getNetworkStatsUidDetail()Landroid/net/NetworkStats;
com.android.settings.TetherSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState.enter()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState.enter()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.enter()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState.enter()V
android.net.wifi.WifiStateMachine.stopTethering()V
com.android.settings.TetherSettings.updateState([Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.settings.TetherSettings.startTethering()V
android.server.BluetoothPanProfileHandler.handlePanDeviceStateChange(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;II)V
com.android.settings.net.UidDetailProvider.buildUidDetail(I)Lcom/android/settings/net/UidDetail;
com.android.settings.TetherSettings.access$300(Lcom/android/settings/TetherSettings;)V
com.android.settings.TetherSettings.onStart()V
android.net.wifi.WifiStateMachine.access$16400(Landroid/net/wifi/WifiStateMachine;Ljava/util/ArrayList;)Z
android.net.wifi.WifiStateMachine.access$16000(Landroid/net/wifi/WifiStateMachine;Ljava/util/ArrayList;)Z
com.android.server.net.NetworkStatsService.bootstrapStatsLocked()V
com.android.server.net.NetworkStatsService.performPollLocked(I)V
android.net.wifi.WifiStateMachine.access$16800(Landroid/net/wifi/WifiStateMachine;)V
com.android.settings.TetherSettings.access$100(Lcom/android/settings/TetherSettings;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.settings.TetherSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.startProvisioningIfNecessary(I)V
android.server.BluetoothPanProfileHandler.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothPanProfileHandler.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothPanProfileHandler.disconnectPanServerDevices()Z
android.server.BluetoothService.handlePanDeviceStateChange(Landroid/bluetooth/BluetoothDevice;II)V
android.server.BluetoothService.handlePanDeviceStateChange(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;II)V
com.android.settings.net.UidDetailProvider.getUidDetail(IZ)Lcom/android/settings/net/UidDetail;
com.android.settings.TetherSettings$TetherChangeReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.SettingsPreferenceFragment.onStart()V
android.net.wifi.WifiStateMachine$SoftApStoppingState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$TetheredState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$TetheringState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$SoftApStartedState.processMessage(Landroid/os/Message;)Z
com.android.server.net.NetworkStatsService.systemReady()V
com.android.server.net.NetworkStatsService.dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
com.android.server.net.NetworkStatsService.performPoll(I)V
com.android.server.net.NetworkStatsService.removeUidLocked(I)V
com.android.settings.SettingsPreferenceFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
android.server.BluetoothService.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothPanProfileHandler.setBluetoothTethering(Z)V
android.server.BluetoothEventLoop.onNetworkDeviceDisconnected(Ljava/lang/String;)V
android.server.BluetoothEventLoop.onPanDeviceConnectionResult(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onPanDevicePropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothEventLoop.onNetworkDeviceConnected(Ljava/lang/String;Ljava/lang/String;I)V
com.android.settings.DataUsageSummary$8.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.settings.DataUsageSummary$UidDetailTask.doInBackground([Ljava/lang/Void;)Lcom/android/settings/net/UidDetail;
com.android.settings.DataUsageSummary$UidDetailTask.bindView(Lcom/android/settings/net/UidDetailProvider;Lcom/android/settings/DataUsageSummary$AppItem;Landroid/view/View;)V
com.android.settings.LocationSettings.onStart()V
com.android.server.ServerThread$1.run()V
com.android.server.net.NetworkStatsService.access$700(Lcom/android/server/net/NetworkStatsService;I)V
com.android.server.net.NetworkStatsService.access$1000(Lcom/android/server/net/NetworkStatsService;I)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.LocationSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.SecuritySettings.onActivityResult(IILandroid/content/Intent;)V
android.bluetooth.IBluetooth$Stub$Proxy.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub$Proxy.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectDevices()V
android.server.BluetoothService.setBluetoothTethering(Z)V
com.android.settings.DataUsageSummary$UidDetailTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.settings.DataUsageSummary$DataUsageAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.server.net.NetworkStatsService$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkStatsService$4.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkStatsService$5.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.IBluetooth.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.IBluetooth.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothAdapterStateMachine$BluetoothOn.processMessage(Landroid/os/Message;)Z
android.server.BluetoothAdapterStateMachine$PerProcessState.processMessage(Landroid/os/Message;)Z
android.bluetooth.IBluetooth$Stub$Proxy.setBluetoothTethering(Z)V
android.bluetooth.IBluetooth$Stub.setBluetoothTethering(Z)V
android.bluetooth.BluetoothPan.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.BluetoothPan.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth.setBluetoothTethering(Z)V
com.android.settings.bluetooth.PanProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothTetheringDataTracker.teardown()Z
com.android.settings.bluetooth.PanProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothPan.setBluetoothTethering(Z)V
com.android.settings.bluetooth.LocalBluetoothProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.net.NetworkStateTracker.teardown()Z
com.android.settings.bluetooth.LocalBluetoothProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.CachedBluetoothDevice.connectInt(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.server.ConnectivityService.teardown(Landroid/net/NetworkStateTracker;)Z
com.android.server.ConnectivityService.stopUsingNetworkFeature(Lcom/android/server/ConnectivityService$FeatureUser;Z)I
com.android.settings.bluetooth.CachedBluetoothDevice.disconnect(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.CachedBluetoothDevice.connectAutoConnectableProfiles()V
com.android.settings.bluetooth.CachedBluetoothDevice.connectProfile(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.CachedBluetoothDevice.connectWithoutResettingTimer(Z)V
com.android.server.ConnectivityService.enforcePreference()V
com.android.server.ConnectivityService.access$200(Lcom/android/server/ConnectivityService;Lcom/android/server/ConnectivityService$FeatureUser;Z)I
com.android.server.ConnectivityService.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.settings.bluetooth.CachedBluetoothDevice.disconnect()V
com.android.settings.bluetooth.DeviceProfilesSettings$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.applyBtSettings(Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.bluetooth.DeviceProfilesSettings.onProfileClicked(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.DockService.handleUnexpectedDisconnect(Landroid/bluetooth/BluetoothDevice;Lcom/android/settings/bluetooth/LocalBluetoothProfile;I)V
com.android.settings.bluetooth.CachedBluetoothDevice.connect(Z)V
com.android.settings.bluetooth.CachedBluetoothDevice.onUuidChanged()V
com.android.server.ConnectivityService.handleSetNetworkPreference(I)V
com.android.server.ConnectivityService$FeatureUser.binderDied()V
com.android.server.ConnectivityService$FeatureUser.expire()V
android.net.IConnectivityManager$Stub$Proxy.stopUsingNetworkFeature(ILjava/lang/String;)I
android.net.IConnectivityManager$Stub.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.settings.bluetooth.BluetoothDevicePreference$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.CachedBluetoothDevice.unpair()V
com.android.settings.bluetooth.DockService.handleUndocked(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DockService.access$700(Lcom/android/settings/bluetooth/DockService;Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.bluetooth.DockService.handleBluetoothStateOn(I)V
com.android.settings.bluetooth.DockService.handleDocked(Landroid/bluetooth/BluetoothDevice;II)V
com.android.settings.bluetooth.DeviceProfilesSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.bluetooth.DockService.onStartCommand(Landroid/content/Intent;II)I
com.android.settings.bluetooth.BluetoothDevicePreference.onClicked()V
com.android.settings.bluetooth.CachedBluetoothDevice.onBondingDockConnect()V
com.android.settings.bluetooth.CachedBluetoothDevice.onBondingStateChanged(I)V
com.android.settings.bluetooth.DockService.connectIfEnabled(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onUuidChanged(Landroid/bluetooth/BluetoothDevice;)V
com.android.server.ConnectivityService.access$1800(Lcom/android/server/ConnectivityService;I)V
com.android.server.ConnectivityService$FeatureUser.<init>(Lcom/android/server/ConnectivityService;ILjava/lang/String;Landroid/os/IBinder;)V
com.android.server.ConnectivityService.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.settings.bluetooth.DeviceProfilesSettings.unpairDevice()V
com.android.settings.bluetooth.DockService.msgTypeDocked(Landroid/bluetooth/BluetoothDevice;II)Z
com.android.settings.bluetooth.DockService.msgTypeUndockedPermanent(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.settings.bluetooth.DockService$5.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.handleBtStateChange(Landroid/content/Intent;I)V
com.android.settings.bluetooth.DockService.access$200(Lcom/android/settings/bluetooth/DockService;Landroid/bluetooth/BluetoothDevice;II)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.server.ConnectivityService.setNetworkPreference(I)V
android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager$Stub.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.ConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOffUpstreamMobileConnection()Z
com.android.settings.bluetooth.DeviceProfilesSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DockService.processMessage(Landroid/os/Message;)V
com.android.settings.bluetooth.DockService$1.run()V
com.android.settings.bluetooth.BluetoothSettings.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DevicePickerFragment.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.BluetoothEventManager$Handler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(I)V
android.net.IConnectivityManager$Stub.setNetworkPreference(I)V
android.net.IConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
com.android.development.Connectivity$3.onClick(Landroid/view/View;)V
com.android.mms.transaction.TransactionService.endMmsConnectivity()V
com.android.server.location.GpsLocationProvider.reportAGpsStatus(III)V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOffUpstreamMobileConnection()Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOffUpstreamMobileConnection()Z
com.android.settings.bluetooth.DockService.access$100(Lcom/android/settings/bluetooth/DockService;Landroid/os/Message;)V
com.android.settings.bluetooth.BluetoothSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DevicePickerFragment.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.BluetoothEventManager$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.IConnectivityManager.setNetworkPreference(I)V
android.net.ConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.exit()V
android.net.ConnectivityManager.setNetworkPreference(I)V
com.android.commands.svc.DataCommand.run([Ljava/lang/String;)V
com.android.commands.svc.WifiCommand.run([Ljava/lang/String;)V
com.android.development.Connectivity.onCrash()V
com.android.mms.transaction.TransactionService.beginMmsConnectivity()I
com.android.internal.util.State.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.exit()V
com.android.commands.svc.Svc$Command.run([Ljava/lang/String;)V
com.android.development.Connectivity.access$2600(Lcom/android/development/Connectivity;)V
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.exit()V
android.bluetooth.BluetoothProfileState$PendingCommandState.exit()V
android.bluetooth.BluetoothProfileState$StableState.exit()V
android.net.DhcpStateMachine$DefaultState.exit()V
android.net.DhcpStateMachine$RunningState.exit()V
android.net.DhcpStateMachine$StoppedState.exit()V
android.net.DhcpStateMachine$WaitBeforeStartState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState.exit()V
android.net.wifi.SupplicantStateTracker$CompletedState.exit()V
android.net.wifi.SupplicantStateTracker$DefaultState.exit()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.exit()V
android.net.wifi.SupplicantStateTracker$DormantState.exit()V
android.net.wifi.SupplicantStateTracker$HandshakeState.exit()V
android.net.wifi.SupplicantStateTracker$InactiveState.exit()V
android.net.wifi.SupplicantStateTracker$ScanState.exit()V
android.net.wifi.SupplicantStateTracker$UninitializedState.exit()V
android.net.wifi.WifiApConfigStore$ActiveState.exit()V
android.net.wifi.WifiApConfigStore$DefaultState.exit()V
android.net.wifi.WifiApConfigStore$InactiveState.exit()V
android.net.wifi.WifiStateMachine$ConnectModeState.exit()V
android.net.wifi.WifiStateMachine$DefaultState.exit()V
android.net.wifi.WifiStateMachine$DisconnectingState.exit()V
android.net.wifi.WifiStateMachine$DriverFailedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadingState.exit()V
android.net.wifi.WifiStateMachine$DriverStartingState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppedState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppingState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadedState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadingState.exit()V
android.net.wifi.WifiStateMachine$InitialState.exit()V
android.net.wifi.WifiStateMachine$ObtainingIpState.exit()V
android.net.wifi.WifiStateMachine$ScanModeState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartedState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartingState.exit()V
android.net.wifi.WifiStateMachine$SoftApStoppingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStartingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStoppingState.exit()V
android.net.wifi.WifiStateMachine$TetheredState.exit()V
android.net.wifi.WifiStateMachine$TetheringState.exit()V
android.net.wifi.WifiStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$ConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$DefaultState.exit()V
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState.exit()V
android.net.wifi.WifiWatchdogStateMachine$RssiMonitoringState.exit()V
android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WalledGardenCheckState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState.exit()V
android.server.BluetoothAdapterStateMachine$BluetoothOn.exit()V
android.server.BluetoothAdapterStateMachine$HotOff.exit()V
android.server.BluetoothAdapterStateMachine$PerProcessState.exit()V
android.server.BluetoothAdapterStateMachine$PowerOff.exit()V
android.server.BluetoothAdapterStateMachine$Switching.exit()V
android.server.BluetoothAdapterStateMachine$WarmUp.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.exit()V
com.android.internal.telephony.DataConnection$DcActivatingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.exit()V
com.android.internal.util.IState.exit()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.exit()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.exit()V
com.android.internal.util.StateMachine$SmHandler.invokeExitMethods(Lcom/android/internal/util/StateMachine$SmHandler$StateInfo;)V
com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState.exit()V
com.android.server.NsdService$NsdStateMachine$DefaultState.exit()V
com.android.server.NsdService$NsdStateMachine$DisabledState.exit()V
com.android.commands.svc.Svc.main([Ljava/lang/String;)V
com.android.server.net.NetworkStatsService.getDataLayerSnapshotForUid(I)Landroid/net/NetworkStats;
android.net.INetworkStatsService$Stub$Proxy.getDataLayerSnapshotForUid(I)Landroid/net/NetworkStats;
android.net.INetworkStatsService$Stub.getDataLayerSnapshotForUid(I)Landroid/net/NetworkStats;
android.net.INetworkStatsService.getDataLayerSnapshotForUid(I)Landroid/net/NetworkStats;
android.net.INetworkStatsService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.TrafficStats.getDataLayerSnapshotForUid(Landroid/content/Context;)Landroid/net/NetworkStats;
com.android.server.net.NetworkStatsService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.TrafficStats.stopDataProfiling(Landroid/content/Context;)Landroid/net/NetworkStats;
android.net.TrafficStats.startDataProfiling(Landroid/content/Context;)V
com.android.server.net.NetworkPolicyManagerService.getNetworkQuotaInfo(Landroid/net/NetworkState;)Landroid/net/NetworkQuotaInfo;
android.net.INetworkPolicyManager$Stub$Proxy.getNetworkQuotaInfo(Landroid/net/NetworkState;)Landroid/net/NetworkQuotaInfo;
android.net.INetworkPolicyManager$Stub.getNetworkQuotaInfo(Landroid/net/NetworkState;)Landroid/net/NetworkQuotaInfo;
android.net.INetworkPolicyManager.getNetworkQuotaInfo(Landroid/net/NetworkState;)Landroid/net/NetworkQuotaInfo;
com.android.server.ThrottleService.enforceAccessPermission()V
com.android.server.ThrottleService.getCliffLevel(Ljava/lang/String;I)I
com.android.server.ThrottleService.getThrottle(Ljava/lang/String;)I
com.android.server.ThrottleService.getHelpUri()Ljava/lang/String;
com.android.server.ThrottleService.getByteCount(Ljava/lang/String;III)J
com.android.server.ThrottleService.getCliffThreshold(Ljava/lang/String;I)J
com.android.server.ThrottleService.getPeriodStartTime(Ljava/lang/String;)J
com.android.server.ThrottleService.getResetTime(Ljava/lang/String;)J
android.net.IThrottleManager$Stub$Proxy.getCliffLevel(Ljava/lang/String;I)I
android.net.IThrottleManager$Stub.getCliffLevel(Ljava/lang/String;I)I
android.net.IThrottleManager$Stub$Proxy.getThrottle(Ljava/lang/String;)I
android.net.IThrottleManager$Stub.getThrottle(Ljava/lang/String;)I
android.net.IThrottleManager$Stub$Proxy.getHelpUri()Ljava/lang/String;
android.net.IThrottleManager$Stub.getHelpUri()Ljava/lang/String;
android.net.IThrottleManager$Stub$Proxy.getByteCount(Ljava/lang/String;III)J
android.net.IThrottleManager$Stub.getByteCount(Ljava/lang/String;III)J
android.net.IThrottleManager$Stub$Proxy.getCliffThreshold(Ljava/lang/String;I)J
android.net.IThrottleManager$Stub.getCliffThreshold(Ljava/lang/String;I)J
android.net.IThrottleManager$Stub$Proxy.getPeriodStartTime(Ljava/lang/String;)J
android.net.IThrottleManager$Stub.getPeriodStartTime(Ljava/lang/String;)J
com.android.server.ThrottleService$MyHandler.onPollAlarm()V
android.net.IThrottleManager$Stub$Proxy.getResetTime(Ljava/lang/String;)J
android.net.IThrottleManager$Stub.getResetTime(Ljava/lang/String;)J
com.android.server.ThrottleService.dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
android.net.IThrottleManager.getCliffLevel(Ljava/lang/String;I)I
android.net.IThrottleManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IThrottleManager.getThrottle(Ljava/lang/String;)I
android.net.IThrottleManager.getHelpUri()Ljava/lang/String;
android.net.IThrottleManager.getByteCount(Ljava/lang/String;III)J
android.net.IThrottleManager.getCliffThreshold(Ljava/lang/String;I)J
android.net.IThrottleManager.getPeriodStartTime(Ljava/lang/String;)J
com.android.server.ThrottleService$MyHandler.onPolicyChanged()V
com.android.server.ThrottleService$MyHandler.onResetAlarm()V
android.net.IThrottleManager.getResetTime(Ljava/lang/String;)J
android.net.ThrottleManager.getCliffLevel(Ljava/lang/String;I)I
com.android.server.ThrottleService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.ThrottleManager.getHelpUri()Ljava/lang/String;
android.net.ThrottleManager.getByteCount(Ljava/lang/String;III)J
android.net.ThrottleManager.getCliffThreshold(Ljava/lang/String;I)J
android.net.ThrottleManager.getPeriodStartTime(Ljava/lang/String;)J
android.net.ThrottleManager.getResetTime(Ljava/lang/String;)J
com.android.phone.DataUsageListener.updatePolicy()V
com.android.phone.DataUsage.onCreate(Landroid/os/Bundle;)V
com.android.phone.DataUsageListener.access$100(Lcom/android/phone/DataUsageListener;)V
com.android.phone.DataUsageListener.resume()V
com.android.phone.DataUsageListener$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.DataUsage.onResume()V
Permission:android.permission.WRITE_CALENDAR

191 Callers:

com.android.calendar.CalendarUtils$TimeZoneUtils.setTimeZone(Landroid/content/Context;Ljava/lang/String;)V
com.android.calendar.Utils.setTimeZone(Landroid/content/Context;Ljava/lang/String;)V
com.android.calendar.GeneralPreferences.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.calendar.DeleteEventHelper$2.onClick(Landroid/content/DialogInterface;I)V
com.android.calendar.alerts.SnoozeAlarmsService.onHandleIntent(Landroid/content/Intent;)V
com.android.calendar.alerts.AlertService.dismissOldAlerts(Landroid/content/Context;)V
com.android.calendar.alerts.AlertService.processMessage(Landroid/os/Message;)V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.addEvent(Lcom/android/exchange/adapter/CalendarSyncAdapter$CalendarOperations;Ljava/lang/String;Z)V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.addParser(Lcom/android/exchange/adapter/CalendarSyncAdapter$CalendarOperations;)V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.changeParser(Lcom/android/exchange/adapter/CalendarSyncAdapter$CalendarOperations;)V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.commandsParser()V
com.android.exchange.adapter.AbstractSyncParser.commandsParser()V
com.android.exchange.adapter.AbstractSyncParser.parse()Z
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.parse()Z
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser.parse()Z
com.android.exchange.adapter.Parser.parse()Z
com.android.exchange.adapter.CalendarSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.ContactsSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.EmailSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.AbstractSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.EasSyncService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasAccountService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasOutboxService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasSyncService.run()V
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.createLoaderUri()Landroid/net/Uri;
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.access$200(Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory;)Landroid/net/Uri;
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.initLoader(Ljava/lang/String;)V
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$2.run()V
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$3$1.run()V
com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory.onCreate()V
com.android.calendar.month.MonthByWeekFragment.updateUri()Landroid/net/Uri;
com.android.calendar.month.MonthByWeekFragment.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.calendar.month.MonthByWeekFragment.access$500(Lcom/android/calendar/month/MonthByWeekFragment;)Landroid/net/Uri;
com.android.calendar.month.MonthByWeekFragment$2.run()V
com.android.calendar.event.EditEventHelper.saveEvent(Lcom/android/calendar/CalendarEventModel;Lcom/android/calendar/CalendarEventModel;I)Z
com.android.calendar.event.EditEventFragment$Done.run()V
com.android.calendar.event.EditEventFragment.onActionBarItemSelected(I)Z
com.android.calendar.event.EditEventFragment$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.event.EditEventFragment.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.event.EditEventFragment.onPause()V
com.android.calendar.event.EditEventHelper$EditDoneRunnable.run()V
com.android.calendar.event.EditEventFragment.access$000(Lcom/android/calendar/event/EditEventFragment;I)Z
com.android.calendar.event.EditEventFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.calendar.CalendarController$EventHandler.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.event.EditEventView.onCancel(Landroid/content/DialogInterface;)V
com.android.calendar.event.EditEventView.onClick(Landroid/content/DialogInterface;I)V
com.android.calendar.event.EditEventView.setCalendarsCursor(Landroid/database/Cursor;Z)V
com.android.calendar.event.EditEventFragment$1.onClick(Landroid/view/View;)V
com.android.calendar.CalendarController.sendEvent(Ljava/lang/Object;Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.CalendarController.sendEvent(Ljava/lang/Object;JLandroid/text/format/Time;Landroid/text/format/Time;Landroid/text/format/Time;JIJLjava/lang/String;Landroid/content/ComponentName;)V
com.android.calendar.CalendarController.sendEventRelatedEventWithExtra(Ljava/lang/Object;JJJJIIJJ)V
com.android.calendar.SearchActivity.search(Ljava/lang/String;Landroid/text/format/Time;)V
com.android.calendar.agenda.AgendaFragment$2.run()V
com.android.calendar.AllInOneActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.calendar.AllInOneActivity.handleSelectSyncedCalendarsClicked(Landroid/view/View;)V
com.android.calendar.CalendarController.sendEvent(Ljava/lang/Object;JLandroid/text/format/Time;Landroid/text/format/Time;JIJLjava/lang/String;Landroid/content/ComponentName;)V
com.android.calendar.CalendarController.sendEvent(Ljava/lang/Object;JLandroid/text/format/Time;Landroid/text/format/Time;JI)V
com.android.calendar.DayView$GotoBroadcaster.onAnimationEnd(Landroid/view/animation/Animation;)V
com.android.calendar.DayView.doSingleTapUp(Landroid/view/MotionEvent;)V
com.android.calendar.DayView.updateTitle()V
com.android.calendar.month.MonthByWeekFragment.setMonthDisplayed(Landroid/text/format/Time;Z)V
com.android.calendar.agenda.AgendaListView.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.agenda.AgendaWindowAdapter.refresh(Landroid/text/format/Time;JLjava/lang/String;ZZ)V
com.android.calendar.AllInOneActivity.onResume()V
com.android.calendar.CalendarController.sendEventRelatedEvent(Ljava/lang/Object;JJJJIIJ)V
com.android.calendar.DayView$8.onClick(Landroid/content/DialogInterface;I)V
com.android.calendar.DayView.switchViews(Z)V
com.android.calendar.SearchActivity.handleIntent(Landroid/content/Intent;)V
com.android.calendar.SearchActivity.initFragments(JLjava/lang/String;)V
com.android.calendar.AllInOneActivity.onQueryTextSubmit(Ljava/lang/String;)Z
com.android.calendar.month.MonthByWeekAdapter.onDayTapped(Landroid/text/format/Time;)V
com.android.calendar.SearchActivity.onQueryTextSubmit(Ljava/lang/String;)Z
com.android.calendar.AllInOneActivity.onNavigationItemSelected(IJ)Z
com.android.calendar.AllInOneActivity.eventsChanged()V
com.android.calendar.AllInOneActivity.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.AllInOneActivity.initFragments(JILandroid/os/Bundle;)V
com.android.calendar.AllInOneActivity.onBackPressed()V
com.android.calendar.AllInOneActivity.onNewIntent(Landroid/content/Intent;)V
com.android.calendar.AllInOneActivity.onTabSelected(Landroid/app/ActionBar$Tab;Landroid/app/FragmentTransaction;)V
com.android.calendar.AllInOneActivity.onUserLeaveHint()V
com.android.calendar.DayView.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.calendar.DayView$ContextMenuHandler.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.calendar.SearchActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.calendar.SearchActivity.eventsChanged()V
com.android.calendar.DayView.access$4500(Lcom/android/calendar/DayView;Landroid/view/MotionEvent;)V
com.android.calendar.DayFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.calendar.DayFragment.goTo(Landroid/text/format/Time;ZZ)V
com.android.calendar.DayView.switchViews(ZFFF)Landroid/view/View;
com.android.calendar.month.SimpleDayPickerFragment.setMonthDisplayed(Landroid/text/format/Time;Z)V
com.android.calendar.agenda.AgendaListView.goTo(Landroid/text/format/Time;JLjava/lang/String;ZZ)V
com.android.calendar.agenda.AgendaListView.refresh(Z)V
com.android.calendar.DayView$3.run()V
com.android.calendar.EventInfoFragment.doEdit()V
com.android.calendar.DayView.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.calendar.DayView.onClick(Landroid/view/View;)V
com.android.calendar.SearchActivity.onNewIntent(Landroid/content/Intent;)V
com.android.calendar.SearchActivity.onCreate(Landroid/os/Bundle;)V
com.android.calendar.month.MonthByWeekAdapter$2.run()V
com.android.calendar.month.SimpleWeeksAdapter.onDayTapped(Landroid/text/format/Time;)V
com.android.calendar.AllInOneActivity$4.onChange(Z)V
com.android.calendar.CalendarController$EventHandler.eventsChanged()V
com.android.calendar.AllInOneActivity.onCreate(Landroid/os/Bundle;)V
com.android.calendar.AllInOneActivity.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.calendar.SearchActivity$1.onChange(Z)V
com.android.calendar.SearchActivity.onResume()V
com.android.calendar.DayView$CalendarGestureListener.onSingleTapUp(Landroid/view/MotionEvent;)Z
com.android.calendar.DayFragment.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.DayView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.calendar.DayView.doFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)V
com.android.calendar.month.SimpleDayPickerFragment.goTo(JZZZ)Z
com.android.calendar.month.SimpleDayPickerFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.calendar.month.SimpleDayPickerFragment.updateMonthHighlight(Landroid/widget/AbsListView;)V
com.android.calendar.agenda.AgendaFragment.goTo(Lcom/android/calendar/CalendarController$EventInfo;Z)V
com.android.calendar.agenda.AgendaFragment.onResume()V
com.android.calendar.agenda.AgendaFragment.search(Ljava/lang/String;Landroid/text/format/Time;)V
com.android.calendar.agenda.AgendaFragment.eventsChanged()V
com.android.calendar.agenda.AgendaListView$2.run()V
com.android.calendar.agenda.AgendaListView$3.run()V
com.android.calendar.EventInfoFragment.access$4100(Lcom/android/calendar/EventInfoFragment;)V
com.android.calendar.month.SimpleWeeksAdapter.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.calendar.DayView.access$5000(Lcom/android/calendar/DayView;Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)V
com.android.calendar.month.MonthByWeekFragment.goTo(JZZZ)Z
com.android.calendar.month.SimpleDayPickerFragment$2.onChanged()V
com.android.calendar.month.SimpleDayPickerFragment.doResumeUpdates()V
com.android.calendar.month.SimpleDayPickerFragment.<init>(J)V
com.android.calendar.month.SimpleDayPickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.calendar.month.MonthByWeekFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.calendar.month.MonthByWeekFragment.updateMonthHighlight(Landroid/widget/AbsListView;)V
com.android.calendar.month.SimpleDayPickerFragment.onScroll(Landroid/widget/AbsListView;III)V
com.android.calendar.agenda.AgendaFragment.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.EventInfoFragment$11.onClick(Landroid/view/View;)V
com.android.calendar.month.MonthByWeekAdapter.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.calendar.DayView$CalendarGestureListener.onFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z
com.android.calendar.month.MonthByWeekFragment.doResumeUpdates()V
com.android.calendar.month.MonthByWeekFragment.handleEvent(Lcom/android/calendar/CalendarController$EventInfo;)V
com.android.calendar.month.SimpleDayPickerFragment.onResume()V
com.android.calendar.month.MonthByWeekFragment.<init>(JZ)V
com.android.calendar.month.MonthByWeekFragment.<init>(J)V
com.android.calendar.month.MonthByWeekFragment.onCreate(Landroid/os/Bundle;)V
com.android.calendar.month.MonthByWeekFragment.onScroll(Landroid/widget/AbsListView;III)V
com.android.calendar.month.MonthByWeekFragment.onResume()V
com.android.calendar.AllInOneActivity.setMainPane(Landroid/app/FragmentTransaction;IIJZ)V
com.android.calendar.month.MonthByWeekFragment.<init>()V
com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter.doSaveAction()V
com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity.onClick(Landroid/view/View;)V
com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment.toggleVisibility(I)V
com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.calendar.event.EditEventFragment.saveReminders()V
com.android.calendar.alerts.AlertService.processQuery(Landroid/database/Cursor;Landroid/content/Context;JLjava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)I
com.android.calendar.alerts.AlertService.generateAlerts(Landroid/content/Context;Lcom/android/calendar/alerts/NotificationMgr;Landroid/content/SharedPreferences;Landroid/database/Cursor;JI)Z
com.android.calendar.alerts.AlertService.updateAlertNotification(Landroid/content/Context;)Z
com.android.calendar.alerts.AlertActivity.onStop()V
com.android.calendar.alerts.AlertService.doTimeChanged()V
com.android.calendar.DeleteEventHelper.deleteExceptionEvent()V
com.android.calendar.DeleteEventHelper.access$900(Lcom/android/calendar/DeleteEventHelper;)V
com.android.calendar.DeleteEventHelper$3.onClick(Landroid/content/DialogInterface;I)V
com.android.providers.calendar.CalendarReceiver.removeScheduledAlarms(Landroid/content/ContentResolver;)V
com.android.providers.calendar.CalendarReceiver.access$000(Lcom/android/providers/calendar/CalendarReceiver;Landroid/content/ContentResolver;)V
com.android.providers.calendar.CalendarReceiver$1.run()V
com.android.calendar.EventInfoFragment.updateResponse(JJI)V
com.android.calendar.EventInfoFragment.saveResponse()Z
com.android.calendar.EventInfoFragment.onDestroyView()V
com.android.calendar.alerts.AlertActivity.dismissAlarm(J)V
com.android.calendar.alerts.AlertActivity.access$400(Lcom/android/calendar/alerts/AlertActivity;J)V
com.android.calendar.alerts.AlertActivity$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.calendar.agenda.AgendaWindowAdapter.buildQueryUri(IILjava/lang/String;)Landroid/net/Uri;
com.android.calendar.agenda.AgendaWindowAdapter.doQuery(Lcom/android/calendar/agenda/AgendaWindowAdapter$QuerySpec;)V
com.android.calendar.agenda.AgendaWindowAdapter.queueQuery(Lcom/android/calendar/agenda/AgendaWindowAdapter$QuerySpec;)Z
com.android.calendar.agenda.AgendaWindowAdapter.access$2400(Lcom/android/calendar/agenda/AgendaWindowAdapter;Lcom/android/calendar/agenda/AgendaWindowAdapter$QuerySpec;)V
com.android.calendar.agenda.AgendaWindowAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.calendar.agenda.AgendaWindowAdapter.access$1600(Lcom/android/calendar/agenda/AgendaWindowAdapter;Lcom/android/calendar/agenda/AgendaWindowAdapter$QuerySpec;)Z
com.android.calendar.agenda.AgendaWindowAdapter.queueQuery(IILandroid/text/format/Time;Ljava/lang/String;IJ)Z
com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler$1.onClick(Landroid/view/View;)V
com.android.calendar.DeleteEventHelper.deleteRepeatingEvent(I)V
com.android.calendar.DeleteEventHelper.access$1200(Lcom/android/calendar/DeleteEventHelper;I)V
com.android.calendar.DeleteEventHelper$5.onClick(Landroid/content/DialogInterface;I)V
com.android.calendar.EventInfoFragment.saveReminders()Z
com.android.calendar.event.EditEventHelper.saveReminders(Ljava/util/ArrayList;JLjava/util/ArrayList;Ljava/util/ArrayList;Z)Z
android.provider.CalendarContract$CalendarAlerts.insert(Landroid/content/ContentResolver;JJJJI)Landroid/net/Uri;
com.android.providers.calendar.CalendarAlarmManager.scheduleNextAlarmLocked(Landroid/database/sqlite/SQLiteDatabase;Lcom/android/providers/calendar/CalendarProvider2;)V
com.android.providers.calendar.CalendarAlarmManager.runScheduleNextAlarm(ZLcom/android/providers/calendar/CalendarProvider2;)V
com.android.providers.calendar.CalendarProviderIntentService.onHandleIntent(Landroid/content/Intent;)V
com.android.calendar.alerts.DismissAlarmsService.onHandleIntent(Landroid/content/Intent;)V
com.android.calendar.event.EditEventHelper.saveRemindersWithBackRef(Ljava/util/ArrayList;ILjava/util/ArrayList;Ljava/util/ArrayList;Z)Z
com.android.calendar.alerts.AlertActivity.dismissFiredAlarms()V
com.android.calendar.alerts.AlertActivity.onClick(Landroid/view/View;)V
com.android.calendar.selectcalendars.SelectCalendarsSyncFragment.onPause()V
com.android.calendar.EventInfoFragment.createExceptionResponse(JI)V
com.android.calendar.AgendaWindowAdapter.buildQueryUri(II)Landroid/net/Uri;
Permission:android.permission.GET_ACCOUNTS

1496 Callers:

android.accounts.AccountManagerService.checkReadAccountsPermission()V
android.accounts.AccountManagerService.getAccounts(I)[Landroid/accounts/Account;
android.accounts.AccountManagerService.getAccounts(Ljava/lang/String;)[Landroid/accounts/Account;
android.accounts.AccountManagerService.getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;)V
android.accounts.AccountManagerService.hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;)V
android.content.SyncManager$SyncHandler.onBootCompleted()V
android.content.SyncManager.onAccountsUpdated([Landroid/accounts/Account;)V
android.accounts.IAccountManager$Stub$Proxy.getAccounts(Ljava/lang/String;)[Landroid/accounts/Account;
android.accounts.IAccountManager$Stub.getAccounts(Ljava/lang/String;)[Landroid/accounts/Account;
android.accounts.IAccountManager$Stub$Proxy.getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;)V
android.accounts.IAccountManager$Stub.getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;)V
android.accounts.IAccountManager$Stub$Proxy.hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;)V
android.accounts.IAccountManager$Stub.hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;)V
android.content.SyncManager$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager.<init>(Landroid/content/Context;Z)V
android.content.SyncManager.onUserRemoved(Landroid/content/Intent;)V
android.accounts.IAccountManager.getAccounts(Ljava/lang/String;)[Landroid/accounts/Account;
android.accounts.IAccountManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.accounts.IAccountManager.getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;)V
android.accounts.IAccountManager.hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;)V
android.content.ContentService.getSyncManager()Landroid/content/SyncManager;
android.content.SyncManager.access$700(Landroid/content/SyncManager;Landroid/content/Intent;)V
android.accounts.AccountManager.getAccountsByType(Ljava/lang/String;)[Landroid/accounts/Account;
android.accounts.AccountManager.getAccounts()[Landroid/accounts/Account;
android.accounts.AccountManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.accounts.AccountManager$3.doWork()V
android.accounts.AccountManager$2.doWork()V
android.content.ContentService.<init>(Landroid/content/Context;Z)V
android.content.SyncManager$6.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.test.IsolatedContext$MockAccountManager.getAccountsByType(Ljava/lang/String;)[Landroid/accounts/Account;
com.android.browser.DeviceAccountLogin.handleLogin(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.GoogleAccountLogin.getAccounts(Landroid/content/Context;)[Landroid/accounts/Account;
com.android.browser.provider.BrowserProvider2$DatabaseHelper.enableSync(Landroid/database/sqlite/SQLiteDatabase;)V
com.android.development.AccountsTester$ButtonClickListener.onClick(Landroid/view/View;)V
com.android.development.SyncAdapterDriver.startSyncSelected(Landroid/view/View;)V
com.android.email.provider.DBHelper$DatabaseHelper.onUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V
com.android.email.service.AccountService$1.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService$6.runInternal(Landroid/content/Context;)V
com.android.email.service.MailService.hasMismatchInPopImapAccounts(Landroid/content/Context;)Z
com.android.exchange.CalendarSyncEnabler.enableEasCalendarSyncInternalForTest()Ljava/lang/String;
com.android.exchange.provider.ExchangeDirectoryProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.internal.policy.impl.AccountUnlockScreen.findIntendedAccount(Ljava/lang/String;)Landroid/accounts/Account;
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.<init>(Lcom/android/internal/policy/impl/LockPatternKeyguardView;Landroid/accounts/AccountManager;)V
com.android.launcher2.Launcher.skipCustomClingIfNoAccounts()Z
com.android.providers.contacts.ContactsProvider2.getDefaultAccount()Landroid/accounts/Account;
com.android.settings.Settings.insertAccountsHeaders(Ljava/util/List;I)I
android.accounts.AccountManager$13.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.accounts.AccountManager.addOnAccountsUpdatedListener(Landroid/accounts/OnAccountsUpdateListener;Landroid/os/Handler;Z)V
android.accounts.ChooseTypeAndAccountActivity.onCreate(Landroid/os/Bundle;)V
android.accounts.ChooseTypeAndAccountActivity.run(Landroid/accounts/AccountManagerFuture;)V
com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts.run()V
com.android.browser.provider.BrowserProvider2.updateInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.calendar.CalendarController.refreshCalendars()V
com.android.calendar.CalendarSettingsActivity$1.run()V
com.android.calendar.CalendarSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.contacts.ContactListEmptyView.isSyncActive()Z
com.android.contacts.list.ContactEntryListFragment.isSyncActive()Z
com.android.contacts.model.AccountTypeManagerImpl.loadAccountsInBackground()V
com.android.email.service.AttachmentDownloadService$AccountManagerStub.getNumberOfAccounts()I
com.android.providers.calendar.CalendarProvider2.verifyAccounts()V
com.android.providers.contacts.ContactsProvider2.performBackgroundTask(ILjava/lang/Object;)V
com.android.settings.accounts.AccountSyncSettings.onResume()V
com.android.settings.accounts.AuthenticatorHelper.onAccountsUpdated(Landroid/content/Context;[Landroid/accounts/Account;)V
com.android.settings.MasterClear.loadAccountList()V
android.accounts.AccountManager$BaseFutureTask.doWork()V
android.content.ContentService.main(Landroid/content/Context;Z)Landroid/content/IContentService;
com.android.browser.Tab$2.onReceivedLoginRequest(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.GoogleAccountLogin.startLoginIfNeeded(Landroid/app/Activity;Ljava/lang/Runnable;)V
com.android.browser.provider.BrowserProvider2$DatabaseHelper.onCreate(Landroid/database/sqlite/SQLiteDatabase;)V
com.android.browser.provider.BrowserProvider2$DatabaseHelper.onUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V
com.android.emailcommon.service.IAccountService$Stub$Proxy.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.emailcommon.service.IAccountService$Stub.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService$6.runInternal(Ljava/lang/Object;)V
com.android.email.activity.Welcome$1.run()V
com.android.exchange.CalendarSyncEnabler.enableEasCalendarSync()V
com.android.internal.policy.impl.AccountUnlockScreen.asyncCheckPassword()V
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.<init>(Lcom/android/internal/policy/impl/LockPatternKeyguardView;Landroid/accounts/AccountManager;Lcom/android/internal/policy/impl/LockPatternKeyguardView$1;)V
com.android.launcher2.Launcher.showFirstRunWorkspaceCling()V
com.android.settings.Settings$AccessibilitySettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$AccountSyncSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$AdvancedWifiSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$AndroidBeamSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$ApplicationSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$BluetoothSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$CryptKeeperSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$DataUsageSummaryActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$DateTimeSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$DevelopmentSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$DeviceAdminSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$DeviceInfoSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$DisplaySettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$DockSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$InputMethodAndLanguageSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$KeyboardLayoutPickerActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$LocalePickerActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$LocationSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$ManageAccountsSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$ManageApplicationsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$PowerUsageSummaryActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$PrivacySettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$RunningServicesActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$SecuritySettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$SoundSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$SpellCheckersSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$StorageSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$StorageUseActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$TetherSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$TextToSpeechSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$UserDictionarySettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$VpnSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$WifiP2pSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$WifiSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.Settings$WirelessSettingsActivity.insertAccountsHeaders(Ljava/util/List;I)I
com.android.settings.SubSettings.insertAccountsHeaders(Ljava/util/List;I)I
com.android.contacts.model.AccountTypeManagerImpl.<init>(Landroid/content/Context;)V
com.android.development.AccountsTester.onStart()V
com.android.settings.accounts.ManageAccountsSettings.onStart()V
com.android.settings.accounts.SyncSettings.onStart()V
com.android.browser.AccountsChangedReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.calendar.AllInOneActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactListEmptyView.show(ZZZZZZZ)V
com.android.contacts.list.ContactBrowseListFragment.isSyncActive()Z
com.android.contacts.list.ContactPickerFragment.isSyncActive()Z
com.android.contacts.list.DefaultContactBrowseListFragment.isSyncActive()Z
com.android.contacts.list.EmailAddressPickerFragment.isSyncActive()Z
com.android.contacts.list.JoinContactListFragment.isSyncActive()Z
com.android.contacts.list.PhoneNumberPickerFragment.isSyncActive()Z
com.android.contacts.list.PostalAddressPickerFragment.isSyncActive()Z
com.android.contacts.model.AccountTypeManagerImpl.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.contacts.model.AccountTypeManagerImpl.onStatusChanged(I)V
com.android.contacts.model.AccountTypeManagerImpl.processBroadcastIntent(Landroid/content/Intent;)V
com.android.email.service.AttachmentDownloadService.canPrefetchForAccount(Lcom/android/emailcommon/provider/Account;Ljava/io/File;)Z
com.android.providers.calendar.CalendarProvider2.access$300(Lcom/android/providers/calendar/CalendarProvider2;)V
com.android.settings.accounts.AccountPreferenceBase.onResume()V
com.android.settings.SettingsPreferenceFragment.onResume()V
com.android.settings.Settings.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings.onCreate(Landroid/os/Bundle;)V
com.android.settings.MasterClear.establishInitialState()V
android.accounts.AccountManager$BaseFutureTask.startTask()V
com.android.server.ServerThread.run()V
com.android.browser.Controller.doStart(Landroid/os/Bundle;Landroid/content/Intent;)V
com.android.emailcommon.service.IAccountService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IAccountService.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.SingleRunningTask.runInternal(Ljava/lang/Object;)V
com.android.internal.policy.impl.AccountUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.LockPatternKeyguardView.maybeEnableFallback(Landroid/content/Context;)V
com.android.launcher2.Launcher.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$AccessibilitySettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$AccountSyncSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$AdvancedWifiSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$AndroidBeamSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$ApplicationSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$BluetoothSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$CryptKeeperSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$DataUsageSummaryActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$DateTimeSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$DevelopmentSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$DeviceAdminSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$DeviceInfoSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$DisplaySettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$DockSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$InputMethodAndLanguageSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$KeyboardLayoutPickerActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$LocalePickerActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$LocationSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$ManageAccountsSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$ManageApplicationsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$PowerUsageSummaryActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$PrivacySettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$RunningServicesActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$SecuritySettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$SoundSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$SpellCheckersSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$StorageSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$StorageUseActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$TetherSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$TextToSpeechSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$UserDictionarySettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$VpnSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$WifiP2pSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$WifiSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.Settings$WirelessSettingsActivity.updateHeaderList(Ljava/util/List;)V
com.android.settings.SubSettings.updateHeaderList(Ljava/util/List;)V
com.android.contacts.model.AccountTypeManager.createAccountTypeManager(Landroid/content/Context;)Lcom/android/contacts/model/AccountTypeManager;
com.android.settings.accounts.AccountPreferenceBase.onStart()V
com.android.settings.SettingsPreferenceFragment.onStart()V
com.android.contacts.list.ContactBrowseListFragment.prepareEmptyView()V
com.android.contacts.list.ContactPickerFragment.prepareEmptyView()V
com.android.email.service.AttachmentDownloadService$DownloadSet.processQueue()V
com.android.settings.accounts.ManageAccountsSettings.onResume()V
com.android.settings.accounts.SyncSettings.onResume()V
com.android.settings.AccessibilitySettings.onResume()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onResume()V
com.android.settings.bluetooth.DeviceProfilesSettings.onResume()V
com.android.settings.DateTimeSettings.onResume()V
com.android.settings.deviceinfo.Memory.onResume()V
com.android.settings.deviceinfo.UsbSettings.onResume()V
com.android.settings.DisplaySettings.onResume()V
com.android.settings.DockSettings.onResume()V
com.android.settings.DreamSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onResume()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onResume()V
com.android.settings.inputmethod.SpellCheckersSettings.onResume()V
com.android.settings.inputmethod.UserDictionaryList.onResume()V
com.android.settings.LocationSettings.onResume()V
com.android.settings.PrivacySettings.onResume()V
com.android.settings.SecuritySettings.onResume()V
com.android.settings.SoundSettings.onResume()V
com.android.settings.users.UserDetailsSettings.onResume()V
com.android.settings.users.UserSettings.onResume()V
com.android.settings.vpn2.VpnSettings.onResume()V
com.android.settings.wifi.AdvancedWifiSettings.onResume()V
com.android.settings.wifi.p2p.WifiP2pSettings.onResume()V
com.android.settings.wifi.WifiSettings.onResume()V
com.android.settings.WirelessSettings.onResume()V
com.android.settings.Settings$AccessibilitySettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$AccountSyncSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$AdvancedWifiSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$AndroidBeamSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$ApplicationSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$BluetoothSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$CryptKeeperSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$DataUsageSummaryActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$DateTimeSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$DevelopmentSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$DeviceAdminSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$DeviceInfoSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$DisplaySettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$DockSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$InputMethodAndLanguageSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$KeyboardLayoutPickerActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$LocalePickerActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$LocationSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$ManageAccountsSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$ManageApplicationsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$PowerUsageSummaryActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$PrivacySettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$RunningServicesActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$SecuritySettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$SoundSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$SpellCheckersSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$StorageSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$StorageUseActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$TetherSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$TextToSpeechSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$UserDictionarySettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$VpnSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$WifiP2pSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$WifiSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$WirelessSettingsActivity.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.SubSettings.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.Settings$AccessibilitySettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$AccountSyncSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$AdvancedWifiSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$AndroidBeamSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$ApplicationSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$BluetoothSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$CryptKeeperSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$DataUsageSummaryActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$DateTimeSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$DevelopmentSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$DeviceAdminSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$DeviceInfoSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$DisplaySettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$DockSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$InputMethodAndLanguageSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$KeyboardLayoutPickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$LocalePickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$LocationSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$ManageAccountsSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$ManageApplicationsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$PowerUsageSummaryActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$PrivacySettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$RunningServicesActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$SecuritySettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$SoundSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$SpellCheckersSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$StorageSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$StorageUseActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$TetherSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$TextToSpeechSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$UserDictionarySettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$VpnSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$WifiP2pSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$WifiSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.Settings$WirelessSettingsActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.SubSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.MasterClear.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.settings.MasterClear.onActivityResult(IILandroid/content/Intent;)V
android.accounts.AccountManager$1.startTask()V
android.accounts.AccountManager$2.startTask()V
android.accounts.AccountManager$3.startTask()V
android.accounts.AccountManager$4.startTask()V
android.accounts.AccountManager$Future2Task.startTask()V
com.android.browser.CrashRecoveryHandler.startRecovery(Landroid/content/Intent;)V
com.android.email.service.AccountService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.AccountServiceProxy$3.run()V
com.android.email.SingleRunningTask.run(Ljava/lang/Object;)V
com.android.internal.policy.impl.LockPatternKeyguardView.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardWindowController;)V
com.android.settings.Settings$AccessibilitySettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$AccountSyncSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$AdvancedWifiSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$AndroidBeamSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$ApplicationSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$BluetoothSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$CryptKeeperSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$DataUsageSummaryActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$DateTimeSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$DevelopmentSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$DeviceAdminSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$DeviceInfoSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$DisplaySettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$DockSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$InputMethodAndLanguageSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$KeyboardLayoutPickerActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$LocalePickerActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$LocationSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$ManageAccountsSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$ManageApplicationsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$PowerUsageSummaryActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$PrivacySettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$RunningServicesActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$SecuritySettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$SoundSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$SpellCheckersSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$StorageSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$StorageUseActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$TetherSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$TextToSpeechSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$UserDictionarySettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$VpnSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$WifiP2pSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$WifiSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.Settings$WirelessSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.SubSettings.onBuildHeaders(Ljava/util/List;)V
com.android.contacts.ContactsApplication.getSystemService(Ljava/lang/String;)Ljava/lang/Object;
com.android.contacts.model.AccountTypeManager.getInstance(Landroid/content/Context;)Lcom/android/contacts/model/AccountTypeManager;
com.android.contacts.model.AccountTypeManagerImpl.createAccountTypeManager(Landroid/content/Context;)Lcom/android/contacts/model/AccountTypeManager;
com.android.settings.LocationSettings.onStart()V
com.android.settings.TetherSettings.onStart()V
com.android.contacts.list.ContactEntryListFragment.prepareEmptyView()V
com.android.contacts.list.DefaultContactBrowseListFragment.prepareEmptyView()V
com.android.email.service.AttachmentDownloadService$DownloadSet.onWatchdogAlarm()V
com.android.email.service.AttachmentDownloadService.run()V
com.android.settings.bluetooth.BluetoothSettings.onResume()V
com.android.settings.bluetooth.DevicePickerFragment.onResume()V
android.accounts.AccountManager$Future2Task.start()Landroid/accounts/AccountManager$Future2Task;
com.android.browser.Controller.start(Landroid/content/Intent;)V
com.android.emailcommon.service.ServiceProxy$ProxyTask.run()V
com.android.email.service.MailService$6.run(Ljava/lang/Object;)V
com.android.email.service.MailService.reconcilePopImapAccountsSync(Landroid/content/Context;)V
com.android.internal.policy.impl.LockPatternKeyguardViewProperties.createKeyguardView(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardWindowController;)Lcom/android/internal/policy/impl/KeyguardViewBase;
com.android.contacts.activities.ConfirmAddDetailActivity.addEditableRawContact(Landroid/content/Context;Lcom/android/contacts/model/EntityDeltaList;)Lcom/android/contacts/model/EntityDelta;
com.android.contacts.activities.ConfirmAddDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactEditorAccountsChangedActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupDetailActivity.onPrepareOptionsMenu(Landroid/view/Menu;)Z
com.android.contacts.ContactLoader$Result.getFirstWritableRawContactId(Landroid/content/Context;)J
com.android.contacts.ContactLoader.loadInvitableAccountTypes(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.ContactLoader.postViewNotificationToSyncAdapter()V
com.android.contacts.ContactsApplication$DelayedInitializer.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.ContactSaveService.saveContact(Landroid/content/Intent;)V
com.android.contacts.ContactsUtils.areContactWritableAccountsAvailable(Landroid/content/Context;)Z
com.android.contacts.ContactsUtils.areGroupWritableAccountsAvailable(Landroid/content/Context;)Z
com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix.isApplicable()Z
com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix.execute()V
com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix.execute()V
com.android.contacts.detail.ContactDetailFragment.buildEntries()V
com.android.contacts.detail.ContactDetailUpdatesFragment.getAccountTypeForStreamItemEntry(Lcom/android/contacts/util/StreamItemEntry;)Lcom/android/contacts/model/AccountType;
com.android.contacts.detail.PhotoSelectionHandler.getDeltaForAttachingPhotoToContact()Lcom/android/contacts/model/EntityDeltaList;
com.android.contacts.detail.StreamItemAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.editor.AggregationSuggestionView.canEditSuggestedContact()Z
com.android.contacts.editor.ContactEditorFragment.hasPendingChanges()Z
com.android.contacts.editor.ContactEditorFragment.isContactWritable()Z
com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator.compare(Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/EntityDelta;)I
com.android.contacts.editor.ContactEditorFragment.bindEditors()V
com.android.contacts.editor.ContactEditorFragment.createContact(Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.ContactEditorFragment.createContact()V
com.android.contacts.editor.ContactEditorFragment.rebindEditorsForNewContact(Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.ContactEditorFragment.setData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.setIntentExtras(Landroid/os/Bundle;)V
com.android.contacts.editor.ContactEditorUtils.<init>(Landroid/content/Context;)V
com.android.contacts.group.GroupBrowseListAdapter.<init>(Landroid/content/Context;)V
com.android.contacts.group.GroupDetailDisplayUtils.bindGroupSourceView(Landroid/content/Context;Landroid/view/View;Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.group.GroupDetailFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.group.GroupDetailFragment.updateAccountType(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.group.GroupEditorFragment.getAccountType()Lcom/android/contacts/model/AccountType;
com.android.contacts.group.GroupEditorFragment.selectAccountAndCreateGroup()V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.interactions.ImportExportDialogFragment.handleImportRequest(I)Z
com.android.contacts.interactions.PhoneNumberInteraction$PhoneItemAdapter.<init>(Landroid/content/Context;Ljava/util/List;Lcom/android/contacts/interactions/PhoneNumberInteraction$InteractionType;)V
com.android.contacts.list.AccountFilterActivity$FilterListAdapter.<init>(Landroid/content/Context;Ljava/util/List;Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.list.AccountFilterActivity.loadAccountFilters(Landroid/content/Context;)Ljava/util/List;
com.android.contacts.list.ContactListFilterControllerImpl.filterAccountExists()Z
com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader.loadInBackground()Lcom/android/contacts/list/CustomContactListFilterActivity$AccountSet;
com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter.<init>(Landroid/content/Context;)V
com.android.contacts.model.AccountTypeManagerImpl.getInstance(Landroid/content/Context;)Lcom/android/contacts/model/AccountTypeManager;
com.android.contacts.model.EntityDelta.getRawContactAccountType(Landroid/content/Context;)Lcom/android/contacts/model/AccountType;
com.android.contacts.quickcontact.QuickContactActivity.bindData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.socialwidget.SocialWidgetProvider.setDisplayNameAndSnippet(Landroid/content/Context;Landroid/widget/RemoteViews;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/util/List;Landroid/app/PendingIntent;)V
com.android.contacts.SplitAggregateView.<init>(Landroid/content/Context;Landroid/net/Uri;)V
com.android.contacts.util.AccountSelectionUtil.getSelectAccountDialog(Landroid/content/Context;ILandroid/content/DialogInterface$OnClickListener;Landroid/content/DialogInterface$OnCancelListener;)Landroid/app/Dialog;
com.android.contacts.util.AccountsListAdapter.<init>(Landroid/content/Context;Lcom/android/contacts/util/AccountsListAdapter$AccountListFilter;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.vcard.ImportVCardActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.NfcImportVCardActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.SelectAccountActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.EmailAddressPickerFragment.prepareEmptyView()V
com.android.contacts.list.JoinContactListFragment.prepareEmptyView()V
com.android.contacts.list.PhoneNumberPickerFragment.prepareEmptyView()V
com.android.contacts.list.PostalAddressPickerFragment.prepareEmptyView()V
com.android.email.service.AttachmentDownloadService$DownloadSet.access$800(Lcom/android/email/service/AttachmentDownloadService$DownloadSet;)V
android.accounts.AccountManager$1.start()Landroid/accounts/AccountManager$Future2Task;
android.accounts.AccountManager$2.start()Landroid/accounts/AccountManager$Future2Task;
android.accounts.AccountManager$3.start()Landroid/accounts/AccountManager$Future2Task;
android.accounts.AccountManager$4.start()Landroid/accounts/AccountManager$Future2Task;
com.android.browser.ActivityController.start(Landroid/content/Intent;)V
com.android.emailcommon.service.ServiceProxy$ProxyRunnable.run()V
com.android.email.service.EmailBroadcastProcessorService.onSystemAccountChanged()V
com.android.email.service.MailService$1.run()V
com.android.internal.policy.impl.KeyguardViewProperties.createKeyguardView(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardWindowController;)Lcom/android/internal/policy/impl/KeyguardViewBase;
com.android.contacts.activities.ConfirmAddDetailActivity.setEntityDeltaList(Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.TransactionSafeActivity.onPrepareOptionsMenu(Landroid/view/Menu;)Z
com.android.contacts.ContactsActivity.onPrepareOptionsMenu(Landroid/view/Menu;)Z
com.android.contacts.ContactLoader$Result.isWritableContact(Landroid/content/Context;)Z
com.android.contacts.ContactLoader.loadInBackground()Lcom/android/contacts/ContactLoader$Result;
com.android.contacts.ContactLoader.deliverResult(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.ContactsApplication$DelayedInitializer.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactSaveService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.areContactWritableAccountsAvailable()Z
com.android.contacts.activities.PeopleActivity.areGroupWritableAccountsAvailable()Z
com.android.contacts.group.GroupBrowseListFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.group.GroupBrowseListFragment.bindGroupList()V
com.android.contacts.detail.ContactDetailFragment$QuickFix.isApplicable()Z
com.android.contacts.detail.ContactDetailFragment$QuickFix.execute()V
com.android.contacts.detail.ContactDetailFragment.bindData()V
com.android.contacts.detail.ContactDetailUpdatesFragment.access$000(Lcom/android/contacts/detail/ContactDetailUpdatesFragment;Lcom/android/contacts/util/StreamItemEntry;)Lcom/android/contacts/model/AccountType;
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.getDeltaForAttachingPhotoToContact()Lcom/android/contacts/model/EntityDeltaList;
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.getDeltaForAttachingPhotoToContact()Lcom/android/contacts/model/EntityDeltaList;
com.android.contacts.editor.AggregationSuggestionView.handleItemClickEvent()Z
com.android.contacts.editor.ContactEditorFragment.doJoinContactAction()Z
com.android.contacts.editor.ContactEditorFragment.revert()Z
com.android.contacts.editor.ContactEditorFragment.save(I)Z
com.android.contacts.editor.ContactEditorFragment.showJoinAggregateActivity(Landroid/net/Uri;)V
com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I
com.android.contacts.editor.ContactEditorFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.editor.ContactEditorFragment.access$2100(Lcom/android/contacts/editor/ContactEditorFragment;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForExistingContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.ContactEditorFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.contacts.editor.ContactEditorFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.selectAccountAndCreateContact()V
com.android.contacts.editor.ContactEditorFragment.access$500(Lcom/android/contacts/editor/ContactEditorFragment;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.ContactEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorUtils.getInstance(Landroid/content/Context;)Lcom/android/contacts/editor/ContactEditorUtils;
com.android.contacts.group.GroupDetailFragment.bindGroupMetaData(Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment.isGroupMembershipEditable()Z
com.android.contacts.group.GroupEditorFragment.setupEditorForAccount()V
com.android.contacts.group.GroupEditorFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.interactions.ImportExportDialogFragment.access$000(Lcom/android/contacts/interactions/ImportExportDialogFragment;I)Z
com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment.onCreateDialog(Landroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.list.AccountFilterActivity$MyLoaderCallbacks.onLoadFinished(Landroid/content/Loader;Ljava/util/List;)V
com.android.contacts.list.AccountFilterActivity.access$100(Landroid/content/Context;)Ljava/util/List;
com.android.contacts.list.ContactListFilterControllerImpl.checkFilterValidity(Z)V
com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.list.CustomContactListFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.AttachPhotoActivity.saveContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.model.EntityDeltaList.indexOfFirstWritableRawContact(Landroid/content/Context;)I
com.android.contacts.quickcontact.QuickContactActivity.access$700(Lcom/android/contacts/quickcontact/QuickContactActivity;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.socialwidget.SocialWidgetProvider.bindRemoteViews(Landroid/content/Context;ILandroid/appwidget/AppWidgetManager;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.util.AccountSelectionUtil.getSelectAccountDialog(Landroid/content/Context;ILandroid/content/DialogInterface$OnClickListener;)Landroid/app/Dialog;
com.android.contacts.util.AccountSelectionUtil.getSelectAccountDialog(Landroid/content/Context;I)Landroid/app/Dialog;
com.android.contacts.vcard.ImportVCardActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.vcard.SelectAccountActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.editor.ContactEditorFragment$3.onClick(Landroid/view/View;)V
com.android.contacts.util.AccountsListAdapter.<init>(Landroid/content/Context;Lcom/android/contacts/util/AccountsListAdapter$AccountListFilter;)V
com.android.contacts.activities.TransactionSafeActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.ContactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.email.service.AttachmentDownloadService.watchdogAlarm()V
android.accounts.AccountManager.getAuthTokenLabel(Ljava/lang/String;Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.hasFeatures(Landroid/accounts/Account;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAccountsByTypeAndFeatures(Ljava/lang/String;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.removeAccount(Landroid/accounts/Account;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.browser.BrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.email.service.EmailBroadcastProcessorService.onHandleIntent(Landroid/content/Intent;)V
com.android.internal.policy.impl.KeyguardViewManager.show()V
com.android.contacts.activities.ConfirmAddDetailActivity.access$300(Lcom/android/contacts/activities/ConfirmAddDetailActivity;Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.detail.ContactDetailFragment$ViewAdapter.getHeaderEntryView(Landroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.detail.ContactDetailTabCarousel.loadData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.ContactLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.ContactLoader.deliverResult(Ljava/lang/Object;)V
com.android.contacts.ContactLoader.onStartLoading()V
com.android.contacts.activities.PeopleActivity.updateViewConfiguration(Z)V
com.android.contacts.activities.PeopleActivity.access$300(Lcom/android/contacts/activities/PeopleActivity;)Z
com.android.contacts.activities.PeopleActivity.onPrepareOptionsMenu(Landroid/view/Menu;)Z
com.android.contacts.activities.PeopleActivity.showEmptyStateForTab(I)V
com.android.contacts.activities.PeopleActivity.updateFragmentsVisibility()V
com.android.contacts.group.GroupBrowseListFragment.access$400(Lcom/android/contacts/group/GroupBrowseListFragment;)V
com.android.contacts.detail.ContactDetailFragment.configureQuickFix()V
com.android.contacts.detail.ContactDetailFragment$3.onClick(Landroid/view/View;)V
com.android.contacts.detail.ContactDetailFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.detail.ContactDetailFragment.setData(Landroid/net/Uri;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.ContactDetailUpdatesFragment$1.onClick(Landroid/view/View;)V
com.android.contacts.detail.ContactDetailUpdatesFragment$2.onClick(Landroid/view/View;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.ContactEditorFragment$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.ContactEditorFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.ContactEditorActivity.onBackPressed()V
com.android.contacts.editor.ContactEditorFragment.doJoinSuggestedContact([J)V
com.android.contacts.editor.ContactEditorFragment.doSaveAction()V
com.android.contacts.editor.ContactEditorFragment.onSplitContactConfirmed()V
com.android.contacts.editor.ContactEditorFragment.onStop()V
com.android.contacts.editor.ContactEditorFragment.onSaveCompleted(ZIZLandroid/net/Uri;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onRemovePictureChosen()V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.ContactEditorFragment$3$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.activities.TransactionSafeActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.group.GroupDetailFragment.access$400(Lcom/android/contacts/group/GroupDetailFragment;Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment.onDoneClicked()V
com.android.contacts.group.GroupEditorFragment.bindGroupMetaData(Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment.onAccountChosen(Lcom/android/contacts/model/AccountWithDataSet;Landroid/os/Bundle;)V
com.android.contacts.interactions.ImportExportDialogFragment$2.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.list.AccountFilterActivity$MyLoaderCallbacks.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.AccountFilterActivity$FilterLoader.loadInBackground()Ljava/util/List;
com.android.contacts.list.ContactListFilterControllerImpl.<init>(Landroid/content/Context;)V
com.android.contacts.list.ContactListFilterController.checkFilterValidity(Z)V
com.android.contacts.activities.AttachPhotoActivity.access$000(Lcom/android/contacts/activities/AttachPhotoActivity;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.PhotoSelectionHandler.getWritableEntityIndex()I
com.android.contacts.model.EntityDeltaList.getFirstWritableRawContact(Landroid/content/Context;)Lcom/android/contacts/model/EntityDelta;
com.android.contacts.quickcontact.QuickContactActivity$5.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.socialwidget.SocialWidgetProvider.access$000(Landroid/content/Context;ILandroid/appwidget/AppWidgetManager;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.TransactionSafeActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.ContactsActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.editor.SelectAccountDialogFragment.onCreateDialog(Landroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.activities.DialtactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.AttachPhotoActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactSelectionActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupBrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.JoinContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.NonPhoneActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ShowOrCreateActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.CallContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.AccountFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.test.FragmentTestActivity.onCreate(Landroid/os/Bundle;)V
com.android.email.service.AttachmentDownloadService$Watchdog$1.run()V
android.accounts.GrantCredentialsPermissionActivity.onCreate(Landroid/os/Bundle;)V
android.test.IsolatedContext$MockAccountManager.getAuthTokenLabel(Ljava/lang/String;Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.test.IsolatedContext$MockAccountManager.hasFeatures(Landroid/accounts/Account;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.development.AccountsTester$2.onClick(Landroid/content/DialogInterface;I)V
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.doWork()V
android.test.IsolatedContext$MockAccountManager.removeAccount(Landroid/accounts/Account;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.development.AccountsTester.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.email.provider.AccountReconciler.reconcileAccountsInternal(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;Z)Z
com.android.settings.accounts.AccountSyncSettings$1.onClick(Landroid/content/DialogInterface;I)V
com.android.internal.policy.impl.KeyguardViewManager.verifyUnlock()V
com.android.internal.policy.impl.KeyguardViewMediator.handleShow()V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.onPostExecute(Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.detail.ContactDetailFragment$ViewAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.detail.ContactDetailLayoutController.showContactWithUpdates(Z)V
com.android.contacts.detail.ContactDetailLayoutController.showEmptyState()V
com.android.contacts.activities.PeopleActivity.onProviderStatusChange()V
com.android.contacts.activities.PeopleActivity.onResume()V
com.android.contacts.activities.PeopleActivity$TabPagerListener.onPageSelected(I)V
com.android.contacts.activities.PeopleActivity.access$200(Lcom/android/contacts/activities/PeopleActivity;I)V
com.android.contacts.activities.PeopleActivity.onAction(I)V
com.android.contacts.activities.PeopleActivity.onSelectedTabChanged()V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.detail.ContactDetailFragment.showEmptyState()V
com.android.contacts.detail.ContactDetailLayoutController.showContactWithoutUpdates()V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.TransactionSafeActivity.onBackPressed()V
com.android.contacts.ContactsActivity.onBackPressed()V
com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.activities.ContactEditorActivity$1.onClick(Landroid/view/View;)V
com.android.contacts.editor.SplitContactConfirmationDialogFragment$Listener.onSplitContactConfirmed()V
com.android.contacts.editor.ContactEditorFragment.onJoinCompleted(Landroid/net/Uri;)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onRemovePictureChosen()V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onUseAsPrimaryChosen()V
com.android.contacts.activities.GroupEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.group.GroupDetailFragment$2.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.activities.GroupEditorActivity$1.onClick(Landroid/view/View;)V
com.android.contacts.group.GroupEditorFragment.access$600(Lcom/android/contacts/group/GroupEditorFragment;Landroid/database/Cursor;)V
com.android.contacts.editor.SelectAccountDialogFragment$Listener.onAccountChosen(Lcom/android/contacts/model/AccountWithDataSet;Landroid/os/Bundle;)V
com.android.contacts.list.AccountFilterActivity$FilterLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.list.ContactListFilterController.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.activities.PeopleActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onStart()V
com.android.contacts.model.AccountTypeManagerImpl$1.run()V
com.android.contacts.activities.AttachPhotoActivity$1.onContactLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.getWritableEntityIndex()I
com.android.contacts.detail.PhotoSelectionHandler.getWritableEntityId()J
com.android.contacts.detail.PhotoSelectionHandler.onClick(Landroid/view/View;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.getWritableEntityIndex()I
com.android.contacts.quickcontact.QuickContactActivity$5.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.socialwidget.SocialWidgetProvider$1.onLoadComplete(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
android.accounts.AccountManager$AmsTask.doWork()V
com.android.email.provider.AccountReconciler.accountsNeedReconciling(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;)Z
com.android.email.provider.AccountReconciler.reconcileAccounts(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;)V
com.android.internal.policy.impl.KeyguardViewMediator.handleVerifyUnlock()V
com.android.internal.policy.impl.KeyguardViewMediator.access$1200(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.detail.ContactDetailLayoutController.initialize(Landroid/os/Bundle;)V
com.android.contacts.detail.ContactDetailLayoutController.setContactData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener.onDetailsLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.list.ProviderStatusWatcher$ProviderStatusListener.onProviderStatusChange()V
com.android.contacts.activities.TransactionSafeActivity.onResume()V
com.android.contacts.ContactsActivity.onResume()V
com.android.contacts.activities.ActionBarAdapter$Listener.onAction(I)V
com.android.contacts.activities.ActionBarAdapter$Listener.onSelectedTabChanged()V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.detail.PhotoSelectionHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.activities.DialtactsActivity.onBackPressed()V
com.android.contacts.activities.GroupEditorActivity.onBackPressed()V
com.android.contacts.activities.PeopleActivity.onBackPressed()V
com.android.contacts.editor.SplitContactConfirmationDialogFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onRemovePictureChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onRemovePictureChosen()V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onUseAsPrimaryChosen()V
com.android.contacts.activities.AttachPhotoActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactSelectionActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupBrowserActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.JoinContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.NonPhoneActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ShowOrCreateActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.CallContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService$Listener.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.AccountFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.CustomContactListFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.test.FragmentTestActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.ImportVCardActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.SelectAccountActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.group.GroupDetailFragment$2.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.group.GroupEditorFragment$2.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.editor.SelectAccountDialogFragment.onAccountSelected(Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.list.ContactListFilterControllerImpl.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.activities.TransactionSafeActivity.onStart()V
com.android.contacts.ContactsActivity.onStart()V
com.android.contacts.activities.AttachPhotoActivity$Listener.onContactLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.getWritableEntityId()J
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.getWritableEntityId()J
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.onClick(Landroid/view/View;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.onClick(Landroid/view/View;)V
com.android.contacts.socialwidget.SocialWidgetProvider$1.onLoadComplete(Landroid/content/Loader;Ljava/lang/Object;)V
android.accounts.AccountManager$AmsTask.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$AmsTask$Response.onResult(Landroid/os/Bundle;)V
com.android.email.service.MailService.reconcileAccountsWithAccountManager(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1500(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.showLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.pokeWakelock(I)V
com.android.contacts.detail.ContactDetailLayoutController.<init>(Landroid/app/Activity;Landroid/os/Bundle;Landroid/app/FragmentManager;Lcom/android/contacts/widget/TransitionAnimationView;Landroid/view/View;Lcom/android/contacts/detail/ContactDetailFragment$Listener;)V
com.android.contacts.activities.ContactDetailActivity$3$1.run()V
com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener$1.run()V
com.android.contacts.detail.ContactLoaderFragment$ContactLoaderFragmentListener.onDetailsLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.list.ProviderStatusWatcher.notifyListeners()V
com.android.contacts.activities.AttachPhotoActivity.onResume()V
com.android.contacts.activities.ContactDetailActivity.onResume()V
com.android.contacts.activities.ContactEditorActivity.onResume()V
com.android.contacts.activities.ContactSelectionActivity.onResume()V
com.android.contacts.activities.DialtactsActivity.onResume()V
com.android.contacts.activities.GroupBrowserActivity.onResume()V
com.android.contacts.activities.GroupDetailActivity.onResume()V
com.android.contacts.activities.GroupEditorActivity.onResume()V
com.android.contacts.activities.JoinContactActivity.onResume()V
com.android.contacts.activities.NonPhoneActivity.onResume()V
com.android.contacts.activities.ShowOrCreateActivity.onResume()V
com.android.contacts.CallContactActivity.onResume()V
com.android.contacts.list.AccountFilterActivity.onResume()V
com.android.contacts.list.CustomContactListFilterActivity.onResume()V
com.android.contacts.test.FragmentTestActivity.onResume()V
com.android.contacts.vcard.ImportVCardActivity.onResume()V
com.android.contacts.vcard.SelectAccountActivity.onResume()V
com.android.contacts.activities.ActionBarAdapter.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter.update()V
com.android.contacts.activities.ActionBarAdapter.setCurrentTab(IZ)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.activities.PeopleActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onFinishAction()V
com.android.contacts.editor.PhotoActionPopup$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.ContactSaveService.deliverCallbackOnUiThread(Landroid/content/Intent;)V
com.android.contacts.group.GroupEditorFragment$2.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.editor.SelectAccountDialogFragment.access$000(Lcom/android/contacts/editor/SelectAccountDialogFragment;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.activities.AttachPhotoActivity.onStart()V
com.android.contacts.activities.ContactDetailActivity.onStart()V
com.android.contacts.activities.ContactEditorActivity.onStart()V
com.android.contacts.activities.ContactSelectionActivity.onStart()V
com.android.contacts.activities.DialtactsActivity.onStart()V
com.android.contacts.activities.GroupBrowserActivity.onStart()V
com.android.contacts.activities.GroupDetailActivity.onStart()V
com.android.contacts.activities.GroupEditorActivity.onStart()V
com.android.contacts.activities.JoinContactActivity.onStart()V
com.android.contacts.activities.NonPhoneActivity.onStart()V
com.android.contacts.activities.ShowOrCreateActivity.onStart()V
com.android.contacts.CallContactActivity.onStart()V
com.android.contacts.list.AccountFilterActivity.onStart()V
com.android.contacts.test.FragmentTestActivity.onStart()V
com.android.contacts.vcard.ImportVCardActivity.onStart()V
com.android.contacts.vcard.SelectAccountActivity.onStart()V
com.android.contacts.list.CustomContactListFilterActivity.onStart()V
com.android.contacts.activities.AttachPhotoActivity$2.onLoadComplete(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.access$1600(Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler;)J
com.android.contacts.activities.PhotoSelectionActivity$4.onAnimationEnd(Landroid/animation/Animator;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onRequest(I)V
android.accounts.AccountManager$10.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$5.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$6.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$7.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$8.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$9.start()Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.start()Landroid/accounts/AccountManagerFuture;
android.accounts.IAccountManagerResponse$Stub$Proxy.onResult(Landroid/os/Bundle;)V
com.android.internal.policy.impl.KeyguardViewMediator.resetStateLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.verifyUnlockLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.hideLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.doKeyguardLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.setKeyguardEnabled(Z)V
com.android.internal.policy.impl.KeyguardViewCallback.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewMediator.pokeWakelock()V
com.android.contacts.activities.PeopleActivity.createViewsAndFragments(Landroid/os/Bundle;)V
com.android.contacts.detail.ContactLoaderFragment$1.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.ContactLoaderFragment.loadUri(Landroid/net/Uri;)V
com.android.contacts.list.ProviderStatusWatcher.access$600(Lcom/android/contacts/list/ProviderStatusWatcher;)V
com.android.contacts.activities.ActionBarAdapter.initialize(Landroid/os/Bundle;Lcom/android/contacts/list/ContactsRequest;)V
com.android.contacts.activities.ActionBarAdapter.setSearchMode(Z)V
com.android.contacts.activities.ActionBarAdapter.setCurrentTab(I)V
com.android.contacts.activities.TransactionSafeActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactsActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.OnContactBrowserActionListener.onFinishAction()V
com.android.contacts.ContactSaveService$2.run()V
com.android.contacts.editor.SelectAccountDialogFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.activities.AttachPhotoActivity$2.onLoadComplete(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.editor.Editor$EditorListener.onRequest(I)V
android.accounts.AccountManager.editProperties(Ljava/lang/String;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.addAccount(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.confirmCredentials(Landroid/accounts/Account;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.updateCredentials(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager.getAuthTokenByFeatures(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/Bundle;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.internal.policy.impl.KeyguardViewMediator.onScreenTurnedOff(I)V
com.android.internal.policy.impl.KeyguardViewMediator.onSimStateChanged(Lcom/android/internal/telephony/IccCard$State;)V
com.android.internal.policy.impl.KeyguardViewMediator.onUserSwitched(I)V
com.android.internal.policy.impl.KeyguardViewMediator.verifyUnlock(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$700(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.onSystemReady()V
com.android.internal.policy.impl.PhoneWindowManager.enableKeyguard(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewCallback.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewMediator.adjustUserActivityLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.handleWakeWhenReady(I)V
com.android.internal.policy.impl.PhoneWindowManager.showGlobalActionsDialog()V
com.android.contacts.detail.ContactLoaderFragment$1.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.activities.ContactDetailActivity.onAttachFragment(Landroid/app/Fragment;)V
com.android.contacts.activities.PeopleActivity.setupContactDetailFragment(Landroid/net/Uri;)V
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.onPostExecute(Ljava/lang/Boolean;)V
com.android.contacts.activities.ActionBarAdapter.onClose()Z
com.android.contacts.activities.PeopleActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity.configureFragments(Z)V
com.android.contacts.activities.ActionBarAdapter$MyNavigationListener.onNavigationItemSelected(IJ)Z
com.android.contacts.activities.ActionBarAdapter$MyTabListener.onTabSelected(Landroid/app/ActionBar$Tab;Landroid/app/FragmentTransaction;)V
com.android.contacts.activities.ContactSelectionActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.GroupDetailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.JoinContactActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.AccountFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.CustomContactListFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.ContactBrowseListFragment.finish()V
com.android.contacts.editor.LabeledEditorView.notifyEditorListener()V
com.android.contacts.editor.LabeledEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.PhotoEditorView$1.onClick(Landroid/view/View;)V
android.test.IsolatedContext$MockAccountManager.editProperties(Ljava/lang/String;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1.onResult(Landroid/os/Bundle;)V
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1.run(Landroid/accounts/AccountManagerFuture;)V
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.run(Landroid/accounts/AccountManagerFuture;)V
android.test.IsolatedContext$MockAccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.browser.DeviceAccountLogin.login(ILcom/android/browser/DeviceAccountLogin$AutoLoginCallback;)V
com.android.browser.GoogleAccountLogin.invalidateTokens()V
com.android.browser.GoogleAccountLogin.run(Landroid/accounts/AccountManagerFuture;)V
com.android.browser.GoogleAccountLogin.startLogin()V
android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.test.IsolatedContext$MockAccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.addAccount(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.calendar.AllInOneActivity$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.util.AccountPromptUtils.launchAccountPrompt(Landroid/app/Activity;)V
com.android.email.service.MailService.setupAccountManagerAccount(Landroid/content/Context;Lcom/android/emailcommon/provider/Account;ZZZLandroid/accounts/AccountManagerCallback;)V
com.android.settings.accounts.AddAccountSettings.addAccount(Ljava/lang/String;)V
android.test.IsolatedContext$MockAccountManager.confirmCredentials(Landroid/accounts/Account;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.next()V
android.test.IsolatedContext$MockAccountManager.updateCredentials(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
android.test.IsolatedContext$MockAccountManager.getAuthTokenByFeatures(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/Bundle;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.development.AccountsTester$3.onClick(Landroid/content/DialogInterface;I)V
com.android.internal.policy.impl.PhoneWindowManager.screenTurnedOff(I)V
com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback.onSimStateChanged(Lcom/android/internal/telephony/IccCard$State;)V
com.android.internal.policy.impl.KeyguardViewMediator.access$300(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.policy.impl.PhoneWindowManager.exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.PhoneWindowManager.launchHomeFromHotKey()V
com.android.internal.policy.impl.KeyguardViewMediator$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.policy.impl.KeyguardViewMediator.doKeyguardTimeout()V
com.android.internal.policy.impl.PhoneWindowManager.systemReady()V
android.view.WindowManagerPolicy.enableKeyguard(Z)V
com.android.internal.policy.impl.KeyguardScreenCallback.pokeWakelock(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.takeEmergencyCallAction()V
com.android.internal.policy.impl.KeyguardViewBase.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView$3.pokeWakelock()V
com.android.internal.policy.impl.LockPatternKeyguardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView.wakeWhenReadyTq(I)V
com.android.internal.policy.impl.KeyguardViewMediator.handleHide()V
com.android.internal.policy.impl.KeyguardViewMediator.handleSetHidden(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1800(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
com.android.contacts.activities.TransactionSafeActivity.onAttachFragment(Landroid/app/Fragment;)V
com.android.contacts.ContactsActivity.onAttachFragment(Landroid/app/Fragment;)V
com.android.contacts.activities.PeopleActivity.access$700(Lcom/android/contacts/activities/PeopleActivity;Landroid/net/Uri;)V
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.activities.TransactionSafeActivity.onSearchRequested()Z
com.android.contacts.ContactsActivity.onSearchRequested()Z
com.android.contacts.list.ContactEntryListFragment.finish()V
com.android.contacts.list.DefaultContactBrowseListFragment.finish()V
com.android.contacts.editor.EventFieldEditorView.notifyEditorListener()V
com.android.contacts.editor.LabeledEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.PhoneticNameEditorView.notifyEditorListener()V
com.android.contacts.editor.StructuredNameEditorView.notifyEditorListener()V
com.android.contacts.editor.TextFieldsEditorView.notifyEditorListener()V
com.android.contacts.editor.EventFieldEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.PhoneticNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView.onOptionalFieldVisibilityChange()V
com.android.browser.AutologinBar.onClick(Landroid/view/View;)V
com.android.browser.GoogleAccountLogin.run()V
android.accounts.AccountManager.blockingGetAuthToken(Landroid/accounts/Account;Ljava/lang/String;Z)Ljava/lang/String;
android.test.IsolatedContext$MockAccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;
com.android.email.activity.setup.AccountSetupOptions$1.run()V
com.android.settings.accounts.AddAccountSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.run(Landroid/accounts/AccountManagerFuture;)V
com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer.start()V
android.view.WindowManagerPolicy.screenTurnedOff(I)V
com.android.internal.policy.impl.PhoneWindowManager.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.handleSimStateChange(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimArgs;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.registerSimStateCallback(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimStateCallback;)V
com.android.internal.policy.impl.KeyguardViewMediator$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.view.WindowManagerPolicy.exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.PhoneWindowManager$19.run()V
android.view.WindowManagerPolicy.systemReady()V
com.android.server.wm.WindowManagerService$1.acquired()V
com.android.server.wm.WindowManagerService$1.released()V
com.android.server.wm.WindowManagerService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.policy.impl.AccountUnlockScreen$2.run(Landroid/accounts/AccountManagerFuture;)V
com.android.internal.policy.impl.AccountUnlockScreen.onTextChanged(Ljava/lang/CharSequence;III)V
com.android.internal.policy.impl.FaceUnlock.handleCancel()V
com.android.internal.policy.impl.FaceUnlock.handlePokeWakelock(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$2.userActivity(Landroid/view/View;)V
com.android.internal.policy.impl.LockScreen$WaveViewMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener.onPatternCellAdded(Ljava/util/List;)V
com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener.onPatternDetected(Ljava/util/List;)V
com.android.internal.policy.impl.SimPukUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.SimPukUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.SimUnlockScreen$TouchInput.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardScreenCallback.takeEmergencyCallAction()V
com.android.internal.policy.impl.LockPatternKeyguardView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardScreenCallback.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewBase.wakeWhenReadyTq(I)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1300(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.handleKeyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.access$2100(Lcom/android/internal/policy/impl/KeyguardViewMediator;Z)V
com.android.internal.policy.impl.KeyguardViewMediator.notifyScreenOffLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.notifyScreenOnLocked(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardViewMediator.wakeWhenReadyLocked(I)V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onSelectionChange()V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onViewContactAction(Landroid/net/Uri;)V
com.android.contacts.list.ContactEntryListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.finish()V
com.android.contacts.list.EmailAddressPickerFragment.finish()V
com.android.contacts.list.JoinContactListFragment.finish()V
com.android.contacts.list.PhoneNumberPickerFragment.finish()V
com.android.contacts.list.PostalAddressPickerFragment.finish()V
com.android.contacts.editor.Editor.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.EventFieldEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.StructuredNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.StructuredNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView$1.onClick(Landroid/view/View;)V
com.android.server.PowerManagerService$4.run()V
android.view.WindowManagerPolicy.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.access$300(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimArgs;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.reportSimUnlocked()V
com.android.internal.policy.impl.KeyguardStatusViewManager.<init>(Landroid/view/View;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Z)V
com.android.internal.policy.impl.KeyguardStatusViewManager.onResume()V
com.android.internal.policy.impl.KeyguardViewMediator.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/PhoneWindowManager;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.LockScreen.onResume()V
com.android.server.wm.WindowManagerService.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.WindowManagerPolicy.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.PhoneWindowManager.interceptFallback(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Z
com.android.server.wm.WindowManagerService.systemReady()V
com.android.internal.widget.LockScreenWidgetCallback.userActivity(Landroid/view/View;)V
com.android.internal.widget.WaveView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.LockPatternView$OnPatternListener.onPatternCellAdded(Ljava/util/List;)V
com.android.internal.widget.LockPatternView$OnPatternListener.onPatternDetected(Ljava/util/List;)V
com.android.internal.policy.impl.KeyguardStatusViewManager.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.FaceUnlock.handleServiceConnected()V
com.android.internal.policy.impl.LockScreen$GlowPadViewMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$GlowPadViewMethods.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$SlidingTabMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$SlidingTabMethods.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.PasswordUnlockScreen$2.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PasswordUnlockScreen$3.afterTextChanged(Landroid/text/Editable;)V
com.android.internal.policy.impl.PasswordUnlockScreen$4.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PasswordUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimUnlockScreen$1$1.run()V
com.android.internal.policy.impl.SimUnlockScreen.checkPin()V
com.android.internal.policy.impl.SimUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardViewManager.wakeWhenReadyTq(I)Z
com.android.internal.policy.impl.KeyguardViewMediator.access$1900(Lcom/android/internal/policy/impl/KeyguardViewMediator;Z)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDone(ZZ)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDoneDrawing()V
com.android.internal.policy.impl.KeyguardViewMediator.onScreenTurnedOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardViewMediator.onWakeKeyWhenKeyguardShowingTq(IZ)Z
com.android.internal.policy.impl.KeyguardViewMediator.onWakeMotionWhenKeyguardShowingTq()Z
com.android.contacts.list.OnContactBrowserActionListener.onSelectionChange()V
com.android.contacts.list.OnContactBrowserActionListener.onViewContactAction(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.onClose()V
com.android.contacts.list.DefaultContactBrowseListFragment.onClose()V
com.android.contacts.list.EmailAddressPickerFragment.onClose()V
com.android.contacts.list.JoinContactListFragment.onClose()V
com.android.contacts.list.PhoneNumberPickerFragment.onClose()V
com.android.contacts.list.PostalAddressPickerFragment.onClose()V
com.android.contacts.editor.EventFieldEditorView$2.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.EventFieldEditorView.clearAllFields()V
com.android.contacts.editor.EventFieldEditorView.onLabelRebuilt()V
com.android.contacts.editor.PhoneticNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView$2.afterTextChanged(Landroid/text/Editable;)V
com.android.server.wm.WindowManagerService$PolicyThread.run()V
com.android.internal.policy.impl.SimPukUnlockScreen$1$1.run()V
com.android.internal.policy.impl.AccountUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.LockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;)V
com.android.internal.policy.impl.PasswordUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;)V
com.android.internal.policy.impl.PatternUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;I)V
com.android.internal.policy.impl.SimPukUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.SimUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.AccountUnlockScreen.onResume()V
com.android.internal.policy.impl.PasswordUnlockScreen.onResume()V
com.android.internal.policy.impl.PatternUnlockScreen.onResume()V
com.android.internal.policy.impl.SimPukUnlockScreen.onResume()V
com.android.internal.policy.impl.SimUnlockScreen.onResume()V
com.android.internal.policy.impl.KeyguardScreen.onResume()V
android.view.IWindowManager$Stub$Proxy.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.IWindowManager$Stub.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
com.android.server.wm.InputMonitor.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.internal.policy.impl.PhoneWindowManager.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.TransportControlView.onClick(Landroid/view/View;)V
com.android.internal.widget.WaveView.setGrabbedState(I)V
com.android.internal.widget.LockPatternView.notifyCellAdded()V
com.android.internal.widget.LockPatternView.notifyPatternDetected()V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.internal.widget.SlidingTab$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.SlidingTab$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.SimUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDone(Z)V
com.android.internal.policy.impl.PhoneWindowManager$15.run()V
com.android.internal.policy.impl.PhoneWindowManager$9.run()V
com.android.internal.policy.impl.KeyguardViewCallback.keyguardDoneDrawing()V
com.android.internal.policy.impl.PhoneWindowManager.screenTurningOn(Landroid/view/WindowManagerPolicy$ScreenOnListener;)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.notifyLidSwitchChanged(JZ)V
com.android.internal.policy.impl.PhoneWindowManager.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.contacts.list.ContactBrowseListFragment.checkSelection()V
com.android.contacts.list.ContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.LabeledEditorView.onLabelRebuilt()V
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)V
com.android.internal.policy.impl.LockPatternKeyguardView.createUnlockScreenFor(Lcom/android/internal/policy/impl/LockPatternKeyguardView$UnlockMode;)Landroid/view/View;
com.android.internal.policy.impl.LockPatternKeyguardView.createLockScreen()Landroid/view/View;
com.android.internal.policy.impl.PatternUnlockScreen.onWindowFocusChanged(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.show()V
com.android.internal.policy.impl.LockPatternKeyguardView.updateScreen(Lcom/android/internal/policy/impl/LockPatternKeyguardView$Mode;Z)V
android.view.IWindowManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IWindowManager.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
android.view.WindowManagerPolicy.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.WaveView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.WaveView.tryTransitionToStartAttemptState(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.addCellToPattern(Lcom/android/internal/widget/LockPatternView$Cell;)V
com.android.internal.widget.LockPatternView.handleActionUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.internal.widget.SlidingTab.setGrabbedState(I)V
com.android.internal.widget.SlidingTab.dispatchTriggerEvent(I)V
com.android.internal.policy.impl.KeyguardViewCallback.keyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost.dispatchDraw(Landroid/graphics/Canvas;)V
android.view.WindowManagerPolicy.screenTurningOn(Landroid/view/WindowManagerPolicy$ScreenOnListener;)V
android.view.WindowManagerPolicy.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
android.view.WindowManagerPolicy.notifyLidSwitchChanged(JZ)V
android.view.WindowManagerPolicy.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.contacts.list.ContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.checkSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.datepicker.DatePickerDialog.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView$3.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.PhoneticNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.StructuredNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.TextFieldsEditorView.onLabelRebuilt()V
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZLcom/android/server/wm/WindowManagerService$1;)V
com.android.internal.policy.impl.LockPatternKeyguardView.recreateUnlockScreen(Lcom/android/internal/policy/impl/LockPatternKeyguardView$UnlockMode;)V
com.android.internal.policy.impl.LockPatternKeyguardView.recreateLockScreen()V
com.android.internal.policy.impl.KeyguardViewBase.show()V
com.android.internal.policy.impl.LockPatternKeyguardView.onScreenTurnedOn()V
com.android.internal.policy.impl.LockPatternKeyguardView.access$200(Lcom/android/internal/policy/impl/LockPatternKeyguardView;Lcom/android/internal/policy/impl/LockPatternKeyguardView$Mode;Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.verifyUnlock()V
com.android.server.wm.WindowManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.KeyguardManager.exitKeyguardSecurely(Landroid/app/KeyguardManager$OnKeyguardExitResult;)V
com.android.server.input.InputManagerService.interceptKeyBeforeDispatching(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)J
com.android.server.wm.InputMonitor.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.WaveView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.LockPatternView.detectAndAddHit(FF)Lcom/android/internal/widget/LockPatternView$Cell;
com.android.internal.widget.LockPatternView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.internal.widget.SlidingTab.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.cancelGrab()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.goToLockScreen()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.goToUnlockScreen()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.keyguardDone(Z)V
com.android.server.wm.InputMonitor.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.wm.InputMonitor.notifyLidSwitchChanged(JZ)V
com.android.server.wm.InputMonitor.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.refreshSelectedContactUri()V
com.android.contacts.list.DefaultContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(IJ)V
com.android.contacts.editor.EventFieldEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.LabeledEditorView$1.onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.PhoneticNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.StructuredNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.TextFieldsEditorView.onTypeSelectionChange(I)V
com.android.server.wm.WindowManagerService$WMThread.run()V
com.android.internal.policy.impl.KeyguardViewBase.onScreenTurnedOn()V
com.android.internal.policy.impl.LockPatternKeyguardView$1.run()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.forgotPattern(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.reportFailedUnlockAttempt()V
com.android.internal.policy.impl.LockPatternKeyguardView$4.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardViewBase.verifyUnlock()V
com.android.systemui.statusbar.BaseStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.systemui.statusbar.phone.PhoneStatusBar$NotificationClicker.onClick(Landroid/view/View;)V
com.android.server.input.InputManagerService$Callbacks.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.LockPatternView.handleActionDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.handleActionMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.SlidingTab.onVisibilityChanged(Landroid/view/View;I)V
com.android.internal.policy.impl.KeyguardScreenCallback.goToLockScreen()V
com.android.internal.policy.impl.KeyguardScreenCallback.goToUnlockScreen()V
com.android.internal.policy.impl.KeyguardScreenCallback.keyguardDone(Z)V
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.input.InputManagerService$Callbacks.notifyLidSwitchChanged(JZ)V
com.android.server.input.InputManagerService$Callbacks.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.DefaultContactBrowseListFragment.refreshSelectedContactUri()V
com.android.contacts.list.ContactEntryListFragment.onItemClick(IJ)V
com.android.server.wm.WindowManagerService.main(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)Lcom/android/server/wm/WindowManagerService;
com.android.internal.policy.impl.KeyguardViewManager.onScreenTurnedOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardScreenCallback.forgotPattern(Z)V
com.android.internal.policy.impl.KeyguardScreenCallback.reportFailedUnlockAttempt()V
com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallbackImpl.onUserChanged(I)V
com.android.server.input.InputManagerService.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.AccountUnlockScreen.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.LockScreen$3.run()V
com.android.internal.policy.impl.LockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.AccountUnlockScreen$1.run()V
com.android.internal.policy.impl.FaceUnlock.handleUnlock()V
com.android.internal.policy.impl.PasswordUnlockScreen.verifyPasswordAndUnlock()V
com.android.server.input.InputManagerService.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.input.InputManagerService.notifyLidSwitchChanged(JZ)V
com.android.server.input.InputManagerService.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.ContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.ContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.internal.policy.impl.KeyguardViewMediator.handleNotifyScreenOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.PatternUnlockScreen$2.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardStatusViewManager$1.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallback.onUserChanged(I)V
com.android.internal.policy.impl.KeyguardViewMediator$1.onUserChanged(I)V
com.android.internal.policy.impl.LockScreen$1.onUserChanged(I)V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.PasswordUnlockScreen.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.DefaultContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.JoinContactListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1700(Lcom/android/internal/policy/impl/KeyguardViewMediator;Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.handleUserChanged(I)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactEntryListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragmentForRequest()V
com.android.contacts.list.ContactPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.EmailAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.JoinContactListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PhoneNumberPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PostalAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.list.ContactEntryListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setSearchMode(Z)V
com.android.contacts.list.EmailAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.list.JoinContactListFragment.setSearchMode(Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setSearchMode(Z)V
com.android.contacts.list.PostalAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragment()V
com.android.contacts.activities.PeopleActivity.onContactListFilterChanged()V
com.android.contacts.list.OnContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.activities.ContactSelectionActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.list.ContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.EmailAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.JoinContactListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PostalAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactListFilterController$ContactListFilterListener.onContactListFilterChanged()V
com.android.contacts.list.ContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.JoinContactActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.DialtactsActivity$7.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.list.ContactListFilterControllerImpl.notifyContactListFilterChanged()V
com.android.contacts.list.DefaultContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.activities.PeopleActivity.setQueryTextToFragment(Ljava/lang/String;)V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;ZZ)V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactListFilterControllerImpl.selectCustomFilter()V
com.android.contacts.list.ContactListFilterController.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactListFilterController.selectCustomFilter()V
com.android.contacts.util.AccountFilterUtil.handleAccountFilterResult(Lcom/android/contacts/list/ContactListFilterController;ILandroid/content/Intent;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneFavoriteFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneNumberPickerFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.ContactEntryListFragment.onActivityResult(IILandroid/content/Intent;)V
android.provider.Browser.deleteFromHistory(Landroid/content/ContentResolver;Ljava/lang/String;)V
com.android.browser.BrowserHistoryPage.onContextItemSelected(Landroid/view/MenuItem;)Z
android.provider.BrowserContract$Bookmarks.buildFolderUri(J)Landroid/net/Uri;
com.android.browser.AddBookmarkPage.getUriForFolder(J)Landroid/net/Uri;
com.android.browser.AddBookmarkPage.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.browser.AddBookmarkPage.onTop(Lcom/android/browser/BreadCrumbView;ILjava/lang/Object;)V
com.android.browser.BreadCrumbView$Controller.onTop(Lcom/android/browser/BreadCrumbView;ILjava/lang/Object;)V
com.android.browser.BreadCrumbView.notifyController()V
com.android.browser.view.BookmarkExpandableView.onTop(Lcom/android/browser/BreadCrumbView;ILjava/lang/Object;)V
com.android.browser.AddBookmarkPage.descendInto(Ljava/lang/String;J)V
com.android.browser.BreadCrumbView.onClick(Landroid/view/View;)V
com.android.browser.BreadCrumbView.pop(Z)V
com.android.browser.AddBookmarkPage.completeOrCancelFolderNaming(Z)V
com.android.browser.AddBookmarkPage.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.browser.BreadCrumbView.clear()V
com.android.browser.BreadCrumbView.popView()V
com.android.browser.AddBookmarkPage.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.browser.AddBookmarkPage.onClick(Landroid/view/View;)V
com.android.browser.AddBookmarkPage.setupTopCrumb()V
com.android.browser.AddBookmarkPage.onRootFolderFound(J)V
com.android.browser.AddBookmarkPage.switchToDefaultView(Z)V
com.android.browser.AddBookmarkPage.onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.browser.AddBookmarkPage.setAccount(Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.AddBookmarkPage$1.onLoadFinished(Landroid/content/Loader;Lcom/android/browser/AddBookmarkPage$EditBookmarkInfo;)V
com.android.browser.AddBookmarkPage$1.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.browser.DownloadTouchIcon.storeIcon(Landroid/graphics/Bitmap;)V
com.android.browser.DownloadTouchIcon.doInBackground([Ljava/lang/String;)Ljava/lang/Void;
com.android.browser.DownloadTouchIcon.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Browser.updateVisitedHistory(Landroid/content/ContentResolver;Ljava/lang/String;Z)V
com.android.browser.Controller$SaveSnapshotTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Long;
com.android.browser.Controller$SaveSnapshotTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BrowserBackupAgent.addBookmark(Lcom/android/browser/BrowserBackupAgent$Bookmark;)V
com.android.browser.BrowserBackupAgent.onRestore(Landroid/app/backup/BackupDataInput;ILandroid/os/ParcelFileDescriptor;)V
android.provider.Browser.truncateHistory(Landroid/content/ContentResolver;)V
com.android.browser.DataController$DataControllerHandler.doUpdateVisitedHistory(Ljava/lang/String;)V
android.provider.BrowserContract$SyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
android.provider.BrowserContract$SyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
android.provider.Browser.clearSearches(Landroid/content/ContentResolver;)V
com.android.browser.BrowserSettings.clearHistory()V
com.android.browser.BrowserYesNoPreference.onDialogClosed(Z)V
com.android.internal.preference.YesNoPreference.onDialogClosed(Z)V
com.android.browser.Bookmarks.removeFromBookmarks(Landroid/content/Context;Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.BrowserBookmarksPage.handleContextItem(III)Z
com.android.browser.HistoryItem.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.browser.BrowserBookmarksPage.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.BrowserBookmarksPage$2.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts.delete(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.Controller$10.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.browser.Controller$10.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.DataController$DataControllerHandler.handleMessage(Lcom/android/browser/DataController$DCMessage;)V
com.android.browser.DataController$DataControllerHandler.run()V
com.android.browser.DataController.<init>(Landroid/content/Context;)V
com.android.browser.DataController.getInstance(Landroid/content/Context;)Lcom/android/browser/DataController;
com.android.browser.Controller.doUpdateVisitedHistory(Lcom/android/browser/Tab;Z)V
com.android.browser.Controller.onReceivedTitle(Lcom/android/browser/Tab;Ljava/lang/String;)V
com.android.browser.Tab.deleteThumbnail()V
com.android.browser.Tab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;Landroid/os/Bundle;)V
com.android.browser.Tab.persistThumbnail()V
com.android.browser.Tab.restoreState(Landroid/os/Bundle;)V
com.android.browser.WebViewController.doUpdateVisitedHistory(Lcom/android/browser/Tab;Z)V
com.android.browser.WebViewController.onReceivedTitle(Lcom/android/browser/Tab;Ljava/lang/String;)V
com.android.browser.SnapshotTab.deleteThumbnail()V
com.android.browser.TabControl.saveState(Landroid/os/Bundle;)V
com.android.browser.Tab.removeFromTree()V
com.android.browser.Tab.updateShouldCaptureThumbnails()V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;Landroid/os/Bundle;)V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;J)V
com.android.browser.TabControl.createNewTab(Landroid/os/Bundle;Z)Lcom/android/browser/Tab;
com.android.browser.Tab.<init>(Lcom/android/browser/WebViewController;Landroid/os/Bundle;)V
com.android.browser.Tab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;)V
com.android.browser.SnapshotTab.persistThumbnail()V
com.android.browser.Tab.capture()V
com.android.browser.SnapshotTab.restoreState(Landroid/os/Bundle;)V
com.android.browser.Tab$2.doUpdateVisitedHistory(Landroid/webkit/WebView;Ljava/lang/String;Z)V
com.android.browser.Tab$3.onReceivedTitle(Landroid/webkit/WebView;Ljava/lang/String;)V
com.android.browser.Controller.createSaveState()Landroid/os/Bundle;
com.android.browser.SnapshotTab.removeFromTree()V
com.android.browser.TabControl.removeTab(Lcom/android/browser/Tab;)Z
com.android.browser.TabControl.removeParentChildRelationShips()V
com.android.browser.SnapshotTab.updateShouldCaptureThumbnails()V
com.android.browser.Tab.setController(Lcom/android/browser/WebViewController;)V
com.android.browser.XLargeUi.setUseQuickControls(Z)V
com.android.browser.TabControl.createSnapshotTab(J)Lcom/android/browser/SnapshotTab;
com.android.browser.TabControl.createNewTab(Z)Lcom/android/browser/Tab;
com.android.browser.TabControl.restoreState(Landroid/os/Bundle;JZZ)V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;Landroid/os/Bundle;)V
com.android.browser.Preloader$PreloaderSession.<init>(Lcom/android/browser/Preloader;Ljava/lang/String;)V
com.android.browser.SnapshotTab.<init>(Lcom/android/browser/WebViewController;Landroid/webkit/WebView;)V
com.android.browser.PhoneUi.showNavScreen()V
com.android.browser.PieControl.buildTabs()V
com.android.browser.SnapshotTab.capture()V
com.android.browser.Tab.putInBackground()V
com.android.browser.Tab.postCapture()V
com.android.browser.Controller.onSaveInstanceState(Landroid/os/Bundle;)V
com.android.browser.CrashRecoveryHandler$2.run()V
com.android.browser.Controller.closeCurrentTab(Z)V
com.android.browser.Controller.removeTab(Lcom/android/browser/Tab;)V
com.android.browser.Controller.onActivityResult(IILandroid/content/Intent;)V
com.android.browser.SnapshotTab.setController(Lcom/android/browser/WebViewController;)V
com.android.browser.TabControl.addPreloadedTab(Lcom/android/browser/Tab;)V
com.android.browser.BaseUi.setUseQuickControls(Z)V
com.android.browser.XLargeUi.<init>(Landroid/app/Activity;Lcom/android/browser/UiController;)V
com.android.browser.Controller.createNewSnapshotTab(JZ)Lcom/android/browser/SnapshotTab;
com.android.browser.Controller.createNewTab(ZZZ)Lcom/android/browser/Tab;
com.android.browser.TabControl.createNewTab()Lcom/android/browser/Tab;
com.android.browser.Controller.onPreloginFinished(Landroid/os/Bundle;Landroid/content/Intent;JZ)V
com.android.browser.Preloader.getSession(Ljava/lang/String;)Lcom/android/browser/Preloader$PreloaderSession;
com.android.browser.PhoneUi.toggleNavScreen()V
com.android.browser.PieControl.onClick(Landroid/view/View;)V
com.android.browser.PieControl.access$000(Lcom/android/browser/PieControl;)V
com.android.browser.SnapshotTab.putInBackground()V
com.android.browser.TabControl.setCurrentTab(Lcom/android/browser/Tab;Z)Z
com.android.browser.SnapshotTab.postCapture()V
com.android.browser.Tab.onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V
com.android.browser.ActivityController.onSaveInstanceState(Landroid/os/Bundle;)V
com.android.browser.Controller.closeCurrentTab()V
com.android.browser.Controller.goBackOnePageOrQuit()V
com.android.browser.Controller.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.Controller.onDestroy()V
com.android.browser.Controller.showPreloadedTab(Lcom/android/browser/IntentHandler$UrlData;)Lcom/android/browser/Tab;
com.android.browser.PhoneUi.setUseQuickControls(Z)V
com.android.browser.UI.setUseQuickControls(Z)V
com.android.browser.BaseUi.<init>(Landroid/app/Activity;Lcom/android/browser/UiController;)V
com.android.browser.BrowserActivity.createController()Lcom/android/browser/Controller;
com.android.browser.UiController.createNewSnapshotTab(JZ)Lcom/android/browser/SnapshotTab;
com.android.browser.Controller.openTab(Lcom/android/browser/IntentHandler$UrlData;)Lcom/android/browser/Tab;
com.android.browser.Controller.openTab(Ljava/lang/String;ZZZLcom/android/browser/Tab;)Lcom/android/browser/Tab;
com.android.browser.Controller.access$100(Lcom/android/browser/Controller;Landroid/os/Bundle;Landroid/content/Intent;JZ)V
com.android.browser.Preloader.cancelSearchBoxPreload(Ljava/lang/String;)V
com.android.browser.Preloader.handlePreloadRequest(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;)V
com.android.browser.NavigationBarPhone.onClick(Landroid/view/View;)V
com.android.browser.SnapshotBar.onClick(Landroid/view/View;)V
com.android.browser.PieControl$1.onLayout(IIZ)V
com.android.browser.TabControl.setCurrentTab(Lcom/android/browser/Tab;)Z
com.android.browser.TabControl.recreateWebView(Lcom/android/browser/Tab;)V
com.android.browser.SnapshotTab.onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V
com.android.browser.BrowserActivity.onNewIntent(Landroid/content/Intent;)V
com.android.browser.BrowserActivity.onSaveInstanceState(Landroid/os/Bundle;)V
com.android.browser.Controller.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.Controller.closeEmptyTab()V
com.android.browser.UiController.closeCurrentTab()V
com.android.browser.Controller.onBackKey()V
com.android.browser.Controller.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.UiController.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.WebViewController.closeTab(Lcom/android/browser/Tab;)V
com.android.browser.ActivityController.onDestroy()V
com.android.browser.PhoneUi.<init>(Landroid/app/Activity;Lcom/android/browser/UiController;)V
com.android.browser.BrowserSettings.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
com.android.browser.IntentHandler.onNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.Controller.openTab(Ljava/lang/String;Lcom/android/browser/Tab;ZZ)Lcom/android/browser/Tab;
com.android.browser.Controller$2.run()V
com.android.browser.PreloadRequestReceiver.handlePreload(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.NavigationBarBase.onClick(Landroid/view/View;)V
com.android.browser.view.PieMenu$PieView$OnLayoutListener.onLayout(IIZ)V
com.android.browser.Controller.setActiveTab(Lcom/android/browser/Tab;)V
com.android.browser.Controller.reuseTab(Lcom/android/browser/Tab;Lcom/android/browser/IntentHandler$UrlData;)V
com.android.browser.ActivityController.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.Controller.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UiController.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UrlHandler.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.UrlHandler.startActivityForUrl(Lcom/android/browser/Tab;Ljava/lang/String;)Z
com.android.browser.NavScreen.onCloseTab(Lcom/android/browser/Tab;)V
com.android.browser.TabBar$TabView.closeTab()V
com.android.browser.Controller.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.WebViewController.onDownloadStart(Lcom/android/browser/Tab;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.SnapshotTab$LoadData.onPostExecute(Landroid/database/Cursor;)V
com.android.browser.Tab$3.onCloseWindow(Landroid/webkit/WebView;)V
com.android.browser.BrowserActivity.onDestroy()V
com.android.browser.Controller.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.openIncognitoTab()Lcom/android/browser/Tab;
com.android.browser.Controller.openTabToHomePage()Lcom/android/browser/Tab;
com.android.browser.UiController.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.UrlHandler.handleMenuClick(Lcom/android/browser/Tab;Ljava/lang/String;)Z
com.android.browser.WebViewController.openTab(Ljava/lang/String;ZZZ)Lcom/android/browser/Tab;
com.android.browser.Controller$7.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.Controller$9.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.WebViewController.openTab(Ljava/lang/String;Lcom/android/browser/Tab;ZZ)Lcom/android/browser/Tab;
com.android.browser.PreloadRequestReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.browser.NavigationBarTablet.onClick(Landroid/view/View;)V
com.android.browser.view.BasePieView.layout(IIZFI)V
com.android.browser.Controller.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.UiController.setActiveTab(Lcom/android/browser/Tab;)V
com.android.browser.BrowserActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.ActivityController.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.NavigationBarPhone.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.NavScreen.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.browser.Controller.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.UrlHandler$RLZTask.onPostExecute(Ljava/lang/String;)V
com.android.browser.NavScreen.access$000(Lcom/android/browser/NavScreen;Lcom/android/browser/Tab;)V
com.android.browser.TabBar$TabView.onClick(Landroid/view/View;)V
com.android.browser.ActivityController.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.Tab$4.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.Tab$7.onDownloadStart(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.browser.SnapshotTab$LoadData.onPostExecute(Ljava/lang/Object;)V
com.android.browser.ActivityController.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.UiController.handleNewIntent(Landroid/content/Intent;)V
com.android.browser.Controller.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.browser.UiController.openIncognitoTab()Lcom/android/browser/Tab;
com.android.browser.UiController.openTabToHomePage()Lcom/android/browser/Tab;
com.android.browser.NavScreen.openNewTab()V
com.android.browser.Tab$3.createWindow(ZLandroid/os/Message;)V
com.android.browser.view.PieListView.layout(IIZFI)V
com.android.browser.view.PieMenu$PieView.layout(IIZFI)V
com.android.browser.view.PieStackView.layout(IIZFI)V
com.android.browser.UiController.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.WebViewController.switchToTab(Lcom/android/browser/Tab;)Z
com.android.browser.NavScreen.switchToTab(Lcom/android/browser/Tab;)V
com.android.browser.PhoneUi.hideNavScreen(IZ)V
com.android.browser.BrowserActivity.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.WebViewController.shouldOverrideUrlLoading(Lcom/android/browser/Tab;Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.UrlHandler$RLZTask.onPostExecute(Ljava/lang/Object;)V
com.android.browser.NavScreen$1.onRemovePosition(I)V
com.android.browser.BrowserActivity.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.browser.NavigationBarBase.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.TabBar.onClick(Landroid/view/View;)V
com.android.browser.NavScreen.onClick(Landroid/view/View;)V
com.android.browser.Tab$3.onCreateWindow(Landroid/webkit/WebView;ZZLandroid/os/Message;)Z
com.android.browser.Tab$3.access$1600(Lcom/android/browser/Tab$3;ZLandroid/os/Message;)V
com.android.browser.view.PieMenu.layoutPieView(Lcom/android/browser/view/PieMenu$PieView;IIF)V
com.android.browser.PieControl$TabAdapter$1.onClick(Landroid/view/View;)V
com.android.browser.Tab$3.onRequestFocus(Landroid/webkit/WebView;)V
com.android.browser.NavScreen.access$100(Lcom/android/browser/NavScreen;Lcom/android/browser/Tab;)V
com.android.browser.NavScreen$2.onLayout(IIII)V
com.android.browser.NavScreen.close(IZ)V
com.android.browser.PhoneUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.PhoneUi.showWeb(Z)V
com.android.browser.Tab$2.shouldOverrideUrlLoading(Landroid/webkit/WebView;Ljava/lang/String;)Z
com.android.browser.NavTabScroller$OnRemoveListener.onRemovePosition(I)V
com.android.browser.NavigationBarPhone.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.NavigationBarTablet.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.UrlInputView$UrlInputListener.onAction(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.Tab$3$1.onClick(Landroid/content/DialogInterface;I)V
com.android.browser.view.PieMenu.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.browser.NavScreen$TabAdapter$1.onClick(Landroid/view/View;)V
com.android.browser.NavTabScroller$OnLayoutListener.onLayout(IIII)V
com.android.browser.NavScreen.close(I)V
com.android.browser.BaseUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.BaseUi.showWeb(Z)V
com.android.browser.NavTabScroller$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.browser.UrlInputView.finishInput(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.NavTabScroller.onLayout(ZIIII)V
com.android.browser.PhoneUi.onBackKey()Z
com.android.browser.UI.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.XLargeUi.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.browser.UI.showWeb(Z)V
com.android.browser.XLargeUi.showWeb(Z)V
com.android.browser.UrlInputView.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.browser.UrlInputView.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.browser.UrlInputView.onSelect(Ljava/lang/String;ILjava/lang/String;)V
com.android.browser.view.ScrollerView.onLayout(ZIIII)V
com.android.browser.BaseUi.onBackKey()Z
com.android.browser.SuggestionsAdapter$CompletionListener.onSelect(Ljava/lang/String;ILjava/lang/String;)V
com.android.browser.UrlInputView.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.browser.UI.onBackKey()Z
com.android.browser.XLargeUi.onBackKey()Z
com.android.browser.SuggestionsAdapter.onClick(Landroid/view/View;)V
com.android.browser.DataController$DataControllerHandler.doUpdateHistoryTitle(Ljava/lang/String;Ljava/lang/String;)V
com.android.browser.Controller$PruneThumbnails.run()V
com.android.browser.Bookmarks$1.updateImages(Landroid/content/ContentResolver;Ljava/lang/String;Landroid/content/ContentValues;)V
com.android.browser.Bookmarks$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.browser.Bookmarks$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Browser.addSearchUrl(Landroid/content/ContentResolver;Ljava/lang/String;)V
com.android.browser.IntentHandler$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.browser.IntentHandler$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BookmarkUtils.getBookmarksUri(Landroid/content/Context;)Landroid/net/Uri;
com.android.browser.AddBookmarkPage$UpdateBookmarkTask.doInBackground([Landroid/content/ContentValues;)Ljava/lang/Void;
com.android.browser.BrowserBookmarksPage$LookupBookmarkCount.doInBackground([Ljava/lang/Long;)Ljava/lang/Integer;
com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask.doInBackground([Ljava/lang/Void;)Landroid/database/Cursor;
com.android.browser.DataController$DataControllerHandler.doQueryBookmarkStatus(Ljava/lang/String;Ljava/lang/Object;)V
com.android.browser.AddBookmarkPage$UpdateBookmarkTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BrowserBookmarksPage$LookupBookmarkCount.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.provider.Browser.deleteHistoryWhere(Landroid/content/ContentResolver;Ljava/lang/String;)V
android.provider.Browser.clearHistory(Landroid/content/ContentResolver;)V
android.provider.Browser.deleteHistoryTimeFrame(Landroid/content/ContentResolver;JJ)V
com.android.browser.BrowserHistoryPage$ClearHistoryTask.run()V
com.android.browser.BrowserHistoryPage$3.onClick(Landroid/content/DialogInterface;I)V
com.android.browser.provider.BrowserProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.browser.AddBookmarkPage.addFolderToCurrent(Ljava/lang/String;)J
com.android.browser.Bookmarks.addBookmark(Landroid/content/Context;ZLjava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap;J)V
com.android.browser.AddBookmarkPage$SaveBookmarkRunnable.run()V
android.provider.BrowserContract$Settings.setSyncEnabled(Landroid/content/Context;Z)V
com.android.browser.BookmarkUtils$1$1.run()V
com.android.browser.DataController$DataControllerHandler.doSaveThumbnail(Lcom/android/browser/Tab;)V
Permission:android.permission.READ_SYNC_STATS

98 Callers:

android.content.ContentService.isSyncActive(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService$Stub$Proxy.isSyncActive(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService$Stub.isSyncActive(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService.isSyncActive(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.content.ContentResolver.isSyncActive(Landroid/accounts/Account;Ljava/lang/String;)Z
com.android.contacts.ContactListEmptyView.isSyncActive()Z
com.android.contacts.list.ContactEntryListFragment.isSyncActive()Z
android.content.ContentService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ContextImpl$ApplicationContentResolver.isSyncActive(Landroid/accounts/Account;Ljava/lang/String;)Z
android.test.mock.MockContentResolver.isSyncActive(Landroid/accounts/Account;Ljava/lang/String;)Z
android.test.SyncBaseInstrumentation.syncProvider(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.ContactListEmptyView.show(ZZZZZZZ)V
com.android.contacts.list.ContactBrowseListFragment.isSyncActive()Z
com.android.contacts.list.ContactPickerFragment.isSyncActive()Z
com.android.contacts.list.DefaultContactBrowseListFragment.isSyncActive()Z
com.android.contacts.list.EmailAddressPickerFragment.isSyncActive()Z
com.android.contacts.list.JoinContactListFragment.isSyncActive()Z
com.android.contacts.list.PhoneNumberPickerFragment.isSyncActive()Z
com.android.contacts.list.PostalAddressPickerFragment.isSyncActive()Z
com.android.contacts.list.ContactBrowseListFragment.prepareEmptyView()V
com.android.contacts.list.ContactPickerFragment.prepareEmptyView()V
com.android.contacts.list.ContactEntryListFragment.prepareEmptyView()V
com.android.contacts.list.DefaultContactBrowseListFragment.prepareEmptyView()V
com.android.contacts.list.EmailAddressPickerFragment.prepareEmptyView()V
com.android.contacts.list.JoinContactListFragment.prepareEmptyView()V
com.android.contacts.list.PhoneNumberPickerFragment.prepareEmptyView()V
com.android.contacts.list.PostalAddressPickerFragment.prepareEmptyView()V
android.content.ContentService.getCurrentSyncs()Ljava/util/List;
android.content.IContentService$Stub$Proxy.getCurrentSyncs()Ljava/util/List;
android.content.IContentService$Stub.getCurrentSyncs()Ljava/util/List;
android.content.IContentService.getCurrentSyncs()Ljava/util/List;
android.content.ContentResolver.getCurrentSync()Landroid/content/SyncInfo;
android.content.ContentResolver.getCurrentSyncs()Ljava/util/List;
android.app.ContextImpl$ApplicationContentResolver.getCurrentSync()Landroid/content/SyncInfo;
android.test.mock.MockContentResolver.getCurrentSync()Landroid/content/SyncInfo;
com.android.settings.accounts.AccountSyncSettings.onPrepareOptionsMenu(Landroid/view/Menu;)V
com.android.settings.accounts.ManageAccountsSettings.onPrepareOptionsMenu(Landroid/view/Menu;)V
com.android.settings.accounts.ManageAccountsSettings.onSyncStateUpdated()V
android.app.ContextImpl$ApplicationContentResolver.getCurrentSyncs()Ljava/util/List;
android.test.mock.MockContentResolver.getCurrentSyncs()Ljava/util/List;
com.android.settings.accounts.AccountSyncSettings.setFeedsState()V
com.android.settings.accounts.AccountPreferenceBase.onPrepareOptionsMenu(Landroid/view/Menu;)V
com.android.settings.SettingsPreferenceFragment.onPrepareOptionsMenu(Landroid/view/Menu;)V
com.android.settings.accounts.AccountPreferenceBase.onSyncStateUpdated()V
com.android.settings.accounts.ManageAccountsSettings.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.accounts.AccountSyncSettings.onSyncStateUpdated()V
com.android.settings.accounts.AccountPreferenceBase$1$1.run()V
com.android.settings.accounts.AccountPreferenceBase.onResume()V
com.android.settings.accounts.SyncSettings.onSyncStateUpdated()V
com.android.settings.accounts.AccountPreferenceBase.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.accounts.AccountSyncSettings.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.accounts.AccountSyncSettings.onResume()V
com.android.settings.accounts.ManageAccountsSettings.onResume()V
com.android.settings.accounts.SyncSettings.onResume()V
com.android.settings.SettingsPreferenceFragment.onResume()V
com.android.settings.accounts.SyncSettings.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.AccessibilitySettings.onResume()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onResume()V
com.android.settings.bluetooth.DeviceProfilesSettings.onResume()V
com.android.settings.DateTimeSettings.onResume()V
com.android.settings.deviceinfo.Memory.onResume()V
com.android.settings.deviceinfo.UsbSettings.onResume()V
com.android.settings.DisplaySettings.onResume()V
com.android.settings.DockSettings.onResume()V
com.android.settings.DreamSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onResume()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onResume()V
com.android.settings.inputmethod.SpellCheckersSettings.onResume()V
com.android.settings.inputmethod.UserDictionaryList.onResume()V
com.android.settings.LocationSettings.onResume()V
com.android.settings.PrivacySettings.onResume()V
com.android.settings.SecuritySettings.onResume()V
com.android.settings.SoundSettings.onResume()V
com.android.settings.users.UserDetailsSettings.onResume()V
com.android.settings.users.UserSettings.onResume()V
com.android.settings.vpn2.VpnSettings.onResume()V
com.android.settings.wifi.AdvancedWifiSettings.onResume()V
com.android.settings.wifi.p2p.WifiP2pSettings.onResume()V
com.android.settings.wifi.WifiSettings.onResume()V
com.android.settings.WirelessSettings.onResume()V
com.android.settings.bluetooth.BluetoothSettings.onResume()V
com.android.settings.bluetooth.DevicePickerFragment.onResume()V
android.content.ContentService.getSyncStatus(Landroid/accounts/Account;Ljava/lang/String;)Landroid/content/SyncStatusInfo;
android.content.IContentService$Stub$Proxy.getSyncStatus(Landroid/accounts/Account;Ljava/lang/String;)Landroid/content/SyncStatusInfo;
android.content.IContentService$Stub.getSyncStatus(Landroid/accounts/Account;Ljava/lang/String;)Landroid/content/SyncStatusInfo;
android.content.IContentService.getSyncStatus(Landroid/accounts/Account;Ljava/lang/String;)Landroid/content/SyncStatusInfo;
android.content.ContentResolver.getSyncStatus(Landroid/accounts/Account;Ljava/lang/String;)Landroid/content/SyncStatusInfo;
android.app.ContextImpl$ApplicationContentResolver.getSyncStatus(Landroid/accounts/Account;Ljava/lang/String;)Landroid/content/SyncStatusInfo;
android.test.mock.MockContentResolver.getSyncStatus(Landroid/accounts/Account;Ljava/lang/String;)Landroid/content/SyncStatusInfo;
android.content.ContentService.isSyncPending(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService$Stub$Proxy.isSyncPending(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService$Stub.isSyncPending(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService.isSyncPending(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.ContentResolver.isSyncPending(Landroid/accounts/Account;Ljava/lang/String;)Z
android.app.ContextImpl$ApplicationContentResolver.isSyncPending(Landroid/accounts/Account;Ljava/lang/String;)Z
android.test.mock.MockContentResolver.isSyncPending(Landroid/accounts/Account;Ljava/lang/String;)Z
Permission:android.permission.USE_SIP

86 Callers:

com.android.server.sip.SipService.getListOfProfiles()[Landroid/net/sip/SipProfile;
android.net.sip.ISipService$Stub$Proxy.getListOfProfiles()[Landroid/net/sip/SipProfile;
android.net.sip.ISipService$Stub.getListOfProfiles()[Landroid/net/sip/SipProfile;
android.net.sip.ISipService.getListOfProfiles()[Landroid/net/sip/SipProfile;
android.net.sip.ISipService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.sip.SipManager.getListOfProfiles()[Landroid/net/sip/SipProfile;
com.android.server.sip.SipService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.phone.sip.SipSettings.processActiveProfilesFromSipService()V
com.android.phone.sip.SipSettings.retrieveSipLists()V
com.android.phone.sip.SipSettings.access$800(Lcom/android/phone/sip/SipSettings;)V
com.android.phone.sip.SipSettings$3.run()V
com.android.server.sip.SipService.open(Landroid/net/sip/SipProfile;)V
android.net.sip.ISipService$Stub$Proxy.open(Landroid/net/sip/SipProfile;)V
android.net.sip.ISipService$Stub.open(Landroid/net/sip/SipProfile;)V
android.net.sip.ISipService.open(Landroid/net/sip/SipProfile;)V
android.net.sip.SipManager.open(Landroid/net/sip/SipProfile;)V
com.android.phone.SipCallOptionHandler.createSipPhoneIfNeeded(Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipSettings.handleSipReceiveCallsOption(Z)V
com.android.phone.SipCallOptionHandler.access$300(Lcom/android/phone/SipCallOptionHandler;Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipSettings.access$700(Lcom/android/phone/sip/SipSettings;Z)V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.sip.SipSettings$2$1.run()V
com.android.server.sip.SipService.open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;)V
android.net.sip.ISipService$Stub$Proxy.open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;)V
android.net.sip.ISipService$Stub.open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;)V
android.net.sip.ISipService.open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;)V
android.net.sip.SipManager.open(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/SipRegistrationListener;)V
com.android.phone.SipBroadcastReceiver$1.run()V
com.android.phone.sip.SipEditor.saveAndRegisterProfile(Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipEditor.access$600(Lcom/android/phone/sip/SipEditor;Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipEditor$2.run()V
com.android.server.sip.SipService.close(Ljava/lang/String;)V
android.net.sip.ISipService$Stub$Proxy.close(Ljava/lang/String;)V
android.net.sip.ISipService$Stub.close(Ljava/lang/String;)V
android.net.sip.ISipService.close(Ljava/lang/String;)V
android.net.sip.SipManager.close(Ljava/lang/String;)V
com.android.phone.sip.SipEditor.unregisterProfile(Ljava/lang/String;)V
com.android.phone.sip.SipSettings$7.run()V
com.android.phone.sip.SipEditor.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.phone.sip.SipEditor.deleteAndUnregisterProfile(Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipEditor.unregisterOldPrimaryAccount()V
com.android.phone.sip.SipEditor.access$500(Lcom/android/phone/sip/SipEditor;Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipEditor.access$400(Lcom/android/phone/sip/SipEditor;)V
com.android.server.sip.SipService.isOpened(Ljava/lang/String;)Z
android.net.sip.ISipService$Stub$Proxy.isOpened(Ljava/lang/String;)Z
android.net.sip.ISipService$Stub.isOpened(Ljava/lang/String;)Z
android.net.sip.ISipService.isOpened(Ljava/lang/String;)Z
android.net.sip.SipManager.isOpened(Ljava/lang/String;)Z
com.android.server.sip.SipService.isRegistered(Ljava/lang/String;)Z
android.net.sip.ISipService$Stub$Proxy.isRegistered(Ljava/lang/String;)Z
android.net.sip.ISipService$Stub.isRegistered(Ljava/lang/String;)Z
android.net.sip.ISipService.isRegistered(Ljava/lang/String;)Z
android.net.sip.SipManager.isRegistered(Ljava/lang/String;)Z
com.android.server.sip.SipService.setRegistrationListener(Ljava/lang/String;Landroid/net/sip/ISipSessionListener;)V
android.net.sip.ISipService$Stub$Proxy.setRegistrationListener(Ljava/lang/String;Landroid/net/sip/ISipSessionListener;)V
android.net.sip.ISipService$Stub.setRegistrationListener(Ljava/lang/String;Landroid/net/sip/ISipSessionListener;)V
android.net.sip.ISipService.setRegistrationListener(Ljava/lang/String;Landroid/net/sip/ISipSessionListener;)V
android.net.sip.SipManager.setRegistrationListener(Ljava/lang/String;Landroid/net/sip/SipRegistrationListener;)V
com.android.phone.sip.SipSettings.addProfile(Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipSettings.access$500(Lcom/android/phone/sip/SipSettings;Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipSettings$1.run()V
com.android.phone.sip.SipSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.server.sip.SipService.createSession(Landroid/net/sip/SipProfile;Landroid/net/sip/ISipSessionListener;)Landroid/net/sip/ISipSession;
android.net.sip.ISipService$Stub$Proxy.createSession(Landroid/net/sip/SipProfile;Landroid/net/sip/ISipSessionListener;)Landroid/net/sip/ISipSession;
android.net.sip.ISipService$Stub.createSession(Landroid/net/sip/SipProfile;Landroid/net/sip/ISipSessionListener;)Landroid/net/sip/ISipSession;
android.net.sip.ISipService.createSession(Landroid/net/sip/SipProfile;Landroid/net/sip/ISipSessionListener;)Landroid/net/sip/ISipSession;
android.net.sip.SipManager.createSipSession(Landroid/net/sip/SipProfile;Landroid/net/sip/SipSession$Listener;)Landroid/net/sip/SipSession;
android.net.sip.SipManager.register(Landroid/net/sip/SipProfile;ILandroid/net/sip/SipRegistrationListener;)V
android.net.sip.SipManager.unregister(Landroid/net/sip/SipProfile;Landroid/net/sip/SipRegistrationListener;)V
android.net.sip.SipManager.makeAudioCall(Landroid/net/sip/SipProfile;Landroid/net/sip/SipProfile;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;
android.net.sip.SipManager.makeAudioCall(Ljava/lang/String;Ljava/lang/String;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;
com.android.internal.telephony.sip.SipPhone$SipConnection.dial()V
com.android.internal.telephony.sip.SipPhone$SipCall.dial(Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.sip.SipPhone.dialInternal(Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.sip.SipPhone.dial(Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.sip.SipPhoneBase.dial(Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.sip.SipPhoneBase.dial(Ljava/lang/String;Lcom/android/internal/telephony/UUSInfo;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.sip.SipPhone.dial(Ljava/lang/String;Lcom/android/internal/telephony/UUSInfo;)Lcom/android/internal/telephony/Connection;
com.android.server.sip.SipService.getPendingSession(Ljava/lang/String;)Landroid/net/sip/ISipSession;
android.net.sip.ISipService$Stub$Proxy.getPendingSession(Ljava/lang/String;)Landroid/net/sip/ISipSession;
android.net.sip.ISipService$Stub.getPendingSession(Ljava/lang/String;)Landroid/net/sip/ISipSession;
android.net.sip.ISipService.getPendingSession(Ljava/lang/String;)Landroid/net/sip/ISipSession;
android.net.sip.SipManager.takeAudioCall(Landroid/content/Intent;Landroid/net/sip/SipAudioCall$Listener;)Landroid/net/sip/SipAudioCall;
android.net.sip.SipManager.getSessionFor(Landroid/content/Intent;)Landroid/net/sip/SipSession;
com.android.phone.SipBroadcastReceiver.takeCall(Landroid/content/Intent;)V
com.android.phone.SipBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
Permission:android.permission.SET_TIME_ZONE

61 Callers:

com.android.server.AlarmManagerService.setTimeZone(Ljava/lang/String;)V
android.app.IAlarmManager$Stub$Proxy.setTimeZone(Ljava/lang/String;)V
android.app.IAlarmManager$Stub.setTimeZone(Ljava/lang/String;)V
com.android.server.AlarmManagerService.<init>(Landroid/content/Context;)V
android.app.IAlarmManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IAlarmManager.setTimeZone(Ljava/lang/String;)V
com.android.server.ServerThread.run()V
com.android.server.AlarmManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.AlarmManager.setTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.setAndBroadcastNetworkSetTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.setAndBroadcastNetworkSetTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.MccTable.setTimezoneFromMccIfNeeded(Landroid/content/Context;I)V
com.android.settings.DateTimeSettingsSetupWizard.onClick(Landroid/view/View;)V
com.android.settings.DateTimeSettingsSetupWizard.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.settings.ZonePicker.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.setAndBroadcastNetworkSetTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.fixTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.revertToNitzTimeZone()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.setTimeFromNITZString(Ljava/lang/String;J)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.pollStateDone()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.revertToNitzTimeZone()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.setTimeFromNITZString(Ljava/lang/String;J)V
com.android.internal.telephony.MccTable.updateMccMncConfiguration(Landroid/content/Context;Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.fixTimeZone(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.pollStateDone()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.revertToNitzTimeZone()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.access$100(Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.setTimeFromNITZString(Ljava/lang/String;J)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.handleCdmaSubscriptionSource(I)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.pollState()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.access$100(Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.internal.telephony.cdma.CDMAPhone.updateCurrentCarrierInProvider(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.pollStateDone()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.pollState()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.access$100(Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker$2.onChange(Z)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.handleCdmaSubscriptionSource(I)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.internal.telephony.ServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker$3.onChange(Z)V
com.android.internal.telephony.cdma.CDMALTEPhone.updateCurrentCarrierInProvider(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CDMAPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.pollState()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.handlePollStateResult(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.getSubscriptionInfoAndStartPollingThreads()V
com.android.internal.telephony.cdma.CDMALTEPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.getSubscriptionInfoAndStartPollingThreads()V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.PhoneFactory.getCdmaPhone()Lcom/android/internal/telephony/Phone;
com.android.internal.telephony.PhoneFactory.makeDefaultPhone(Landroid/content/Context;)V
com.android.internal.telephony.PhoneProxy.deleteAndCreatePhone(I)V
com.android.internal.telephony.PhoneFactory.makeDefaultPhones(Landroid/content/Context;)V
com.android.internal.telephony.PhoneProxy.updatePhoneObject(I)V
com.android.phone.PhoneApp.onCreate()V
Permission:android.permission.WAKE_LOCK

3755 Callers:

com.android.server.PowerManagerService.acquireWakeLock(ILandroid/os/IBinder;Ljava/lang/String;Landroid/os/WorkSource;)V
android.os.IPowerManager$Stub$Proxy.acquireWakeLock(ILandroid/os/IBinder;Ljava/lang/String;Landroid/os/WorkSource;)V
android.os.IPowerManager$Stub.acquireWakeLock(ILandroid/os/IBinder;Ljava/lang/String;Landroid/os/WorkSource;)V
android.os.IPowerManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.os.IPowerManager.acquireWakeLock(ILandroid/os/IBinder;Ljava/lang/String;Landroid/os/WorkSource;)V
com.android.server.PowerManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.os.PowerManager$WakeLock.acquireLocked()V
com.android.commands.svc.PowerCommand.run([Ljava/lang/String;)V
android.os.PowerManager$WakeLock.acquire(J)V
android.os.PowerManager$WakeLock.acquire()V
com.android.commands.svc.Svc$Command.run([Ljava/lang/String;)V
android.net.DhcpStateMachine$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.net.wifi.WifiStateMachine$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.telephony.SMSDispatcher.dispatch(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;)V
com.android.internal.telephony.SMSDispatcher.dispatch(Landroid/content/Intent;Ljava/lang/String;)V
com.android.internal.telephony.SMSDispatcher.notifyAndAcknowledgeLastIncomingSms(ZILandroid/os/Message;)V
com.android.internal.telephony.SmsStorageMonitor.handleIccFull()V
com.android.mms.transaction.PushReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.music.MediaPlaybackService$MultiPlayer$1.onCompletion(Landroid/media/MediaPlayer;)V
com.android.phone.BluetoothHandsfree.expectCallStart()V
com.android.phone.BluetoothHandsfree.expectVoiceRecognition()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.server.DevicePolicyManagerService.wipeDataLocked(I)V
com.android.server.sip.SipWakeLock.acquire(J)V
android.bluetooth.BluetoothDeviceProfileState.sendConnectionAccessIntent()V
android.bluetooth.HeadsetBase.acquireWakeLock()V
android.content.SyncManager$ActiveSyncContext.<init>(Landroid/content/SyncManager;Landroid/content/SyncOperation;JI)V
android.content.SyncManager$SyncAlarmIntentReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.media.AsyncPlayer.acquireWakeLock()V
android.media.AudioService.dispatchMediaKeyEvent(Landroid/view/KeyEvent;Z)V
android.media.AudioService.dispatchMediaKeyEventForCalls(Landroid/view/KeyEvent;Z)V
android.media.AudioService.queueMsgUnderWakeLock(Landroid/os/Handler;IIILjava/lang/Object;I)V
android.media.AudioService.startVoiceBasedInteractions(Z)V
android.media.MediaPlayer.setWakeMode(Landroid/content/Context;I)V
android.media.MediaPlayer.stayAwake(Z)V
android.net.wifi.WifiStateMachine$DriverLoadingState$1.run()V
android.net.wifi.WifiStateMachine$DriverStartedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$DriverStartingState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$DriverStoppedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$DriverUnloadingState$1.run()V
android.server.BluetoothA2dpService.handleSinkStateChange(Landroid/bluetooth/BluetoothDevice;II)V
android.server.BluetoothEventLoop.onDisplayPasskey(Ljava/lang/String;II)V
android.server.BluetoothEventLoop.onRequestPairingConsent(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onRequestPasskeyConfirmation(Ljava/lang/String;II)V
android.server.BluetoothEventLoop.onRequestPasskey(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onRequestPinCode(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.sendDisplayPinIntent(Ljava/lang/String;I)V
com.android.bluetooth.opp.BluetoothOppObexClientSession$ClientThread.run()V
com.android.bluetooth.opp.BluetoothOppObexServerSession.onPut(Ljavax/obex/Operation;)I
com.android.bluetooth.opp.BluetoothOppObexServerSession.preStart()V
com.android.bluetooth.pbap.BluetoothPbapService.startObexServerSession()V
com.android.browser.Controller.onPause()V
com.android.calendar.alerts.AlertReceiver.beginStartingService(Landroid/content/Context;Landroid/content/Intent;)V
com.android.camera.PanoramaActivity$8.run()V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.run()V
com.android.contacts.vcard.ImportVCardActivity$VCardScanThread.run()V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$3.onPostExecute(Ljava/lang/Exception;)V
com.android.deskclock.AlarmAlertWakeLock.acquireCpuWakeLock(Landroid/content/Context;)V
com.android.deskclock.AlarmInitReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.deskclock.AlarmReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.development.Connectivity$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.development.Connectivity.onStartDelayedCycle()V
com.android.development.Connectivity.onStartScreenCycle()V
com.android.email.EmailConnectivityManager.waitForConnectivity()V
com.android.exchange.ExchangeService.acquireWakeLock(J)V
com.android.internal.os.storage.ExternalStorageFormatter.onCreate()V
com.android.internal.policy.impl.KeyguardViewMediator.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewMediator.showLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.wakeWhenReadyLocked(I)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.handleVolumeKey(II)V
com.android.internal.telephony.cdma.CdmaConnection.acquireWakeLock()V
com.android.internal.telephony.cdma.CDMAPhone.handleEnterEmergencyCallbackMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.setTimeFromNITZString(Ljava/lang/String;J)V
com.android.internal.telephony.gsm.GsmConnection.acquireWakeLock()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.setTimeFromNITZString(Ljava/lang/String;J)V
com.android.internal.telephony.RIL.acquireWakeLock()V
com.android.mms.transaction.NotificationPlayer.acquireWakeLock()V
com.android.mms.transaction.SmsReceiver.beginStartingService(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService.acquireWakeLock()V
com.android.nfc.NfcService$ApplyRoutingTask.doInBackground([Ljava/lang/Integer;)Ljava/lang/Void;
com.android.phone.CallerInfoCache$CacheAsyncTask.acquireWakeLockAndExecute()V
com.android.phone.PhoneApp.requestWakeState(Lcom/android/phone/PhoneApp$WakeState;)V
com.android.phone.PhoneApp.updateProximitySensorMode(Lcom/android/internal/telephony/Phone$State;)V
com.android.providers.calendar.CalendarAlarmManager.acquireScheduleNextAlarmWakeLock()V
com.android.providers.calendar.CalendarReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.providers.downloads.DownloadThread.run()V
com.android.providers.media.MediaScannerService.scan([Ljava/lang/String;Ljava/lang/String;)V
com.android.server.AlarmManagerService$AlarmThread.run()V
com.android.server.am.ActivityStack.startPausingLocked(ZZ)V
com.android.server.am.ActivityStack.stopIfSleepingLocked()V
com.android.server.BackupManagerService$RunBackupReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.BackupManagerService$RunInitializeReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.BackupManagerService.restoreAtInstall(Ljava/lang/String;I)V
com.android.server.ConnectivityService.requestNetworkTransitionWakelock(Ljava/lang/String;)V
com.android.server.location.GpsLocationProvider.addListener(I)V
com.android.server.location.GpsLocationProvider.removeListener(I)V
com.android.server.location.GpsLocationProvider.sendMessage(IILjava/lang/Object;)V
com.android.server.LocationManagerService.incrementPendingBroadcasts()V
com.android.server.net.NetworkStatsService$5.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkStatsService.performPoll(I)V
com.android.server.net.NetworkStatsService.updateIfaces()V
com.android.server.pm.ShutdownThread.beginShutdownSequence(Landroid/content/Context;)V
com.android.server.sip.SipWakeLock.acquire(Ljava/lang/Object;)V
com.android.server.VibratorService$VibrateThread.<init>(Lcom/android/server/VibratorService;Lcom/android/server/VibratorService$Vibration;)V
com.android.server.WiredAccessoryObserver.update(Ljava/lang/String;I)V
com.android.server.wm.WindowManagerService.setHoldScreenLocked(Z)V
com.android.server.wm.WindowManagerService.startFreezingDisplayLocked(Z)V
com.android.settings.bluetooth.DockEventReceiver.beginStartingService(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.CryptKeeper.encryptionProgressInit()V
com.android.settings.CryptKeeper.passwordEntryInit()V
com.android.soundrecorder.SoundRecorder.onStateChanged(I)V
com.android.systemui.media.NotificationPlayer.acquireWakeLock()V
com.android.videoeditor.VideoEditorActivity$23.onStart()V
com.android.voicedialer.VoiceDialerActivity.acquireWakeLock(Landroid/content/Context;)V
android.content.SyncManager$ActiveSyncContext.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
android.content.SyncManager$ActiveSyncContext.onServiceDisconnected(Landroid/content/ComponentName;)V
android.content.SyncManager.sendSyncAlarmMessage()V
android.content.SyncManager.sendCheckAlarmsMessage()V
android.content.SyncManager.sendSyncFinishedOrCanceledMessage(Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/SyncResult;)V
android.content.SyncManager.sendCancelSyncsMessage(Landroid/accounts/Account;ILjava/lang/String;)V
com.android.commands.svc.Svc.main([Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatch(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatch(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatch(Landroid/content/Intent;Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatch(Landroid/content/Intent;Ljava/lang/String;)V
com.android.internal.telephony.SMSDispatcher.dispatchBroadcastMessage(Landroid/telephony/SmsCbMessage;)V
com.android.internal.telephony.SMSDispatcher.dispatchPdus([B)V
com.android.internal.telephony.SMSDispatcher.dispatchPortAddressedPdus([BI)V
com.android.internal.telephony.WapPushOverSms.dispatchWapPdu([B)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.notifyAndAcknowledgeLastIncomingSms(ZILandroid/os/Message;)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.notifyAndAcknowledgeLastIncomingSms(ZILandroid/os/Message;)V
com.android.phone.BluetoothHandsfree.redial()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.access$6100(Lcom/android/phone/BluetoothHandsfree;)V
com.android.phone.BluetoothHandsfree.access$7400(Lcom/android/phone/BluetoothHandsfree;)V
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.server.sip.SipSessionGroup.processRequest(Ljavax/sip/RequestEvent;)V
android.bluetooth.BluetoothDeviceProfileState.processIncomingConnectCommand(I)V
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
android.content.SyncManager$SyncHandler.dispatchSyncOperation(Landroid/content/SyncOperation;)Z
android.media.AsyncPlayer.enqueueLocked(Landroid/media/AsyncPlayer$Command;)V
android.media.AudioService.filterMediaKeyEvent(Landroid/view/KeyEvent;Z)V
android.media.AudioService.sendSimulatedMediaButtonEvent(Landroid/view/KeyEvent;Z)V
android.media.AudioService.setBluetoothA2dpDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;I)I
android.media.AudioService.access$3000(Landroid/media/AudioService;Landroid/os/Handler;IIILjava/lang/Object;I)V
android.media.AudioService.setWiredDeviceConnectionState(IILjava/lang/String;)V
android.media.AudioService.filterVoiceInputKeyEvent(Landroid/view/KeyEvent;Z)V
android.webkit.HTML5VideoInline.prepareDataAndDisplayMode(Landroid/webkit/HTML5VideoViewProxy;)V
com.android.music.AudioPreview$PreviewPlayer.setWakeMode(Landroid/content/Context;I)V
com.android.music.MediaPlaybackService$CompatMediaPlayer.setWakeMode(Landroid/content/Context;I)V
android.media.MediaPlayer.access$300(Landroid/media/MediaPlayer;Z)V
android.media.MediaPlayer.pause()V
android.media.MediaPlayer.release()V
android.media.MediaPlayer.reset()V
android.media.MediaPlayer.start()V
android.media.MediaPlayer.stop()V
com.android.music.AudioPreview$PreviewPlayer.stayAwake(Z)V
com.android.music.MediaPlaybackService$CompatMediaPlayer.stayAwake(Z)V
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
android.server.BluetoothA2dpService.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.access$300(Landroid/server/BluetoothA2dpService;Landroid/bluetooth/BluetoothDevice;II)V
android.server.BluetoothA2dpService.onBluetoothDisable()V
android.server.BluetoothA2dpService.onConnectSinkResult(Ljava/lang/String;Z)V
android.server.BluetoothA2dpService.onSinkPropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
com.android.bluetooth.opp.BluetoothOppObexClientSession.start(Landroid/os/Handler;)V
com.android.bluetooth.opp.BluetoothOppService.createServerSession(Ljavax/obex/ObexTransport;)V
com.android.bluetooth.pbap.BluetoothPbapService.access$500(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.parseIntent(Landroid/content/Intent;)V
com.android.browser.ActivityController.onPause()V
com.android.calendar.alerts.AlertReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
com.android.contacts.vcard.ImportVCardActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.voicemail.VoicemailPlaybackPresenter$3.onPostExecute(Ljava/lang/Object;)V
com.android.deskclock.AlarmKlaxon.onCreate()V
com.android.deskclock.AlarmReceiver.handleIntent(Landroid/content/Context;Landroid/content/Intent;)V
com.android.development.Connectivity.access$1300(Lcom/android/development/Connectivity;)V
com.android.development.Connectivity.access$1500(Lcom/android/development/Connectivity;)V
com.android.email.service.AttachmentDownloadService.run()V
com.android.exchange.ExchangeService.runAwake(J)V
com.android.internal.policy.impl.KeyguardViewCallback.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewMediator.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewMediator.doKeyguardLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.setKeyguardEnabled(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.onWakeKeyWhenKeyguardShowingTq(IZ)Z
com.android.internal.policy.impl.KeyguardViewMediator.onWakeMotionWhenKeyguardShowingTq()Z
android.view.WindowManagerPolicy.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.interceptFallback(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Z
com.android.internal.telephony.cdma.CdmaConnection.<init>(Landroid/content/Context;Lcom/android/internal/telephony/cdma/CdmaCallWaitingNotification;Lcom/android/internal/telephony/cdma/CdmaCallTracker;Lcom/android/internal/telephony/cdma/CdmaCall;)V
com.android.internal.telephony.cdma.CdmaConnection.<init>(Landroid/content/Context;Lcom/android/internal/telephony/DriverCall;Lcom/android/internal/telephony/cdma/CdmaCallTracker;I)V
com.android.internal.telephony.cdma.CdmaConnection.<init>(Landroid/content/Context;Ljava/lang/String;Lcom/android/internal/telephony/cdma/CdmaCallTracker;Lcom/android/internal/telephony/cdma/CdmaCall;)V
com.android.internal.telephony.cdma.CdmaConnection.setPostDialState(Lcom/android/internal/telephony/Connection$PostDialState;)V
com.android.internal.telephony.cdma.CDMALTEPhone.handleEnterEmergencyCallbackMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.setTimeFromNITZString(Ljava/lang/String;J)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.handleCdmaSubscriptionSource(I)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.internal.telephony.gsm.GsmConnection.<init>(Landroid/content/Context;Lcom/android/internal/telephony/DriverCall;Lcom/android/internal/telephony/gsm/GsmCallTracker;I)V
com.android.internal.telephony.gsm.GsmConnection.<init>(Landroid/content/Context;Ljava/lang/String;Lcom/android/internal/telephony/gsm/GsmCallTracker;Lcom/android/internal/telephony/gsm/GsmCall;)V
com.android.internal.telephony.gsm.GsmConnection.setPostDialState(Lcom/android/internal/telephony/Connection$PostDialState;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.internal.telephony.RIL.send(Lcom/android/internal/telephony/RILRequest;)V
com.android.mms.transaction.NotificationPlayer.enqueueLocked(Lcom/android/mms/transaction/NotificationPlayer$Command;)V
com.android.mms.transaction.PrivilegedSmsReceiver.beginStartingService(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.SmsReceiver.onReceiveWithPrivilege(Landroid/content/Context;Landroid/content/Intent;Z)V
com.android.mms.transaction.TransactionService.beginMmsConnectivity()I
com.android.nfc.NfcService$ApplyRoutingTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.phone.CallerInfoCache.startAsyncCache()V
com.android.phone.CallNotifier.onNewRingingConnection(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.showIncomingCall()V
com.android.phone.PhoneApp.updateWakeState()V
com.android.phone.InCallScreen.onOpenCloseDialpad()V
com.android.phone.PhoneApp.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.phone.PhoneApp.orientationChanged(I)V
com.android.phone.PhoneApp.setBeginningCall(Z)V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.PhoneApp.updatePhoneState(Lcom/android/internal/telephony/Phone$State;)V
com.android.phone.PhoneUtils.turnOnSpeaker(Landroid/content/Context;ZZ)V
com.android.providers.calendar.CalendarProviderBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.providers.media.MediaScannerService.access$300(Lcom/android/providers/media/MediaScannerService;[Ljava/lang/String;Ljava/lang/String;)V
com.android.server.AlarmManagerService.<init>(Landroid/content/Context;)V
com.android.server.am.ActivityStack.checkReadyForSleepLocked()V
com.android.server.am.ActivityManagerService.shutdown(I)Z
com.android.server.am.ActivityManagerService.goingToSleep()V
android.app.backup.IBackupManager$Stub$Proxy.restoreAtInstall(Ljava/lang/String;I)V
android.app.backup.IBackupManager$Stub.restoreAtInstall(Ljava/lang/String;I)V
android.net.IConnectivityManager$Stub$Proxy.requestNetworkTransitionWakelock(Ljava/lang/String;)V
android.net.IConnectivityManager$Stub.requestNetworkTransitionWakelock(Ljava/lang/String;)V
com.android.server.location.LocationProviderInterface.addListener(I)V
com.android.server.location.LocationProviderInterface.removeListener(I)V
com.android.server.location.GpsLocationProvider.disable()V
com.android.server.location.GpsLocationProvider.enableLocationTracking(Z)V
com.android.server.location.GpsLocationProvider.enable()V
com.android.server.location.GpsLocationProvider.handleUpdateNetworkState(ILandroid/net/NetworkInfo;)V
com.android.server.location.GpsLocationProvider.requestUtcTime()V
com.android.server.location.GpsLocationProvider.updateLocation(Landroid/location/Location;)V
com.android.server.location.GpsLocationProvider.updateNetworkState(ILandroid/net/NetworkInfo;)V
com.android.server.location.GpsLocationProvider.xtraDownloadRequest()V
com.android.server.LocationManagerService.access$600(Lcom/android/server/LocationManagerService;)V
com.android.server.net.NetworkStatsService.access$700(Lcom/android/server/net/NetworkStatsService;I)V
com.android.server.net.NetworkStatsService.access$600(Lcom/android/server/net/NetworkStatsService;)V
com.android.server.pm.ShutdownThread.access$000(Landroid/content/Context;)V
com.android.server.pm.ShutdownThread.shutdownInner(Landroid/content/Context;Z)V
com.android.server.sip.SipService$AutoRegistrationProcess.onResponse(Z)V
com.android.server.sip.SipService$AutoRegistrationProcess.run()V
com.android.server.sip.SipService$AutoRegistrationProcess.start(Lcom/android/server/sip/SipSessionGroup;)V
com.android.server.sip.SipService$MyExecutor.execute(Ljava/lang/Runnable;)V
com.android.server.VibratorService.startVibrationLocked(Lcom/android/server/VibratorService$Vibration;)V
com.android.server.WiredAccessoryObserver.updateState(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.wm.WindowManagerService.performLayoutAndPlaceSurfacesLockedInner(Z)V
com.android.server.wm.WindowManagerService.updateOrientationFromAppTokensLocked(Landroid/content/res/Configuration;Landroid/os/IBinder;)Landroid/content/res/Configuration;
com.android.server.wm.WindowManagerService.updateRotationUncheckedLocked(Z)Z
com.android.server.wm.WindowManagerService.setForcedDisplaySizeLocked(II)V
com.android.server.wm.WindowManagerService.startAppFreezingScreenLocked(Lcom/android/server/wm/AppWindowToken;I)V
com.android.settings.bluetooth.DockEventReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.CryptKeeper.setupUi()V
com.android.soundrecorder.Recorder$OnStateChangedListener.onStateChanged(I)V
com.android.systemui.media.NotificationPlayer.enqueueLocked(Lcom/android/systemui/media/NotificationPlayer$Command;)V
com.android.voicedialer.VoiceDialerActivity.onCreate(Landroid/os/Bundle;)V
android.content.SyncManager.access$900(Landroid/content/SyncManager;)V
android.content.SyncManager.access$100(Landroid/content/SyncManager;)V
android.content.SyncManager.onAccountsUpdated([Landroid/accounts/Account;)V
android.content.SyncManager.scheduleSyncOperation(Landroid/content/SyncOperation;)V
android.content.SyncManager.access$1100(Landroid/content/SyncManager;Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/SyncResult;)V
android.content.SyncManager.cancelActiveSync(Landroid/accounts/Account;ILjava/lang/String;)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.handleServiceCategoryProgramData(Lcom/android/internal/telephony/cdma/SmsMessage;)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchBroadcastMessage(Landroid/telephony/SmsCbMessage;)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchBroadcastMessage(Landroid/telephony/SmsCbMessage;)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchPdus([B)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchPdus([B)V
com.android.internal.telephony.SMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.SMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchPortAddressedPdus([BI)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchPortAddressedPdus([BI)V
com.android.phone.BluetoothHandsfree.access$6000(Lcom/android/phone/BluetoothHandsfree;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
android.bluetooth.BluetoothDeviceProfileState.processCommand(I)Z
android.bluetooth.HeadsetBase$1.run()V
android.content.SyncManager$SyncHandler.maybeStartNextSyncLocked()J
android.media.AsyncPlayer.play(Landroid/content/Context;Landroid/net/Uri;ZI)V
android.media.AsyncPlayer.stop()V
android.media.AudioService.dispatchMediaKeyEvent(Landroid/view/KeyEvent;)V
android.media.AudioService.dispatchMediaKeyEventUnderWakelock(Landroid/view/KeyEvent;)V
android.media.IAudioService$Stub$Proxy.setBluetoothA2dpDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;I)I
android.media.IAudioService$Stub.setBluetoothA2dpDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;I)I
android.media.AudioService$2.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
android.media.IAudioService$Stub$Proxy.setWiredDeviceConnectionState(IILjava/lang/String;)V
android.media.IAudioService$Stub.setWiredDeviceConnectionState(IILjava/lang/String;)V
android.webkit.HTML5VideoView.prepareDataAndDisplayMode(Landroid/webkit/HTML5VideoViewProxy;)V
com.android.music.MediaPlaybackService$MultiPlayer$2.onError(Landroid/media/MediaPlayer;II)Z
com.android.music.MediaPlaybackService$MultiPlayer.<init>(Lcom/android/music/MediaPlaybackService;)V
com.android.music.MediaPlaybackService$MultiPlayer.setNextDataSource(Ljava/lang/String;)V
com.android.music.AudioPreview$PreviewPlayer.access$300(Landroid/media/MediaPlayer;Z)V
com.android.music.MediaPlaybackService$CompatMediaPlayer.access$300(Landroid/media/MediaPlayer;Z)V
android.filterpacks.videosrc.MediaSource.pauseVideo(Z)V
android.webkit.HTML5Audio.pause()V
android.webkit.HTML5VideoView.pause()V
android.widget.VideoView.pause()V
com.android.mms.ui.SlideView.pauseAudio()V
com.android.music.AudioPreview$PreviewPlayer.pause()V
com.android.music.MediaPlaybackService$CompatMediaPlayer.pause()V
android.filterpacks.videosrc.MediaSource.setupMediaPlayer(Z)Z
android.filterpacks.videosrc.MediaSource.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.process(Landroid/filterfw/core/FilterContext;)V
android.media.AsyncPlayer$Thread.run()V
android.media.AsyncPlayer.startSound(Landroid/media/AsyncPlayer$Command;)V
android.media.AudioService$AudioHandler.cleanupPlayer(Landroid/media/MediaPlayer;)V
android.media.Ringtone.destroyLocalPlayer()V
android.speech.tts.AudioPlaybackQueueItem.finish()V
android.webkit.HTML5Audio.teardown()V
android.webkit.HTML5VideoFullScreen$1.surfaceDestroyed(Landroid/view/SurfaceHolder;)V
android.widget.VideoView.release(Z)V
android.widget.VideoView.stopPlayback()V
com.android.deskclock.AlarmKlaxon$3.onError(Landroid/media/MediaPlayer;II)Z
com.android.deskclock.AlarmKlaxon.stop()V
com.android.ex.variablespeed.VariableSpeed.prepare()V
com.android.mms.transaction.NotificationPlayer$CmdThread.run()V
com.android.mms.transaction.NotificationPlayer$CreationAndCompletionThread.run()V
com.android.mms.ui.AudioAttachmentView.cleanupMediaPlayer()V
com.android.mms.ui.SlideListItemView.setVideo(Ljava/lang/String;Landroid/net/Uri;)V
com.android.mms.ui.SlideshowAttachmentView.setVideo(Ljava/lang/String;Landroid/net/Uri;)V
com.android.mms.ui.SlideView$1.onPrepared(Landroid/media/MediaPlayer;)V
com.android.mms.ui.SlideView.setAudio(Landroid/net/Uri;Ljava/lang/String;Ljava/util/Map;)V
com.android.mms.ui.SlideView.stopAudio()V
com.android.music.AudioPreview$PreviewPlayer.release()V
com.android.musicfx.ControlPanelEffect.initEffectsPreferences(Landroid/content/Context;Ljava/lang/String;I)V
com.android.music.MediaPlaybackService$CompatMediaPlayer.release()V
com.android.music.MusicPicker.onCompletion(Landroid/media/MediaPlayer;)V
com.android.music.MusicPicker.stopMediaPlayer()V
com.android.soundrecorder.Recorder.stopPlayback()V
com.android.systemui.media.NotificationPlayer$CmdThread.run()V
com.android.systemui.media.NotificationPlayer$CreationAndCompletionThread.run()V
android.webkit.HTML5Audio.resetMediaPlayer()V
android.webkit.HTML5VideoView.prepareDataCommon(Landroid/webkit/HTML5VideoViewProxy;)V
android.webkit.HTML5VideoView.reprepareData(Landroid/webkit/HTML5VideoViewProxy;)V
android.webkit.HTML5VideoView.reset()V
com.android.deskclock.AlarmKlaxon.play(Lcom/android/deskclock/Alarm;)V
com.android.music.AudioPreview$PreviewPlayer.reset()V
com.android.music.MediaPlaybackService$CompatMediaPlayer.reset()V
com.android.music.MediaPlaybackService$MultiPlayer.setDataSourceImpl(Landroid/media/MediaPlayer;Ljava/lang/String;)Z
android.media.AudioService$AudioHandler.playSoundEffect(II)V
android.media.MediaPlayer.postEventFromNative(Ljava/lang/Object;IIILjava/lang/Object;)V
android.media.Ringtone.play()V
android.speech.tts.AudioPlaybackQueueItem.run()V
android.webkit.HTML5Audio.onAudioFocusChange(I)V
android.webkit.HTML5Audio.play()V
android.webkit.HTML5VideoFullScreen.onPrepared(Landroid/media/MediaPlayer;)V
android.webkit.HTML5VideoView.start()V
android.widget.VideoView.start()V
com.android.deskclock.AlarmKlaxon.startAlarm(Landroid/media/MediaPlayer;)V
com.android.mms.ui.AudioAttachmentView.startAudio()V
com.android.mms.ui.SlideView.startAudio()V
com.android.music.AudioPreview$PreviewPlayer.start()V
com.android.music.MediaPlaybackService$CompatMediaPlayer.onCompletion(Landroid/media/MediaPlayer;)V
com.android.music.MediaPlaybackService$CompatMediaPlayer.start()V
com.android.music.MusicPicker.setSelected(Landroid/database/Cursor;)V
com.android.soundrecorder.Recorder.startPlayback()V
android.webkit.HTML5VideoView.stopPlayback()V
com.android.music.AudioPreview$PreviewPlayer.stop()V
com.android.music.MediaPlaybackService$CompatMediaPlayer.stop()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
android.bluetooth.IBluetoothA2dp$Stub$Proxy.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.server.BluetoothA2dpService.access$100(Landroid/server/BluetoothA2dpService;)V
com.android.bluetooth.opp.BluetoothOppObexSession.start(Landroid/os/Handler;)V
com.android.bluetooth.opp.BluetoothOppService.access$700(Lcom/android/bluetooth/opp/BluetoothOppService;Ljavax/obex/ObexTransport;)V
com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread.run()V
com.android.bluetooth.pbap.BluetoothPbapService.onStartCommand(Landroid/content/Intent;II)I
com.android.browser.BrowserActivity.onPause()V
com.android.contacts.activities.TransactionSafeActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.ContactsActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.deskclock.AlarmReceiver.access$000(Lcom/android/deskclock/AlarmReceiver;Landroid/content/Context;Landroid/content/Intent;)V
com.android.development.Connectivity$3.onClick(Landroid/view/View;)V
com.android.exchange.EasAccountService.sleep(JZ)V
com.android.exchange.EasSyncService.executePostWithTimeout(Lorg/apache/http/client/HttpClient;Lorg/apache/http/client/methods/HttpPost;IZ)Lcom/android/exchange/EasResponse;
com.android.exchange.ExchangeService.run()V
com.android.exchange.ExchangeService.startServiceThread(Lcom/android/exchange/AbstractSyncService;)V
com.android.exchange.ExchangeService.waitForConnectivity()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.pokeWakelock(I)V
com.android.internal.policy.impl.KeyguardViewCallback.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewMediator.adjustUserActivityLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.handleWakeWhenReady(I)V
com.android.internal.policy.impl.PhoneWindowManager.showGlobalActionsDialog()V
com.android.internal.policy.impl.KeyguardViewMediator.access$700(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.onScreenTurnedOff(I)V
com.android.internal.policy.impl.KeyguardViewMediator.onSimStateChanged(Lcom/android/internal/telephony/IccCard$State;)V
com.android.internal.policy.impl.KeyguardViewMediator.onSystemReady()V
com.android.internal.policy.impl.PhoneWindowManager.enableKeyguard(Z)V
com.android.internal.policy.impl.PhoneWindowManager.notifyLidSwitchChanged(JZ)V
com.android.internal.policy.impl.PhoneWindowManager.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.wm.InputMonitor.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.internal.policy.impl.PhoneWindowManager.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.telephony.cdma.CdmaCallTracker.handleCallWaitingInfo(Lcom/android/internal/telephony/cdma/CdmaCallWaitingNotification;)V
com.android.internal.telephony.cdma.CdmaCallTracker.checkMtFindNewRinging(Lcom/android/internal/telephony/DriverCall;I)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.cdma.CdmaCallTracker.dial(Ljava/lang/String;I)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.cdma.CdmaCallTracker.dialThreeWay(Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.cdma.CdmaConnection.processPostDialChar(C)Z
com.android.internal.telephony.cdma.CdmaConnection.cancelPostDial()V
com.android.internal.telephony.cdma.CdmaConnection.proceedAfterWaitChar()V
com.android.internal.telephony.cdma.CdmaConnection.proceedAfterWildChar(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaConnection.processNextPostDialChar()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.handleCdmaSubscriptionSource(I)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.queueNextSignalStrengthPoll()V
com.android.internal.telephony.gsm.GsmCallTracker.handlePollCalls(Landroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmCallTracker.dial(Ljava/lang/String;ILcom/android/internal/telephony/UUSInfo;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.gsm.GsmConnection.processPostDialChar(C)Z
com.android.internal.telephony.gsm.GsmConnection.cancelPostDial()V
com.android.internal.telephony.gsm.GsmConnection.proceedAfterWaitChar()V
com.android.internal.telephony.gsm.GsmConnection.proceedAfterWildChar(Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmConnection.processNextPostDialChar()V
com.android.internal.telephony.RIL.acceptCall(Landroid/os/Message;)V
com.android.internal.telephony.RIL.acknowledgeIncomingGsmSmsWithPdu(ZLjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.acknowledgeLastIncomingCdmaSms(ZILandroid/os/Message;)V
com.android.internal.telephony.RIL.acknowledgeLastIncomingGsmSms(ZILandroid/os/Message;)V
com.android.internal.telephony.RIL.cancelPendingUssd(Landroid/os/Message;)V
com.android.internal.telephony.RIL.changeBarringPassword(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.changeIccPin2ForApp(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.changeIccPinForApp(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.conference(Landroid/os/Message;)V
com.android.internal.telephony.RIL.deactivateDataCall(IILandroid/os/Message;)V
com.android.internal.telephony.RIL.deleteSmsOnRuim(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.deleteSmsOnSim(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.dial(Ljava/lang/String;ILcom/android/internal/telephony/UUSInfo;Landroid/os/Message;)V
com.android.internal.telephony.RIL.exitEmergencyCallbackMode(Landroid/os/Message;)V
com.android.internal.telephony.RIL.explicitCallTransfer(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getAvailableNetworks(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getBasebandVersion(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getCdmaBroadcastConfig(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getCDMASubscription(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getCdmaSubscriptionSource(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getCLIR(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getCurrentCalls(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getDataCallList(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getDataRegistrationState(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getDeviceIdentity(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getGsmBroadcastConfig(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getIccCardStatus(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getIMEI(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getIMEISV(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getIMSIForApp(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.getLastCallFailCause(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getLastDataCallFailCause(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getMute(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getNeighboringCids(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getNetworkSelectionMode(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getOperator(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getPreferredNetworkType(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getPreferredVoicePrivacy(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getSignalStrength(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getSmscAddress(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getVoiceRadioTechnology(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getVoiceRegistrationState(Landroid/os/Message;)V
com.android.internal.telephony.RIL.handleCallSetupRequestFromSim(ZLandroid/os/Message;)V
com.android.internal.telephony.RIL.hangupConnection(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.hangupForegroundResumeBackground(Landroid/os/Message;)V
com.android.internal.telephony.RIL.hangupWaitingOrBackground(Landroid/os/Message;)V
com.android.internal.telephony.RIL.iccIOForApp(IILjava/lang/String;IIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.invokeOemRilRequestRaw([BLandroid/os/Message;)V
com.android.internal.telephony.RIL.invokeOemRilRequestStrings([Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.queryAvailableBandMode(Landroid/os/Message;)V
com.android.internal.telephony.RIL.queryCallForwardStatus(IILjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.queryCallWaiting(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.queryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.internal.telephony.RIL.queryCLIP(Landroid/os/Message;)V
com.android.internal.telephony.RIL.queryFacilityLockForApp(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.queryTTYMode(Landroid/os/Message;)V
com.android.internal.telephony.RIL.rejectCall(Landroid/os/Message;)V
com.android.internal.telephony.RIL.reportSmsMemoryStatus(ZLandroid/os/Message;)V
com.android.internal.telephony.RIL.reportStkServiceIsRunning(Landroid/os/Message;)V
com.android.internal.telephony.RIL.requestIsimAuthentication(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.resetRadio(Landroid/os/Message;)V
com.android.internal.telephony.RIL.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)V
com.android.internal.telephony.RIL.sendCDMAFeatureCode(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.sendCdmaSms([BLandroid/os/Message;)V
com.android.internal.telephony.RIL.sendDtmf(CLandroid/os/Message;)V
com.android.internal.telephony.RIL.sendEnvelope(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.sendEnvelopeWithStatus(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.sendScreenState(Z)V
com.android.internal.telephony.RIL.sendSMS(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.sendTerminalResponse(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.sendUSSD(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.separateConnection(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.setBandMode(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.setCallForward(IIILjava/lang/String;ILandroid/os/Message;)V
com.android.internal.telephony.RIL.setCallWaiting(ZILandroid/os/Message;)V
com.android.internal.telephony.RIL.setCdmaBroadcastActivation(ZLandroid/os/Message;)V
com.android.internal.telephony.RIL.setCdmaBroadcastConfig([ILandroid/os/Message;)V
com.android.internal.telephony.RIL.setCdmaRoamingPreference(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.setCdmaSubscriptionSource(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.setCLIR(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.setFacilityLockForApp(Ljava/lang/String;ZLjava/lang/String;ILjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.setGsmBroadcastActivation(ZLandroid/os/Message;)V
com.android.internal.telephony.RIL.setGsmBroadcastConfig([Lcom/android/internal/telephony/gsm/SmsBroadcastConfigInfo;Landroid/os/Message;)V
com.android.internal.telephony.RIL.setLocationUpdates(ZLandroid/os/Message;)V
com.android.internal.telephony.RIL.setMute(ZLandroid/os/Message;)V
com.android.internal.telephony.RIL.setNetworkSelectionModeAutomatic(Landroid/os/Message;)V
com.android.internal.telephony.RIL.setNetworkSelectionModeManual(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.setPreferredNetworkType(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.setPreferredVoicePrivacy(ZLandroid/os/Message;)V
com.android.internal.telephony.RIL.setRadioPower(ZLandroid/os/Message;)V
com.android.internal.telephony.RIL.setSmscAddress(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.setSuppServiceNotifications(ZLandroid/os/Message;)V
com.android.internal.telephony.RIL.setTTYMode(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.setupDataCall(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.startDtmf(CLandroid/os/Message;)V
com.android.internal.telephony.RIL.stopDtmf(Landroid/os/Message;)V
com.android.internal.telephony.RIL.supplyIccPin2ForApp(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.supplyIccPinForApp(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.supplyIccPuk2ForApp(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.supplyIccPukForApp(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.supplyNetworkDepersonalization(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.switchWaitingOrHoldingAndActive(Landroid/os/Message;)V
com.android.internal.telephony.RIL.writeSmsToRuim(ILjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.writeSmsToSim(ILjava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.mms.transaction.NotificationPlayer.play(Landroid/content/Context;Landroid/net/Uri;ZIF)V
com.android.mms.transaction.NotificationPlayer.stop()V
com.android.mms.transaction.PrivilegedSmsReceiver.onReceiveWithPrivilege(Landroid/content/Context;Landroid/content/Intent;Z)V
com.android.mms.transaction.SmsReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.phone.CallerInfoCache.init(Landroid/content/Context;)Lcom/android/phone/CallerInfoCache;
com.android.phone.CallerInfoCacheUpdateReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onCustomRingQueryComplete()V
com.android.phone.CallNotifier.startIncomingCallQuery(Lcom/android/internal/telephony/Connection;)V
com.android.phone.DTMFTwelveKeyDialer.onDialerClose(Z)V
com.android.phone.DTMFTwelveKeyDialer.onDialerOpen(Z)V
com.android.phone.InCallScreen.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.onPause()V
com.android.phone.InCallScreen.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.onResume()V
com.android.phone.InCallScreen.requestUpdateBluetoothIndication()V
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.AccelerometerListener$OrientationListener.orientationChanged(I)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallNotifier.resetAudioStateAfterDisconnect()V
com.android.phone.InCallScreen.switchInCallAudio(Lcom/android/phone/InCallScreen$InCallAudioMode;)V
com.android.phone.InCallScreen.toggleBluetooth()V
com.android.phone.InCallScreen.toggleSpeaker()V
com.android.phone.OtaUtils.setSpeaker(Z)V
com.android.phone.PhoneUtils.activateSpeakerIfDocked(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.PhoneUtils.answerCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.placeCall(Landroid/content/Context;Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/net/Uri;ZLandroid/net/Uri;)I
com.android.phone.PhoneUtils.restoreSpeakerMode(Landroid/content/Context;)V
com.android.server.ServerThread.run()V
com.android.server.am.ActivityStack.activitySleptLocked(Lcom/android/server/am/ActivityRecord;)V
com.android.server.am.ActivityStack.completePauseLocked()V
android.app.ActivityManagerNative.shutdown(I)Z
android.app.ActivityManagerNative.goingToSleep()V
android.app.backup.IBackupManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.backup.IBackupManager.restoreAtInstall(Ljava/lang/String;I)V
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.IConnectivityManager.requestNetworkTransitionWakelock(Ljava/lang/String;)V
com.android.server.location.LocationProviderInterface.disable()V
com.android.server.location.LocationProviderInterface.enableLocationTracking(Z)V
com.android.server.location.LocationProviderInterface.enable()V
com.android.server.location.GpsLocationProvider.access$1000(Lcom/android/server/location/GpsLocationProvider;ILandroid/net/NetworkInfo;)V
com.android.server.location.GpsLocationProvider.setEngineCapabilities(I)V
com.android.server.location.LocationProviderInterface.updateLocation(Landroid/location/Location;)V
com.android.server.location.LocationProviderInterface.updateNetworkState(ILandroid/net/NetworkInfo;)V
com.android.server.LocationManagerService$ProximityListener.onLocationChanged(Landroid/location/Location;)V
com.android.server.LocationManagerService$Receiver.incrementPendingBroadcastsLocked()V
com.android.server.net.NetworkStatsService$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkStatsService$4.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.net.NetworkStatsService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.pm.ShutdownThread$1.onClick(Landroid/content/DialogInterface;I)V
com.android.server.pm.ShutdownThread.reboot(Landroid/content/Context;Ljava/lang/String;Z)V
com.android.server.pm.ShutdownThread.rebootSafeMode(Landroid/content/Context;Z)V
com.android.server.pm.ShutdownThread.shutdown(Landroid/content/Context;Z)V
com.android.server.sip.SipService$AutoRegistrationProcess.onError(ILjava/lang/String;)V
com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback.onResponse(Z)V
com.android.server.sip.SipService$AutoRegistrationProcess.onRegistrationDone(Landroid/net/sip/ISipSession;I)V
com.android.server.sip.SipService$SipSessionGroupExt.openToReceiveCalls()V
com.android.server.sip.SipService$ConnectivityReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.VibratorService.startNextVibrationLocked()V
com.android.server.VibratorService.vibrate(JLandroid/os/IBinder;)V
com.android.server.WiredAccessoryObserver.init()V
com.android.server.WiredAccessoryObserver.onUEvent(Landroid/os/UEventObserver$UEvent;)V
com.android.server.wm.WindowManagerService.performLayoutAndPlaceSurfacesLocked()V
com.android.server.wm.WindowManagerService.resumeRotationLocked()V
com.android.server.wm.WindowManagerService.stopFreezingDisplayLocked()V
com.android.server.wm.WindowManagerService.clearForcedDisplaySize()V
com.android.server.wm.WindowManagerService.readForcedDisplaySizeLocked()V
com.android.server.wm.WindowManagerService.setForcedDisplaySize(II)V
com.android.settings.CryptKeeper.access$600(Lcom/android/settings/CryptKeeper;)V
com.android.settings.CryptKeeper.onStart()V
com.android.soundrecorder.Recorder.signalStateChanged(I)V
com.android.systemui.media.NotificationPlayer.play(Landroid/content/Context;Landroid/net/Uri;ZI)V
com.android.systemui.media.NotificationPlayer.stop()V
android.content.SyncManager$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$4.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$9.onStatusChanged(I)V
android.content.SyncManager.<init>(Landroid/content/Context;Z)V
android.content.SyncManager.onUserRemoved(Landroid/content/Intent;)V
android.content.SyncManager$SyncHandler.scheduleReadyPeriodicSyncs()J
android.content.SyncManager$SyncHandler.runBoundToSyncAdapter(Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/ISyncAdapter;)V
android.content.SyncManager$SyncHandler.runSyncFinishedOrCanceledLocked(Landroid/content/SyncResult;Landroid/content/SyncManager$ActiveSyncContext;)V
android.content.SyncManager.maybeRescheduleSync(Landroid/content/SyncResult;Landroid/content/SyncOperation;)V
android.content.SyncManager.scheduleSync(Landroid/accounts/Account;ILjava/lang/String;Landroid/os/Bundle;JZ)V
android.content.SyncManager$ActiveSyncContext.binderDied()V
android.content.SyncManager$ActiveSyncContext.onFinished(Landroid/content/SyncResult;)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.handleBroadcastSms(Landroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.processMessagePart([BLjava/lang/String;IIIJIZ)I
com.android.phone.BluetoothHandsfree$10.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.enter()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.enter()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.enter()V
android.media.IAudioService$Stub$Proxy.dispatchMediaKeyEvent(Landroid/view/KeyEvent;)V
android.media.IAudioService$Stub.dispatchMediaKeyEvent(Landroid/view/KeyEvent;)V
android.media.IAudioService$Stub$Proxy.dispatchMediaKeyEventUnderWakelock(Landroid/view/KeyEvent;)V
android.media.IAudioService$Stub.dispatchMediaKeyEventUnderWakelock(Landroid/view/KeyEvent;)V
android.media.IAudioService.setBluetoothA2dpDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;I)I
android.media.IAudioService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.IAudioService.setWiredDeviceConnectionState(IILjava/lang/String;)V
android.webkit.HTML5VideoFullScreen.prepareDataAndDisplayMode(Landroid/webkit/HTML5VideoViewProxy;)V
android.webkit.HTML5VideoViewProxy$VideoPlayer.play(Ljava/lang/String;ILandroid/webkit/HTML5VideoViewProxy;Landroid/webkit/WebChromeClient;I)V
com.android.music.MediaPlaybackService.onCreate()V
com.android.music.MediaPlaybackService$MultiPlayer.setDataSource(Ljava/lang/String;)V
com.android.music.MediaPlaybackService.setNextTrack()V
android.webkit.HTML5VideoFullScreen.pause()V
android.webkit.HTML5VideoInline.pause()V
android.webkit.HTML5VideoViewProxy$VideoPlayer.pause(Landroid/webkit/HTML5VideoViewProxy;)V
android.webkit.HTML5VideoView.pauseAndDispatch(Landroid/webkit/HTML5VideoViewProxy;)V
android.widget.VideoView.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.gallery3d.app.MoviePlayer.pauseVideo()V
com.android.mms.ui.SlideView.pauseVideo()V
com.android.mms.ui.SlideViewInterface.pauseAudio()V
com.android.music.AudioPreview$2.onAudioFocusChange(I)V
com.android.music.AudioPreview.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.music.AudioPreview.playPauseClicked(Landroid/view/View;)V
com.android.music.MediaPlaybackService$MultiPlayer.pause()V
android.filterpacks.videosrc.MediaSource.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.close(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.process(Landroid/filterfw/core/FilterContext;)V
android.media.AsyncPlayer.access$200(Landroid/media/AsyncPlayer;Landroid/media/AsyncPlayer$Command;)V
android.media.AudioService$AudioHandler.access$4700(Landroid/media/AudioService$AudioHandler;Landroid/media/MediaPlayer;)V
android.media.Ringtone.setUri(Landroid/net/Uri;)V
android.media.Ringtone.stop()V
android.widget.VideoView.access$2100(Landroid/widget/VideoView;Z)V
android.widget.VideoView.openVideo()V
android.widget.VideoView.suspend()V
com.android.gallery3d.app.MoviePlayer.onDestroy()V
com.android.mms.ui.SlideView.stopVideo()V
com.android.deskclock.AlarmKlaxon.onDestroy()V
com.android.ex.variablespeed.MediaPlayerProxy.prepare()V
com.android.ex.variablespeed.VariableSpeed.stopAndStartPlayingAgain(Lcom/android/ex/variablespeed/MediaPlayerDataSource;)V
com.android.mms.transaction.NotificationPlayer.startSound(Lcom/android/mms/transaction/NotificationPlayer$Command;)V
com.android.mms.ui.AudioAttachmentView.stopAudio()V
com.android.mms.ui.SlideViewInterface.setVideo(Ljava/lang/String;Landroid/net/Uri;)V
com.android.mms.ui.SlideViewInterface.setAudio(Landroid/net/Uri;Ljava/lang/String;Ljava/util/Map;)V
com.android.mms.ui.SlideViewInterface.stopAudio()V
com.android.mms.ui.SlideView.reset()V
com.android.music.AudioPreview.stopPlayback()V
com.android.musicfx.ActivityMusic.onCreate(Landroid/os/Bundle;)V
com.android.musicfx.ControlPanelEffect.setEnabledAll(Landroid/content/Context;Ljava/lang/String;IZ)V
com.android.music.MediaPlaybackService$MultiPlayer.release()V
com.android.music.MusicPicker.onPause()V
com.android.soundrecorder.Recorder.stop()V
com.android.systemui.media.NotificationPlayer.startSound(Lcom/android/systemui/media/NotificationPlayer$Command;)V
android.webkit.HTML5Audio.onError(Landroid/media/MediaPlayer;II)Z
android.webkit.HTML5Audio.<init>(Landroid/webkit/WebViewCore;I)V
android.webkit.HTML5Audio.setDataSource(Ljava/lang/String;)V
android.webkit.HTML5VideoFullScreen.prepareDataCommon(Landroid/webkit/HTML5VideoViewProxy;)V
android.webkit.HTML5VideoInline.prepareDataCommon(Landroid/webkit/HTML5VideoViewProxy;)V
android.webkit.HTML5VideoFullScreen.reprepareData(Landroid/webkit/HTML5VideoViewProxy;)V
android.webkit.HTML5VideoInline.reprepareData(Landroid/webkit/HTML5VideoViewProxy;)V
android.webkit.HTML5VideoFullScreen.reset()V
android.webkit.HTML5VideoInline.reset()V
android.webkit.HTML5VideoViewProxy$VideoPlayer.enterFullScreenVideo(ILjava/lang/String;Landroid/webkit/HTML5VideoViewProxy;Landroid/webkit/WebViewClassic;)V
com.android.deskclock.AlarmKlaxon.onStartCommand(Landroid/content/Intent;II)I
com.android.music.MediaPlaybackService$MultiPlayer.stop()V
com.android.music.AudioPreview$PreviewPlayer.postEventFromNative(Ljava/lang/Object;IIILjava/lang/Object;)V
com.android.music.MediaPlaybackService$CompatMediaPlayer.postEventFromNative(Ljava/lang/Object;IIILjava/lang/Object;)V
android.preference.VolumePreference$SeekBarVolumizer.startSample()V
com.android.providers.media.RingtonePickerActivity.run()V
com.android.systemui.media.RingtonePlayer$1.play(Landroid/os/IBinder;Landroid/net/Uri;I)V
com.android.systemui.power.PowerUI.playLowBatterySound()V
com.android.server.DockObserver.update()V
android.speech.tts.PlaybackQueueItem.run()V
android.webkit.HTML5Audio.onPrepared(Landroid/media/MediaPlayer;)V
android.webkit.HTML5VideoFullScreen.start()V
android.webkit.HTML5VideoInline.start()V
android.webkit.HTML5VideoViewProxy$VideoPlayer.onPrepared()V
android.widget.VideoView$2.onPrepared(Landroid/media/MediaPlayer;)V
android.widget.VideoView$6.surfaceChanged(Landroid/view/SurfaceHolder;III)V
com.android.gallery3d.app.MoviePlayer.<init>(Landroid/view/View;Lcom/android/gallery3d/app/MovieActivity;Landroid/net/Uri;Landroid/os/Bundle;Z)V
com.android.gallery3d.app.MoviePlayer.playVideo()V
com.android.gallery3d.app.MoviePlayer.startVideo()V
com.android.mms.ui.SlideView.startVideo()V
com.android.mms.ui.SlideViewInterface.startAudio()V
com.android.music.AudioPreview.onPrepared(Landroid/media/MediaPlayer;)V
com.android.music.AudioPreview.start()V
com.android.music.MediaPlaybackService$MultiPlayer.start()V
com.android.music.MusicPicker.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.soundrecorder.SoundRecorder.onClick(Landroid/view/View;)V
android.webkit.HTML5VideoFullScreen.stopPlayback()V
android.webkit.HTML5VideoInline.stopPlayback()V
android.bluetooth.IBluetoothA2dp.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.IBluetoothA2dp.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.bluetooth.opp.BluetoothOppTransfer.startObexSession()V
com.android.bluetooth.pbap.BluetoothPbapService.startRfcommSocketListener()V
com.android.contacts.vcard.SelectAccountActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.deskclock.AlarmReceiver$1.run()V
com.android.exchange.EasAccountService.runPingLoop()V
com.android.exchange.EasAccountService.executePostWithTimeout(Lorg/apache/http/client/HttpClient;Lorg/apache/http/client/methods/HttpPost;IZ)Lcom/android/exchange/EasResponse;
com.android.exchange.EasOutboxService.executePostWithTimeout(Lorg/apache/http/client/HttpClient;Lorg/apache/http/client/methods/HttpPost;IZ)Lcom/android/exchange/EasResponse;
com.android.exchange.EasSyncService.executePostWithTimeout(Lorg/apache/http/client/HttpClient;Lorg/apache/http/client/methods/HttpPost;I)Lcom/android/exchange/EasResponse;
com.android.exchange.EasSyncService.sendHttpClientPost(Ljava/lang/String;Lorg/apache/http/HttpEntity;I)Lcom/android/exchange/EasResponse;
com.android.exchange.ExchangeService.checkMailboxes()J
com.android.exchange.ExchangeService.requestSync(Lcom/android/emailcommon/provider/Mailbox;ILcom/android/exchange/Request;)V
com.android.internal.policy.impl.KeyguardScreenCallback.pokeWakelock(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$3.takeEmergencyCallAction()V
com.android.internal.policy.impl.KeyguardViewBase.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView$3.pokeWakelock()V
com.android.internal.policy.impl.LockPatternKeyguardView.dispatchHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView.wakeWhenReadyTq(I)V
com.android.internal.policy.impl.KeyguardViewMediator.handleHide()V
com.android.internal.policy.impl.KeyguardViewMediator.handleSetHidden(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.handleShow()V
com.android.internal.policy.impl.KeyguardViewMediator.access$1800(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.policy.impl.PhoneWindowManager$2.run()V
com.android.internal.policy.impl.KeyguardViewMediator$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.policy.impl.KeyguardViewMediator.doKeyguardTimeout()V
com.android.internal.policy.impl.PhoneWindowManager.screenTurnedOff(I)V
com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback.onSimStateChanged(Lcom/android/internal/telephony/IccCard$State;)V
com.android.internal.policy.impl.PhoneWindowManager.systemReady()V
android.view.WindowManagerPolicy.enableKeyguard(Z)V
android.view.WindowManagerPolicy.notifyLidSwitchChanged(JZ)V
android.view.WindowManagerPolicy.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.input.InputManagerService$Callbacks.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
android.view.WindowManagerPolicy.dispatchUnhandledKey(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.telephony.cdma.CdmaCallTracker.handlePollCalls(Landroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaCallTracker.dial(Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.Connection.cancelPostDial()V
com.android.internal.telephony.Connection.proceedAfterWaitChar()V
com.android.internal.telephony.Connection.proceedAfterWildChar(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaConnection.onConnectedInOrOut()V
com.android.internal.telephony.CallTracker.handlePollCalls(Landroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmCallTracker.dial(Ljava/lang/String;Lcom/android/internal/telephony/UUSInfo;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.gsm.GsmCallTracker.dial(Ljava/lang/String;I)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.gsm.GsmCallTracker.dial(Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.gsm.GSMPhone.dial(Ljava/lang/String;Lcom/android/internal/telephony/UUSInfo;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.gsm.GsmConnection.access$000(Lcom/android/internal/telephony/gsm/GsmConnection;)V
com.android.internal.telephony.gsm.GsmConnection.onConnectedInOrOut()V
com.android.internal.telephony.CommandsInterface.acceptCall(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.acknowledgeIncomingGsmSmsWithPdu(ZLjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.acknowledgeLastIncomingCdmaSms(ZILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.acknowledgeLastIncomingGsmSms(ZILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.cancelPendingUssd(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.changeBarringPassword(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.changeIccPin2ForApp(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.changeIccPin2(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.changeIccPinForApp(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.changeIccPin(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.conference(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.deactivateDataCall(IILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.deleteSmsOnRuim(ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.deleteSmsOnSim(ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.dial(Ljava/lang/String;ILcom/android/internal/telephony/UUSInfo;Landroid/os/Message;)V
com.android.internal.telephony.RIL.dial(Ljava/lang/String;ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.exitEmergencyCallbackMode(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.explicitCallTransfer(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getAvailableNetworks(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getBasebandVersion(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getCdmaBroadcastConfig(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getCDMASubscription(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getCdmaSubscriptionSource(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getCLIR(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getCurrentCalls(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getDataCallList(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getPDPContextList(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getDataRegistrationState(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getDeviceIdentity(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getGsmBroadcastConfig(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getIccCardStatus(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getIMEI(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getIMEISV(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getIMSIForApp(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.getIMSI(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getLastCallFailCause(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getLastDataCallFailCause(Landroid/os/Message;)V
com.android.internal.telephony.RIL.getLastPdpFailCause(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getMute(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getNeighboringCids(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getNetworkSelectionMode(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getOperator(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getPreferredNetworkType(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getPreferredVoicePrivacy(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getSignalStrength(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getSmscAddress(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getVoiceRadioTechnology(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getVoiceRegistrationState(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.handleCallSetupRequestFromSim(ZLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.hangupConnection(ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.hangupForegroundResumeBackground(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.hangupWaitingOrBackground(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.iccIOForApp(IILjava/lang/String;IIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.iccIO(IILjava/lang/String;IIILjava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.invokeOemRilRequestRaw([BLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.invokeOemRilRequestStrings([Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.queryAvailableBandMode(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.queryCallForwardStatus(IILjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.queryCallWaiting(ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.queryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.queryCLIP(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.queryFacilityLockForApp(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.queryFacilityLock(Ljava/lang/String;Ljava/lang/String;ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.queryTTYMode(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.rejectCall(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.reportSmsMemoryStatus(ZLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.reportStkServiceIsRunning(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.requestIsimAuthentication(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.resetRadio(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.sendCDMAFeatureCode(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.sendCdmaSms([BLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.sendDtmf(CLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.sendEnvelope(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.sendEnvelopeWithStatus(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.access$000(Lcom/android/internal/telephony/RIL;Z)V
com.android.internal.telephony.RIL.onRadioAvailable()V
com.android.internal.telephony.CommandsInterface.sendSMS(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.sendTerminalResponse(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.sendUSSD(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.separateConnection(ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setBandMode(ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setCallForward(IIILjava/lang/String;ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setCallWaiting(ZILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setCdmaBroadcastActivation(ZLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setCdmaBroadcastConfig([ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setCdmaRoamingPreference(ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setCdmaSubscriptionSource(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.processUnsolicited(Landroid/os/Parcel;)V
com.android.internal.telephony.CommandsInterface.setCLIR(ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setFacilityLockForApp(Ljava/lang/String;ZLjava/lang/String;ILjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.setFacilityLock(Ljava/lang/String;ZLjava/lang/String;ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setGsmBroadcastActivation(ZLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setGsmBroadcastConfig([Lcom/android/internal/telephony/gsm/SmsBroadcastConfigInfo;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setLocationUpdates(ZLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setMute(ZLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setNetworkSelectionModeAutomatic(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setNetworkSelectionModeManual(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setPreferredNetworkType(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.setCurrentPreferredNetworkType()V
com.android.internal.telephony.CommandsInterface.setPreferredVoicePrivacy(ZLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setRadioPower(ZLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setSmscAddress(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setSuppServiceNotifications(ZLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setTTYMode(ILandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.setupDataCall(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.startDtmf(CLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.stopDtmf(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.supplyIccPin2ForApp(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.supplyIccPin2(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.supplyIccPinForApp(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.supplyIccPin(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.supplyIccPuk2ForApp(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.supplyIccPuk2(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.supplyIccPukForApp(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.RIL.supplyIccPuk(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.supplyNetworkDepersonalization(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.switchWaitingOrHoldingAndActive(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.writeSmsToRuim(ILjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.writeSmsToSim(ILjava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.mms.transaction.MessagingNotification.playInConversationNotificationSound(Landroid/content/Context;)V
com.android.mms.transaction.PrivilegedSmsReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
com.android.phone.PhoneApp.onCreate()V
com.android.phone.CallNotifier.onCustomRingtoneQueryTimeout(Ljava/lang/String;)V
com.android.phone.CallNotifier.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.DTMFTwelveKeyDialer.closeDialer(Z)V
com.android.phone.DTMFTwelveKeyDialer.openDialer(Z)V
com.android.phone.InCallScreen.access$500(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.access$400(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.AccelerometerListener.setOrientation(I)V
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.CallNotifier.access$1000(Lcom/android/phone/CallNotifier;)V
com.android.phone.CallNotifier.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallTouchUi.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.phone.InCallTouchUi.handleAudioButtonClick()V
com.android.phone.OtaUtils.cleanOtaScreen(Z)V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.OtaUtils.onClickOtaSpeakerButton()V
com.android.phone.BluetoothHandsfree$16.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalAnswerCall()V
com.android.phone.PhoneInterfaceManager.answerRingingCallInternal()V
com.android.phone.PhoneUtils.answerAndEndActive(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.answerAndEndHolding(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.handleHeadsetHook(Lcom/android/internal/telephony/Phone;Landroid/view/KeyEvent;)Z
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OtaUtils.startNonInteractiveOtasp(Landroid/content/Context;)I
com.android.server.am.ActivityStack.activityPaused(Landroid/os/IBinder;Z)V
android.app.ActivityManagerNative.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IActivityManager.shutdown(I)Z
android.app.IActivityManager.goingToSleep()V
com.android.server.BackupManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.pm.PackageManagerService$5.run()V
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.ConnectivityManager.requestNetworkTransitionWakelock(Ljava/lang/String;)Z
com.android.server.LocationManagerService.updateProviderListenersLocked(Ljava/lang/String;Z)V
com.android.server.LocationManagerService$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.location.ILocationListener$Stub$Proxy.onLocationChanged(Landroid/location/Location;)V
com.android.server.LocationManagerService$Receiver.callLocationChangedLocked(Landroid/location/Location;)Z
com.android.server.LocationManagerService$Receiver.callProviderEnabledLocked(Ljava/lang/String;Z)Z
com.android.server.LocationManagerService$Receiver.callStatusChangedLocked(Ljava/lang/String;ILandroid/os/Bundle;)Z
com.android.server.PowerManagerService$10.run()V
com.android.server.ShutdownActivity$1.run()V
com.android.server.wm.WindowManagerService.rebootSafeMode()V
com.android.server.wm.WindowManagerService.shutdown()V
com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback.onError(ILjava/lang/String;)V
com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy$1.run()V
com.android.server.sip.SipSessionGroup$SipSessionImpl$KeepAliveProcess.process(Ljava/util/EventObject;)Z
com.android.server.sip.SipService$SipSessionGroupExt.onConnectivityChanged(Z)V
com.android.server.sip.SipService.open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;)V
com.android.server.VibratorService.access$300(Lcom/android/server/VibratorService;)V
com.android.server.VibratorService.updateInputDeviceVibrators()V
android.os.IVibratorService$Stub$Proxy.vibrate(JLandroid/os/IBinder;)V
android.os.IVibratorService$Stub.vibrate(JLandroid/os/IBinder;)V
com.android.server.WiredAccessoryObserver.access$100(Lcom/android/server/WiredAccessoryObserver;)V
com.android.server.wm.WindowManagerService.computeNewConfiguration()Landroid/content/res/Configuration;
com.android.server.wm.WindowManagerService.setTokenVisibilityLocked(Lcom/android/server/wm/AppWindowToken;Landroid/view/WindowManager$LayoutParams;ZIZ)Z
com.android.server.wm.WindowManagerService.access$600(Lcom/android/server/wm/WindowManagerService;)V
com.android.server.wm.WindowManagerService.moveAppWindowsLocked(Lcom/android/server/wm/AppWindowToken;IZ)V
com.android.server.wm.WindowManagerService.moveAppWindowsLocked(Ljava/util/List;I)V
com.android.server.wm.WindowManagerService.reevaluateStatusBarVisibility()V
com.android.server.wm.WindowManagerService.removeWindowInnerLocked(Lcom/android/server/wm/Session;Lcom/android/server/wm/WindowState;)V
com.android.server.wm.WindowManagerService.setNewConfiguration(Landroid/content/res/Configuration;)V
com.android.server.wm.WindowManagerService.unsetAppFreezingScreenLocked(Lcom/android/server/wm/AppWindowToken;ZZ)V
com.android.server.wm.DragState.unregister()V
android.view.IWindowManager$Stub$Proxy.clearForcedDisplaySize()V
android.view.IWindowManager$Stub.clearForcedDisplaySize()V
com.android.server.wm.WindowManagerService.displayReady()V
android.view.IWindowManager$Stub$Proxy.setForcedDisplaySize(II)V
android.view.IWindowManager$Stub.setForcedDisplaySize(II)V
com.android.settings.CryptKeeper$ValidationTask.onPostExecute(Ljava/lang/Boolean;)V
com.android.soundrecorder.Recorder.clear()V
com.android.soundrecorder.Recorder.delete()V
com.android.soundrecorder.Recorder.restoreState(Landroid/os/Bundle;)V
com.android.soundrecorder.Recorder.setState(I)V
com.android.systemui.media.RingtonePlayer$1.playAsync(Landroid/net/Uri;ZI)V
com.android.systemui.media.RingtonePlayer$1.stopAsync()V
android.content.ISyncStatusObserver$Stub$Proxy.onStatusChanged(I)V
android.content.ContentService.getSyncManager()Landroid/content/SyncManager;
android.content.SyncManager.access$700(Landroid/content/SyncManager;Landroid/content/Intent;)V
android.content.SyncManager$SyncHandler.cancelActiveSyncLocked(Landroid/accounts/Account;ILjava/lang/String;)V
android.content.SyncManager$3.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$7.onSyncRequest(Landroid/accounts/Account;ILjava/lang/String;Landroid/os/Bundle;)V
android.content.SyncManager$8.onServiceChanged(Landroid/content/SyncAdapterType;Z)V
android.content.SyncManager.scheduleLocalSync(Landroid/accounts/Account;ILjava/lang/String;)V
android.content.ISyncContext$Stub$Proxy.onFinished(Landroid/content/SyncResult;)V
com.android.internal.telephony.SMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)I
com.android.internal.telephony.cdma.CdmaSMSDispatcher.processCdmaWapPdu([BILjava/lang/String;)I
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$1.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$7.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$9.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.internal.util.State.enter()V
android.media.IAudioService.dispatchMediaKeyEvent(Landroid/view/KeyEvent;)V
android.media.IAudioService.dispatchMediaKeyEventUnderWakelock(Landroid/view/KeyEvent;)V
android.media.AudioManager.setBluetoothA2dpDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;I)I
android.media.AudioService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.AudioManager.setWiredDeviceConnectionState(IILjava/lang/String;)V
android.webkit.HTML5VideoFullScreen.prepareForFullScreen()V
android.webkit.HTML5VideoViewProxy.play(Ljava/lang/String;II)V
com.android.music.MediaPlaybackService.open(Ljava/lang/String;)Z
com.android.music.MediaPlaybackService.access$1200(Lcom/android/music/MediaPlaybackService;)V
com.android.music.MediaPlaybackService.openCurrentAndNext()V
com.android.music.MediaPlaybackService.setRepeatMode(I)V
android.webkit.HTML5VideoViewProxy.pause()V
android.webkit.HTML5VideoFullScreen.pauseAndDispatch(Landroid/webkit/HTML5VideoViewProxy;)V
android.webkit.HTML5VideoInline.pauseAndDispatch(Landroid/webkit/HTML5VideoViewProxy;)V
android.webkit.HTML5VideoViewProxy$VideoPlayer.pauseAndDispatch()V
android.webkit.HTML5VideoViewProxy$VideoPlayer.setBaseLayer(I)V
android.webkit.HTML5VideoView.onPrepared(Landroid/media/MediaPlayer;)V
com.android.gallery3d.app.MovieActivity$1.pauseVideo()V
com.android.gallery3d.app.MoviePlayer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.gallery3d.app.MoviePlayer.access$1200(Lcom/android/gallery3d/app/MoviePlayer;)V
com.android.gallery3d.app.MoviePlayer.onPlayPause()V
com.android.gallery3d.app.MoviePlayer.onResume()V
com.android.mms.ui.SlideViewInterface.pauseVideo()V
com.android.mms.ui.SlideshowPresenter.presentAudio(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/AudioModel;Z)V
com.android.music.MediaPlaybackService.pause()V
android.filterfw.core.Filter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.open(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.CallbackFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.close(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.close(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.media.AudioService$AudioHandler$1.onCompletion(Landroid/media/MediaPlayer;)V
android.media.AudioService$AudioHandler$2.onError(Landroid/media/MediaPlayer;II)Z
android.media.RingtoneManager.getRingtone(Landroid/content/Context;Landroid/net/Uri;I)Landroid/media/Ringtone;
android.media.Ringtone.setStreamType(I)V
com.android.systemui.media.RingtonePlayer$Client.<init>(Lcom/android/systemui/media/RingtonePlayer;Landroid/os/IBinder;Landroid/net/Uri;I)V
android.media.RingtoneManager.getRingtone(I)Landroid/media/Ringtone;
android.media.RingtoneManager.stopPreviousRingtone()V
android.preference.VolumePreference$SeekBarVolumizer.stopSample()V
com.android.providers.media.RingtonePickerActivity.stopAnyPlayingRingtone()V
com.android.systemui.media.RingtonePlayer$1.stop(Landroid/os/IBinder;)V
com.android.systemui.media.RingtonePlayer$Client.binderDied()V
android.widget.VideoView$6.surfaceDestroyed(Landroid/view/SurfaceHolder;)V
android.widget.VideoView.access$2000(Landroid/widget/VideoView;)V
android.widget.VideoView.resume()V
android.widget.VideoView.setVideoURI(Landroid/net/Uri;Ljava/util/Map;)V
com.android.gallery3d.app.MoviePlayer.onPause()V
com.android.gallery3d.app.MovieActivity$1.onDestroy()V
com.android.gallery3d.app.MovieActivity.onDestroy()V
com.android.mms.ui.SlideViewInterface.stopVideo()V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$2.doInBackground([Ljava/lang/Void;)Ljava/lang/Exception;
com.android.contacts.voicemail.VoicemailPlaybackPresenter$3.doInBackground([Ljava/lang/Void;)Ljava/lang/Exception;
com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy.prepare()V
com.android.ex.variablespeed.VariableSpeed.seekTo(I)V
com.android.ex.variablespeed.VariableSpeed.start()V
com.android.mms.transaction.NotificationPlayer.access$500(Lcom/android/mms/transaction/NotificationPlayer;Lcom/android/mms/transaction/NotificationPlayer$Command;)V
com.android.mms.ui.AudioAttachmentView$1.onCompletion(Landroid/media/MediaPlayer;)V
com.android.mms.ui.AudioAttachmentView.onPlaybackError()V
com.android.mms.ui.AudioAttachmentView.reset()V
com.android.mms.ui.SlideshowPresenter.presentVideo(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/VideoModel;Lcom/android/mms/model/RegionModel;Z)V
com.android.mms.ui.MmsThumbnailPresenter.presentAudioThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/AudioModel;)V
com.android.mms.ui.SlideViewInterface.reset()V
com.android.mms.ui.ViewInterface.reset()V
com.android.music.AudioPreview.onDestroy()V
com.android.music.AudioPreview.onUserLeaveHint()V
com.android.music.MediaPlaybackService.onDestroy()V
com.android.soundrecorder.Recorder.onError(Landroid/media/MediaPlayer;II)Z
com.android.soundrecorder.Recorder.onCompletion(Landroid/media/MediaPlayer;)V
com.android.soundrecorder.Recorder.startRecording(ILjava/lang/String;Landroid/content/Context;)V
com.android.soundrecorder.SoundRecorder.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.soundrecorder.SoundRecorder.onPause()V
com.android.soundrecorder.SoundRecorder.onStop()V
com.android.soundrecorder.SoundRecorder.updateTimeRemaining()V
com.android.systemui.media.NotificationPlayer.access$500(Lcom/android/systemui/media/NotificationPlayer;Lcom/android/systemui/media/NotificationPlayer$Command;)V
android.webkit.HTML5VideoViewProxy.enterFullScreenVideo(ILjava/lang/String;)V
com.android.music.MediaPlaybackService.stop(Z)V
android.preference.VolumePreference$SeekBarVolumizer.changeVolumeBy(I)V
android.preference.VolumePreference$SeekBarVolumizer.muteVolume()V
android.preference.VolumePreference$SeekBarVolumizer.onStopTrackingTouch(Landroid/widget/SeekBar;)V
android.media.IRingtonePlayer$Stub$Proxy.play(Landroid/os/IBinder;Landroid/net/Uri;I)V
android.media.IRingtonePlayer$Stub.play(Landroid/os/IBinder;Landroid/net/Uri;I)V
com.android.systemui.power.PowerUI$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.DockObserver.onUEvent(Landroid/os/UEventObserver$UEvent;)V
com.android.server.DockObserver.systemReady()V
android.speech.tts.AudioPlaybackHandler$MessageLoop.run()V
android.webkit.HTML5VideoViewProxy.onPrepared(Landroid/media/MediaPlayer;)V
com.android.gallery3d.app.MovieActivity$1.<init>(Landroid/view/View;Lcom/android/gallery3d/app/MovieActivity;Landroid/net/Uri;Landroid/os/Bundle;Z)V
com.android.gallery3d.app.MovieActivity$1.<init>(Lcom/android/gallery3d/app/MovieActivity;Landroid/view/View;Lcom/android/gallery3d/app/MovieActivity;Landroid/net/Uri;Landroid/os/Bundle;Z)V
com.android.gallery3d.app.MovieActivity$1.playVideo()V
com.android.gallery3d.app.MovieActivity$1.startVideo()V
com.android.gallery3d.app.MoviePlayer.access$1000(Lcom/android/gallery3d/app/MoviePlayer;)V
com.android.gallery3d.app.MoviePlayer.onReplay()V
com.android.mms.ui.SlideViewInterface.startVideo()V
com.android.music.AudioPreview$PreviewPlayer.onPrepared(Landroid/media/MediaPlayer;)V
com.android.music.AudioPreview.access$700(Lcom/android/music/AudioPreview;)V
com.android.music.MediaPlaybackService.play()V
android.server.BluetoothA2dpService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.bluetooth.opp.BluetoothOppTransfer.access$600(Lcom/android/bluetooth/opp/BluetoothOppTransfer;)V
com.android.bluetooth.opp.BluetoothOppTransfer.start()V
com.android.bluetooth.pbap.BluetoothPbapService.access$900(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.stopObexServerSession()V
com.android.exchange.EasAccountService.sync()V
com.android.exchange.EasAccountService.executePostWithTimeout(Lorg/apache/http/client/HttpClient;Lorg/apache/http/client/methods/HttpPost;I)Lcom/android/exchange/EasResponse;
com.android.exchange.EasOutboxService.executePostWithTimeout(Lorg/apache/http/client/HttpClient;Lorg/apache/http/client/methods/HttpPost;I)Lcom/android/exchange/EasResponse;
com.android.exchange.EasSyncService.postAutodiscover(Lorg/apache/http/client/HttpClient;Lorg/apache/http/client/methods/HttpPost;Z)Lcom/android/exchange/EasResponse;
com.android.exchange.adapter.AttachmentLoader.loadAttachment()V
com.android.exchange.adapter.EmailSyncAdapter.getEstimate(Ljava/lang/String;)I
com.android.exchange.EasAccountService.sendHttpClientPost(Ljava/lang/String;Lorg/apache/http/HttpEntity;I)Lcom/android/exchange/EasResponse;
com.android.exchange.EasOutboxService.sendHttpClientPost(Ljava/lang/String;Lorg/apache/http/HttpEntity;I)Lcom/android/exchange/EasResponse;
com.android.exchange.EasSyncService.sendHttpClientPost(Ljava/lang/String;[B)Lcom/android/exchange/EasResponse;
com.android.exchange.EasSyncService.sendHttpClientPost(Ljava/lang/String;Lorg/apache/http/HttpEntity;)Lcom/android/exchange/EasResponse;
com.android.exchange.EasSyncService.sendPing([BI)Lcom/android/exchange/EasResponse;
com.android.exchange.EasSyncService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.ExchangeService.startManualSync(JILcom/android/exchange/Request;)V
com.android.internal.policy.impl.AccountUnlockScreen$2.run(Landroid/accounts/AccountManagerFuture;)V
com.android.internal.policy.impl.AccountUnlockScreen.asyncCheckPassword()V
com.android.internal.policy.impl.AccountUnlockScreen.onTextChanged(Ljava/lang/CharSequence;III)V
com.android.internal.policy.impl.FaceUnlock.handleCancel()V
com.android.internal.policy.impl.FaceUnlock.handlePokeWakelock(I)V
com.android.internal.policy.impl.LockPatternKeyguardView$2.userActivity(Landroid/view/View;)V
com.android.internal.policy.impl.LockScreen$WaveViewMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener.onPatternCellAdded(Ljava/util/List;)V
com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener.onPatternDetected(Ljava/util/List;)V
com.android.internal.policy.impl.SimPukUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.SimPukUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.SimUnlockScreen$TouchInput.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardScreenCallback.takeEmergencyCallAction()V
com.android.internal.policy.impl.LockPatternKeyguardView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardScreenCallback.pokeWakelock()V
com.android.internal.policy.impl.KeyguardViewBase.wakeWhenReadyTq(I)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1300(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.handleKeyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewMediator.access$2100(Lcom/android/internal/policy/impl/KeyguardViewMediator;Z)V
com.android.internal.policy.impl.KeyguardViewMediator.access$1200(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.internal.policy.impl.KeyguardViewMediator.resetStateLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.verifyUnlockLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.notifyScreenOffLocked()V
com.android.internal.policy.impl.KeyguardViewMediator.notifyScreenOnLocked(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
com.android.internal.policy.impl.KeyguardViewMediator.hideLocked()V
com.android.internal.policy.impl.PhoneWindowManager$19.run()V
android.view.WindowManagerPolicy.screenTurnedOff(I)V
com.android.internal.policy.impl.PhoneWindowManager.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.handleSimStateChange(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimArgs;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.registerSimStateCallback(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimStateCallback;)V
android.view.WindowManagerPolicy.systemReady()V
com.android.server.wm.WindowManagerService$1.acquired()V
com.android.server.wm.WindowManagerService$1.released()V
com.android.server.wm.WindowManagerService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.wm.InputMonitor.notifyLidSwitchChanged(JZ)V
com.android.server.wm.InputMonitor.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.input.InputManagerService.interceptKeyBeforeQueueing(Landroid/view/KeyEvent;IZ)I
com.android.server.wm.InputMonitor.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.telephony.cdma.CDMAPhone.dial(Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.phone.InCallScreen$5.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$7.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.InCallScreen.updateScreen()V
com.android.phone.InCallScreen$6.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$8.onClick(Landroid/content/DialogInterface;I)V
com.android.internal.telephony.cdma.CdmaCallTracker.acceptCall()V
com.android.internal.telephony.cdma.CdmaConnection.update(Lcom/android/internal/telephony/DriverCall;)Z
com.android.internal.telephony.gsm.GSMPhone.dial(Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.gsm.GsmConnection.update(Lcom/android/internal/telephony/DriverCall;)Z
com.android.internal.telephony.gsm.GsmCallTracker.acceptCall()V
com.android.internal.telephony.gsm.UsimDataDownloadHandler.sendSmsAckForEnvelopeResponse(Lcom/android/internal/telephony/IccIoResult;II)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.acknowledgeLastIncomingSms(ZILandroid/os/Message;)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.acknowledgeLastIncomingSms(ZILandroid/os/Message;)V
com.android.internal.telephony.gsm.UsimDataDownloadHandler.acknowledgeSmsWithError(I)V
com.android.internal.telephony.gsm.GsmMmiCode.cancel()V
com.android.internal.telephony.gsm.GsmMmiCode.processCode()V
com.android.internal.telephony.CommandsInterface.changeIccPin2(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.changeIccPin(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GsmCallTracker.conference()V
com.android.internal.telephony.DataConnection.tearDownData(Ljava/lang/Object;)V
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.CommandsInterface.dial(Ljava/lang/String;ILandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.exitEmergencyCallbackMode()V
com.android.internal.telephony.cdma.CDMAPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CdmaCallTracker.explicitCallTransfer()V
com.android.internal.telephony.gsm.GsmCallTracker.explicitCallTransfer()V
com.android.internal.telephony.cdma.CDMALTEPhone.getAvailableNetworks(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.getAvailableNetworks(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.getSubscriptionInfoAndStartPollingThreads()V
com.android.internal.telephony.cdma.RuimRecords.onReady()V
com.android.internal.telephony.gsm.GSMPhone.getOutgoingCallerIdDisplay(Landroid/os/Message;)V
com.android.internal.telephony.CallTracker.pollCallsWhenSafe()V
com.android.internal.telephony.cdma.CdmaCallTracker.operationComplete()V
com.android.internal.telephony.gsm.GsmCallTracker.operationComplete()V
com.android.internal.telephony.cdma.CDMAPhone.getDataCallList(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.doRecovery()V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onPollPdp()V
com.android.internal.telephony.gsm.GSMPhone.getDataCallList(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.getPDPContextList(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.pollState()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.pollState()V
com.android.internal.telephony.IccCard.handleIccCardStatus(Lcom/android/internal/telephony/IccCardStatus;)V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.fetchSimRecords()V
com.android.internal.telephony.gsm.SIMRecords.fetchSimRecords()V
com.android.internal.telephony.CommandsInterface.getIMSI(Landroid/os/Message;)V
com.android.internal.telephony.DataConnection$DcActivatingState.processMessage(Landroid/os/Message;)Z
com.android.internal.telephony.CommandsInterface.getLastPdpFailCause(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.getNeighboringCids(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.pollState()V
com.android.internal.telephony.PhoneBase.getPreferredNetworkType(Landroid/os/Message;)V
com.android.internal.telephony.ServiceStateTracker.reRegisterNetwork(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.getEnhancedVoicePrivacy(Landroid/os/Message;)V
com.android.internal.telephony.PhoneBase.getSmscAddress(Landroid/os/Message;)V
com.android.internal.telephony.cat.CatService.handleCmdResponse(Lcom/android/internal/telephony/cat/CatResponseMessage;)V
com.android.internal.telephony.cdma.CdmaCallTracker.hangupAllConnections(Lcom/android/internal/telephony/cdma/CdmaCall;)V
com.android.internal.telephony.cdma.CdmaCallTracker.hangup(Lcom/android/internal/telephony/cdma/CdmaConnection;)V
com.android.internal.telephony.cdma.CdmaCallTracker.hangupConnectionByIndex(Lcom/android/internal/telephony/cdma/CdmaCall;I)V
com.android.internal.telephony.gsm.GsmCallTracker.hangupAllConnections(Lcom/android/internal/telephony/gsm/GsmCall;)V
com.android.internal.telephony.gsm.GsmCallTracker.hangup(Lcom/android/internal/telephony/gsm/GsmConnection;)V
com.android.internal.telephony.gsm.GsmCallTracker.hangupConnectionByIndex(Lcom/android/internal/telephony/gsm/GsmCall;I)V
com.android.internal.telephony.cdma.CdmaCallTracker.hangupForegroundResumeBackground()V
com.android.internal.telephony.gsm.GsmCallTracker.hangupForegroundResumeBackground()V
com.android.internal.telephony.cdma.CdmaCallTracker.hangup(Lcom/android/internal/telephony/cdma/CdmaCall;)V
com.android.internal.telephony.cdma.CdmaCallTracker.hangupWaitingOrBackground()V
com.android.internal.telephony.gsm.GsmCallTracker.hangup(Lcom/android/internal/telephony/gsm/GsmCall;)V
com.android.internal.telephony.gsm.GsmCallTracker.hangupWaitingOrBackground()V
com.android.internal.telephony.cdma.CdmaLteUiccFileHandler.loadEFTransparent(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.RuimFileHandler.loadEFImgTransparent(IIIILandroid/os/Message;)V
com.android.internal.telephony.IccFileHandler.getEFLinearRecordSize(ILandroid/os/Message;)V
com.android.internal.telephony.IccFileHandler.loadEFImgLinearFixed(ILandroid/os/Message;)V
com.android.internal.telephony.IccFileHandler.loadEFImgTransparent(IIIILandroid/os/Message;)V
com.android.internal.telephony.IccFileHandler.loadEFLinearFixedAll(ILandroid/os/Message;)V
com.android.internal.telephony.IccFileHandler.loadEFLinearFixed(IILandroid/os/Message;)V
com.android.internal.telephony.IccFileHandler.loadEFTransparent(ILandroid/os/Message;)V
com.android.internal.telephony.IccFileHandler.updateEFLinearFixed(II[BLjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.IccFileHandler.updateEFTransparent(I[BLandroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.iccIO(IILjava/lang/String;IIILjava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.PhoneBase.invokeOemRilRequestRaw([BLandroid/os/Message;)V
com.android.internal.telephony.PhoneBase.invokeOemRilRequestStrings([Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.PhoneBase.queryAvailableBandMode(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.getCallForwardingOption(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.getCallWaiting(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.getCallWaiting(Landroid/os/Message;)V
com.android.internal.telephony.PhoneBase.queryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.queryFacilityLock(Ljava/lang/String;Ljava/lang/String;ILandroid/os/Message;)V
com.android.internal.telephony.PhoneBase.queryTTYMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaCallTracker.rejectCall()V
com.android.internal.telephony.gsm.GsmCallTracker.rejectCall()V
com.android.internal.telephony.SmsStorageMonitor$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.telephony.cdma.CDMALTEPhone.requestIsimAuthentication(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaCallTracker.flashAndSetGenericTrue()V
com.android.internal.telephony.cdma.CdmaCallTracker.switchWaitingOrHoldingAndActive()V
com.android.internal.telephony.cdma.CdmaSMSDispatcher$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.sendSms(Lcom/android/internal/telephony/SMSDispatcher$SmsTracker;)V
com.android.internal.telephony.cdma.CDMAPhone.sendDtmf(C)V
com.android.internal.telephony.gsm.GSMPhone.sendDtmf(C)V
com.android.internal.telephony.cat.CatService.eventDownload(III[BZ)V
com.android.internal.telephony.cat.CatService.sendMenuSelection(IZ)V
com.android.internal.telephony.gsm.UsimDataDownloadHandler.handleDataDownload(Lcom/android/internal/telephony/gsm/SmsMessage;)V
com.android.internal.telephony.RIL$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.internal.telephony.BaseCommands.onRadioAvailable()V
com.android.internal.telephony.gsm.GsmSMSDispatcher.sendSms(Lcom/android/internal/telephony/SMSDispatcher$SmsTracker;)V
com.android.internal.telephony.cat.CatService.sendTerminalResponse(Lcom/android/internal/telephony/cat/CommandDetails;Lcom/android/internal/telephony/cat/ResultCode;ZILcom/android/internal/telephony/cat/ResponseData;)V
com.android.internal.telephony.gsm.GsmMmiCode.sendUssd(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaCallTracker.separate(Lcom/android/internal/telephony/cdma/CdmaConnection;)V
com.android.internal.telephony.gsm.GsmCallTracker.separate(Lcom/android/internal/telephony/gsm/GsmConnection;)V
com.android.internal.telephony.PhoneBase.setBandMode(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.setCallForwardingOption(IILjava/lang/String;ILandroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.setCallWaiting(ZLandroid/os/Message;)V
com.android.internal.telephony.PhoneBase.setCdmaRoamingPreference(ILandroid/os/Message;)V
com.android.internal.telephony.PhoneBase.setCdmaSubscription(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.processResponse(Landroid/os/Parcel;)V
com.android.internal.telephony.gsm.GSMPhone.setOutgoingCallerIdDisplay(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.syncClirSetting()V
com.android.internal.telephony.CommandsInterface.setFacilityLock(Ljava/lang/String;ZLjava/lang/String;ILandroid/os/Message;)V
com.android.internal.telephony.gsm.SimSmsInterfaceManager.setCellBroadcastActivation(Z)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.setCellBroadcastConfig([Lcom/android/internal/telephony/gsm/SmsBroadcastConfigInfo;)Z
com.android.internal.telephony.ServiceStateTracker.disableLocationUpdates()V
com.android.internal.telephony.ServiceStateTracker.disableSingleLocationUpdate()V
com.android.internal.telephony.ServiceStateTracker.enableLocationUpdates()V
com.android.internal.telephony.ServiceStateTracker.enableSingleLocationUpdate()V
com.android.internal.telephony.cdma.CdmaCallTracker.setMute(Z)V
com.android.internal.telephony.gsm.GsmCallTracker.setMute(Z)V
com.android.internal.telephony.gsm.GSMPhone.setNetworkSelectionModeAutomatic(Landroid/os/Message;)V
com.android.internal.telephony.PhoneBase.restoreSavedNetworkSelection(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.selectNetworkManually(Lcom/android/internal/telephony/OperatorInfo;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.selectNetworkManually(Lcom/android/internal/telephony/OperatorInfo;Landroid/os/Message;)V
com.android.internal.telephony.PhoneBase.setPreferredNetworkType(ILandroid/os/Message;)V
com.android.internal.telephony.BaseCommands.setCurrentPreferredNetworkType()V
com.android.internal.telephony.CommandsInterface.setCurrentPreferredNetworkType()V
com.android.internal.telephony.cdma.CDMAPhone.enableEnhancedVoicePrivacy(ZLandroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onRestartRadio()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.hangupAndPowerOff()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.setPowerStateToDesired()V
com.android.internal.telephony.cdma.RuimRecords.handleRuimRefresh(Lcom/android/internal/telephony/IccRefreshResponse;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.hangupAndPowerOff()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.setPowerStateToDesired()V
com.android.internal.telephony.gsm.SIMRecords.handleSimRefresh(Lcom/android/internal/telephony/IccRefreshResponse;)V
com.android.internal.telephony.PhoneProxy.updatePhoneObject(I)V
com.android.internal.telephony.PhoneBase.setSmscAddress(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.registerForSuppServiceNotification(Landroid/os/Handler;ILjava/lang/Object;)V
com.android.internal.telephony.gsm.GSMPhone.unregisterForSuppServiceNotification(Landroid/os/Handler;)V
com.android.internal.telephony.PhoneBase.setTTYMode(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaDataConnection.onConnect(Lcom/android/internal/telephony/DataConnection$ConnectionParams;)V
com.android.internal.telephony.gsm.GsmDataConnection.onConnect(Lcom/android/internal/telephony/DataConnection$ConnectionParams;)V
com.android.internal.telephony.cdma.CDMAPhone.startDtmf(C)V
com.android.internal.telephony.gsm.GSMPhone.startDtmf(C)V
com.android.internal.telephony.cdma.CDMAPhone.stopDtmf()V
com.android.internal.telephony.gsm.GSMPhone.stopDtmf()V
com.android.internal.telephony.CommandsInterface.supplyIccPin2(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.supplyIccPin(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.supplyIccPuk2(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CommandsInterface.supplyIccPuk(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.IccCard.supplyNetworkDepersonalization(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GsmCallTracker.switchWaitingOrHoldingAndActive()V
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.copyMessageToIccEf(I[B[B)Z
com.android.mms.transaction.MessagingNotification.blockingUpdateNewMessageIndicator(Landroid/content/Context;JZ)V
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.DTMFTwelveKeyDialer.clearInCallScreenReference()V
com.android.phone.InCallScreen.closeDialpadInternal(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureDialog()V
com.android.phone.OtaUtils.otaShowProgramSuccessDialog()V
com.android.phone.OtaUtils.otaShowSpcErrorNotice(I)V
com.android.phone.InCallScreen.openDialpadInternal(Z)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.AccelerometerListener.onSensorEvent(DDD)V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.phone.CallNotifier$InCallTonePlayer.run()V
com.android.phone.InCallScreen.checkOtaspStateOnResume()Z
com.android.phone.InCallScreen.onStop()V
com.android.phone.InCallScreen.setInCallScreenMode(Lcom/android/phone/InCallUiState$InCallScreenMode;)V
com.android.phone.PhoneApp.clearOtaState()V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.PhoneInterfaceManager.access$000(Lcom/android/phone/PhoneInterfaceManager;)V
com.android.phone.InCallScreen.internalAnswerAndEnd()V
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.InCallScreenShowActivation.onCreate(Landroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.pm.ShutdownThread.run()V
com.android.server.PowerManagerService$4.run()V
android.net.wifi.WifiStateMachine$ConnectedState.exit()V
com.android.server.LocationManagerService.updateProvidersLocked()V
com.android.server.LocationManagerService.handleLocationChangedLocked(Landroid/location/Location;Z)V
android.view.WindowManagerPolicy$WindowManagerFuncs.rebootSafeMode()V
android.view.WindowManagerPolicy$WindowManagerFuncs.shutdown()V
com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy$2.run()V
com.android.server.sip.SipSessionGroup$SipSessionImpl$KeepAliveProcess.onError(Landroid/net/sip/ISipSession;ILjava/lang/String;)V
com.android.server.sip.SipSessionGroup$SipSessionImpl.process(Ljava/util/EventObject;)Z
com.android.server.sip.SipService.onConnectivityChanged(Landroid/net/NetworkInfo;)V
android.net.sip.ISipService$Stub$Proxy.open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;)V
android.net.sip.ISipService$Stub.open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;)V
com.android.server.VibratorService$2.run()V
com.android.server.VibratorService$VibrateThread.run()V
com.android.server.VibratorService$Vibration.binderDied()V
com.android.server.VibratorService.access$400(Lcom/android/server/VibratorService;)V
com.android.server.VibratorService.onInputDeviceAdded(I)V
com.android.server.VibratorService.onInputDeviceChanged(I)V
com.android.server.VibratorService.onInputDeviceRemoved(I)V
com.android.server.VibratorService.systemReady()V
android.os.IVibratorService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.os.IVibratorService.vibrate(JLandroid/os/IBinder;)V
com.android.server.WiredAccessoryObserver$BootCompletedReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.am.ActivityManagerService.updateConfiguration(Landroid/content/res/Configuration;)V
com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked()I
com.android.server.wm.WindowManagerService.prepareAppTransition(IZ)V
com.android.server.wm.WindowManagerService.makeWindowFreezingScreenIfNeededLocked(Lcom/android/server/wm/WindowState;)V
com.android.server.wm.WindowManagerService.requestTraversalLocked()V
com.android.server.wm.WindowManagerService.bulkSetParameters(II)V
android.view.WindowManagerPolicy$WindowManagerFuncs.reevaluateStatusBarVisibility()V
android.view.IWindowManager$Stub$Proxy.setNewConfiguration(Landroid/content/res/Configuration;)V
android.view.IWindowManager$Stub.setNewConfiguration(Landroid/content/res/Configuration;)V
com.android.server.am.ActivityManagerService.updateConfigurationLocked(Landroid/content/res/Configuration;Lcom/android/server/am/ActivityRecord;ZZ)Z
com.android.server.wm.WindowAnimator.testTokenMayBeDrawnLocked()V
com.android.server.wm.DragState.endDragLw()V
com.android.server.wm.Session.performDrag(Landroid/view/IWindow;Landroid/os/IBinder;FFFFLandroid/content/ClipData;)Z
com.android.server.wm.WindowManagerService.prepareDragSurface(Landroid/view/IWindow;Landroid/view/SurfaceSession;IIILandroid/view/Surface;)Landroid/os/IBinder;
android.view.IWindowManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IWindowManager.clearForcedDisplaySize()V
android.view.IWindowManager.setForcedDisplaySize(II)V
com.android.settings.CryptKeeper$ValidationTask.onPostExecute(Ljava/lang/Object;)V
com.android.soundrecorder.SoundRecorder$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.soundrecorder.SoundRecorder.onCreate(Landroid/os/Bundle;)V
com.android.soundrecorder.Recorder.stopRecording()V
android.media.IRingtonePlayer$Stub$Proxy.playAsync(Landroid/net/Uri;ZI)V
android.media.IRingtonePlayer$Stub.playAsync(Landroid/net/Uri;ZI)V
android.media.IRingtonePlayer$Stub$Proxy.stopAsync()V
android.media.IRingtonePlayer$Stub.stopAsync()V
android.content.ContentService.<init>(Landroid/content/Context;Z)V
android.content.SyncManager$6.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.content.SyncManager$8.onServiceChanged(Ljava/lang/Object;Z)V
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
com.android.internal.policy.impl.KeyguardViewBase.handleMediaKeyEvent(Landroid/view/KeyEvent;)V
com.android.internal.policy.impl.PhoneFallbackEventHandler.handleMediaKeyEvent(Landroid/view/KeyEvent;)V
com.android.internal.policy.impl.PhoneWindowManager.dispatchMediaKeyWithWakeLockToAudioService(Landroid/view/KeyEvent;)V
com.android.server.WiredAccessoryObserver.setDeviceState(IIILjava/lang/String;)V
android.webkit.HTML5VideoFullScreen.access$500(Landroid/webkit/HTML5VideoFullScreen;)V
com.android.music.MediaPlaybackService$ServiceStub.openFile(Ljava/lang/String;)V
com.android.music.MediaPlaybackService.removeTracksInternal(II)I
com.android.music.MediaPlaybackService.access$400(Lcom/android/music/MediaPlaybackService;)V
com.android.music.MediaPlaybackService.enqueue([JI)V
com.android.music.MediaPlaybackService.gotoNext(Z)V
com.android.music.MediaPlaybackService.open([JI)V
com.android.music.MediaPlaybackService.prev()V
com.android.music.MediaPlaybackService.reloadQueue()V
com.android.music.MediaPlaybackService.setQueuePosition(I)V
com.android.music.MediaPlaybackService.setShuffleMode(I)V
com.android.music.MediaPlaybackService$ServiceStub.setRepeatMode(I)V
android.webkit.HTML5VideoViewProxy.pauseAndDispatch()V
android.webkit.HTML5VideoViewProxy.setBaseLayer(I)V
android.webkit.HTML5VideoInline.onPrepared(Landroid/media/MediaPlayer;)V
com.android.gallery3d.app.MovieActivity$1.access$1200(Lcom/android/gallery3d/app/MoviePlayer;)V
com.android.gallery3d.app.MoviePlayer$AudioBecomingNoisyReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.gallery3d.app.ControllerOverlay$Listener.onPlayPause()V
com.android.gallery3d.app.MovieActivity$1.onPlayPause()V
com.android.gallery3d.app.MovieActivity$1.onResume()V
com.android.gallery3d.app.MovieActivity.onResume()V
com.android.mms.ui.SlideshowPresenter$5.run()V
com.android.mms.ui.SlideshowPresenter.presentSlide(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/SlideModel;)V
com.android.music.MediaPlaybackService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.music.MediaPlaybackService.onStartCommand(Landroid/content/Intent;II)I
com.android.music.MediaPlaybackService$ServiceStub.pause()V
android.filterfw.core.Filter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.CallbackFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.fieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.CallbackFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.FilterFunction.close()V
android.filterfw.core.FilterGraph.closeFilters(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.CallbackFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceRenderFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceTargetFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.CameraSource.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureSource.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureTarget.performClose(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.FilterFunction.execute(Landroid/filterfw/core/KeyValueMap;)Landroid/filterfw/core/Frame;
android.filterfw.core.SyncRunner.processFilterNode(Landroid/filterfw/core/Filter;)V
android.filterpacks.base.CallbackFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceRenderFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceTargetFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.CameraSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureTarget.performProcess(Landroid/filterfw/core/FilterContext;)V
android.media.RingtoneManager.getRingtone(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/Ringtone;
android.preference.VolumePreference$SeekBarVolumizer.initSeekBar(Landroid/widget/SeekBar;Landroid/net/Uri;)V
com.android.providers.media.RingtonePickerActivity.onClick(Landroid/content/DialogInterface;I)V
android.preference.VolumePreference$SeekBarVolumizer.stop()V
android.preference.VolumePreference.onActivityStop()V
android.preference.VolumePreference.onSampleStarting(Landroid/preference/VolumePreference$SeekBarVolumizer;)V
com.android.settings.RingerVolumePreference.onActivityStop()V
com.android.settings.RingerVolumePreference.onSampleStarting(Landroid/preference/VolumePreference$SeekBarVolumizer;)V
com.android.providers.media.RingtonePickerActivity.onPause()V
com.android.providers.media.RingtonePickerActivity.onStop()V
android.media.IRingtonePlayer$Stub$Proxy.stop(Landroid/os/IBinder;)V
android.media.IRingtonePlayer$Stub.stop(Landroid/os/IBinder;)V
android.widget.VideoView$6.surfaceCreated(Landroid/view/SurfaceHolder;)V
android.widget.VideoView.setVideoURI(Landroid/net/Uri;)V
com.android.gallery3d.app.MovieActivity$1.onPause()V
com.android.gallery3d.app.MovieActivity.onPause()V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.voicemail.VoicemailPlaybackPresenter$3.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.ex.variablespeed.MediaPlayerProxy.seekTo(I)V
com.android.ex.variablespeed.MediaPlayerProxy.start()V
com.android.mms.ui.AudioAttachmentView.access$000(Lcom/android/mms/ui/AudioAttachmentView;)V
com.android.mms.ui.SlideshowPresenter.presentRegionMedia(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/RegionMediaModel;Z)V
com.android.mms.ui.MmsThumbnailPresenter.presentFirstSlide(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/SlideModel;)V
com.android.soundrecorder.SoundRecorder.updateTimerView()V
android.webkit.WebViewClassic.drawContent(Landroid/graphics/Canvas;)V
android.webkit.WebViewClassic.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.music.MediaPlaybackService.closeExternalStorageFiles(Ljava/lang/String;)V
com.android.music.MediaPlaybackService.stop()V
android.preference.VolumePreference.onKey(Landroid/view/View;ILandroid/view/KeyEvent;)Z
android.media.IRingtonePlayer$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.IRingtonePlayer.play(Landroid/os/IBinder;Landroid/net/Uri;I)V
com.android.server.ServerThread$1.run()V
com.android.gallery3d.app.MovieActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.MovieActivity$1.access$1000(Lcom/android/gallery3d/app/MoviePlayer;)V
com.android.gallery3d.app.MoviePlayer$8.onClick(Landroid/content/DialogInterface;I)V
com.android.gallery3d.app.MoviePlayer$9.onClick(Landroid/content/DialogInterface;I)V
com.android.gallery3d.app.ControllerOverlay$Listener.onReplay()V
com.android.gallery3d.app.MovieActivity$1.onReplay()V
com.android.music.MediaPlaybackService$ServiceStub.play()V
com.android.bluetooth.opp.BluetoothOppService.insertShare(Landroid/database/Cursor;I)V
com.android.bluetooth.opp.BluetoothOppService.removeBatch(Lcom/android/bluetooth/opp/BluetoothOppBatch;)V
com.android.bluetooth.pbap.BluetoothPbapService.onCreate()V
com.android.bluetooth.pbap.BluetoothPbapService.access$1100(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.exchange.EasAccountService.run()V
com.android.exchange.EasAccountService.postAutodiscover(Lorg/apache/http/client/HttpClient;Lorg/apache/http/client/methods/HttpPost;Z)Lcom/android/exchange/EasResponse;
com.android.exchange.EasOutboxService.postAutodiscover(Lorg/apache/http/client/HttpClient;Lorg/apache/http/client/methods/HttpPost;Z)Lcom/android/exchange/EasResponse;
com.android.exchange.EasSyncService.tryAutodiscover(Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.exchange.adapter.EmailSyncAdapter.getAutomaticLookback()V
com.android.exchange.EasAccountService.sendPing([BI)Lcom/android/exchange/EasResponse;
com.android.exchange.EasOutboxService.sendMessage(Ljava/io/File;J)I
com.android.exchange.adapter.Search.searchMessages(Landroid/content/Context;JLcom/android/emailcommon/service/SearchParams;J)I
com.android.exchange.EasAccountService.sendHttpClientPost(Ljava/lang/String;[B)Lcom/android/exchange/EasResponse;
com.android.exchange.EasOutboxService.sendHttpClientPost(Ljava/lang/String;[B)Lcom/android/exchange/EasResponse;
com.android.exchange.EasSyncService.validateAccount(Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasSyncService.sendSettings()Z
com.android.exchange.EasSyncService.canProvision(Lcom/android/exchange/EasSyncService;)Lcom/android/exchange/adapter/ProvisionParser;
com.android.exchange.EasSyncService.searchGal(Landroid/content/Context;JLjava/lang/String;I)Lcom/android/exchange/provider/GalResult;
com.android.exchange.EasSyncService.acknowledgeProvisionImpl(Lcom/android/exchange/EasSyncService;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;
com.android.exchange.EasSyncService.messageMoveRequest(Lcom/android/exchange/MessageMoveRequest;)V
com.android.exchange.EasSyncService.sendMeetingResponse(Lcom/android/exchange/MeetingResponseRequest;)V
com.android.exchange.EasAccountService.sendHttpClientPost(Ljava/lang/String;Lorg/apache/http/HttpEntity;)Lcom/android/exchange/EasResponse;
com.android.exchange.EasOutboxService.sendHttpClientPost(Ljava/lang/String;Lorg/apache/http/HttpEntity;)Lcom/android/exchange/EasResponse;
com.android.exchange.EasOutboxService.sendPing([BI)Lcom/android/exchange/EasResponse;
com.android.exchange.EasAccountService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasOutboxService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasSyncService.run()V
com.android.exchange.EasAccountService.parsePingResult(Ljava/io/InputStream;Landroid/content/ContentResolver;Ljava/util/HashMap;)I
com.android.exchange.ExchangeService$2.startSync(JZ)V
com.android.exchange.ExchangeService.sendMessageRequest(Lcom/android/exchange/Request;)V
com.android.exchange.ExchangeService.serviceRequest(JJI)V
com.android.internal.policy.impl.AccountUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.widget.LockScreenWidgetCallback.userActivity(Landroid/view/View;)V
com.android.internal.widget.WaveView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.LockPatternView$OnPatternListener.onPatternCellAdded(Ljava/util/List;)V
com.android.internal.widget.LockPatternView$OnPatternListener.onPatternDetected(Ljava/util/List;)V
com.android.internal.policy.impl.KeyguardStatusViewManager.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.FaceUnlock.handleServiceConnected()V
com.android.internal.policy.impl.LockScreen$GlowPadViewMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$GlowPadViewMethods.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$SlidingTabMethods.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.policy.impl.LockScreen$SlidingTabMethods.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.PasswordUnlockScreen$2.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PasswordUnlockScreen$3.afterTextChanged(Landroid/text/Editable;)V
com.android.internal.policy.impl.PasswordUnlockScreen$4.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.PasswordUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.SimUnlockScreen$1$1.run()V
com.android.internal.policy.impl.SimUnlockScreen.checkPin()V
com.android.internal.policy.impl.SimUnlockScreen.onClick(Landroid/view/View;)V
com.android.internal.policy.impl.KeyguardViewManager.wakeWhenReadyTq(I)Z
com.android.internal.policy.impl.KeyguardViewMediator.access$1900(Lcom/android/internal/policy/impl/KeyguardViewMediator;Z)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDone(ZZ)V
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDoneDrawing()V
com.android.internal.policy.impl.KeyguardViewMediator.onUserSwitched(I)V
com.android.internal.policy.impl.KeyguardViewMediator.verifyUnlock(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.KeyguardViewMediator.onScreenTurnedOn(Lcom/android/internal/policy/impl/KeyguardViewManager$ShowListener;)V
android.view.WindowManagerPolicy.init(Landroid/content/Context;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.access$300(Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimArgs;)V
com.android.internal.policy.impl.KeyguardUpdateMonitor.reportSimUnlocked()V
com.android.internal.policy.impl.KeyguardStatusViewManager.<init>(Landroid/view/View;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Z)V
com.android.internal.policy.impl.KeyguardStatusViewManager.onResume()V
com.android.internal.policy.impl.KeyguardViewMediator.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/PhoneWindowManager;Landroid/os/LocalPowerManager;)V
com.android.internal.policy.impl.LockScreen.onResume()V
com.android.server.wm.WindowManagerService.systemReady()V
com.android.server.input.InputManagerService$Callbacks.notifyLidSwitchChanged(JZ)V
com.android.server.input.InputManagerService$Callbacks.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.input.InputManagerService$Callbacks.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.internal.telephony.cdma.CDMALTEPhone.dial(Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.phone.InCallScreen.syncWithPhoneState()Lcom/android/phone/InCallScreen$SyncWithPhoneStateStatus;
com.android.phone.InCallScreen.access$600(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.handleOtaCallEnd()V
com.android.internal.telephony.cdma.CDMAPhone.acceptCall()V
com.android.internal.telephony.gsm.GSMPhone.handleCallHoldIncallSupplementaryService(Ljava/lang/String;)Z
com.android.internal.telephony.gsm.GSMPhone.acceptCall()V
com.android.internal.telephony.SMSDispatcher.acknowledgeLastIncomingSms(ZILandroid/os/Message;)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.handleStatusReport(Landroid/os/AsyncResult;)V
com.android.internal.telephony.MmiCode.cancel()V
com.android.internal.telephony.gsm.GSMPhone.handlePinMmi(Ljava/lang/String;)Z
com.android.internal.telephony.IccCard.changeIccFdnPassword(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.IccCard.changeIccLockPassword(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.conference()V
com.android.internal.telephony.cdma.CdmaDataConnection.tearDownData(Ljava/lang/Object;)V
com.android.internal.telephony.DataConnection.access$1800(Lcom/android/internal/telephony/DataConnection;Ljava/lang/Object;)V
com.android.internal.telephony.gsm.GsmDataConnection.tearDownData(Ljava/lang/Object;)V
com.android.internal.telephony.IccSmsInterfaceManager.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.ISms$Stub.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.cdma.CDMALTEPhone.exitEmergencyCallbackMode()V
com.android.internal.telephony.cdma.CDMAPhone$1.run()V
com.android.internal.telephony.PhoneBase.exitEmergencyCallbackMode()V
com.android.internal.telephony.cdma.CDMALTEPhone.init(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMAPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.gsm.GSMPhone.explicitCallTransfer()V
com.android.internal.telephony.cdma.CDMAPhone.getAvailableNetworks(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.getSubscriptionInfoAndStartPollingThreads()V
com.android.internal.telephony.IccRecords.onReady()V
com.android.internal.telephony.CallTracker.handleRadioAvailable()V
com.android.internal.telephony.cdma.CdmaCallTracker.pollCallsWhenSafe()V
com.android.internal.telephony.gsm.GsmCallTracker.pollCallsWhenSafe()V
com.android.internal.telephony.cdma.CDMALTEPhone.getDataCallList(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDataStallAlarm(I)V
com.android.internal.telephony.IccCard.getIccCardStatusDone(Landroid/os/AsyncResult;)V
com.android.internal.telephony.IccCard.handleCdmaSubscriptionSource()V
com.android.internal.telephony.gsm.SIMRecords.handleFileUpdate(I)V
com.android.internal.telephony.gsm.SIMRecords.onReady()V
com.android.internal.telephony.gsm.SIMRecords.onRefresh(Z[I)V
com.android.internal.telephony.cdma.RuimRecords.fetchRuimRecords()V
com.android.internal.telephony.cdma.CDMALTEPhone.getPreferredNetworkType(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.getPreferredNetworkType(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.getPreferredNetworkType(Landroid/os/Message;)V
com.android.internal.telephony.Phone.getPreferredNetworkType(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.getPreferredNetworkType(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.getPreferredNetworkType(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.reRegisterNetwork(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.reRegisterNetwork(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.reconnectAfterFail(Lcom/android/internal/telephony/DataConnection$FailCause;Lcom/android/internal/telephony/ApnContext;I)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.reRegisterNetwork(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.getEnhancedVoicePrivacy(Landroid/os/Message;)V
com.android.internal.telephony.PhoneBase.getEnhancedVoicePrivacy(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.getSmscAddress(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.getSmscAddress(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.getSmscAddress(Landroid/os/Message;)V
com.android.internal.telephony.Phone.getSmscAddress(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.getSmscAddress(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.getSmscAddress(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaCallTracker.dispose()V
com.android.internal.telephony.cdma.CdmaConnection.hangup()V
com.android.internal.telephony.gsm.GsmCallTracker.dispose()V
com.android.internal.telephony.gsm.GsmConnection.hangup()V
com.android.internal.telephony.gsm.GSMPhone.handleCallWaitingIncallSupplementaryService(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CdmaCall.hangup()V
com.android.internal.telephony.gsm.GsmCall.hangup()V
com.android.internal.telephony.gsm.GSMPhone.handleCallDeflectionIncallSupplementaryService(Ljava/lang/String;)Z
com.android.internal.telephony.AdnRecordLoader.updateEF(Lcom/android/internal/telephony/AdnRecord;IIILjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaLteUiccFileHandler.getEFLinearRecordSize(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.RuimFileHandler.getEFLinearRecordSize(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.getAdnRecordsSize(I)[I
com.android.internal.telephony.gsm.SIMFileHandler.getEFLinearRecordSize(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.getAdnRecordsSize(I)[I
com.android.internal.telephony.cat.IconLoader.readId()V
com.android.internal.telephony.cdma.CdmaLteUiccFileHandler.loadEFImgLinearFixed(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.RuimFileHandler.loadEFImgLinearFixed(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.SIMFileHandler.loadEFImgLinearFixed(ILandroid/os/Message;)V
com.android.internal.telephony.cat.IconLoader.readClut()V
com.android.internal.telephony.cat.IconLoader.readIconData()V
com.android.internal.telephony.cdma.CdmaLteUiccFileHandler.loadEFImgTransparent(IIIILandroid/os/Message;)V
com.android.internal.telephony.gsm.SIMFileHandler.loadEFImgTransparent(IIIILandroid/os/Message;)V
com.android.internal.telephony.AdnRecordLoader.loadAllFromEF(IILandroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaLteUiccFileHandler.loadEFLinearFixedAll(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.RuimFileHandler.loadEFLinearFixedAll(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.gsm.SIMFileHandler.loadEFLinearFixedAll(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.SimSmsInterfaceManager.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.gsm.UsimPhoneBookManager.readEmailFileAndWait(I)V
com.android.internal.telephony.gsm.UsimPhoneBookManager.readIapFileAndWait(I)V
com.android.internal.telephony.gsm.UsimPhoneBookManager.readPbrFileAndWait()V
com.android.internal.telephony.ims.IsimUiccRecords.fetchIsimRecords(Lcom/android/internal/telephony/IccFileHandler;Landroid/os/Handler;)I
com.android.internal.telephony.AdnRecordLoader.loadFromEF(IIILandroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaLteUiccFileHandler.loadEFLinearFixed(IILandroid/os/Message;)V
com.android.internal.telephony.cdma.RuimFileHandler.loadEFLinearFixed(IILandroid/os/Message;)V
com.android.internal.telephony.gsm.SIMFileHandler.loadEFLinearFixed(IILandroid/os/Message;)V
com.android.internal.telephony.cdma.RuimFileHandler.loadEFTransparent(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.SIMFileHandler.loadEFTransparent(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.SIMRecords.getSpnFsm(ZLandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaLteUiccFileHandler.updateEFLinearFixed(II[BLjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.RuimFileHandler.updateEFLinearFixed(II[BLjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.SIMFileHandler.updateEFLinearFixed(II[BLjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.SIMRecords.setVoiceCallForwardingFlag(IZ)V
com.android.internal.telephony.gsm.SIMRecords.setVoiceMessageWaiting(II)V
com.android.internal.telephony.cdma.CdmaLteUiccFileHandler.updateEFTransparent(I[BLandroid/os/Message;)V
com.android.internal.telephony.cdma.RuimFileHandler.updateEFTransparent(I[BLandroid/os/Message;)V
com.android.internal.telephony.gsm.SIMFileHandler.updateEFTransparent(I[BLandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.invokeOemRilRequestRaw([BLandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.invokeOemRilRequestRaw([BLandroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.invokeOemRilRequestRaw([BLandroid/os/Message;)V
com.android.internal.telephony.Phone.invokeOemRilRequestRaw([BLandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.invokeOemRilRequestRaw([BLandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.invokeOemRilRequestRaw([BLandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.invokeOemRilRequestStrings([Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.invokeOemRilRequestStrings([Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.invokeOemRilRequestStrings([Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.Phone.invokeOemRilRequestStrings([Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.invokeOemRilRequestStrings([Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.invokeOemRilRequestStrings([Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.queryAvailableBandMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.queryAvailableBandMode(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.queryAvailableBandMode(Landroid/os/Message;)V
com.android.internal.telephony.Phone.queryAvailableBandMode(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.queryAvailableBandMode(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.queryAvailableBandMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.getCallWaiting(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.queryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.queryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.queryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.internal.telephony.Phone.queryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.queryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.queryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.queryTTYMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.queryTTYMode(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.queryTTYMode(Landroid/os/Message;)V
com.android.internal.telephony.Phone.queryTTYMode(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.queryTTYMode(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.queryTTYMode(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.rejectCall()V
com.android.internal.telephony.gsm.GSMPhone.rejectCall()V
com.android.internal.telephony.PhoneBase.requestIsimAuthentication(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)V
com.android.internal.telephony.PhoneBase.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaCallTracker.conference()V
com.android.internal.telephony.cdma.CDMAPhone.switchHoldingAndActive()V
com.android.internal.telephony.SMSDispatcher.sendSms(Lcom/android/internal/telephony/SMSDispatcher$SmsTracker;)V
com.android.internal.telephony.cdma.CDMALTEPhone.sendDtmf(C)V
com.android.internal.telephony.BaseCommands.setRadioState(Lcom/android/internal/telephony/CommandsInterface$RadioState;)V
com.android.internal.telephony.sip.SipCommandInterface.onRadioAvailable()V
com.android.internal.telephony.test.SimulatedCommands.onRadioAvailable()V
com.android.internal.telephony.cat.CatService.handleCommand(Lcom/android/internal/telephony/cat/CommandParams;Z)V
com.android.internal.telephony.cat.CatService.handleRilMsg(Lcom/android/internal/telephony/cat/RilMessage;)V
com.android.internal.telephony.gsm.GSMPhone.sendUssdResponse(Ljava/lang/String;)V
com.android.internal.telephony.cdma.CdmaConnection.separate()V
com.android.internal.telephony.gsm.GsmConnection.separate()V
com.android.internal.telephony.cdma.CDMALTEPhone.setBandMode(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.setBandMode(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.setBandMode(ILandroid/os/Message;)V
com.android.internal.telephony.Phone.setBandMode(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.setBandMode(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.setBandMode(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.setCdmaRoamingPreference(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.setCdmaRoamingPreference(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.setCdmaRoamingPreference(ILandroid/os/Message;)V
com.android.internal.telephony.Phone.setCdmaRoamingPreference(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.setCdmaRoamingPreference(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.setCdmaRoamingPreference(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.setCdmaSubscription(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.setCdmaSubscription(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.setCdmaSubscription(ILandroid/os/Message;)V
com.android.internal.telephony.Phone.setCdmaSubscription(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.setCdmaSubscription(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.setCdmaSubscription(ILandroid/os/Message;)V
com.android.internal.telephony.RIL.access$400(Lcom/android/internal/telephony/RIL;Landroid/os/Parcel;)V
com.android.internal.telephony.IccCard.setIccFdnEnabled(ZLjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.IccCard.setIccLockEnabled(ZLjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.SimSmsInterfaceManager.disableCellBroadcastRange(II)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.enableCellBroadcastRange(II)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.access$400(Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;[Lcom/android/internal/telephony/gsm/SmsBroadcastConfigInfo;)Z
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.disableLocationUpdates()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.disableLocationUpdates()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.disableLocationUpdates()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.disableSingleLocationUpdate()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.disableSingleLocationUpdate()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.disableSingleLocationUpdate()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.enableLocationUpdates()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.enableLocationUpdates()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.enableLocationUpdates()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.enableSingleLocationUpdate()V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.enableSingleLocationUpdate()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.enableSingleLocationUpdate()V
com.android.internal.telephony.cdma.CDMAPhone.setMute(Z)V
com.android.internal.telephony.gsm.GSMPhone.setMute(Z)V
com.android.internal.telephony.cdma.CDMALTEPhone.restoreSavedNetworkSelection(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.restoreSavedNetworkSelection(Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.restoreSavedNetworkSelection(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.restoreSavedNetworkSelection(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.restoreSavedNetworkSelection(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.selectNetworkManually(Lcom/android/internal/telephony/OperatorInfo;Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.setPreferredNetworkType(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.setPreferredNetworkType(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.setPreferredNetworkType(ILandroid/os/Message;)V
com.android.internal.telephony.Phone.setPreferredNetworkType(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.setPreferredNetworkType(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.setPreferredNetworkType(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipCommandInterface.setCurrentPreferredNetworkType()V
com.android.internal.telephony.test.SimulatedCommands.setCurrentPreferredNetworkType()V
com.android.internal.telephony.cdma.CDMALTEPhone.enableEnhancedVoicePrivacy(ZLandroid/os/Message;)V
com.android.internal.telephony.PhoneBase.enableEnhancedVoicePrivacy(ZLandroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onDisconnectDone(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.restartRadio()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.hangupAndPowerOff()V
com.android.internal.telephony.ServiceStateTracker.hangupAndPowerOff()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.setPowerStateToDesired()V
com.android.internal.telephony.ServiceStateTracker.setPowerStateToDesired()V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.handleSimRefresh(Lcom/android/internal/telephony/IccRefreshResponse;)V
com.android.internal.telephony.cdma.CDMALTEPhone.setSmscAddress(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.setSmscAddress(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.setSmscAddress(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.Phone.setSmscAddress(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.setSmscAddress(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.setSmscAddress(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.setTTYMode(ILandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMAPhone.setTTYMode(ILandroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.setTTYMode(ILandroid/os/Message;)V
com.android.internal.telephony.Phone.setTTYMode(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.setTTYMode(ILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.setTTYMode(ILandroid/os/Message;)V
com.android.internal.telephony.DataConnection.onConnect(Lcom/android/internal/telephony/DataConnection$ConnectionParams;)V
com.android.internal.telephony.cdma.CDMALTEPhone.startDtmf(C)V
com.android.internal.telephony.cdma.CDMALTEPhone.stopDtmf()V
com.android.internal.telephony.IccCard.supplyPin2(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.IccCard.supplyPin(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.IccCard.supplyPuk2(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaMmiCode.processCode()V
com.android.internal.telephony.IccCard.supplyPuk(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.phone.IccNetworkDepersonalizationPanel$3.onClick(Landroid/view/View;)V
com.android.internal.telephony.gsm.GSMPhone.switchHoldingAndActive()V
com.android.internal.telephony.IccSmsInterfaceManager.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.ISms$Stub.copyMessageToIccEf(I[B[B)Z
com.android.mms.transaction.MessageStatusService.onHandleIntent(Landroid/content/Intent;)V
com.android.mms.transaction.MessagingNotification$1.run()V
com.android.mms.transaction.SmsReceiverService.handleBootCompleted()V
com.android.mms.transaction.SmsReceiverService.handleSmsReceived(Landroid/content/Intent;I)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onDestroy()V
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onBackPressed()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.OtaUtils.otaShowProgramFailure(I)V
com.android.phone.OtaUtils.otaShowSuccessFailure()V
com.android.phone.OtaUtils.onOtaProvisionStatusChanged(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowProperScreen()V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.AccelerometerListener.access$000(Lcom/android/phone/AccelerometerListener;DDD)V
com.android.phone.CallNotifier.onRingbackTone(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.endInCallScreenSession(Z)V
com.android.phone.InCallScreen.internalResolveIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.resetInCallScreenMode()V
com.android.phone.InCallScreen.updateManageConferencePanelIfNecessary()V
com.android.phone.CallNotifier.ignoreAllIncomingCalls(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.doReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.initForNewRadioTechnology()V
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.internal.util.State.exit()V
com.android.server.LocationManagerService.access$800(Lcom/android/server/LocationManagerService;)V
com.android.server.LocationManagerService._loadProvidersLocked()V
com.android.server.LocationManagerService.access$2000(Lcom/android/server/LocationManagerService;Landroid/location/Location;Z)V
com.android.internal.policy.impl.GlobalActions$2.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$2.onPress()V
com.android.server.sip.SipSessionGroup$SipSessionImpl.processCommand(Ljava/util/EventObject;)V
com.android.server.sip.SipSessionGroup.process(Ljava/util/EventObject;)V
com.android.server.sip.SipService.access$1700(Lcom/android/server/sip/SipService;Landroid/net/NetworkInfo;)V
android.net.sip.ISipService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.sip.ISipService.open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;)V
com.android.server.VibratorService$1.onChange(Z)V
com.android.server.VibratorService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.os.SystemVibrator.vibrate(J)V
android.app.ActivityManagerNative.updateConfiguration(Landroid/content/res/Configuration;)V
android.view.IWindowManager$Stub$Proxy.prepareAppTransition(IZ)V
android.view.IWindowManager$Stub.prepareAppTransition(IZ)V
com.android.server.am.ActivityStack.moveTaskToBackLocked(ILcom/android/server/am/ActivityRecord;)Z
com.android.server.am.ActivityStack.moveTaskToFrontLocked(Lcom/android/server/am/TaskRecord;Lcom/android/server/am/ActivityRecord;Landroid/os/Bundle;)V
com.android.server.am.ActivityStack.updateTransitLocked(ILandroid/os/Bundle;)V
com.android.server.wm.WindowManagerService.updateResizingWindows(Lcom/android/server/wm/WindowState;)V
com.android.server.wm.WindowStateAnimator.createSurfaceLocked()Landroid/view/Surface;
com.android.server.wm.WindowAnimator.animate()V
com.android.internal.policy.impl.PhoneWindowManager$HideNavInputEventReceiver$1.run()V
com.android.internal.policy.impl.PhoneWindowManager$HideNavInputEventReceiver.onInputEvent(Landroid/view/InputEvent;)V
android.view.IWindowManager.setNewConfiguration(Landroid/content/res/Configuration;)V
com.android.server.am.ActivityManagerService.retrieveSettings()V
com.android.server.wm.WindowAnimator.performAnimationsLocked()V
com.android.server.wm.WindowManagerService$DragInputEventReceiver.onInputEvent(Landroid/view/InputEvent;)V
com.android.server.wm.DragState.notifyDropLw(FF)Z
android.view.IWindowSession$Stub$Proxy.performDrag(Landroid/view/IWindow;Landroid/os/IBinder;FFFFLandroid/content/ClipData;)Z
android.view.IWindowSession$Stub.performDrag(Landroid/view/IWindow;Landroid/os/IBinder;FFFFLandroid/content/ClipData;)Z
com.android.server.wm.Session.prepareDrag(Landroid/view/IWindow;IIILandroid/view/Surface;)Landroid/os/IBinder;
com.android.server.wm.WindowManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.commands.am.Am.runDisplaySize()V
android.media.IRingtonePlayer.playAsync(Landroid/net/Uri;ZI)V
android.media.IRingtonePlayer.stopAsync()V
android.content.ContentService.main(Landroid/content/Context;Z)Landroid/content/IContentService;
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
com.android.internal.policy.impl.KeyguardViewBase.interceptMediaKey(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.LockPatternKeyguardView.handleMediaKeyEvent(Landroid/view/KeyEvent;)V
com.android.internal.policy.impl.PhoneFallbackEventHandler.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.PhoneFallbackEventHandler.onKeyUp(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.PhoneWindowManager.dispatchMediaKeyRepeatWithWakeLock(Landroid/view/KeyEvent;)V
com.android.internal.policy.impl.PhoneWindowManager.dispatchMediaKeyWithWakeLock(Landroid/view/KeyEvent;)V
com.android.server.WiredAccessoryObserver.setDevicesState(IILjava/lang/String;)V
android.webkit.HTML5VideoFullScreen$1.surfaceCreated(Landroid/view/SurfaceHolder;)V
com.android.music.IMediaPlaybackService$Stub$Proxy.openFile(Ljava/lang/String;)V
com.android.music.IMediaPlaybackService$Stub.openFile(Ljava/lang/String;)V
com.android.music.MediaPlaybackService.removeTrack(J)I
com.android.music.MediaPlaybackService.removeTracks(II)I
com.android.music.MediaPlaybackService$ServiceStub.enqueue([JI)V
com.android.music.MediaPlaybackService$ServiceStub.next()V
com.android.music.MediaPlaybackService$ServiceStub.open([JI)V
com.android.music.MediaPlaybackService$ServiceStub.prev()V
com.android.music.MediaPlaybackService.access$2300(Lcom/android/music/MediaPlaybackService;)V
com.android.music.MediaPlaybackService$ServiceStub.setQueuePosition(I)V
com.android.music.MediaPlaybackService$ServiceStub.setShuffleMode(I)V
com.android.music.IMediaPlaybackService$Stub$Proxy.setRepeatMode(I)V
com.android.music.IMediaPlaybackService$Stub.setRepeatMode(I)V
android.webkit.WebViewClassic.onPause()V
android.webkit.WebViewClassic.setBaseLayer(IZZ)V
com.android.gallery3d.app.MovieControllerOverlay.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.gallery3d.app.MovieControllerOverlay.onClick(Landroid/view/View;)V
com.android.mms.ui.SlideshowPresenter$2.run()V
com.android.mms.ui.SlideshowPresenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.music.IMediaPlaybackService$Stub$Proxy.pause()V
com.android.music.IMediaPlaybackService$Stub.pause()V
android.filterfw.core.FieldPort.transfer(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.CallbackFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceRenderFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceTargetFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.CameraSource.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureSource.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureTarget.notifyFieldPortValueUpdated(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.CallbackFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceRenderFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceTargetFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.CameraSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureTarget.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.SyncRunner.close()V
android.filterfw.core.FilterFunction.tearDown()V
android.filterfw.core.FilterGraph.tearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.CallbackFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceRenderFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceTargetFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.CameraSource.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureSource.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureTarget.performTearDown(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.FilterFunction.executeWithArgList([Ljava/lang/Object;)Landroid/filterfw/core/Frame;
android.filterfw.core.SyncRunner.performStep()Z
com.android.deskclock.AlarmPreference$1.doInBackground([Landroid/net/Uri;)Ljava/lang/String;
android.preference.VolumePreference$SeekBarVolumizer.<init>(Landroid/preference/VolumePreference;Landroid/content/Context;Landroid/widget/SeekBar;ILandroid/net/Uri;)V
android.preference.VolumePreference.cleanup()V
com.android.settings.RingerVolumePreference.cleanup()V
com.android.internal.app.AlertActivity.onPause()V
com.android.internal.app.AlertActivity.onStop()V
android.media.IRingtonePlayer.stop(Landroid/os/IBinder;)V
android.widget.VideoView.setVideoPath(Ljava/lang/String;)V
com.android.mms.ui.SlideView.setVideo(Ljava/lang/String;Landroid/net/Uri;)V
com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy.seekTo(I)V
com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy.start()V
com.android.mms.ui.AudioAttachmentView$2.onError(Landroid/media/MediaPlayer;II)Z
com.android.mms.ui.SlideshowPresenter$4.run()V
com.android.mms.ui.MmsThumbnailPresenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.soundrecorder.SoundRecorder.access$000(Lcom/android/soundrecorder/SoundRecorder;)V
com.android.soundrecorder.SoundRecorder.updateUi()V
android.webkit.WebViewClassic.onDraw(Landroid/graphics/Canvas;)V
android.webkit.PluginFullScreenHolder$CustomFrameLayout.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.music.MediaPlaybackService$5.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.music.MediaPlaybackService$ServiceStub.stop()V
com.android.systemui.media.RingtonePlayer$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.music.IMediaPlaybackService$Stub$Proxy.play()V
com.android.music.IMediaPlaybackService$Stub.play()V
com.android.bluetooth.opp.BluetoothOppService.access$1800(Lcom/android/bluetooth/opp/BluetoothOppService;Landroid/database/Cursor;I)V
com.android.bluetooth.opp.BluetoothOppService.deleteShare(I)V
com.android.bluetooth.opp.BluetoothOppService.updateShare(Landroid/database/Cursor;IZ)V
com.android.exchange.EasAccountService.tryAutodiscover(Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.exchange.EasOutboxService.tryAutodiscover(Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.exchange.ExchangeService$2.autoDiscover(Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.exchange.adapter.EmailSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.EasOutboxService.run()V
com.android.exchange.ExchangeService$2.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.exchange.AbstractSyncService.validateAccount(Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasAccountService.validateAccount(Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasOutboxService.validateAccount(Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasAccountService.sendSettings()Z
com.android.exchange.EasOutboxService.sendSettings()Z
com.android.exchange.EasAccountService.canProvision(Lcom/android/exchange/EasSyncService;)Lcom/android/exchange/adapter/ProvisionParser;
com.android.exchange.EasOutboxService.canProvision(Lcom/android/exchange/EasSyncService;)Lcom/android/exchange/adapter/ProvisionParser;
com.android.exchange.EasSyncService.tryProvision(Lcom/android/exchange/EasSyncService;)Z
com.android.exchange.EasAccountService.searchGal(Landroid/content/Context;JLjava/lang/String;I)Lcom/android/exchange/provider/GalResult;
com.android.exchange.EasOutboxService.searchGal(Landroid/content/Context;JLjava/lang/String;I)Lcom/android/exchange/provider/GalResult;
com.android.exchange.EasAccountService.acknowledgeProvisionImpl(Lcom/android/exchange/EasSyncService;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;
com.android.exchange.EasOutboxService.acknowledgeProvisionImpl(Lcom/android/exchange/EasSyncService;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;
com.android.exchange.EasSyncService.acknowledgeProvision(Lcom/android/exchange/EasSyncService;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.exchange.EasSyncService.acknowledgeRemoteWipe(Lcom/android/exchange/EasSyncService;Ljava/lang/String;)V
com.android.exchange.EasAccountService.messageMoveRequest(Lcom/android/exchange/MessageMoveRequest;)V
com.android.exchange.EasOutboxService.messageMoveRequest(Lcom/android/exchange/MessageMoveRequest;)V
com.android.exchange.EasAccountService.sendMeetingResponse(Lcom/android/exchange/MeetingResponseRequest;)V
com.android.exchange.EasOutboxService.sendMeetingResponse(Lcom/android/exchange/MeetingResponseRequest;)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.startSync(JZ)V
com.android.emailcommon.service.IEmailService$Stub.startSync(JZ)V
com.android.exchange.ExchangeService$2.loadAttachment(JZ)V
com.android.exchange.ExchangeService$2.sendMeetingResponse(JI)V
com.android.exchange.ExchangeService.serviceRequest(JI)V
com.android.internal.widget.TransportControlView.onClick(Landroid/view/View;)V
com.android.internal.widget.WaveView.setGrabbedState(I)V
com.android.internal.widget.LockPatternView.notifyCellAdded()V
com.android.internal.widget.LockPatternView.notifyPatternDetected()V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.SlidingTab$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.SlidingTab$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.internal.policy.impl.SimUnlockScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.internal.policy.impl.KeyguardViewMediator.keyguardDone(Z)V
com.android.internal.policy.impl.PhoneWindowManager$15.run()V
com.android.internal.policy.impl.PhoneWindowManager$9.run()V
com.android.internal.policy.impl.KeyguardViewCallback.keyguardDoneDrawing()V
com.android.internal.policy.impl.KeyguardViewMediator.access$300(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.policy.impl.PhoneWindowManager.exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.PhoneWindowManager.launchHomeFromHotKey()V
com.android.internal.policy.impl.PhoneWindowManager.screenTurningOn(Landroid/view/WindowManagerPolicy$ScreenOnListener;)V
com.android.server.wm.WindowManagerService$PolicyThread.run()V
com.android.internal.policy.impl.SimPukUnlockScreen$1$1.run()V
com.android.internal.policy.impl.AccountUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.LockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;)V
com.android.internal.policy.impl.PasswordUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;)V
com.android.internal.policy.impl.PatternUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;I)V
com.android.internal.policy.impl.SimPukUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.SimUnlockScreen.<init>(Landroid/content/Context;Landroid/content/res/Configuration;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/policy/impl/KeyguardScreenCallback;Lcom/android/internal/widget/LockPatternUtils;)V
com.android.internal.policy.impl.AccountUnlockScreen.onResume()V
com.android.internal.policy.impl.PasswordUnlockScreen.onResume()V
com.android.internal.policy.impl.PatternUnlockScreen.onResume()V
com.android.internal.policy.impl.SimPukUnlockScreen.onResume()V
com.android.internal.policy.impl.SimUnlockScreen.onResume()V
com.android.internal.policy.impl.KeyguardScreen.onResume()V
com.android.server.input.InputManagerService.notifyLidSwitchChanged(JZ)V
com.android.server.input.InputManagerService.interceptMotionBeforeQueueingWhenScreenOff(I)I
com.android.server.input.InputManagerService.dispatchUnhandledKey(Lcom/android/server/input/InputWindowHandle;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
com.android.phone.InCallScreen.showPausePromptDialog(Lcom/android/internal/telephony/Connection;Ljava/lang/String;)V
com.android.phone.InCallScreen.requestUpdateScreen()V
com.android.phone.InCallScreen.requestCloseOtaFailureNotice(J)V
com.android.phone.InCallScreen.requestCloseSpcErrorNotice(J)V
com.android.phone.InCallScreen.requestRemoveProviderInfoWithDelay()V
com.android.phone.PhoneApp.dismissCallScreen()V
com.android.internal.telephony.cdma.CDMALTEPhone.acceptCall()V
com.android.internal.telephony.gsm.GSMPhone.handleInCallMmiCommands(Ljava/lang/String;)Z
com.android.internal.telephony.SMSDispatcher$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneUtils$2.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.PhoneUtils.cancelMmiCode(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.ChangeIccPinScreen$2.onClick(Landroid/view/View;)V
com.android.phone.FdnSetting.updatePINChangeState(Z)V
com.android.settings.IccLockSettings.tryChangePin()V
com.android.internal.telephony.gsm.GSMPhone.handleMultipartyIncallSupplementaryService(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CdmaDataConnection.access$1800(Lcom/android/internal/telephony/DataConnection;Ljava/lang/Object;)V
com.android.internal.telephony.DataConnection$DcActiveState.processMessage(Landroid/os/Message;)Z
com.android.internal.telephony.gsm.GsmDataConnection.access$1800(Lcom/android/internal/telephony/DataConnection;Ljava/lang/Object;)V
com.android.internal.telephony.ISms$Stub$Proxy.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.ISms.updateMessageOnIccEf(II[B)Z
com.android.internal.telephony.ISms$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.gsm.GSMPhone.exitEmergencyCallbackMode()V
com.android.internal.telephony.Phone.exitEmergencyCallbackMode()V
com.android.internal.telephony.sip.SipPhoneBase.exitEmergencyCallbackMode()V
com.android.internal.telephony.sip.SipPhone.exitEmergencyCallbackMode()V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;Z)V
com.android.internal.telephony.cdma.CDMALTEPhone.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;)V
com.android.internal.telephony.PhoneFactory.getCdmaPhone()Lcom/android/internal/telephony/Phone;
com.android.internal.telephony.PhoneFactory.makeDefaultPhone(Landroid/content/Context;)V
com.android.internal.telephony.gsm.GSMPhone.handleEctIncallSupplementaryService(Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CdmaCallTracker.handleRadioAvailable()V
com.android.internal.telephony.gsm.GsmCallTracker.handleRadioAvailable()V
com.android.internal.telephony.cdma.CdmaCallTracker.handleRadioNotAvailable()V
com.android.internal.telephony.gsm.GsmCallTracker.handleRadioNotAvailable()V
com.android.internal.telephony.DataConnectionTracker.onDataStallAlarm(I)V
com.android.internal.telephony.IccCard.access$200(Lcom/android/internal/telephony/IccCard;Landroid/os/AsyncResult;)V
com.android.internal.telephony.IccCard.access$100(Lcom/android/internal/telephony/IccCard;)V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.handleFileUpdate(I)V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.onReady()V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.onRefresh(Z[I)V
com.android.internal.telephony.IccRecords.onRefresh(Z[I)V
com.android.internal.telephony.cdma.RuimRecords.onRefresh(Z[I)V
com.android.internal.telephony.PhoneProxy.getPreferredNetworkType(Landroid/os/Message;)V
com.android.phone.MobileNetworkSettings$MyHandler.handleSetPreferredNetworkTypeResponse(Landroid/os/Message;)V
com.android.phone.MobileNetworkSettings.onResume()V
com.android.phone.Use2GOnlyCheckBoxPreference$MyHandler.handleSetPreferredNetworkTypeResponse(Landroid/os/Message;)V
com.android.phone.Use2GOnlyCheckBoxPreference.<init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V
com.android.settings.RadioInfo.onCreate(Landroid/os/Bundle;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.startDelayedRetry(Lcom/android/internal/telephony/DataConnection$FailCause;Lcom/android/internal/telephony/ApnContext;I)V
com.android.internal.telephony.gsm.GSMPhone.getEnhancedVoicePrivacy(Landroid/os/Message;)V
com.android.internal.telephony.Phone.getEnhancedVoicePrivacy(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.getEnhancedVoicePrivacy(Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.getEnhancedVoicePrivacy(Landroid/os/Message;)V
com.android.internal.telephony.PhoneProxy.getSmscAddress(Landroid/os/Message;)V
com.android.settings.RadioInfo.refreshSmsc()V
com.android.internal.telephony.cdma.CDMAPhone.dispose()V
com.android.internal.telephony.Connection.hangup()V
com.android.internal.telephony.gsm.GSMPhone.dispose()V
com.android.internal.telephony.Call.hangup()V
com.android.internal.telephony.AdnRecordCache.updateAdnByIndex(ILcom/android/internal/telephony/AdnRecord;ILjava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.AdnRecordCache.updateAdnBySearch(ILcom/android/internal/telephony/AdnRecord;Lcom/android/internal/telephony/AdnRecord;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.SIMRecords.setMsisdnNumber(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.SIMRecords.setVoiceMailNumber(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.IccRecords.setMsisdnNumber(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.IccPhoneBookInterfaceManager.getAdnRecordsSize(I)[I
com.android.internal.telephony.IIccPhoneBook$Stub.getAdnRecordsSize(I)[I
com.android.internal.telephony.cat.IconLoader.startLoadingIcon(I)V
com.android.internal.telephony.AdnRecordCache.requestLoadAllAdnLike(IILandroid/os/Message;)V
com.android.internal.telephony.IccSmsInterfaceManager.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.ISms$Stub.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.gsm.UsimPhoneBookManager.loadEfFilesFromUsim()Ljava/util/ArrayList;
com.android.internal.telephony.cdma.CdmaLteUiccRecords.getSpnFsm(ZLandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.setVoiceCallForwardingFlag(IZ)V
com.android.internal.telephony.IccRecords.setVoiceCallForwardingFlag(IZ)V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.setVoiceMessageWaiting(II)V
com.android.internal.telephony.IccRecords.setVoiceMessageWaiting(II)V
com.android.internal.telephony.PhoneProxy.invokeOemRilRequestRaw([BLandroid/os/Message;)V
com.android.internal.telephony.PhoneProxy.invokeOemRilRequestStrings([Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.PhoneProxy.queryAvailableBandMode(Landroid/os/Message;)V
com.android.settings.BandMode.loadBandList()V
com.android.internal.telephony.PhoneProxy.queryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.phone.CdmaSystemSelectListPreference$MyHandler.handleSetCdmaRoamingPreference(Landroid/os/Message;)V
com.android.phone.CdmaSystemSelectListPreference.<init>(Landroid/content/Context;Landroid/util/AttributeSet;)V
com.android.internal.telephony.PhoneProxy.queryTTYMode(Landroid/os/Message;)V
com.android.phone.PhoneApp.handleSetTTYModeResponse(Landroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.rejectCall()V
com.android.internal.telephony.cdma.CDMAPhone.requestIsimAuthentication(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.requestIsimAuthentication(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.Phone.requestIsimAuthentication(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.requestIsimAuthentication(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.requestIsimAuthentication(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)V
com.android.internal.telephony.Phone.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)V
com.android.internal.telephony.cdma.CDMALTEPhone.switchHoldingAndActive()V
com.android.internal.telephony.SMSDispatcher.sendRawPdu([B[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;Ljava/lang/String;)V
com.android.internal.telephony.RIL.setRadioState(Lcom/android/internal/telephony/CommandsInterface$RadioState;)V
com.android.internal.telephony.sip.SipCommandInterface.setRadioState(Lcom/android/internal/telephony/CommandsInterface$RadioState;)V
com.android.internal.telephony.test.SimulatedCommands.setRadioState(Lcom/android/internal/telephony/CommandsInterface$RadioState;)V
com.android.internal.telephony.Connection.separate()V
com.android.internal.telephony.PhoneProxy.setBandMode(ILandroid/os/Message;)V
com.android.settings.BandMode$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.internal.telephony.PhoneProxy.setCdmaRoamingPreference(ILandroid/os/Message;)V
com.android.phone.CdmaSystemSelectListPreference$MyHandler.resetCdmaRoamingModeToDefault()V
com.android.phone.CdmaSystemSelectListPreference.onDialogClosed(Z)V
com.android.internal.telephony.PhoneProxy.setCdmaSubscription(ILandroid/os/Message;)V
com.android.phone.CdmaSubscriptionListPreference.onDialogClosed(Z)V
com.android.internal.telephony.RIL$RILReceiver.run()V
com.android.phone.EnableFdnScreen.enableFdn()V
com.android.phone.FdnSetting.toggleFDNEnable(Z)V
com.android.phone.EnableIccPinScreen.enableIccPin()V
com.android.settings.IccLockSettings.tryChangeIccLockState()V
com.android.internal.telephony.gsm.SimSmsInterfaceManager.disableCellBroadcast(I)Z
com.android.internal.telephony.IccSmsInterfaceManager.disableCellBroadcastRange(II)Z
com.android.internal.telephony.ISms$Stub.disableCellBroadcastRange(II)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.enableCellBroadcast(I)Z
com.android.internal.telephony.IccSmsInterfaceManager.enableCellBroadcastRange(II)Z
com.android.internal.telephony.ISms$Stub.enableCellBroadcastRange(II)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager$CellBroadcastRangeManager.finishUpdate()Z
com.android.internal.telephony.cdma.CDMAPhone.disableLocationUpdates()V
com.android.internal.telephony.gsm.GSMPhone.disableLocationUpdates()V
com.android.internal.telephony.cdma.CDMAPhone.enableLocationUpdates()V
com.android.internal.telephony.gsm.GSMPhone.enableLocationUpdates()V
com.android.internal.telephony.cdma.CDMAPhone.updateServiceLocation()V
com.android.internal.telephony.gsm.GSMPhone.updateServiceLocation()V
com.android.internal.telephony.cdma.CDMALTEPhone.setMute(Z)V
com.android.internal.telephony.PhoneProxy.setPreferredNetworkType(ILandroid/os/Message;)V
com.android.phone.MobileNetworkSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.phone.MobileNetworkSettings$MyHandler.resetNetworkModeToDefault()V
com.android.phone.Use2GOnlyCheckBoxPreference.onClick()V
com.android.settings.RadioInfo$22.onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.internal.telephony.gsm.GSMPhone.enableEnhancedVoicePrivacy(ZLandroid/os/Message;)V
com.android.internal.telephony.Phone.enableEnhancedVoicePrivacy(ZLandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhoneBase.enableEnhancedVoicePrivacy(ZLandroid/os/Message;)V
com.android.internal.telephony.sip.SipPhone.enableEnhancedVoicePrivacy(ZLandroid/os/Message;)V
com.android.internal.telephony.DataConnectionTracker.onDisconnectDone(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker$1.run()V
com.android.internal.telephony.DataConnectionTracker.restartRadio()V
com.android.internal.telephony.ServiceStateTracker.processPendingRadioPowerOffAfterDataOff()Z
com.android.internal.telephony.ServiceStateTracker.powerOffRadioSafely(Lcom/android/internal/telephony/DataConnectionTracker;)V
com.android.internal.telephony.ServiceStateTracker.setRadioPower(Z)V
com.android.internal.telephony.PhoneProxy.setSmscAddress(Ljava/lang/String;Landroid/os/Message;)V
com.android.settings.RadioInfo$20.onClick(Landroid/view/View;)V
com.android.internal.telephony.PhoneProxy.setTTYMode(ILandroid/os/Message;)V
com.android.internal.telephony.DataConnection$DcInactiveState.processMessage(Landroid/os/Message;)Z
com.android.phone.PhoneInterfaceManager$UnlockSim.unlockSim(Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CDMAPhone.handlePinMmi(Ljava/lang/String;)Z
com.android.internal.telephony.ISms$Stub$Proxy.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.copyMessageToIccEf(I[B[B)Z
com.android.internal.telephony.ISms.copyMessageToIccEf(I[B[B)Z
com.android.mms.transaction.SmsReceiverService.access$200(Lcom/android/mms/transaction/SmsReceiverService;)V
com.android.mms.transaction.SmsReceiverService.access$100(Lcom/android/mms/transaction/SmsReceiverService;Landroid/content/Intent;I)V
com.android.mms.transaction.Observable.notifyObservers()V
com.android.phone.PhoneApp.handleOtaspEvent(Landroid/os/Message;)V
com.android.phone.InCallScreen.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.phone.AccelerometerListener$1.onSensorChanged(Landroid/hardware/SensorEvent;)V
com.android.phone.InCallScreen.bailOutAfterErrorDialog()V
com.android.phone.InCallScreen.endInCallScreenSession()V
com.android.phone.InCallScreen.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.onNewIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.updateAfterRadioTechnologyChange()V
com.android.phone.PhoneApp.clearInCallScreenMode()V
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.access$1100(Lcom/android/phone/PhoneApp;)V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.exit()V
android.bluetooth.BluetoothProfileState$PendingCommandState.exit()V
android.bluetooth.BluetoothProfileState$StableState.exit()V
android.net.DhcpStateMachine$DefaultState.exit()V
android.net.DhcpStateMachine$RunningState.exit()V
android.net.DhcpStateMachine$StoppedState.exit()V
android.net.DhcpStateMachine$WaitBeforeStartState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState.exit()V
android.net.wifi.SupplicantStateTracker$CompletedState.exit()V
android.net.wifi.SupplicantStateTracker$DefaultState.exit()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.exit()V
android.net.wifi.SupplicantStateTracker$DormantState.exit()V
android.net.wifi.SupplicantStateTracker$HandshakeState.exit()V
android.net.wifi.SupplicantStateTracker$InactiveState.exit()V
android.net.wifi.SupplicantStateTracker$ScanState.exit()V
android.net.wifi.SupplicantStateTracker$UninitializedState.exit()V
android.net.wifi.WifiApConfigStore$ActiveState.exit()V
android.net.wifi.WifiApConfigStore$DefaultState.exit()V
android.net.wifi.WifiApConfigStore$InactiveState.exit()V
android.net.wifi.WifiStateMachine$ConnectModeState.exit()V
android.net.wifi.WifiStateMachine$DefaultState.exit()V
android.net.wifi.WifiStateMachine$DisconnectingState.exit()V
android.net.wifi.WifiStateMachine$DriverFailedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadingState.exit()V
android.net.wifi.WifiStateMachine$DriverStartingState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppedState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppingState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadedState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadingState.exit()V
android.net.wifi.WifiStateMachine$InitialState.exit()V
android.net.wifi.WifiStateMachine$ObtainingIpState.exit()V
android.net.wifi.WifiStateMachine$ScanModeState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartedState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartingState.exit()V
android.net.wifi.WifiStateMachine$SoftApStoppingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStartingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStoppingState.exit()V
android.net.wifi.WifiStateMachine$TetheredState.exit()V
android.net.wifi.WifiStateMachine$TetheringState.exit()V
android.net.wifi.WifiStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$ConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$DefaultState.exit()V
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState.exit()V
android.net.wifi.WifiWatchdogStateMachine$RssiMonitoringState.exit()V
android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WalledGardenCheckState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState.exit()V
android.server.BluetoothAdapterStateMachine$BluetoothOn.exit()V
android.server.BluetoothAdapterStateMachine$HotOff.exit()V
android.server.BluetoothAdapterStateMachine$PerProcessState.exit()V
android.server.BluetoothAdapterStateMachine$PowerOff.exit()V
android.server.BluetoothAdapterStateMachine$Switching.exit()V
android.server.BluetoothAdapterStateMachine$WarmUp.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.exit()V
com.android.internal.telephony.DataConnection$DcActivatingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.exit()V
com.android.internal.util.IState.exit()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.exit()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.exit()V
com.android.internal.util.StateMachine$SmHandler.invokeExitMethods(Lcom/android/internal/util/StateMachine$SmHandler$StateInfo;)V
com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.exit()V
com.android.server.NsdService$NsdStateMachine$DefaultState.exit()V
com.android.server.NsdService$NsdStateMachine$DisabledState.exit()V
com.android.server.LocationManagerService$SettingsObserver.update(Ljava/util/Observable;Ljava/lang/Object;)V
com.android.server.LocationManagerService.loadProvidersLocked()V
com.android.internal.policy.impl.GlobalActions$SinglePressAction.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$SinglePressAction.onPress()V
com.android.server.sip.SipSessionGroup$SipSessionCallReceiverImpl.processCommand(Ljava/util/EventObject;)V
com.android.server.sip.SipSessionGroup$SipSessionImpl.access$1500(Lcom/android/server/sip/SipSessionGroup$SipSessionImpl;Ljava/util/EventObject;)V
com.android.server.sip.SipSessionGroup.processDialogTerminated(Ljavax/sip/DialogTerminatedEvent;)V
com.android.server.sip.SipSessionGroup.processIOException(Ljavax/sip/IOExceptionEvent;)V
com.android.server.sip.SipSessionGroup.processResponse(Ljavax/sip/ResponseEvent;)V
com.android.server.sip.SipSessionGroup.processTimeout(Ljavax/sip/TimeoutEvent;)V
com.android.server.sip.SipSessionGroup.processTransactionTerminated(Ljavax/sip/TransactionTerminatedEvent;)V
com.android.server.sip.SipService$ConnectivityReceiver$1.run()V
com.android.server.sip.SipService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.sip.SipManager.open(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/SipRegistrationListener;)V
android.os.Vibrator.vibrate(J)V
android.app.IActivityManager.updateConfiguration(Landroid/content/res/Configuration;)V
android.view.IWindowManager.prepareAppTransition(IZ)V
com.android.server.am.ActivityStack.moveHomeToFrontLocked()V
com.android.server.wm.WindowManagerService$AnimationRunnable.run()V
com.android.server.am.ActivityManagerService.systemReady(Ljava/lang/Runnable;)V
android.view.IWindowSession.performDrag(Landroid/view/IWindow;Landroid/os/IBinder;FFFFLandroid/content/ClipData;)Z
android.view.IWindowSession$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IWindowSession$Stub$Proxy.prepareDrag(Landroid/view/IWindow;IIILandroid/view/Surface;)Landroid/os/IBinder;
android.view.IWindowSession$Stub.prepareDrag(Landroid/view/IWindow;IIILandroid/view/Surface;)Landroid/os/IBinder;
com.android.commands.am.Am.run([Ljava/lang/String;)V
com.android.internal.policy.impl.LockPatternKeyguardView.interceptMediaKey(Landroid/view/KeyEvent;)Z
com.android.internal.policy.impl.PhoneFallbackEventHandler.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.server.WiredAccessoryObserver.access$300(Lcom/android/server/WiredAccessoryObserver;IILjava/lang/String;)V
com.android.music.IMediaPlaybackService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.music.IMediaPlaybackService.openFile(Ljava/lang/String;)V
com.android.music.MediaPlaybackService$ServiceStub.removeTrack(J)I
com.android.music.MediaPlaybackService$ServiceStub.removeTracks(II)I
com.android.music.MediaPlaybackService.doAutoShuffleUpdate()V
com.android.music.IMediaPlaybackService$Stub$Proxy.enqueue([JI)V
com.android.music.IMediaPlaybackService$Stub.enqueue([JI)V
com.android.music.IMediaPlaybackService$Stub$Proxy.next()V
com.android.music.IMediaPlaybackService$Stub.next()V
com.android.music.IMediaPlaybackService$Stub$Proxy.open([JI)V
com.android.music.IMediaPlaybackService$Stub.open([JI)V
com.android.music.IMediaPlaybackService$Stub$Proxy.prev()V
com.android.music.IMediaPlaybackService$Stub.prev()V
com.android.music.IMediaPlaybackService$Stub$Proxy.setQueuePosition(I)V
com.android.music.IMediaPlaybackService$Stub.setQueuePosition(I)V
com.android.music.IMediaPlaybackService$Stub$Proxy.setShuffleMode(I)V
com.android.music.IMediaPlaybackService$Stub.setShuffleMode(I)V
com.android.music.IMediaPlaybackService.setRepeatMode(I)V
android.webkit.WebViewClassic.clearView()V
android.webkit.WebViewClassic.setNewPicture(Landroid/webkit/WebViewCore$DrawData;Z)V
com.android.mms.ui.Presenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.SlideEditorActivity.showCurrentSlide()V
com.android.music.IMediaPlaybackService.pause()V
android.filterfw.core.FinalPort.setFieldFrame(Landroid/filterfw/core/Frame;Z)V
android.filterfw.core.FinalPort.transfer(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.InputPort.transfer(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.AsyncRunner$AsyncRunnerTask.onPostExecute(Landroid/filterfw/core/AsyncRunner$RunnerResult;)V
android.filterfw.core.AsyncRunner.close()V
android.filterfw.core.GraphRunner.close()V
android.media.effect.SingleFilterEffect.release()V
android.filterfw.core.FilterContext.tearDown()V
android.media.effect.FilterGraphEffect.release()V
com.android.camera.EffectsRecorder$4.onRunnerDone(I)V
android.media.effect.SingleFilterEffect.apply(IIII)V
android.media.effect.SizeChangeEffect.apply(IIII)V
android.filterfw.core.AsyncRunner$AsyncRunnerTask.doInBackground([Landroid/filterfw/core/SyncRunner;)Landroid/filterfw/core/AsyncRunner$RunnerResult;
android.filterfw.core.SyncRunner.step()I
android.filterfw.core.SyncRunner.run()V
com.android.deskclock.AlarmPreference$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.preference.VolumePreference$SeekBarVolumizer.<init>(Landroid/preference/VolumePreference;Landroid/content/Context;Landroid/widget/SeekBar;I)V
com.android.settings.RingerVolumePreference.onBindDialogView(Landroid/view/View;)V
android.preference.VolumePreference.onDialogClosed(Z)V
com.android.settings.RingerVolumePreference.onDialogClosed(Z)V
com.android.internal.app.ExternalMediaFormatActivity.onPause()V
com.android.internal.app.NetInitiatedActivity.onPause()V
com.android.vpndialogs.ManageDialog.onPause()V
com.android.internal.app.ResolverActivity.onStop()V
com.android.soundrecorder.SoundRecorder$1.run()V
com.android.soundrecorder.SoundRecorder.access$100(Lcom/android/soundrecorder/SoundRecorder;)V
com.android.soundrecorder.SoundRecorder.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.music.IMediaPlaybackService$Stub$Proxy.stop()V
com.android.music.IMediaPlaybackService$Stub.stop()V
com.android.music.IMediaPlaybackService.play()V
com.android.bluetooth.opp.BluetoothOppService$UpdateThread.run()V
com.android.bluetooth.opp.BluetoothOppService.access$1700(Lcom/android/bluetooth/opp/BluetoothOppService;I)V
com.android.bluetooth.opp.BluetoothOppService.access$2200(Lcom/android/bluetooth/opp/BluetoothOppService;Landroid/database/Cursor;IZ)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.autoDiscover(Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.emailcommon.service.IEmailService$Stub.autoDiscover(Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.exchange.adapter.AbstractSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.emailcommon.service.IEmailService$Stub$Proxy.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.emailcommon.service.IEmailService$Stub.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.exchange.AbstractSyncService.validate(Ljava/lang/Class;Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasAccountService.tryProvision(Lcom/android/exchange/EasSyncService;)Z
com.android.exchange.EasOutboxService.tryProvision(Lcom/android/exchange/EasSyncService;)Z
com.android.exchange.EasAccountService.acknowledgeProvision(Lcom/android/exchange/EasSyncService;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.exchange.EasOutboxService.acknowledgeProvision(Lcom/android/exchange/EasSyncService;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.exchange.EasAccountService.acknowledgeRemoteWipe(Lcom/android/exchange/EasSyncService;Ljava/lang/String;)V
com.android.exchange.EasOutboxService.acknowledgeRemoteWipe(Lcom/android/exchange/EasSyncService;Ljava/lang/String;)V
com.android.emailcommon.service.IEmailService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IEmailService.startSync(JZ)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.loadAttachment(JZ)V
com.android.emailcommon.service.IEmailService$Stub.loadAttachment(JZ)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.sendMeetingResponse(JI)V
com.android.emailcommon.service.IEmailService$Stub.sendMeetingResponse(JI)V
com.android.exchange.CalendarSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAlarmReceiver.handleReceive(Landroid/content/Context;)V
com.android.internal.widget.WaveView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.WaveView.tryTransitionToStartAttemptState(Landroid/view/MotionEvent;)V
com.android.internal.widget.LockPatternView.addCellToPattern(Lcom/android/internal/widget/LockPatternView$Cell;)V
com.android.internal.widget.LockPatternView.handleActionUp(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.SlidingTab.setGrabbedState(I)V
com.android.internal.widget.SlidingTab.dispatchTriggerEvent(I)V
com.android.internal.policy.impl.KeyguardViewCallback.keyguardDone(Z)V
com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost.dispatchDraw(Landroid/graphics/Canvas;)V
com.android.internal.policy.impl.KeyguardViewMediator$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.view.WindowManagerPolicy.exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V
com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
android.view.WindowManagerPolicy.screenTurningOn(Landroid/view/WindowManagerPolicy$ScreenOnListener;)V
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZ)V
com.android.internal.policy.impl.LockPatternKeyguardView.createUnlockScreenFor(Lcom/android/internal/policy/impl/LockPatternKeyguardView$UnlockMode;)Landroid/view/View;
com.android.internal.policy.impl.LockPatternKeyguardView.createLockScreen()Landroid/view/View;
com.android.internal.policy.impl.PatternUnlockScreen.onWindowFocusChanged(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.show()V
com.android.internal.policy.impl.LockPatternKeyguardView.updateScreen(Lcom/android/internal/policy/impl/LockPatternKeyguardView$Mode;Z)V
com.android.phone.InCallScreen.handlePostOnDialChars(Landroid/os/AsyncResult;C)V
com.android.phone.PhoneApp.updateInCallScreen()V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.OtaUtils.otaShowProgramFailureNotice(I)V
com.android.phone.CallCard.updateCallStateWidgets(Lcom/android/internal/telephony/Call;)V
com.android.phone.InCallScreen.onMMICancel()V
com.android.phone.FdnSetting.onPinEntered(Lcom/android/phone/EditPinPreference;Z)V
com.android.settings.IccLockSettings.onPinEntered(Lcom/android/settings/EditPinPreference;Z)V
android.telephony.SmsManager.deleteMessageFromIcc(I)Z
android.telephony.SmsManager.updateMessageOnIcc(II[B)Z
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.gsm.SimSmsInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccSmsInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.PhoneProxy.exitEmergencyCallbackMode()V
com.android.phone.EmergencyCallbackModeExitDialog$4.onClick(Landroid/content/DialogInterface;I)V
com.android.internal.telephony.PhoneProxy.deleteAndCreatePhone(I)V
com.android.internal.telephony.PhoneFactory.makeDefaultPhones(Landroid/content/Context;)V
com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onDataStallAlarm(I)V
com.android.phone.Use2GOnlyCheckBoxPreference.<init>(Landroid/content/Context;Landroid/util/AttributeSet;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDataSetupComplete(Landroid/os/AsyncResult;)V
com.android.internal.telephony.PhoneProxy.getEnhancedVoicePrivacy(Landroid/os/Message;)V
com.android.phone.CdmaVoicePrivacyCheckBoxPreference$MyHandler.handleSetVPResponse(Landroid/os/Message;)V
com.android.phone.CdmaVoicePrivacyCheckBoxPreference.<init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V
com.android.settings.RadioInfo.access$4000(Lcom/android/settings/RadioInfo;)V
com.android.internal.telephony.cdma.CDMALTEPhone.dispose()V
com.android.internal.telephony.PhoneBase.dispose()V
com.android.internal.telephony.sip.SipPhone$SipCall.hangup()V
com.android.phone.PhoneUtils.hangup(Lcom/android/internal/telephony/Connection;)V
com.android.internal.telephony.CallManager.dial(Lcom/android/internal/telephony/Phone;Ljava/lang/String;)Lcom/android/internal/telephony/Connection;
com.android.internal.telephony.CallManager.acceptCall(Lcom/android/internal/telephony/Call;)V
com.android.internal.telephony.CallManager.hangupForegroundResumeBackground(Lcom/android/internal/telephony/Call;)V
com.android.internal.telephony.Call.hangupIfAlive()V
com.android.phone.PhoneUtils.hangup(Lcom/android/internal/telephony/Call;)Z
com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CdmaLteUiccRecords.setMsisdnNumber(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaLteUiccRecords.setVoiceMailNumber(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.IccRecords.setVoiceMailNumber(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.RuimRecords.setMsisdnNumber(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.setLine1Number(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.getAdnRecordsSize(I)[I
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.getAdnRecordsSize(I)[I
com.android.internal.telephony.IIccPhoneBook.getAdnRecordsSize(I)[I
com.android.internal.telephony.IIccPhoneBook$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.cat.IconLoader.loadIcon(ILandroid/os/Message;)V
com.android.internal.telephony.cat.IconLoader.loadIcons([ILandroid/os/Message;)V
com.android.internal.telephony.cat.IconLoader.postIcon()V
com.android.internal.telephony.gsm.UsimPhoneBookManager.readAdnFileAndWait(I)V
com.android.internal.telephony.IccPhoneBookInterfaceManager.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.ISms$Stub$Proxy.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.IccSmsInterfaceManagerProxy.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.ISms.getAllMessagesFromIccEf()Ljava/util/List;
com.android.internal.telephony.cdma.RuimRecords.setVoiceCallForwardingFlag(IZ)V
com.android.internal.telephony.gsm.GsmMmiCode.makeCFQueryResultMessage(Lcom/android/internal/telephony/CallForwardInfo;I)Ljava/lang/CharSequence;
com.android.internal.telephony.gsm.GsmMmiCode.onQueryCfComplete(Landroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GSMPhone.handleCfuQueryResult([Lcom/android/internal/telephony/CallForwardInfo;)V
com.android.internal.telephony.PhoneBase.setVoiceMessageWaiting(II)V
com.android.settings.BandMode.onCreate(Landroid/os/Bundle;)V
com.android.phone.CdmaSystemSelectListPreference.<init>(Landroid/content/Context;)V
com.android.phone.PhoneApp.access$900(Lcom/android/phone/PhoneApp;Landroid/os/Message;)V
com.android.internal.telephony.PhoneProxy.requestIsimAuthentication(Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.CallManager.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)Z
com.android.internal.telephony.PhoneProxy.sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.sendRawPdu([B[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.sendRawPdu([B[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;Ljava/lang/String;)V
com.android.internal.telephony.RIL.switchToRadioState(Lcom/android/internal/telephony/CommandsInterface$RadioState;)V
com.android.internal.telephony.test.SimulatedCommands.<init>()V
com.android.internal.telephony.test.SimulatedCommands.setRadioPower(ZLandroid/os/Message;)V
com.android.internal.telephony.test.SimulatedCommands.shutdown()V
com.android.phone.PhoneUtils.separateCall(Lcom/android/internal/telephony/Connection;)V
com.android.phone.CdmaSystemSelectListPreference$MyHandler.handleQueryCdmaRoamingPreference(Landroid/os/Message;)V
com.android.phone.EnableFdnScreen.access$300(Lcom/android/phone/EnableFdnScreen;)V
com.android.phone.EnableIccPinScreen.access$300(Lcom/android/phone/EnableIccPinScreen;)V
com.android.internal.telephony.IccSmsInterfaceManager.disableCellBroadcast(I)Z
com.android.internal.telephony.ISms$Stub.disableCellBroadcast(I)Z
com.android.internal.telephony.ISms$Stub$Proxy.disableCellBroadcastRange(II)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.disableCellBroadcastRange(II)Z
com.android.internal.telephony.ISms.disableCellBroadcastRange(II)Z
com.android.internal.telephony.IccSmsInterfaceManager.enableCellBroadcast(I)Z
com.android.internal.telephony.ISms$Stub.enableCellBroadcast(I)Z
com.android.internal.telephony.ISms$Stub$Proxy.enableCellBroadcastRange(II)Z
com.android.internal.telephony.IccSmsInterfaceManagerProxy.enableCellBroadcastRange(II)Z
com.android.internal.telephony.ISms.enableCellBroadcastRange(II)Z
com.android.internal.telephony.IntRangeManager.finishUpdate()Z
com.android.internal.telephony.cdma.CDMALTEPhone.disableLocationUpdates()V
com.android.internal.telephony.cdma.CDMALTEPhone.enableLocationUpdates()V
com.android.internal.telephony.cdma.CDMALTEPhone.updateServiceLocation()V
com.android.phone.MobileNetworkSettings$MyHandler.handleGetPreferredNetworkTypeResponse(Landroid/os/Message;)V
com.android.internal.telephony.PhoneProxy.enableEnhancedVoicePrivacy(ZLandroid/os/Message;)V
com.android.phone.CdmaVoicePrivacyCheckBoxPreference.onClick()V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.processPendingRadioPowerOffAfterDataOff()Z
com.android.internal.telephony.cdma.CdmaServiceStateTracker.processPendingRadioPowerOffAfterDataOff()Z
com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDisconnectDone(ILandroid/os/AsyncResult;)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.processPendingRadioPowerOffAfterDataOff()Z
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.powerOffRadioSafely(Lcom/android/internal/telephony/DataConnectionTracker;)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.powerOffRadioSafely(Lcom/android/internal/telephony/DataConnectionTracker;)V
com.android.internal.telephony.gsm.GsmDataConnectionTracker.restartRadio()V
com.android.internal.telephony.gsm.GsmServiceStateTracker.powerOffRadioSafely(Lcom/android/internal/telephony/DataConnectionTracker;)V
com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.setRadioPower(Z)V
com.android.internal.telephony.cdma.CdmaServiceStateTracker.setRadioPower(Z)V
com.android.internal.telephony.gsm.GsmServiceStateTracker.setRadioPower(Z)V
com.android.phone.PhoneInterfaceManager.supplyPin(Ljava/lang/String;)Z
com.android.phone.PhoneInterfaceManager.supplyPuk(Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CDMALTEPhone.handlePinMmi(Ljava/lang/String;)Z
android.telephony.SmsManager.copyMessageToIcc([B[BI)Z
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.phone.InCallScreen.access$2300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.addVoiceMailNumberPanel()V
com.android.phone.InCallScreen.delayedCleanupAfterDisconnect()V
com.android.phone.InCallScreen.dontAddVoiceMailNumber()V
com.android.phone.InCallScreen.onMMIComplete(Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.otaShowHome()V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.server.LocationManagerService.loadProviders()V
com.android.internal.policy.impl.GlobalActions$3.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$Action.onLongPress()Z
com.android.internal.policy.impl.GlobalActions$Action.onPress()V
com.android.server.sip.SipSessionGroup$SipSessionCallReceiverImpl.access$1500(Lcom/android/server/sip/SipSessionGroup$SipSessionImpl;Ljava/util/EventObject;)V
com.android.server.sip.SipSessionGroup$SipSessionImpl$1.run()V
com.android.phone.SipBroadcastReceiver$1.run()V
com.android.phone.sip.SipEditor.saveAndRegisterProfile(Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipSettings.handleSipReceiveCallsOption(Z)V
android.view.VolumePanel.onVibrate()V
com.android.gallery3d.app.AlbumPage.onSelectionModeChange(I)V
com.android.gallery3d.app.AlbumSetPage.onSelectionModeChange(I)V
com.android.inputmethod.latin.VibratorUtils.vibrate(J)V
com.android.internal.policy.impl.PhoneWindowManager.performHapticFeedbackLw(Landroid/view/WindowManagerPolicy$WindowState;IZ)Z
com.android.internal.widget.multiwaveview.GlowPadView.vibrate()V
com.android.internal.widget.multiwaveview.MultiWaveView.vibrate()V
com.android.internal.widget.RotarySelector.vibrate(J)V
com.android.internal.widget.SlidingTab.vibrate(J)V
com.android.internal.widget.WaveView.vibrate(J)V
com.android.launcher2.DragController.startDrag(Landroid/graphics/Bitmap;IILcom/android/launcher2/DragSource;Ljava/lang/Object;ILandroid/graphics/Point;Landroid/graphics/Rect;F)V
com.android.phone.HapticFeedback.vibrate()V
com.android.phone.Ringer$VibratorThread.run()V
com.android.server.pm.ShutdownThread.rebootOrShutdown(ZLjava/lang/String;)V
com.android.server.VibratorService.doVibratorOn(J)V
com.android.systemui.SearchPanelView.vibrate()V
com.android.systemui.statusbar.phone.PhoneStatusBar.vibrate()V
com.android.voicedialer.VoiceDialerActivity.playSound(I)I
com.android.internal.app.LocalePicker.updateLocale(Ljava/util/Locale;)V
com.android.internal.telephony.MccTable.setSystemLocale(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.MccTable.updateMccMncConfiguration(Landroid/content/Context;Ljava/lang/String;)V
com.android.providers.settings.SettingsHelper.setLocaleData([BI)V
com.android.server.UiModeManagerService.updateConfigurationLocked(Z)V
com.android.server.wm.WindowManagerService.sendNewConfiguration()V
com.android.server.am.ActivityStack.moveHomeToFrontFromLaunchLocked(I)V
com.android.server.am.ActivityManagerService$9$1.run()V
com.android.server.am.ActivityManagerService.startRunning(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
android.view.View.startDrag(Landroid/content/ClipData;Landroid/view/View$DragShadowBuilder;Ljava/lang/Object;I)Z
com.android.server.wm.Session.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IWindowSession.prepareDrag(Landroid/view/IWindow;IIILandroid/view/Surface;)Landroid/os/IBinder;
com.android.commands.am.Am.main([Ljava/lang/String;)V
android.view.FallbackEventHandler.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.music.MediaPlaybackService$ServiceStub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.music.MediaPlaybackActivity.startPlayback()V
com.android.music.IMediaPlaybackService$Stub$Proxy.removeTrack(J)I
com.android.music.IMediaPlaybackService$Stub.removeTrack(J)I
com.android.music.IMediaPlaybackService$Stub$Proxy.removeTracks(II)I
com.android.music.IMediaPlaybackService$Stub.removeTracks(II)I
com.android.music.MediaPlaybackService.getNextPosition(Z)I
com.android.music.IMediaPlaybackService.enqueue([JI)V
com.android.music.IMediaPlaybackService.next()V
com.android.music.IMediaPlaybackService.open([JI)V
com.android.music.IMediaPlaybackService.prev()V
com.android.music.IMediaPlaybackService.setQueuePosition(I)V
com.android.music.IMediaPlaybackService.setShuffleMode(I)V
com.android.music.MediaPlaybackActivity.cycleRepeat()V
com.android.music.MediaPlaybackActivity.toggleShuffle()V
android.webkit.WebViewProvider.clearView()V
android.webkit.WebViewClassic$8.onPostExecute(Landroid/webkit/WebViewCore$DrawData;)V
android.webkit.WebViewClassic.onSizeChanged(IIII)V
com.android.mms.ui.AttachmentEditor.update(Lcom/android/mms/data/WorkingMessage;)Z
com.android.mms.ui.MessageListItem.bindCommonMessage()V
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.createViewFromResource(ILandroid/view/View;I)Landroid/view/View;
com.android.mms.ui.SlideEditorActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.SlideEditorActivity.access$400(Lcom/android/mms/ui/SlideEditorActivity;)V
com.android.mms.ui.SlideEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.music.MediaPlaybackActivity.doPauseResume()V
android.filterfw.core.FieldPort.setFieldFrame(Landroid/filterfw/core/Frame;Z)V
android.filterfw.core.Filter.initProgramInputs(Landroid/filterfw/core/Program;Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.transferInputFrames(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.transferInputPortFrame(Ljava/lang/String;Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.AsyncRunner$AsyncRunnerTask.onCancelled(Landroid/filterfw/core/AsyncRunner$RunnerResult;)V
android.filterfw.core.AsyncRunner$AsyncRunnerTask.onPostExecute(Ljava/lang/Object;)V
android.media.effect.effects.AutoFixEffect.release()V
android.media.effect.effects.BitmapOverlayEffect.release()V
android.media.effect.effects.BlackWhiteEffect.release()V
android.media.effect.effects.BrightnessEffect.release()V
android.media.effect.effects.ColorTemperatureEffect.release()V
android.media.effect.effects.ContrastEffect.release()V
android.media.effect.effects.CropEffect.release()V
android.media.effect.effects.CrossProcessEffect.release()V
android.media.effect.effects.DocumentaryEffect.release()V
android.media.effect.effects.DuotoneEffect.release()V
android.media.effect.effects.FillLightEffect.release()V
android.media.effect.effects.FisheyeEffect.release()V
android.media.effect.effects.FlipEffect.release()V
android.media.effect.effects.GrainEffect.release()V
android.media.effect.effects.GrayscaleEffect.release()V
android.media.effect.effects.LomoishEffect.release()V
android.media.effect.effects.NegativeEffect.release()V
android.media.effect.effects.PosterizeEffect.release()V
android.media.effect.effects.RedEyeEffect.release()V
android.media.effect.effects.RotateEffect.release()V
android.media.effect.effects.SaturateEffect.release()V
android.media.effect.effects.SepiaEffect.release()V
android.media.effect.effects.SharpenEffect.release()V
android.media.effect.effects.StraightenEffect.release()V
android.media.effect.effects.TintEffect.release()V
android.media.effect.effects.VignetteEffect.release()V
android.media.effect.SizeChangeEffect.release()V
android.media.effect.EffectContext.release()V
android.media.effect.effects.BackDropperEffect.release()V
android.media.effect.effects.AutoFixEffect.apply(IIII)V
android.media.effect.effects.BitmapOverlayEffect.apply(IIII)V
android.media.effect.effects.BlackWhiteEffect.apply(IIII)V
android.media.effect.effects.BrightnessEffect.apply(IIII)V
android.media.effect.effects.ColorTemperatureEffect.apply(IIII)V
android.media.effect.effects.ContrastEffect.apply(IIII)V
android.media.effect.effects.CrossProcessEffect.apply(IIII)V
android.media.effect.effects.DocumentaryEffect.apply(IIII)V
android.media.effect.effects.DuotoneEffect.apply(IIII)V
android.media.effect.effects.FillLightEffect.apply(IIII)V
android.media.effect.effects.FisheyeEffect.apply(IIII)V
android.media.effect.effects.FlipEffect.apply(IIII)V
android.media.effect.effects.GrainEffect.apply(IIII)V
android.media.effect.effects.GrayscaleEffect.apply(IIII)V
android.media.effect.effects.LomoishEffect.apply(IIII)V
android.media.effect.effects.NegativeEffect.apply(IIII)V
android.media.effect.effects.PosterizeEffect.apply(IIII)V
android.media.effect.effects.RedEyeEffect.apply(IIII)V
android.media.effect.effects.SaturateEffect.apply(IIII)V
android.media.effect.effects.SepiaEffect.apply(IIII)V
android.media.effect.effects.SharpenEffect.apply(IIII)V
android.media.effect.effects.StraightenEffect.apply(IIII)V
android.media.effect.effects.TintEffect.apply(IIII)V
android.media.effect.effects.VignetteEffect.apply(IIII)V
android.media.effect.effects.CropEffect.apply(IIII)V
android.media.effect.effects.RotateEffect.apply(IIII)V
android.filterfw.core.AsyncRunner$AsyncRunnerTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.filterfw.core.GraphRunner.run()V
android.preference.VolumePreference.onBindDialogView(Landroid/view/View;)V
com.android.internal.app.ChooserActivity.onStop()V
com.android.nfc.TechListChooserActivity.onStop()V
com.android.systemui.usb.UsbResolverActivity.onStop()V
com.android.music.IMediaPlaybackService.stop()V
com.android.music.MediaPlaybackActivity$7.onClick(Landroid/view/View;)V
com.android.music.MusicUtils.playAll(Landroid/content/Context;[JIZ)V
com.android.bluetooth.opp.BluetoothOppService.updateFromProvider()V
com.android.emailcommon.service.IEmailService.autoDiscover(Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.emailcommon.service.IEmailService.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.exchange.EasAccountService.validate(Ljava/lang/Class;Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasOutboxService.validate(Ljava/lang/Class;Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.EasSyncService.validate(Ljava/lang/Class;Lcom/android/emailcommon/provider/HostAuth;Landroid/content/Context;)Landroid/os/Bundle;
com.android.exchange.ExchangeService$2.validate(Lcom/android/emailcommon/provider/HostAuth;)Landroid/os/Bundle;
com.android.email.Controller$ControllerService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.exchange.ExchangeService$2.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.EmailServiceProxy$2.run()V
com.android.email.Controller.sendPendingMessages(J)V
com.android.email.Controller.updateMailbox(JJZ)V
com.android.emailcommon.service.IEmailService.loadAttachment(JZ)V
com.android.emailcommon.service.IEmailService.sendMeetingResponse(JI)V
com.android.exchange.CalendarSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAlarmReceiver.access$000(Lcom/android/exchange/EmailSyncAlarmReceiver;Landroid/content/Context;)V
com.android.internal.widget.WaveView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.LockPatternView.detectAndAddHit(FF)Lcom/android/internal/widget/LockPatternView$Cell;
com.android.internal.widget.LockPatternView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.internal.widget.SlidingTab.cancelGrab()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.goToLockScreen()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.goToUnlockScreen()V
com.android.internal.policy.impl.LockPatternKeyguardView$3.keyguardDone(Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.verifyUnlock()V
com.android.server.wm.WindowManagerService.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
android.view.WindowManagerPolicy.interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
com.android.server.wm.WindowManagerService.<init>(Landroid/content/Context;Lcom/android/server/PowerManagerService;ZZZLcom/android/server/wm/WindowManagerService$1;)V
com.android.internal.policy.impl.LockPatternKeyguardView.recreateUnlockScreen(Lcom/android/internal/policy/impl/LockPatternKeyguardView$UnlockMode;)V
com.android.internal.policy.impl.LockPatternKeyguardView.recreateLockScreen()V
com.android.internal.policy.impl.KeyguardViewBase.show()V
com.android.internal.policy.impl.LockPatternKeyguardView.onScreenTurnedOn()V
com.android.internal.policy.impl.LockPatternKeyguardView.access$200(Lcom/android/internal/policy/impl/LockPatternKeyguardView;Lcom/android/internal/policy/impl/LockPatternKeyguardView$Mode;Z)V
com.android.internal.policy.impl.LockPatternKeyguardView.<init>(Landroid/content/Context;Lcom/android/internal/policy/impl/KeyguardViewCallback;Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/policy/impl/KeyguardWindowController;)V
com.android.phone.InCallScreen.access$1000(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;C)V
com.android.phone.EmergencyCallHelper.cleanup()V
com.android.phone.CallCard.displayMainCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.InCallScreen.access$800(Lcom/android/phone/InCallScreen;)V
com.android.phone.EditPinPreference$OnPinEnteredListener.onPinEntered(Lcom/android/phone/EditPinPreference;Z)V
com.android.settings.EditPinPreference$OnPinEnteredListener.onPinEntered(Lcom/android/settings/EditPinPreference;Z)V
android.telephony.gsm.SmsManager.deleteMessageFromSim(I)Z
com.android.providers.telephony.SmsProvider.deleteMessageFromIcc(Ljava/lang/String;)I
android.telephony.gsm.SmsManager.updateMessageOnSim(II[B)Z
com.android.phone.Use2GOnlyCheckBoxPreference.<init>(Landroid/content/Context;)V
com.android.internal.telephony.DataConnectionTracker.onDataSetupComplete(Landroid/os/AsyncResult;)V
com.android.phone.CdmaVoicePrivacyCheckBoxPreference.<init>(Landroid/content/Context;Landroid/util/AttributeSet;)V
com.android.settings.RadioInfo$21.onClick(Landroid/view/View;)V
com.android.internal.telephony.Phone.dispose()V
com.android.internal.telephony.sip.SipPhoneBase.dispose()V
com.android.internal.telephony.sip.SipPhone.dispose()V
com.android.internal.telephony.sip.SipPhone$SipCall.rejectCall()V
com.android.phone.CallNotifier.onCdmaCallWaitingReject()V
com.android.phone.ManageConferenceUtils.endConferenceConnection(ILcom/android/internal/telephony/Connection;)V
com.android.internal.telephony.cdma.CdmaCall.hangupIfAlive()V
com.android.internal.telephony.gsm.GsmCall.hangupIfAlive()V
com.android.internal.telephony.sip.SipCallBase.hangupIfAlive()V
com.android.internal.telephony.sip.SipPhone$SipCall.hangupIfAlive()V
com.android.phone.PhoneUtils.hangupActiveCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.hangup(Lcom/android/internal/telephony/CallManager;)Z
com.android.phone.PhoneUtils.hangupHoldingCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.hangupRingingCall(Lcom/android/internal/telephony/Call;)Z
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.IIccPhoneBook$Stub.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.IIccPhoneBook$Stub.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.cdma.CDMAPhone.setVoiceMailNumber(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.gsm.GSMPhone.setVoiceMailNumber(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V
com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccPhoneBookInterfaceManager.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.telephony.cat.CommandParamsFactory.processBIPClient(Lcom/android/internal/telephony/cat/CommandDetails;Ljava/util/List;)Z
com.android.internal.telephony.cat.CommandParamsFactory.processDisplayText(Lcom/android/internal/telephony/cat/CommandDetails;Ljava/util/List;)Z
com.android.internal.telephony.cat.CommandParamsFactory.processEventNotify(Lcom/android/internal/telephony/cat/CommandDetails;Ljava/util/List;)Z
com.android.internal.telephony.cat.CommandParamsFactory.processGetInkey(Lcom/android/internal/telephony/cat/CommandDetails;Ljava/util/List;)Z
com.android.internal.telephony.cat.CommandParamsFactory.processGetInput(Lcom/android/internal/telephony/cat/CommandDetails;Ljava/util/List;)Z
com.android.internal.telephony.cat.CommandParamsFactory.processLaunchBrowser(Lcom/android/internal/telephony/cat/CommandDetails;Ljava/util/List;)Z
com.android.internal.telephony.cat.CommandParamsFactory.processPlayTone(Lcom/android/internal/telephony/cat/CommandDetails;Ljava/util/List;)Z
com.android.internal.telephony.cat.CommandParamsFactory.processSelectItem(Lcom/android/internal/telephony/cat/CommandDetails;Ljava/util/List;)Z
com.android.internal.telephony.cat.CommandParamsFactory.processSetUpIdleModeText(Lcom/android/internal/telephony/cat/CommandDetails;Ljava/util/List;)Z
com.android.internal.telephony.cat.CommandParamsFactory.processSetupCall(Lcom/android/internal/telephony/cat/CommandDetails;Ljava/util/List;)Z
com.android.internal.telephony.gsm.UsimPhoneBookManager.refreshCache()V
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.getAdnRecordsInEf(I)Ljava/util/List;
com.android.internal.telephony.IIccPhoneBook$Stub.getAdnRecordsInEf(I)Ljava/util/List;
android.telephony.SmsManager.getAllMessagesFromIcc()Ljava/util/ArrayList;
com.android.internal.telephony.cdma.CDMALTEPhone.setVoiceMessageWaiting(II)V
com.android.internal.telephony.cdma.CDMAPhone.setVoiceMessageWaiting(II)V
com.android.internal.telephony.gsm.GSMPhone.setVoiceMessageWaiting(II)V
com.android.internal.telephony.Phone.setVoiceMessageWaiting(II)V
com.android.internal.telephony.sip.SipPhoneBase.setVoiceMessageWaiting(II)V
com.android.internal.telephony.sip.SipPhone.setVoiceMessageWaiting(II)V
com.android.phone.DTMFTwelveKeyDialer.sendShortDtmfToNetwork(C)V
com.android.internal.telephony.cdma.CdmaSMSDispatcher.sendSubmitPdu(Lcom/android/internal/telephony/cdma/SmsMessage$SubmitPdu;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Ljava/lang/String;)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.sendData(Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.sendNewSubmitPdu(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/SmsHeader;ILandroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V
com.android.internal.telephony.gsm.GsmSMSDispatcher.sendText(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.server.PowerManagerService.releaseWakeLock(Landroid/os/IBinder;I)V
android.os.IPowerManager$Stub$Proxy.releaseWakeLock(Landroid/os/IBinder;I)V
android.os.IPowerManager$Stub.releaseWakeLock(Landroid/os/IBinder;I)V
android.os.IPowerManager.releaseWakeLock(Landroid/os/IBinder;I)V
android.os.PowerManager$WakeLock.finalize()V
android.os.PowerManager$WakeLock.release(I)V
android.os.PowerManager$WakeLock.release()V
android.bluetooth.BluetoothDeviceProfileState$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.BluetoothDeviceProfileState.sendConnectionAccessRemovalIntent()V
android.bluetooth.HeadsetBase.releaseWakeLock()V
android.content.SyncManager$ActiveSyncContext.close()V
android.media.AsyncPlayer.releaseWakeLock()V
android.media.AudioService$4.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.media.AudioService.onSendFinished(Landroid/app/PendingIntent;Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;)V
android.net.DhcpStateMachine$DefaultState.processMessage(Landroid/os/Message;)Z
android.net.DhcpStateMachine$RunningState.processMessage(Landroid/os/Message;)Z
android.net.DhcpStateMachine$WaitBeforeRenewalState.exit()V
android.net.wifi.WifiStateMachine$DefaultState.processMessage(Landroid/os/Message;)Z
android.os.PowerManager$WakeLock$1.run()V
com.android.bluetooth.opp.BluetoothOppObexServerSession.releaseWakeLocks()V
com.android.bluetooth.pbap.BluetoothPbapService.onDestroy()V
com.android.browser.Controller.releaseWakeLock()V
com.android.calendar.alerts.AlertReceiver.finishStartingService(Landroid/app/Service;I)V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.finalize()V
com.android.contacts.voicemail.VoicemailPlaybackPresenter.onDestroy()V
com.android.contacts.voicemail.VoicemailPlaybackPresenter.onPause()V
com.android.contacts.voicemail.VoicemailPlaybackPresenter.stopPlaybackAtPosition(II)V
com.android.deskclock.AlarmAlertWakeLock.releaseCpuLock()V
com.android.deskclock.AlarmInitReceiver$1.run()V
com.android.development.Connectivity.onStopDelayedCycle()V
com.android.exchange.ExchangeService.releaseWakeLock(J)V
com.android.exchange.ExchangeService.shutdown()V
com.android.internal.os.storage.ExternalStorageFormatter.onDestroy()V
com.android.internal.policy.impl.KeyguardViewMediator.handleTimeout(I)V
com.android.internal.telephony.cdma.CdmaConnection.releaseWakeLock()V
com.android.internal.telephony.cdma.CDMAPhone.finalize()V
com.android.internal.telephony.gsm.GsmConnection.releaseWakeLock()V
com.android.internal.telephony.RIL.releaseWakeLockIfDone()V
com.android.mms.transaction.NotificationPlayer.releaseWakeLock()V
com.android.mms.transaction.SmsReceiver.finishStartingService(Landroid/app/Service;I)V
com.android.mms.transaction.TransactionService.releaseWakeLock()V
com.android.phone.BluetoothHandsfree.startVoiceRecognition()Z
com.android.phone.BluetoothHandsfree.callStarted()V
com.android.phone.CallerInfoCache$CacheAsyncTask.releaseWakeLock()V
com.android.providers.calendar.CalendarAlarmManager.releaseScheduleNextAlarmWakeLock()V
com.android.providers.calendar.CalendarReceiver$1.run()V
com.android.server.AlarmManagerService$ResultReceiver.onSendFinished(Landroid/app/PendingIntent;Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;)V
com.android.server.am.ActivityStack.activityIdleInternal(Landroid/os/IBinder;ZLandroid/content/res/Configuration;)Lcom/android/server/am/ActivityRecord;
com.android.server.am.ActivityStack.awakeFromSleepingLocked()V
com.android.server.BackupManagerService$PerformBackupTask.finalizeBackup()V
com.android.server.BackupManagerService$PerformClearTask.run()V
com.android.server.BackupManagerService$PerformFullBackupTask.run()V
com.android.server.BackupManagerService$PerformFullRestoreTask.run()V
com.android.server.BackupManagerService$PerformInitializeTask.run()V
com.android.server.BackupManagerService$PerformRestoreTask.finalizeRestore()V
com.android.server.LocationManagerService.decrementPendingBroadcasts()V
com.android.server.sip.SipWakeLock.release(Ljava/lang/Object;)V
com.android.settings.bluetooth.DockEventReceiver.finishStartingService(Landroid/app/Service;I)V
com.android.settings.CryptKeeper.onDestroy()V
com.android.systemui.media.NotificationPlayer.releaseWakeLock()V
com.android.videoeditor.VideoEditorActivity$23.onStop()V
com.android.voicedialer.VoiceDialerActivity.releaseWakeLock()V
com.android.server.ConnectivityService.handleConnect(Landroid/net/NetworkInfo;)V
android.bluetooth.BluetoothDeviceProfileState.access$6800(Landroid/bluetooth/BluetoothDeviceProfileState;)V
android.bluetooth.HeadsetBase.finalize()V
android.content.SyncManager$SyncHandler.closeActiveSyncContext(Landroid/content/SyncManager$ActiveSyncContext;)V
android.media.AsyncPlayer.access$500(Landroid/media/AsyncPlayer;)V
com.android.bluetooth.opp.BluetoothOppObexServerSession.onClose()V
com.android.browser.Controller.onPageFinished(Lcom/android/browser/Tab;)V
com.android.browser.Controller.onResume()V
com.android.contacts.voicemail.VoicemailPlaybackFragment.onDestroy()V
com.android.contacts.voicemail.VoicemailPlaybackFragment.onPause()V
com.android.contacts.voicemail.VoicemailPlaybackPresenter.access$2200(Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter;II)V
com.android.contacts.voicemail.VoicemailPlaybackPresenter.handleCompletion(Landroid/media/MediaPlayer;)V
com.android.development.Connectivity.access$1400(Lcom/android/development/Connectivity;)V
com.android.exchange.ExchangeService.releaseMailbox(J)V
com.android.exchange.ExchangeService.runAsleep(JJ)V
com.android.exchange.ExchangeService.stopManualSync(J)V
com.android.exchange.ExchangeService.stopServiceThreads()V
com.android.internal.policy.impl.KeyguardViewMediator.access$1100(Lcom/android/internal/policy/impl/KeyguardViewMediator;I)V
com.android.internal.telephony.cdma.CdmaConnection.access$000(Lcom/android/internal/telephony/cdma/CdmaConnection;)V
com.android.internal.telephony.cdma.CdmaConnection.finalize()V
com.android.internal.telephony.cdma.CdmaConnection.onDisconnect(Lcom/android/internal/telephony/Connection$DisconnectCause;)V
com.android.internal.telephony.cdma.CdmaConnection.onLocalDisconnect()V
com.android.internal.telephony.cdma.CDMALTEPhone.finalize()V
com.android.internal.telephony.gsm.GsmConnection.access$100(Lcom/android/internal/telephony/gsm/GsmConnection;)V
com.android.internal.telephony.gsm.GsmConnection.finalize()V
com.android.internal.telephony.gsm.GsmConnection.onDisconnect(Lcom/android/internal/telephony/Connection$DisconnectCause;)V
com.android.internal.telephony.RIL.access$200(Lcom/android/internal/telephony/RIL;)V
com.android.mms.transaction.NotificationPlayer.access$700(Lcom/android/mms/transaction/NotificationPlayer;)V
com.android.mms.transaction.PrivilegedSmsReceiver.finishStartingService(Landroid/app/Service;I)V
com.android.mms.transaction.TransactionService.endMmsConnectivity()V
com.android.phone.BluetoothHeadsetService$6.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree.access$3600(Lcom/android/phone/BluetoothHandsfree;)V
com.android.phone.CallerInfoCache$CacheAsyncTask.onCancelled(Ljava/lang/Void;)V
com.android.phone.CallerInfoCache$CacheAsyncTask.onPostExecute(Ljava/lang/Void;)V
com.android.providers.calendar.CalendarProviderIntentService.onHandleIntent(Landroid/content/Intent;)V
com.android.server.am.ActivityStack.completeResumeLocked(Lcom/android/server/am/ActivityRecord;)V
com.android.server.am.ActivityStack.scheduleIdleLocked()V
com.android.server.am.ActivityRecord.windowsVisible()V
com.android.server.am.ActivityManagerService.comeOutOfSleepIfNeededLocked()V
com.android.server.BackupManagerService$PerformBackupTask.execute()V
com.android.server.BackupManagerService.clearBackupData(Ljava/lang/String;)V
com.android.server.BackupManagerService$PerformRestoreTask.execute()V
com.android.server.LocationManagerService.access$500(Lcom/android/server/LocationManagerService;)V
com.android.server.sip.SipService$AutoRegistrationProcess.notCurrentSession(Landroid/net/sip/ISipSession;)Z
com.android.server.sip.SipService$AutoRegistrationProcess.onRegistrationFailed(Landroid/net/sip/ISipSession;ILjava/lang/String;)V
com.android.server.sip.SipService$AutoRegistrationProcess.onRegistrationTimeout(Landroid/net/sip/ISipSession;)V
com.android.server.sip.SipService$AutoRegistrationProcess.stop()V
com.android.server.sip.SipService$MyExecutor.executeInternal(Ljava/lang/Runnable;)V
com.android.server.sip.SipWakeLock.reset()V
com.android.settings.bluetooth.DockService$4.onDismiss(Landroid/content/DialogInterface;)V
com.android.settings.bluetooth.DockService.onStartCommand(Landroid/content/Intent;II)I
com.android.settings.bluetooth.DockService.handleBluetoothStateOn(I)V
com.android.settings.bluetooth.DockService.handleBtStateChange(Landroid/content/Intent;I)V
com.android.settings.bluetooth.DockService.handleUnexpectedDisconnect(Landroid/bluetooth/BluetoothDevice;Lcom/android/settings/bluetooth/LocalBluetoothProfile;I)V
com.android.settings.bluetooth.DockService.processMessage(Landroid/os/Message;)V
com.android.systemui.media.NotificationPlayer.access$700(Lcom/android/systemui/media/NotificationPlayer;)V
com.android.voicedialer.VoiceDialerActivity.onDestroy()V
com.android.server.ConnectivityService.access$1100(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.processMessage(Landroid/os/Message;)Z
com.android.browser.WebViewController.onPageFinished(Lcom/android/browser/Tab;)V
com.android.browser.ActivityController.onResume()V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$PlaybackPositionListener.onStartTrackingTouch(Landroid/widget/SeekBar;)V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$PlaybackPositionListener.onStopTrackingTouch(Landroid/widget/SeekBar;)V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$StartStopButtonListener.onClick(Landroid/view/View;)V
com.android.contacts.voicemail.VoicemailPlaybackPresenter$MediaPlayerCompletionListener$1.run()V
com.android.exchange.ExchangeService.access$900(Lcom/android/exchange/ExchangeService;J)V
com.android.exchange.ExchangeService.done(Lcom/android/exchange/AbstractSyncService;)V
com.android.exchange.ExchangeService.reloadFolderList(Landroid/content/Context;JZ)V
com.android.exchange.ExchangeService.stopAccountSyncs(JZ)V
com.android.exchange.ExchangeService$2.stopSync(J)V
com.android.exchange.ExchangeService$CalendarObserver$1.run()V
com.android.internal.telephony.cdma.CdmaConnection.onRemoteDisconnect(I)V
com.android.internal.telephony.gsm.GsmConnection.onRemoteDisconnect(I)V
android.bluetooth.IBluetoothHeadset$Stub$Proxy.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.handlePreciseCallStateChange(ZLcom/android/internal/telephony/Connection;)V
com.android.phone.CallerInfoCache$CacheAsyncTask.onCancelled(Ljava/lang/Object;)V
com.android.phone.CallerInfoCache$CacheAsyncTask.onPostExecute(Ljava/lang/Object;)V
com.android.server.am.ActivityManagerService.forceStopPackageLocked(Ljava/lang/String;IZZZZI)Z
com.android.server.am.ActivityRecord$Token.windowsVisible()V
com.android.server.am.ActivityManagerService.setLockScreenShown(Z)V
com.android.server.am.ActivityManagerService.wakingUp()V
com.android.server.BackupManagerService$BackupRestoreTask.execute()V
android.app.backup.IBackupManager$Stub$Proxy.clearBackupData(Ljava/lang/String;)V
android.app.backup.IBackupManager$Stub.clearBackupData(Ljava/lang/String;)V
com.android.server.LocationManagerService$ProximityListener.onSendFinished(Landroid/app/PendingIntent;Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;)V
com.android.server.LocationManagerService$Receiver.binderDied()V
com.android.server.LocationManagerService$Receiver.decrementPendingBroadcastsLocked()V
com.android.server.sip.SipService$AutoRegistrationProcess.onRegistering(Landroid/net/sip/ISipSession;)V
com.android.server.sip.SipService$SipSessionGroupExt.close()V
com.android.server.sip.SipService.updateWakeLocks()V
com.android.settings.bluetooth.DockService.access$100(Lcom/android/settings/bluetooth/DockService;Landroid/os/Message;)V
com.android.browser.SnapshotTab$LoadData.onPostExecute(Landroid/database/Cursor;)V
com.android.browser.Tab$2.onPageFinished(Landroid/webkit/WebView;Ljava/lang/String;)V
com.android.browser.BrowserActivity.onResume()V
com.android.exchange.ExchangeService$5.run()V
com.android.exchange.adapter.AbstractSyncParser.parse()Z
com.android.exchange.ExchangeService$2.updateFolderList(J)V
com.android.exchange.ExchangeService.access$400(Lcom/android/exchange/ExchangeService;JZ)V
com.android.exchange.ExchangeService.stopAccountSyncs(J)V
com.android.exchange.ExchangeService.stopNonAccountMailboxSyncsForAccount(J)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.stopSync(J)V
com.android.emailcommon.service.IEmailService$Stub.stopSync(J)V
android.bluetooth.IBluetoothHeadset.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.access$1800(Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState;ZLcom/android/internal/telephony/Connection;)V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.<init>(Lcom/android/phone/BluetoothHandsfree;)V
com.android.server.am.ActivityManagerService.access$300(Lcom/android/server/am/ActivityManagerService;Ljava/lang/String;IZZZZI)Z
com.android.server.am.ActivityManagerService.broadcastIntentLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;ZZIII)I
com.android.server.am.ActivityManagerService.finishInstrumentationLocked(Lcom/android/server/am/ProcessRecord;ILandroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.forceStopPackageLocked(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.onUserRemoved(Landroid/content/Intent;)V
android.view.IApplicationToken$Stub$Proxy.windowsVisible()V
android.view.IApplicationToken$Stub.windowsVisible()V
android.app.ActivityManagerNative.setLockScreenShown(Z)V
android.app.ActivityManagerNative.wakingUp()V
android.app.backup.IBackupManager.clearBackupData(Ljava/lang/String;)V
com.android.server.LocationManagerService$Receiver.access$700(Lcom/android/server/LocationManagerService$Receiver;)V
com.android.server.LocationManagerService$Receiver.onSendFinished(Landroid/app/PendingIntent;Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;)V
com.android.server.sip.SipService$IntervalMeasurementProcess.stop()V
com.android.server.sip.SipService.close(Ljava/lang/String;)V
com.android.browser.SnapshotTab$LoadData.onPostExecute(Ljava/lang/Object;)V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.parse()Z
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser.parse()Z
com.android.exchange.adapter.Parser.parse()Z
com.android.emailcommon.service.IEmailService$Stub$Proxy.updateFolderList(J)V
com.android.emailcommon.service.IEmailService$Stub.updateFolderList(J)V
com.android.exchange.ExchangeService$2.hostChanged(J)V
com.android.exchange.ExchangeService$AccountObserver.onAccountChanged()V
com.android.exchange.ExchangeService$2.deleteAccountPIMData(J)V
com.android.exchange.ExchangeService$ConnectivityReceiver$1.run()V
com.android.exchange.adapter.FolderSyncParser.parse()Z
com.android.emailcommon.service.IEmailService.stopSync(J)V
android.bluetooth.BluetoothHeadset.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.<init>(Lcom/android/phone/BluetoothHandsfree;Lcom/android/phone/BluetoothHandsfree$1;)V
com.android.server.am.ActivityManagerService$6.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.am.ActivityManagerService.killApplicationWithUid(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.access$100(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;ZZIII)I
com.android.server.am.ActivityManagerService.closeSystemDialogsLocked(ILjava/lang/String;)V
com.android.server.am.ActivityManagerService.finishBooting()V
com.android.server.am.ActivityManagerService.handleAppDiedLocked(Lcom/android/server/am/ProcessRecord;ZZ)V
com.android.server.am.ActivityRecord.keyDispatchingTimedOut()Z
com.android.server.am.ActivityManagerService.access$700(Lcom/android/server/am/ActivityManagerService;Landroid/content/Intent;)V
android.view.IApplicationToken$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.view.IApplicationToken.windowsVisible()V
android.app.IActivityManager.setLockScreenShown(Z)V
android.app.IActivityManager.wakingUp()V
com.android.commands.bmgr.Bmgr.doWipe()V
com.android.server.sip.SipService$IntervalMeasurementProcess.onResponse(Z)V
com.android.server.sip.SipService.stopPortMappingMeasurement()V
android.net.sip.ISipService$Stub$Proxy.close(Ljava/lang/String;)V
android.net.sip.ISipService$Stub.close(Ljava/lang/String;)V
com.android.exchange.adapter.CalendarSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.ContactsSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.emailcommon.service.IEmailService.updateFolderList(J)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.hostChanged(J)V
com.android.emailcommon.service.IEmailService$Stub.hostChanged(J)V
com.android.exchange.ExchangeService$AccountObserver.access$700(Lcom/android/exchange/ExchangeService$AccountObserver;)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.deleteAccountPIMData(J)V
com.android.emailcommon.service.IEmailService$Stub.deleteAccountPIMData(J)V
com.android.emailcommon.service.EmailServiceProxy$3.run()V
com.android.voicedialer.VoiceDialerActivity.updateBluetoothParameters(Z)V
com.android.phone.BluetoothHandsfree.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CallManager;)V
android.app.ActivityManagerNative.killApplicationWithUid(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.appNotResponding(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ActivityRecord;Lcom/android/server/am/ActivityRecord;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.ensureBootCompleted()V
com.android.server.am.ActivityManagerService.attachApplicationLocked(Landroid/app/IApplicationThread;I)Z
com.android.server.am.ActivityManagerService.removeProcessLocked(Lcom/android/server/am/ProcessRecord;ZZLjava/lang/String;)Z
com.android.server.am.ActivityManagerService.startProcessLocked(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;ZILjava/lang/String;Landroid/content/ComponentName;ZZ)Lcom/android/server/am/ProcessRecord;
com.android.server.am.ActivityManagerService.appDiedLocked(Lcom/android/server/am/ProcessRecord;ILandroid/app/IApplicationThread;)V
com.android.server.am.ActivityRecord$Token.keyDispatchingTimedOut()Z
com.android.server.am.ActivityManagerService$7.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.am.ActivityRecord$Token.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.policy.impl.KeyguardViewMediator.updateActivityLockScreenState()V
com.android.commands.bmgr.Bmgr.run([Ljava/lang/String;)V
com.android.server.sip.SipService.restartPortMappingLifetimeMeasurement(Landroid/net/sip/SipProfile;I)V
android.net.sip.ISipService.close(Ljava/lang/String;)V
com.android.emailcommon.service.EmailServiceProxy$6.run()V
com.android.email.Controller$1.run()V
com.android.emailcommon.service.IEmailService.hostChanged(J)V
com.android.exchange.ExchangeService$AccountObserver$2.run()V
com.android.emailcommon.service.IEmailService.deleteAccountPIMData(J)V
com.android.emailcommon.service.ServiceProxy$ProxyTask.run()V
com.android.voicedialer.VoiceDialerActivity.access$2200(Lcom/android/voicedialer/VoiceDialerActivity;Z)V
com.android.phone.BluetoothHandsfree.init(Landroid/content/Context;Lcom/android/internal/telephony/CallManager;)Lcom/android/phone/BluetoothHandsfree;
android.app.IActivityManager.killApplicationWithUid(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.serviceTimeout(Lcom/android/server/am/ProcessRecord;)V
com.android.server.am.BroadcastQueue$AppNotResponding.run()V
com.android.server.am.ActivityManagerService.crashApplication(Lcom/android/server/am/ProcessRecord;Landroid/app/ApplicationErrorReport$CrashInfo;)V
com.android.server.am.ActivityManagerService.handleAppCrashLocked(Lcom/android/server/am/ProcessRecord;)Z
com.android.server.am.ActivityManagerService.killPackageProcessesLocked(Ljava/lang/String;IIZZZZLjava/lang/String;)Z
com.android.server.am.ActivityManagerService.bindBackupAgent(Landroid/content/pm/ApplicationInfo;I)Z
com.android.server.am.ActivityManagerService.bringUpServiceLocked(Lcom/android/server/am/ServiceRecord;IZ)Z
com.android.server.am.BroadcastQueue.processNextBroadcast(Z)V
com.android.server.am.ActivityManagerService$AppDeathRecipient.binderDied()V
android.view.IApplicationToken$Stub$Proxy.keyDispatchingTimedOut()Z
android.view.IApplicationToken$Stub.keyDispatchingTimedOut()Z
com.android.internal.policy.impl.KeyguardViewMediator.handleVerifyUnlock()V
com.android.commands.bmgr.Bmgr.main([Ljava/lang/String;)V
com.android.server.sip.SipService.access$1300(Lcom/android/server/sip/SipService;Landroid/net/sip/SipProfile;I)V
android.net.sip.SipManager.close(Ljava/lang/String;)V
com.android.email.activity.setup.AccountSetupExchangeFragment.saveSettingsAfterEdit()V
com.android.emailcommon.service.EmailServiceProxy$9.run()V
com.android.emailcommon.service.EmailServiceProxy$12.run()V
com.android.email.Controller.deleteSyncedDataSync(J)V
com.android.emailcommon.service.ServiceProxy$ProxyRunnable.run()V
com.android.voicedialer.VoiceDialerActivity$1.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
com.android.voicedialer.VoiceDialerActivity$VoiceDialerBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.pm.PackageManagerService.killApplication(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.bumpServiceExecutingLocked(Lcom/android/server/am/ServiceRecord;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.handleApplicationWtf(Landroid/os/IBinder;Ljava/lang/String;Landroid/app/ApplicationErrorReport$CrashInfo;)Z
com.android.server.am.ActivityManagerService.handleApplicationCrash(Landroid/os/IBinder;Landroid/app/ApplicationErrorReport$CrashInfo;)V
com.android.server.am.ActivityManagerService.makeAppCrashingLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.killAppAtUsersRequest(Lcom/android/server/am/ProcessRecord;Landroid/app/Dialog;)V
android.app.ActivityManagerNative.bindBackupAgent(Landroid/content/pm/ApplicationInfo;I)Z
com.android.server.am.ActivityManagerService.startServiceLocked(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/ComponentName;
com.android.server.am.ActivityManagerService.performServiceRestartLocked(Lcom/android/server/am/ServiceRecord;)V
com.android.server.am.BroadcastQueue.scheduleBroadcastsLocked()V
android.view.IApplicationToken.keyDispatchingTimedOut()Z
com.android.internal.policy.impl.KeyguardViewMediator.access$1500(Lcom/android/internal/policy/impl/KeyguardViewMediator;)V
com.android.phone.sip.SipEditor.unregisterProfile(Ljava/lang/String;)V
com.android.phone.sip.SipSettings$7.run()V
com.android.email.activity.setup.AccountServerBaseFragment.saveSettingsAfterEdit()V
com.android.email.Controller.deleteAccountSync(JLandroid/content/Context;)V
com.android.email.SecurityPolicy.wipeExpiredAccounts(Landroid/content/Context;Lcom/android/email/Controller;)Z
com.android.server.pm.PackageManagerService.scanPackageLI(Landroid/content/pm/PackageParser$Package;IIJ)Landroid/content/pm/PackageParser$Package;
com.android.server.pm.PackageManagerService.deletePackageLI(Ljava/lang/String;ZILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;Z)Z
com.android.server.pm.PackageManagerService.replaceSystemPackageLI(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;IILjava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.am.ActivityManagerService.requestServiceBindingLocked(Lcom/android/server/am/ServiceRecord;Lcom/android/server/am/IntentBindRecord;Z)Z
com.android.server.am.ActivityManagerService.bringDownServiceLocked(Lcom/android/server/am/ServiceRecord;Z)V
com.android.server.am.ActivityManagerService.realStartServiceLocked(Lcom/android/server/am/ServiceRecord;Lcom/android/server/am/ProcessRecord;)V
com.android.server.am.ActivityManagerService.removeConnectionLocked(Lcom/android/server/am/ConnectionRecord;Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ActivityRecord;)V
com.android.server.am.ActivityManagerService.sendServiceArgsLocked(Lcom/android/server/am/ServiceRecord;Z)V
android.app.ActivityManagerNative.handleApplicationWtf(Landroid/os/IBinder;Ljava/lang/String;Landroid/app/ApplicationErrorReport$CrashInfo;)Z
android.app.ActivityManagerNative.handleApplicationCrash(Landroid/os/IBinder;Landroid/app/ApplicationErrorReport$CrashInfo;)V
android.app.IActivityManager.bindBackupAgent(Landroid/content/pm/ApplicationInfo;I)Z
com.android.server.am.ActivityManagerService$ServiceRestarter.run()V
com.android.server.am.ActivityManagerService.registerReceiver(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;)Landroid/content/Intent;
com.android.server.am.BroadcastQueue.sendPendingBroadcastsLocked(Lcom/android/server/am/ProcessRecord;)Z
com.android.server.am.BroadcastQueue.broadcastTimeoutLocked(Z)V
com.android.server.am.BroadcastQueue.skipCurrentReceiverLocked(Lcom/android/server/am/ProcessRecord;)V
com.android.server.am.BroadcastQueue.skipPendingBroadcastLocked(I)V
com.android.server.wm.InputMonitor.notifyANR(Lcom/android/server/input/InputApplicationHandle;Lcom/android/server/input/InputWindowHandle;)J
com.android.phone.sip.SipEditor.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.phone.sip.SipEditor.deleteAndUnregisterProfile(Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipEditor.unregisterOldPrimaryAccount()V
com.android.email.activity.setup.AccountServerBaseFragment$4.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.email.Controller$14.run()V
com.android.email.provider.AccountReconciler.reconcileAccountsInternal(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;Z)Z
com.android.email.SecurityPolicy.deleteSecuredAccounts(Landroid/content/Context;)V
com.android.email.service.MailService$3.run()V
com.android.email.SecurityPolicy.onPasswordExpiring(Landroid/content/Context;)V
com.android.server.pm.PackageManagerService.scanPackageLI(Ljava/io/File;IIJ)Landroid/content/pm/PackageParser$Package;
com.android.server.pm.PackageManagerService.installNewPackageLI(Landroid/content/pm/PackageParser$Package;IILjava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.pm.PackageManagerService.replaceNonSystemPackageLI(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;IILjava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.pm.PackageManagerService.deletePackageX(Ljava/lang/String;ZZI)I
com.android.server.pm.PackageManagerService.unloadMediaPackages(Ljava/util/HashMap;[IZ)V
com.android.server.pm.PackageManagerService.replacePackageLI(Landroid/content/pm/PackageParser$Package;IILjava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.am.ActivityManagerService.requestServiceBindingsLocked(Lcom/android/server/am/ServiceRecord;)V
com.android.server.am.ActivityManagerService.killServicesLocked(Lcom/android/server/am/ProcessRecord;Z)V
com.android.server.am.ActivityManagerService.processStartTimedOutLocked(Lcom/android/server/am/ProcessRecord;)V
com.android.server.am.ActivityManagerService.stopServiceLocked(Lcom/android/server/am/ServiceRecord;)V
com.android.server.am.ActivityManagerService.cleanUpRemovedTaskLocked(Lcom/android/server/am/TaskRecord;I)V
android.app.IActivityManager.handleApplicationWtf(Landroid/os/IBinder;Ljava/lang/String;Landroid/app/ApplicationErrorReport$CrashInfo;)Z
android.app.IActivityManager.handleApplicationCrash(Landroid/os/IBinder;Landroid/app/ApplicationErrorReport$CrashInfo;)V
com.android.server.BackupManagerService.bindToAgentSynchronous(Landroid/content/pm/ApplicationInfo;I)Landroid/app/IBackupAgent;
android.app.ActivityManagerNative.registerReceiver(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;)Landroid/content/Intent;
com.android.server.am.ActivityManagerService.sendPendingBroadcastsLocked(Lcom/android/server/am/ProcessRecord;)Z
com.android.server.am.BroadcastQueue.setBroadcastTimeoutLocked(J)V
com.android.server.am.ActivityManagerService.skipCurrentReceiverLocked(Lcom/android/server/am/ProcessRecord;)V
com.android.server.am.ActivityManagerService.skipPendingBroadcastLocked(I)V
com.android.server.input.InputManagerService$Callbacks.notifyANR(Lcom/android/server/input/InputApplicationHandle;Lcom/android/server/input/InputWindowHandle;)J
com.android.phone.sip.SipEditor.access$500(Lcom/android/phone/sip/SipEditor;Landroid/net/sip/SipProfile;)V
com.android.phone.sip.SipEditor.access$400(Lcom/android/phone/sip/SipEditor;)V
com.android.email.activity.setup.AccountServerBaseFragment$4.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.provider.AccountReconciler.accountsNeedReconciling(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;)Z
com.android.email.provider.AccountReconciler.reconcileAccounts(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;)V
com.android.email.SecurityPolicy.onAdminEnabled(Z)V
com.android.email.SecurityPolicy.onDeviceAdminReceiverMessage(Landroid/content/Context;I)V
com.android.server.pm.PackageManagerService.access$1400(Lcom/android/server/pm/PackageManagerService;Ljava/io/File;IIJ)Landroid/content/pm/PackageParser$Package;
com.android.server.pm.PackageManagerService.deleteSystemPackageLI(Landroid/content/pm/PackageParser$Package;ILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;Z)Z
com.android.server.pm.PackageManagerService.loadMediaPackages(Ljava/util/HashMap;[ILjava/util/HashSet;)V
com.android.server.pm.PackageManagerService.scanDirLI(Ljava/io/File;IIJ)V
com.android.server.pm.PackageManagerService.installPackageLI(Lcom/android/server/pm/PackageManagerService$InstallArgs;ZLcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.pm.PackageManagerService.access$3300(Lcom/android/server/pm/PackageManagerService;Ljava/lang/String;ZZI)I
com.android.server.pm.PackageManagerService.updateExternalMediaStatusInner(ZZ)V
com.android.server.am.ActivityManagerService.cleanUpApplicationRecordLocked(Lcom/android/server/am/ProcessRecord;ZZI)V
com.android.server.am.ActivityManagerService.access$200(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;)V
com.android.internal.os.RuntimeInit.wtf(Ljava/lang/String;Ljava/lang/Throwable;)V
com.android.internal.os.RuntimeInit$UncaughtHandler.uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;)V
com.android.server.BackupManagerService$PerformBackupTask.invokeNextAgent()V
com.android.server.BackupManagerService$PerformFullBackupTask.backupOnePackage(Landroid/content/pm/PackageInfo;Ljava/io/OutputStream;)V
com.android.server.BackupManagerService$PerformFullRestoreTask.restoreOneFile(Ljava/io/InputStream;[B)Z
com.android.server.BackupManagerService$PerformRestoreTask.restoreNextAgent()V
android.app.IActivityManager.registerReceiver(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;)Landroid/content/Intent;
com.android.server.am.ActivityManagerService.startAppProblemLocked(Lcom/android/server/am/ProcessRecord;)V
com.android.server.input.InputManagerService.notifyANR(Lcom/android/server/input/InputApplicationHandle;Lcom/android/server/input/InputWindowHandle;)J
com.android.phone.sip.SipEditor$2.run()V
com.android.email.service.MailService.hasMismatchInPopImapAccounts(Landroid/content/Context;)Z
com.android.email.service.AccountService$1.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService.reconcileAccountsWithAccountManager(Landroid/content/Context;Ljava/util/List;[Landroid/accounts/Account;Landroid/content/Context;)V
com.android.email.service.EmailBroadcastProcessorService.onHandleIntent(Landroid/content/Intent;)V
com.android.server.pm.PackageManagerService$AppDirObserver.onEvent(ILjava/lang/String;)V
com.android.server.pm.PackageManagerService.<init>(Landroid/content/Context;ZZ)V
com.android.server.pm.PackageManagerService.access$1600(Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/PackageManagerService$InstallArgs;ZLcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
com.android.server.pm.PackageManagerService$7.run()V
com.android.server.pm.PackageManagerService.access$3800(Lcom/android/server/pm/PackageManagerService;ZZ)V
com.android.server.pm.PackageManagerService.scanAvailableAsecs()V
com.android.server.am.ActivityManagerService.trimApplications()V
com.android.server.am.ActivityManagerService.startProcessLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;)V
android.util.Log$1.onTerribleFailure(Ljava/lang/String;Landroid/util/Log$TerribleFailure;)V
com.android.commands.monkey.MonkeyNetworkMonitor.register(Landroid/app/IActivityManager;)V
com.android.server.am.ActivityManagerService.makeAppNotRespondingLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.email.activity.Welcome$1.run()V
com.android.emailcommon.service.IAccountService$Stub$Proxy.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.emailcommon.service.IAccountService$Stub.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService$6.runInternal(Landroid/content/Context;)V
com.android.server.pm.PackageManagerService.main(Landroid/content/Context;ZZ)Landroid/content/pm/IPackageManager;
com.android.server.pm.PackageManagerService$10.run()V
com.android.server.MountService$2.run()V
com.android.server.am.ActivityManagerService.setProcessLimit(I)V
com.android.server.am.ActivityManagerService.addAppLocked(Landroid/content/pm/ApplicationInfo;Z)Lcom/android/server/am/ProcessRecord;
com.android.commands.monkey.Monkey.getSystemInterfaces()Z
com.android.emailcommon.service.IAccountService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IAccountService.reconcileAccounts(Ljava/lang/String;Ljava/lang/String;)V
com.android.email.service.MailService$6.runInternal(Ljava/lang/Object;)V
com.android.server.MountService.onDaemonConnected()V
android.app.ActivityManagerNative.setProcessLimit(I)V
com.android.commands.monkey.Monkey.run([Ljava/lang/String;)I
com.android.email.service.AccountService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.AccountServiceProxy$3.run()V
com.android.email.SingleRunningTask.runInternal(Ljava/lang/Object;)V
com.android.server.INativeDaemonConnectorCallbacks.onDaemonConnected()V
android.app.IActivityManager.setProcessLimit(I)V
com.android.commands.monkey.Monkey.main([Ljava/lang/String;)V
com.android.email.SingleRunningTask.run(Ljava/lang/Object;)V
com.android.server.NativeDaemonConnector.listenToSocket()V
com.android.settings.DevelopmentSettings.writeAppProcessLimitOptions(Ljava/lang/Object;)V
com.android.email.service.MailService$6.run(Ljava/lang/Object;)V
com.android.email.service.MailService.reconcilePopImapAccountsSync(Landroid/content/Context;)V
com.android.server.NativeDaemonConnector.run()V
com.android.settings.DevelopmentSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.settings.DevelopmentSettings.resetDangerousOptions()V
com.android.email.service.EmailBroadcastProcessorService.onSystemAccountChanged()V
com.android.email.service.MailService$1.run()V
com.android.settings.DevelopmentSettings.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.server.WifiService.acquireWifiLock(Landroid/os/IBinder;ILjava/lang/String;Landroid/os/WorkSource;)Z
android.net.wifi.IWifiManager$Stub$Proxy.acquireWifiLock(Landroid/os/IBinder;ILjava/lang/String;Landroid/os/WorkSource;)Z
android.net.wifi.IWifiManager$Stub.acquireWifiLock(Landroid/os/IBinder;ILjava/lang/String;Landroid/os/WorkSource;)Z
android.net.wifi.IWifiManager.acquireWifiLock(Landroid/os/IBinder;ILjava/lang/String;Landroid/os/WorkSource;)Z
android.net.wifi.IWifiManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.wifi.WifiManager$WifiLock.acquire()V
com.android.server.WifiService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.net.sip.SipAudioCall.grabWifiHighPerfLock()V
android.net.sip.SipAudioCall.startAudioInternal()V
android.net.sip.SipAudioCall.startAudio()V
android.net.sip.SipAudioCall.transferToNewSession()V
com.android.internal.telephony.sip.SipPhone$SipConnection$1.onCallEstablished(Landroid/net/sip/SipAudioCall;)V
com.android.internal.telephony.sip.SipPhone$SipConnection$1.onCallHeld(Landroid/net/sip/SipAudioCall;)V
com.android.internal.telephony.sip.SipPhone$SipConnection.separate()V
android.net.sip.SipAudioCall.access$700(Landroid/net/sip/SipAudioCall;)V
android.net.sip.SipAudioCall$1.onCallEstablished(Landroid/net/sip/SipSession;Ljava/lang/String;)V
com.android.server.WifiService.releaseWifiLock(Landroid/os/IBinder;)Z
android.net.wifi.IWifiManager$Stub$Proxy.releaseWifiLock(Landroid/os/IBinder;)Z
android.net.wifi.IWifiManager$Stub.releaseWifiLock(Landroid/os/IBinder;)Z
android.net.wifi.IWifiManager.releaseWifiLock(Landroid/os/IBinder;)Z
android.net.wifi.WifiManager$WifiLock.finalize()V
android.net.wifi.WifiManager$WifiLock.release()V
android.net.sip.SipAudioCall.releaseWifiHighPerfLock()V
com.android.server.sip.SipService.unregisterReceivers()V
android.net.sip.SipAudioCall.stopCall(Z)V
com.android.server.sip.SipService.notifyProfileRemoved(Landroid/net/sip/SipProfile;)V
android.net.sip.SipAudioCall.close(Z)V
android.net.sip.SipAudioCall.endCall()V
android.net.sip.SipAudioCall.access$900(Landroid/net/sip/SipAudioCall;Z)V
android.net.sip.SipAudioCall.close()V
android.net.sip.SipAudioCall.onError(ILjava/lang/String;)V
com.android.internal.telephony.sip.SipPhone$SipConnection.hangup()V
android.net.sip.SipAudioCall$1.onCallBusy(Landroid/net/sip/SipSession;)V
android.net.sip.SipAudioCall$1.onCallEnded(Landroid/net/sip/SipSession;)V
com.android.internal.telephony.sip.SipPhone$SipConnection$1.onCallEnded(Lcom/android/internal/telephony/Connection$DisconnectCause;)V
android.net.sip.SipAudioCall.access$1200(Landroid/net/sip/SipAudioCall;ILjava/lang/String;)V
com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter.onCallEnded(Lcom/android/internal/telephony/Connection$DisconnectCause;)V
com.android.internal.telephony.sip.SipPhone$SipConnection$1.onChanged(Landroid/net/sip/SipAudioCall;)V
com.android.internal.telephony.sip.SipPhone$SipConnection$1.onError(Lcom/android/internal/telephony/Connection$DisconnectCause;)V
android.net.sip.SipAudioCall$1.onError(Landroid/net/sip/SipSession;ILjava/lang/String;)V
com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter.onCallBusy(Landroid/net/sip/SipAudioCall;)V
com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter.onCallEnded(Landroid/net/sip/SipAudioCall;)V
com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter.onError(Lcom/android/internal/telephony/Connection$DisconnectCause;)V
com.android.internal.telephony.sip.SipPhone$SipConnection$1.onCallBusy(Landroid/net/sip/SipAudioCall;)V
com.android.internal.telephony.sip.SipPhone$SipConnection$1.onCallEnded(Landroid/net/sip/SipAudioCall;)V
com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter.onError(Landroid/net/sip/SipAudioCall;ILjava/lang/String;)V
com.android.internal.telephony.sip.SipPhone$SipConnection$1.onError(Landroid/net/sip/SipAudioCall;ILjava/lang/String;)V
Permission:android.permission.READ_SYNC_SETTINGS

1571 Callers:

android.content.ContentService.getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService$Stub$Proxy.getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService$Stub.getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService.getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.IContentService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.content.ContentResolver.getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
android.content.ContentService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.ContextImpl$ApplicationContentResolver.getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
android.test.mock.MockContentResolver.getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
com.android.calendar.selectcalendars.SelectCalendarsSyncFragment.onResume()V
com.android.email.activity.setup.AccountSettingsFragment.loadSettings()V
com.android.email.service.MailService.setupSyncReportsLocked(JLandroid/content/Context;)V
com.android.exchange.adapter.CalendarSyncAdapter.isSyncable()Z
com.android.exchange.adapter.ContactsSyncAdapter.isSyncable()Z
com.android.exchange.EasAccountService.runPingLoop()V
com.android.exchange.ExchangeService.canSyncEmail(Landroid/accounts/Account;)Z
com.android.exchange.ExchangeService.isMailboxSyncable(Lcom/android/emailcommon/provider/Account;I)Z
com.android.settings.accounts.AccountSyncSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.accounts.AccountSyncSettings.setFeedsState()V
com.android.settings.accounts.ManageAccountsSettings.onSyncStateUpdated()V
com.android.settings.accounts.ManageAccountsSettings.requestOrCancelSyncForAccounts(Z)V
com.android.email.activity.setup.AccountSettingsFragment.access$800(Lcom/android/email/activity/setup/AccountSettingsFragment;)V
com.android.email.activity.setup.AccountSettingsFragment.onStart()V
com.android.email.service.MailService.refreshSyncReports()V
com.android.email.service.MailService.setupSyncReports(J)V
com.android.exchange.adapter.AbstractSyncAdapter.isSyncable()Z
com.android.exchange.EasAccountService.sync()V
com.android.exchange.ExchangeService.checkMailboxes()J
com.android.settings.accounts.AccountSyncSettings.onSyncStateUpdated()V
com.android.settings.accounts.AccountPreferenceBase.onSyncStateUpdated()V
com.android.settings.accounts.ManageAccountsSettings.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.accounts.ManageAccountsSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask.onPostExecute([Ljava/lang/Object;)V
com.android.email.service.MailService.access$700(Lcom/android/email/service/MailService;)V
com.android.email.service.MailService.updateAccountReport(JI)Lcom/android/email/service/MailService$AccountSyncReport;
com.android.email.service.MailService.reschedule(Landroid/app/AlarmManager;)V
com.android.email.service.MailService.restoreSyncReports(Landroid/content/Intent;)V
com.android.exchange.EasSyncService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasAccountService.run()V
com.android.exchange.ExchangeService.run()V
com.android.settings.accounts.AccountSyncSettings.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.accounts.AccountPreferenceBase$1$1.run()V
com.android.settings.accounts.AccountPreferenceBase.onResume()V
com.android.settings.accounts.SyncSettings.onSyncStateUpdated()V
com.android.settings.accounts.AccountPreferenceBase.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.accounts.AccountPreferenceBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.SettingsPreferenceFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask.onPostExecute(Ljava/lang/Object;)V
com.android.email.service.MailService$5.run()V
com.android.email.service.MailService.access$300(Lcom/android/email/service/MailService;JI)Lcom/android/email/service/MailService$AccountSyncReport;
com.android.email.service.MailService.access$400(Lcom/android/email/service/MailService;Landroid/app/AlarmManager;)V
com.android.email.service.MailService.access$000(Lcom/android/email/service/MailService;Landroid/content/Intent;)V
com.android.exchange.EasAccountService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasOutboxService.sync(Lcom/android/exchange/adapter/AbstractSyncAdapter;)V
com.android.exchange.EasSyncService.run()V
com.android.settings.accounts.AccountSyncSettings.onResume()V
com.android.settings.accounts.ManageAccountsSettings.onResume()V
com.android.settings.accounts.SyncSettings.onResume()V
com.android.settings.SettingsPreferenceFragment.onResume()V
com.android.settings.accounts.SyncSettings.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.settings.accounts.AccountSyncSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.deviceinfo.Memory.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.users.UserDetailsSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.users.UserSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.wifi.p2p.WifiP2pSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.wifi.WifiSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.service.MailService$2.run()V
com.android.email.service.MailService$ControllerResults.serviceCheckMailCallback(Lcom/android/emailcommon/mail/MessagingException;JJIJ)V
com.android.email.service.MailService$ControllerResults.updateMailboxCallback(Lcom/android/emailcommon/mail/MessagingException;JJIILjava/util/ArrayList;)V
com.android.settings.AccessibilitySettings.onResume()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onResume()V
com.android.settings.bluetooth.DeviceProfilesSettings.onResume()V
com.android.settings.DateTimeSettings.onResume()V
com.android.settings.deviceinfo.Memory.onResume()V
com.android.settings.deviceinfo.UsbSettings.onResume()V
com.android.settings.DisplaySettings.onResume()V
com.android.settings.DockSettings.onResume()V
com.android.settings.DreamSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onResume()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onResume()V
com.android.settings.inputmethod.SpellCheckersSettings.onResume()V
com.android.settings.inputmethod.UserDictionaryList.onResume()V
com.android.settings.LocationSettings.onResume()V
com.android.settings.PrivacySettings.onResume()V
com.android.settings.SecuritySettings.onResume()V
com.android.settings.SoundSettings.onResume()V
com.android.settings.users.UserDetailsSettings.onResume()V
com.android.settings.users.UserSettings.onResume()V
com.android.settings.vpn2.VpnSettings.onResume()V
com.android.settings.wifi.AdvancedWifiSettings.onResume()V
com.android.settings.wifi.p2p.WifiP2pSettings.onResume()V
com.android.settings.wifi.WifiSettings.onResume()V
com.android.settings.WirelessSettings.onResume()V
com.android.email.Controller$Result.serviceCheckMailCallback(Lcom/android/emailcommon/mail/MessagingException;JJIJ)V
com.android.email.Controller$Result.updateMailboxCallback(Lcom/android/emailcommon/mail/MessagingException;JJIILjava/util/ArrayList;)V
com.android.settings.bluetooth.BluetoothSettings.onResume()V
com.android.settings.bluetooth.DevicePickerFragment.onResume()V
com.android.email.activity.MailboxFinder$ControllerResults.serviceCheckMailCallback(Lcom/android/emailcommon/mail/MessagingException;JJIJ)V
com.android.email.activity.MessageViewFragmentBase$ControllerResults.serviceCheckMailCallback(Lcom/android/emailcommon/mail/MessagingException;JJIJ)V
com.android.email.Controller$LegacyListener.checkMailFinished(Landroid/content/Context;JJJ)V
com.android.email.Controller$LegacyListener.checkMailStarted(Landroid/content/Context;JJ)V
com.android.email.ControllerResultUiThreadWrapper$4.run()V
com.android.email.activity.MailboxFinder$ControllerResults.updateMailboxCallback(Lcom/android/emailcommon/mail/MessagingException;JJIILjava/util/ArrayList;)V
com.android.email.activity.MessageViewFragmentBase$ControllerResults.updateMailboxCallback(Lcom/android/emailcommon/mail/MessagingException;JJIILjava/util/ArrayList;)V
com.android.email.Controller$LegacyListener.synchronizeMailboxFailed(JJLjava/lang/Exception;)V
com.android.email.Controller$LegacyListener.synchronizeMailboxFinished(JJIILjava/util/ArrayList;)V
com.android.email.Controller$LegacyListener.synchronizeMailboxStarted(JJ)V
com.android.email.ControllerResultUiThreadWrapper$5.run()V
com.android.email.Controller$ServiceCallback.syncMailboxStatus(JII)V
com.android.email.Controller.serviceCheckMail(JJJ)V
com.android.email.MessagingListener.checkMailFinished(Landroid/content/Context;JJJ)V
com.android.email.MessagingListener.checkMailStarted(Landroid/content/Context;JJ)V
com.android.email.MessagingListener.synchronizeMailboxFailed(JJLjava/lang/Exception;)V
com.android.email.MessagingListener.synchronizeMailboxFinished(JJIILjava/util/ArrayList;)V
com.android.email.MessagingListener.synchronizeMailboxStarted(JJ)V
com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy.syncMailboxStatus(JII)V
com.android.emailcommon.service.IEmailServiceCallback$Stub.syncMailboxStatus(JII)V
com.android.email.service.MailService.syncOneAccount(Lcom/android/email/Controller;JI)Z
com.android.email.GroupMessagingListener.checkMailFinished(Landroid/content/Context;JJJ)V
com.android.email.GroupMessagingListener.checkMailStarted(Landroid/content/Context;JJ)V
com.android.email.GroupMessagingListener.synchronizeMailboxFailed(JJLjava/lang/Exception;)V
com.android.email.GroupMessagingListener.synchronizeMailboxFinished(JJIILjava/util/ArrayList;)V
com.android.email.GroupMessagingListener.synchronizeMailboxStarted(JJ)V
com.android.emailcommon.service.IEmailServiceCallback$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IEmailServiceCallback.syncMailboxStatus(JII)V
com.android.exchange.ExchangeService$2.startSync(JZ)V
com.android.exchange.ExchangeService.requestSync(Lcom/android/emailcommon/provider/Mailbox;ILcom/android/exchange/Request;)V
com.android.email.service.MailService.access$200(Lcom/android/email/service/MailService;Lcom/android/email/Controller;JI)Z
com.android.email.MessagingController$13.run()V
com.android.email.MessagingController.checkMail(JJLcom/android/email/MessagingListener;)V
com.android.email.MessagingController.synchronizeMailboxSynchronous(Lcom/android/emailcommon/provider/Account;Lcom/android/emailcommon/provider/Mailbox;)V
com.android.email.MessagingController.searchMailbox(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.email.MessagingController.searchMailboxImpl(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.email.MessagingController.synchronizeMailbox(Lcom/android/emailcommon/provider/Account;Lcom/android/emailcommon/provider/Mailbox;Lcom/android/email/MessagingListener;)V
com.android.email.Controller$15.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.email.Controller$ServiceCallback.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.email.service.AttachmentDownloadService$ServiceCallback.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.exchange.ExchangeService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.exchange.adapter.Search.searchMessages(Landroid/content/Context;JLcom/android/emailcommon/service/SearchParams;J)I
com.android.exchange.EasSyncService.setupService()Z
com.android.exchange.ExchangeService$1$4.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.startSync(JZ)V
com.android.emailcommon.service.IEmailService$Stub.startSync(JZ)V
com.android.exchange.ExchangeService.startManualSync(JILcom/android/exchange/Request;)V
com.android.email.Controller$2.run()V
com.android.email.MessagingController.access$400(Lcom/android/email/MessagingController;Lcom/android/emailcommon/provider/Account;Lcom/android/emailcommon/provider/Mailbox;)V
com.android.email.Controller.searchMessages(JLcom/android/emailcommon/service/SearchParams;)I
com.android.email.Controller$3.run()V
com.android.email.Controller$7.run()V
com.android.exchange.ExchangeService$2.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.exchange.EasAccountService.setupService()Z
com.android.exchange.EasOutboxService.setupService()Z
com.android.exchange.ExchangeService$ServiceCallbackWrapper.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.emailcommon.service.IEmailService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.IEmailService.startSync(JZ)V
com.android.exchange.EasAccountService.parsePingResult(Ljava/io/InputStream;Landroid/content/ContentResolver;Ljava/util/HashMap;)I
com.android.exchange.ExchangeService.sendMessageRequest(Lcom/android/exchange/Request;)V
com.android.exchange.ExchangeService.serviceRequest(JJI)V
com.android.email.MessagingController$2.run()V
com.android.email.activity.MessagesAdapter$SearchCursorLoader.loadInBackground()Landroid/database/Cursor;
com.android.email.Controller.searchMore(J)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.emailcommon.service.IEmailService$Stub.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.exchange.EasOutboxService.run()V
com.android.exchange.ExchangeService$1.broadcastCallback(Lcom/android/exchange/ExchangeService$ServiceCallbackWrapper;)V
com.android.email.Controller$ControllerService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.exchange.ExchangeService$2.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.emailcommon.service.EmailServiceProxy$2.run()V
com.android.email.Controller.sendPendingMessages(J)V
com.android.email.Controller.updateMailbox(JJZ)V
com.android.exchange.ExchangeService$2.loadAttachment(JZ)V
com.android.exchange.ExchangeService$2.sendMeetingResponse(JI)V
com.android.exchange.ExchangeService.serviceRequest(JI)V
com.android.email.activity.MessagesAdapter$MessagesCursorLoader.loadInBackground()Landroid/database/Cursor;
com.android.email.activity.MessagesAdapter$SearchCursorLoader.loadInBackground()Ljava/lang/Object;
com.android.emailcommon.service.IEmailService.searchMessages(JLcom/android/emailcommon/service/SearchParams;J)I
com.android.exchange.ExchangeService$1.loadAttachmentStatus(JJII)V
com.android.exchange.ExchangeService$1.sendMessageStatus(JLjava/lang/String;II)V
com.android.exchange.ExchangeService$1.syncMailboxListStatus(JII)V
com.android.exchange.ExchangeService$1.syncMailboxStatus(JII)V
com.android.emailcommon.service.ServiceProxy$ProxyTask.run()V
com.android.email.Controller.sendMessage(Lcom/android/emailcommon/provider/EmailContent$Message;)V
com.android.email.RefreshManager.sendPendingMessages(J)Z
com.android.email.service.MailService$4.run()V
com.android.email.RefreshManager.refreshMessageList(JJZZ)Z
com.android.email.service.PopImapSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.loadAttachment(JZ)V
com.android.emailcommon.service.IEmailService$Stub.loadAttachment(JZ)V
com.android.emailcommon.service.IEmailService$Stub$Proxy.sendMeetingResponse(JI)V
com.android.emailcommon.service.IEmailService$Stub.sendMeetingResponse(JI)V
com.android.exchange.CalendarSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAdapterService.performSync(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAlarmReceiver.handleReceive(Landroid/content/Context;)V
com.android.email.activity.MessagesAdapter$MessagesCursorLoader.loadInBackground()Ljava/lang/Object;
com.android.emailcommon.service.EmailServiceProxy$13.run()V
com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy.loadAttachmentStatus(JJII)V
com.android.emailcommon.service.IEmailServiceCallback$Stub.loadAttachmentStatus(JJII)V
com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy.sendMessageStatus(JLjava/lang/String;II)V
com.android.emailcommon.service.IEmailServiceCallback$Stub.sendMessageStatus(JLjava/lang/String;II)V
com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy.syncMailboxListStatus(JII)V
com.android.emailcommon.service.IEmailServiceCallback$Stub.syncMailboxListStatus(JII)V
com.android.emailcommon.service.ServiceProxy$ProxyRunnable.run()V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Long;
com.android.email.activity.MessageListFragment.onSendPendingMessages()V
com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl.performAction(J)V
com.android.email.RefreshManager.loadMoreMessages(JJ)Z
com.android.email.RefreshManager.refreshMessageList(JJZ)Z
com.android.email.service.PopImapSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.emailcommon.service.IEmailService.loadAttachment(JZ)V
com.android.emailcommon.service.IEmailService.sendMeetingResponse(JI)V
com.android.exchange.CalendarSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAdapterService.access$000(Landroid/content/Context;Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAlarmReceiver.access$000(Lcom/android/exchange/EmailSyncAlarmReceiver;Landroid/content/Context;)V
com.android.emailcommon.service.IEmailServiceCallback.loadAttachmentStatus(JJII)V
com.android.email.Controller$ControllerService$1.loadAttachment(JZ)V
com.android.email.Controller$LegacyListener.loadAttachmentFailed(JJJLcom/android/emailcommon/mail/MessagingException;Z)V
com.android.email.Controller$LegacyListener.loadAttachmentFinished(JJJ)V
com.android.email.Controller$LegacyListener.loadAttachmentStarted(JJJZ)V
com.android.emailcommon.service.IEmailServiceCallback.sendMessageStatus(JLjava/lang/String;II)V
com.android.emailcommon.service.IEmailServiceCallback.syncMailboxListStatus(JII)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.emailcommon.utility.Utility$ForEachAccount.performAction(J)V
com.android.email.activity.MessageListFragment.onLoadMoreMessages()V
com.android.email.activity.MessageListFragment.onRefresh(Z)V
com.android.email.activity.setup.MailboxSettings$2.onSuccess(Ljava/lang/Void;)V
com.android.email.activity.UIControllerOnePane.onRefresh()V
com.android.email.activity.UIControllerTwoPane$RefreshTask.onSuccess(Ljava/lang/Boolean;)V
com.android.email.service.PopImapSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.emailcommon.service.EmailServiceProxy$1.run()V
com.android.emailcommon.service.EmailServiceProxy$10.run()V
com.android.email.Controller.sendMeetingResponse(JI)V
com.android.exchange.CalendarSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAdapterService$SyncAdapterImpl.onPerformSync(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V
com.android.exchange.EmailSyncAlarmReceiver$1.run()V
com.android.email.Controller$15$1.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.exchange.adapter.AttachmentLoader.doProgressCallback(I)V
com.android.exchange.adapter.AttachmentLoader.doStatusCallback(I)V
com.android.exchange.ExchangeService$1$1.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.email.MessagingListener.loadAttachmentFailed(JJJLcom/android/emailcommon/mail/MessagingException;Z)V
com.android.email.MessagingListener.loadAttachmentFinished(JJJ)V
com.android.email.MessagingListener.loadAttachmentStarted(JJJZ)V
com.android.exchange.EasOutboxService.sendCallback(JLjava/lang/String;I)V
com.android.exchange.ExchangeService$1$2.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.exchange.ExchangeService$1$3.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.exchange.ExchangeService.reloadFolderListFailed(J)V
com.android.emailcommon.utility.EmailAsyncTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.Utility$ForEachAccount.onPostExecute([Ljava/lang/Long;)V
com.android.email.activity.MessageListFragment.doFooterClick()V
com.android.email.activity.MessageListFragment.autoRefreshStaleMailbox()V
com.android.email.activity.setup.MailboxSettings$2.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.UIControllerBase.onRefresh()V
com.android.email.activity.UIControllerTwoPane$RefreshTask.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragment.onRespondToInvite(II)V
com.android.email.Controller$ServiceCallbackWrapper.call(Lcom/android/emailcommon/service/IEmailServiceCallback;)V
com.android.exchange.adapter.AttachmentLoader.loadAttachment()V
com.android.exchange.adapter.AttachmentLoader.readChunked(Ljava/io/InputStream;Ljava/io/OutputStream;I)V
com.android.exchange.adapter.AttachmentLoader.finishLoadAttachment()V
com.android.email.GroupMessagingListener.loadAttachmentFailed(JJJLcom/android/emailcommon/mail/MessagingException;Z)V
com.android.email.GroupMessagingListener.loadAttachmentFinished(JJJ)V
com.android.email.GroupMessagingListener.loadAttachmentStarted(JJJZ)V
com.android.exchange.EasOutboxService.sendMessage(Ljava/io/File;J)I
com.android.exchange.EasOutboxService.sendFailed(JI)V
com.android.exchange.ExchangeService.reloadFolderList(Landroid/content/Context;JZ)V
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.Utility$ForEachAccount.onPostExecute(Ljava/lang/Object;)V
com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl.onPostExecute([Ljava/lang/Long;)V
com.android.email.activity.MessageListFragment.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.email.activity.MessageListFragment.access$2200(Lcom/android/email/activity/MessageListFragment;)V
com.android.emailcommon.utility.EmailAsyncTask.onSuccess(Ljava/lang/Object;)V
com.android.email.activity.UIControllerBase.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.MessageViewFragment.onClick(Landroid/view/View;)V
com.android.email.Controller$15.broadcastCallback(Lcom/android/email/Controller$ServiceCallbackWrapper;)V
com.android.exchange.adapter.ItemOperationsParser.parseProperties()V
com.android.email.MessagingController$11.run()V
com.android.email.MessagingController.loadAttachment(JJJJLcom/android/email/MessagingListener;Z)V
com.android.exchange.adapter.AbstractSyncParser.parse()Z
com.android.exchange.ExchangeService$2.updateFolderList(J)V
com.android.emailcommon.utility.EmailAsyncTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl.onPostExecute(Ljava/lang/Object;)V
com.android.email.activity.MessageListFragment$4.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.emailcommon.utility.EmailAsyncTask$1.onSuccess(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$InnerTask.onPostExecute(Ljava/lang/Object;)V
com.android.email.activity.EmailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.UIControllerOnePane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.UIControllerTwoPane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.MessageViewFragmentBase.onClick(Landroid/view/View;)V
com.android.email.Controller$15.loadAttachmentStatus(JJII)V
com.android.exchange.adapter.ItemOperationsParser.parseFetch()V
com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser.parse()Z
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.parse()Z
com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser.parse()Z
com.android.exchange.adapter.Parser.parse()Z
com.android.emailcommon.service.IEmailService$Stub$Proxy.updateFolderList(J)V
com.android.emailcommon.service.IEmailService$Stub.updateFolderList(J)V
com.android.email.activity.MailboxFinder$FindMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$6.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$QuickResponseChecker.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageFileView$LoadFilenameTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageList$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment$MessageOpenTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.AccountSetupNames$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$2.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.UIControllerTwoPane$RefreshTask.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.emailcommon.utility.EmailAsyncTask$1.callDoInBackgroundForTest([Ljava/lang/Object;)Ljava/lang/Object;
com.android.email.activity.MessageListFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.UIControllerSearchTwoPane.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.email.activity.MessageFileViewFragment.onClick(Landroid/view/View;)V
com.android.exchange.adapter.ItemOperationsParser.parseResponse()V
com.android.exchange.adapter.CalendarSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.ContactsSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.exchange.adapter.EmailSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.emailcommon.service.IEmailService.updateFolderList(J)V
com.android.email.activity.MailboxFinder$FindMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MailboxListFragment$FindParentMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$6.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$LoadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$QuickResponseChecker.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageCompose$SendOrSaveMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageFileView$LoadFilenameTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageList$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageListFragment$MessageOpenTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageOrderManager$LoadMessageListTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadBodyTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$LoadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.AccountSetupNames$2.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$2.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.setup.MailboxSettings$LoadMailboxTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.email.activity.UIControllerTwoPane$RefreshTask.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.emailcommon.utility.EmailAsyncTask$1.callOnPostExecuteForTest(Ljava/lang/Object;)V
com.android.exchange.adapter.ItemOperationsParser.parse()Z
com.android.exchange.adapter.AbstractSyncAdapter.parse(Ljava/io/InputStream;)Z
com.android.emailcommon.service.EmailServiceProxy$6.run()V
com.android.email.Controller$1.run()V
android.content.ContentService.getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;
android.content.IContentService$Stub$Proxy.getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;
android.content.IContentService$Stub.getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;
android.content.IContentService.getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;
android.content.ContentResolver.getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;
android.app.ContextImpl$ApplicationContentResolver.getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;
android.test.mock.MockContentResolver.getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;
android.content.ContentService.getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
android.content.IContentService$Stub$Proxy.getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
android.content.IContentService$Stub.getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
android.content.IContentService.getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
android.content.ContentResolver.getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
com.android.contacts.model.AccountTypeManagerImpl.loadAccountsInBackground()V
com.android.providers.contacts.ContactsProvider2.isContactsAccount(Landroid/accounts/Account;)Z
android.app.ContextImpl$ApplicationContentResolver.getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl.startSync(Landroid/content/ISyncContext;Ljava/lang/String;Landroid/accounts/Account;Landroid/os/Bundle;)V
android.test.mock.MockContentResolver.getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
com.android.browser.provider.BrowserProvider2$DatabaseHelper.enableSync(Landroid/database/sqlite/SQLiteDatabase;)V
com.android.calendar.CalendarSettingsActivity.onBuildHeaders(Ljava/util/List;)V
com.android.settings.accounts.AccountSyncSettings.updateAccountCheckboxes([Landroid/accounts/Account;)V
com.android.contacts.model.AccountTypeManagerImpl.onAccountsUpdated([Landroid/accounts/Account;)V
com.android.contacts.model.AccountTypeManagerImpl.<init>(Landroid/content/Context;)V
com.android.contacts.model.AccountTypeManagerImpl.onStatusChanged(I)V
com.android.contacts.model.AccountTypeManagerImpl.processBroadcastIntent(Landroid/content/Intent;)V
com.android.providers.contacts.ContactsProvider2.updateContactsAccountCount([Landroid/accounts/Account;)V
android.content.ISyncAdapter$Stub$Proxy.startSync(Landroid/content/ISyncContext;Ljava/lang/String;Landroid/accounts/Account;Landroid/os/Bundle;)V
android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl.initialize(Landroid/accounts/Account;Ljava/lang/String;)V
android.content.ISyncAdapter$Stub.startSync(Landroid/content/ISyncContext;Ljava/lang/String;Landroid/accounts/Account;Landroid/os/Bundle;)V
com.android.browser.provider.BrowserProvider2$DatabaseHelper.onCreate(Landroid/database/sqlite/SQLiteDatabase;)V
com.android.browser.provider.BrowserProvider2$DatabaseHelper.onUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V
com.android.contacts.model.AccountTypeManager.createAccountTypeManager(Landroid/content/Context;)Lcom/android/contacts/model/AccountTypeManager;
com.android.providers.contacts.ContactsProvider2.updateAccountsInBackground([Landroid/accounts/Account;)Z
com.android.providers.contacts.ContactsProvider2.performBackgroundTask(ILjava/lang/Object;)V
android.content.ISyncAdapter$Stub$Proxy.initialize(Landroid/accounts/Account;Ljava/lang/String;)V
android.content.ISyncAdapter$Stub.initialize(Landroid/accounts/Account;Ljava/lang/String;)V
android.content.ISyncAdapter$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.content.ISyncAdapter.startSync(Landroid/content/ISyncContext;Ljava/lang/String;Landroid/accounts/Account;Landroid/os/Bundle;)V
com.android.contacts.ContactsApplication.getSystemService(Ljava/lang/String;)Ljava/lang/Object;
com.android.contacts.model.AccountTypeManager.getInstance(Landroid/content/Context;)Lcom/android/contacts/model/AccountTypeManager;
com.android.contacts.model.AccountTypeManagerImpl.createAccountTypeManager(Landroid/content/Context;)Lcom/android/contacts/model/AccountTypeManager;
android.content.ISyncAdapter.initialize(Landroid/accounts/Account;Ljava/lang/String;)V
android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.content.SyncManager$SyncHandler.runBoundToSyncAdapter(Landroid/content/SyncManager$ActiveSyncContext;Landroid/content/ISyncAdapter;)V
com.android.development.SyncAdapterDriver.startSync(Ljava/lang/String;)V
com.android.contacts.activities.ConfirmAddDetailActivity.addEditableRawContact(Landroid/content/Context;Lcom/android/contacts/model/EntityDeltaList;)Lcom/android/contacts/model/EntityDelta;
com.android.contacts.activities.ConfirmAddDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactEditorAccountsChangedActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupDetailActivity.onPrepareOptionsMenu(Landroid/view/Menu;)Z
com.android.contacts.ContactLoader$Result.getFirstWritableRawContactId(Landroid/content/Context;)J
com.android.contacts.ContactLoader.loadInvitableAccountTypes(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.ContactLoader.postViewNotificationToSyncAdapter()V
com.android.contacts.ContactsApplication$DelayedInitializer.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.ContactSaveService.saveContact(Landroid/content/Intent;)V
com.android.contacts.ContactsUtils.areContactWritableAccountsAvailable(Landroid/content/Context;)Z
com.android.contacts.ContactsUtils.areGroupWritableAccountsAvailable(Landroid/content/Context;)Z
com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix.isApplicable()Z
com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix.execute()V
com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix.execute()V
com.android.contacts.detail.ContactDetailFragment.buildEntries()V
com.android.contacts.detail.ContactDetailUpdatesFragment.getAccountTypeForStreamItemEntry(Lcom/android/contacts/util/StreamItemEntry;)Lcom/android/contacts/model/AccountType;
com.android.contacts.detail.PhotoSelectionHandler.getDeltaForAttachingPhotoToContact()Lcom/android/contacts/model/EntityDeltaList;
com.android.contacts.detail.StreamItemAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.editor.AggregationSuggestionView.canEditSuggestedContact()Z
com.android.contacts.editor.ContactEditorFragment.hasPendingChanges()Z
com.android.contacts.editor.ContactEditorFragment.isContactWritable()Z
com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator.compare(Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/EntityDelta;)I
com.android.contacts.editor.ContactEditorFragment.bindEditors()V
com.android.contacts.editor.ContactEditorFragment.createContact(Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.ContactEditorFragment.createContact()V
com.android.contacts.editor.ContactEditorFragment.rebindEditorsForNewContact(Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.ContactEditorFragment.setData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.setIntentExtras(Landroid/os/Bundle;)V
com.android.contacts.editor.ContactEditorUtils.<init>(Landroid/content/Context;)V
com.android.contacts.group.GroupBrowseListAdapter.<init>(Landroid/content/Context;)V
com.android.contacts.group.GroupDetailDisplayUtils.bindGroupSourceView(Landroid/content/Context;Landroid/view/View;Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.group.GroupDetailFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.group.GroupDetailFragment.updateAccountType(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.group.GroupEditorFragment.getAccountType()Lcom/android/contacts/model/AccountType;
com.android.contacts.group.GroupEditorFragment.selectAccountAndCreateGroup()V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.interactions.ImportExportDialogFragment.handleImportRequest(I)Z
com.android.contacts.interactions.PhoneNumberInteraction$PhoneItemAdapter.<init>(Landroid/content/Context;Ljava/util/List;Lcom/android/contacts/interactions/PhoneNumberInteraction$InteractionType;)V
com.android.contacts.list.AccountFilterActivity$FilterListAdapter.<init>(Landroid/content/Context;Ljava/util/List;Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.list.AccountFilterActivity.loadAccountFilters(Landroid/content/Context;)Ljava/util/List;
com.android.contacts.list.ContactListFilterControllerImpl.filterAccountExists()Z
com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader.loadInBackground()Lcom/android/contacts/list/CustomContactListFilterActivity$AccountSet;
com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter.<init>(Landroid/content/Context;)V
com.android.contacts.model.AccountTypeManagerImpl.getInstance(Landroid/content/Context;)Lcom/android/contacts/model/AccountTypeManager;
com.android.contacts.model.EntityDelta.getRawContactAccountType(Landroid/content/Context;)Lcom/android/contacts/model/AccountType;
com.android.contacts.quickcontact.QuickContactActivity.bindData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.socialwidget.SocialWidgetProvider.setDisplayNameAndSnippet(Landroid/content/Context;Landroid/widget/RemoteViews;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/util/List;Landroid/app/PendingIntent;)V
com.android.contacts.SplitAggregateView.<init>(Landroid/content/Context;Landroid/net/Uri;)V
com.android.contacts.util.AccountSelectionUtil.getSelectAccountDialog(Landroid/content/Context;ILandroid/content/DialogInterface$OnClickListener;Landroid/content/DialogInterface$OnCancelListener;)Landroid/app/Dialog;
com.android.contacts.util.AccountsListAdapter.<init>(Landroid/content/Context;Lcom/android/contacts/util/AccountsListAdapter$AccountListFilter;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.vcard.ImportVCardActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.NfcImportVCardActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.SelectAccountActivity.onCreate(Landroid/os/Bundle;)V
android.content.SyncManager$ActiveSyncContext.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
com.android.development.SyncAdapterDriver.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.activities.ConfirmAddDetailActivity.setEntityDeltaList(Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.activities.TransactionSafeActivity.onPrepareOptionsMenu(Landroid/view/Menu;)Z
com.android.contacts.ContactsActivity.onPrepareOptionsMenu(Landroid/view/Menu;)Z
com.android.contacts.ContactLoader$Result.isWritableContact(Landroid/content/Context;)Z
com.android.contacts.ContactLoader.loadInBackground()Lcom/android/contacts/ContactLoader$Result;
com.android.contacts.ContactLoader.deliverResult(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.ContactsApplication$DelayedInitializer.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactSaveService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.areContactWritableAccountsAvailable()Z
com.android.contacts.activities.PeopleActivity.areGroupWritableAccountsAvailable()Z
com.android.contacts.group.GroupBrowseListFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.group.GroupBrowseListFragment.bindGroupList()V
com.android.contacts.detail.ContactDetailFragment$QuickFix.isApplicable()Z
com.android.contacts.detail.ContactDetailFragment$QuickFix.execute()V
com.android.contacts.detail.ContactDetailFragment.bindData()V
com.android.contacts.detail.ContactDetailUpdatesFragment.access$000(Lcom/android/contacts/detail/ContactDetailUpdatesFragment;Lcom/android/contacts/util/StreamItemEntry;)Lcom/android/contacts/model/AccountType;
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.getDeltaForAttachingPhotoToContact()Lcom/android/contacts/model/EntityDeltaList;
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.getDeltaForAttachingPhotoToContact()Lcom/android/contacts/model/EntityDeltaList;
com.android.contacts.editor.AggregationSuggestionView.handleItemClickEvent()Z
com.android.contacts.editor.ContactEditorFragment.doJoinContactAction()Z
com.android.contacts.editor.ContactEditorFragment.revert()Z
com.android.contacts.editor.ContactEditorFragment.save(I)Z
com.android.contacts.editor.ContactEditorFragment.showJoinAggregateActivity(Landroid/net/Uri;)V
com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I
com.android.contacts.editor.ContactEditorFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.editor.ContactEditorFragment.access$2100(Lcom/android/contacts/editor/ContactEditorFragment;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForExistingContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.ContactEditorFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.contacts.editor.ContactEditorFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.selectAccountAndCreateContact()V
com.android.contacts.editor.ContactEditorFragment.access$500(Lcom/android/contacts/editor/ContactEditorFragment;Lcom/android/contacts/model/EntityDelta;Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.ContactEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorUtils.getInstance(Landroid/content/Context;)Lcom/android/contacts/editor/ContactEditorUtils;
com.android.contacts.group.GroupDetailFragment.bindGroupMetaData(Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment.isGroupMembershipEditable()Z
com.android.contacts.group.GroupEditorFragment.setupEditorForAccount()V
com.android.contacts.group.GroupEditorFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.contacts.interactions.ContactDeletionInteraction.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.interactions.ImportExportDialogFragment.access$000(Lcom/android/contacts/interactions/ImportExportDialogFragment;I)Z
com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment.onCreateDialog(Landroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.list.AccountFilterActivity$MyLoaderCallbacks.onLoadFinished(Landroid/content/Loader;Ljava/util/List;)V
com.android.contacts.list.AccountFilterActivity.access$100(Landroid/content/Context;)Ljava/util/List;
com.android.contacts.list.ContactListFilterControllerImpl.checkFilterValidity(Z)V
com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.list.CustomContactListFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.AttachPhotoActivity.saveContact(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.model.EntityDeltaList.indexOfFirstWritableRawContact(Landroid/content/Context;)I
com.android.contacts.quickcontact.QuickContactActivity.access$700(Lcom/android/contacts/quickcontact/QuickContactActivity;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.socialwidget.SocialWidgetProvider.bindRemoteViews(Landroid/content/Context;ILandroid/appwidget/AppWidgetManager;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.util.AccountSelectionUtil.getSelectAccountDialog(Landroid/content/Context;ILandroid/content/DialogInterface$OnClickListener;)Landroid/app/Dialog;
com.android.contacts.util.AccountSelectionUtil.getSelectAccountDialog(Landroid/content/Context;I)Landroid/app/Dialog;
com.android.contacts.vcard.ImportVCardActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.vcard.SelectAccountActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.editor.ContactEditorFragment$3.onClick(Landroid/view/View;)V
com.android.contacts.util.AccountsListAdapter.<init>(Landroid/content/Context;Lcom/android/contacts/util/AccountsListAdapter$AccountListFilter;)V
com.android.contacts.activities.TransactionSafeActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.ContactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity.access$300(Lcom/android/contacts/activities/ConfirmAddDetailActivity;Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.detail.ContactDetailFragment$ViewAdapter.getHeaderEntryView(Landroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.detail.ContactDetailTabCarousel.loadData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.ContactLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.ContactLoader.deliverResult(Ljava/lang/Object;)V
com.android.contacts.ContactLoader.onStartLoading()V
com.android.contacts.activities.PeopleActivity.updateViewConfiguration(Z)V
com.android.contacts.activities.PeopleActivity.access$300(Lcom/android/contacts/activities/PeopleActivity;)Z
com.android.contacts.activities.PeopleActivity.onPrepareOptionsMenu(Landroid/view/Menu;)Z
com.android.contacts.activities.PeopleActivity.showEmptyStateForTab(I)V
com.android.contacts.activities.PeopleActivity.updateFragmentsVisibility()V
com.android.contacts.group.GroupBrowseListFragment.access$400(Lcom/android/contacts/group/GroupBrowseListFragment;)V
com.android.contacts.detail.ContactDetailFragment.configureQuickFix()V
com.android.contacts.detail.ContactDetailFragment$3.onClick(Landroid/view/View;)V
com.android.contacts.detail.ContactDetailFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
com.android.contacts.detail.ContactDetailFragment.setData(Landroid/net/Uri;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.ContactDetailUpdatesFragment$1.onClick(Landroid/view/View;)V
com.android.contacts.detail.ContactDetailUpdatesFragment$2.onClick(Landroid/view/View;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.ContactEditorFragment$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.ContactEditorFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.ContactEditorActivity.onBackPressed()V
com.android.contacts.editor.ContactEditorFragment.doJoinSuggestedContact([J)V
com.android.contacts.editor.ContactEditorFragment.doSaveAction()V
com.android.contacts.editor.ContactEditorFragment.onSplitContactConfirmed()V
com.android.contacts.editor.ContactEditorFragment.onStop()V
com.android.contacts.editor.ContactEditorFragment.onSaveCompleted(ZIZLandroid/net/Uri;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onRemovePictureChosen()V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.ContactEditorFragment.bindEditorsForNewContact(Lcom/android/contacts/model/AccountWithDataSet;Lcom/android/contacts/model/AccountType;)V
com.android.contacts.editor.ContactEditorFragment$3$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.ContactEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.activities.TransactionSafeActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.editor.ContactEditorFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.group.GroupDetailFragment.access$400(Lcom/android/contacts/group/GroupDetailFragment;Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment.onDoneClicked()V
com.android.contacts.group.GroupEditorFragment.bindGroupMetaData(Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment.onAccountChosen(Lcom/android/contacts/model/AccountWithDataSet;Landroid/os/Bundle;)V
com.android.contacts.interactions.ImportExportDialogFragment$2.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.list.AccountFilterActivity$MyLoaderCallbacks.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.AccountFilterActivity$FilterLoader.loadInBackground()Ljava/util/List;
com.android.contacts.list.ContactListFilterControllerImpl.<init>(Landroid/content/Context;)V
com.android.contacts.list.ContactListFilterController.checkFilterValidity(Z)V
com.android.contacts.activities.AttachPhotoActivity.access$000(Lcom/android/contacts/activities/AttachPhotoActivity;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.PhotoSelectionHandler.getWritableEntityIndex()I
com.android.contacts.model.EntityDeltaList.getFirstWritableRawContact(Landroid/content/Context;)Lcom/android/contacts/model/EntityDelta;
com.android.contacts.quickcontact.QuickContactActivity$5.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.socialwidget.SocialWidgetProvider.access$000(Landroid/content/Context;ILandroid/appwidget/AppWidgetManager;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.TransactionSafeActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.ContactsActivity.onCreateDialog(ILandroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.editor.SelectAccountDialogFragment.onCreateDialog(Landroid/os/Bundle;)Landroid/app/Dialog;
com.android.contacts.activities.DialtactsActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.AttachPhotoActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ContactSelectionActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupBrowserActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupDetailActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.GroupEditorActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.JoinContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.NonPhoneActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.PeopleActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ShowOrCreateActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.CallContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.list.AccountFilterActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.test.FragmentTestActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.onPostExecute(Lcom/android/contacts/model/EntityDeltaList;)V
com.android.contacts.detail.ContactDetailFragment$ViewAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.detail.ContactDetailLayoutController.showContactWithUpdates(Z)V
com.android.contacts.detail.ContactDetailLayoutController.showEmptyState()V
com.android.contacts.activities.PeopleActivity.onProviderStatusChange()V
com.android.contacts.activities.PeopleActivity.onResume()V
com.android.contacts.activities.PeopleActivity$TabPagerListener.onPageSelected(I)V
com.android.contacts.activities.PeopleActivity.access$200(Lcom/android/contacts/activities/PeopleActivity;I)V
com.android.contacts.activities.PeopleActivity.onAction(I)V
com.android.contacts.activities.PeopleActivity.onSelectedTabChanged()V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.detail.ContactDetailFragment.showEmptyState()V
com.android.contacts.detail.ContactDetailLayoutController.showContactWithoutUpdates()V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onPhotoSelected(Landroid/graphics/Bitmap;)V
com.android.contacts.activities.TransactionSafeActivity.onBackPressed()V
com.android.contacts.ContactsActivity.onBackPressed()V
com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.activities.ContactEditorActivity$1.onClick(Landroid/view/View;)V
com.android.contacts.editor.SplitContactConfirmationDialogFragment$Listener.onSplitContactConfirmed()V
com.android.contacts.editor.ContactEditorFragment.onJoinCompleted(Landroid/net/Uri;)V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onRemovePictureChosen()V
com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener.onUseAsPrimaryChosen()V
com.android.contacts.activities.GroupEditorActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.ContactsActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.group.GroupDetailFragment$2.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.activities.GroupEditorActivity$1.onClick(Landroid/view/View;)V
com.android.contacts.group.GroupEditorFragment.access$600(Lcom/android/contacts/group/GroupEditorFragment;Landroid/database/Cursor;)V
com.android.contacts.editor.SelectAccountDialogFragment$Listener.onAccountChosen(Lcom/android/contacts/model/AccountWithDataSet;Landroid/os/Bundle;)V
com.android.contacts.list.AccountFilterActivity$FilterLoader.loadInBackground()Ljava/lang/Object;
com.android.contacts.list.ContactListFilterController.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.activities.PeopleActivity.onNewIntent(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onStart()V
com.android.contacts.model.AccountTypeManagerImpl$1.run()V
com.android.contacts.activities.AttachPhotoActivity$1.onContactLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.getWritableEntityIndex()I
com.android.contacts.detail.PhotoSelectionHandler.getWritableEntityId()J
com.android.contacts.detail.PhotoSelectionHandler.onClick(Landroid/view/View;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.getWritableEntityIndex()I
com.android.contacts.quickcontact.QuickContactActivity$5.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.socialwidget.SocialWidgetProvider$1.onLoadComplete(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.detail.ContactDetailLayoutController.initialize(Landroid/os/Bundle;)V
com.android.contacts.detail.ContactDetailLayoutController.setContactData(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener.onDetailsLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.list.ProviderStatusWatcher$ProviderStatusListener.onProviderStatusChange()V
com.android.contacts.activities.TransactionSafeActivity.onResume()V
com.android.contacts.ContactsActivity.onResume()V
com.android.contacts.activities.ActionBarAdapter$Listener.onAction(I)V
com.android.contacts.activities.ActionBarAdapter$Listener.onSelectedTabChanged()V
com.android.contacts.group.GroupBrowseListFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.detail.PhotoSelectionHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.activities.DialtactsActivity.onBackPressed()V
com.android.contacts.activities.GroupEditorActivity.onBackPressed()V
com.android.contacts.activities.PeopleActivity.onBackPressed()V
com.android.contacts.editor.SplitContactConfirmationDialogFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onRemovePictureChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onRemovePictureChosen()V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener.onUseAsPrimaryChosen()V
com.android.contacts.editor.PhotoActionPopup$Listener.onUseAsPrimaryChosen()V
com.android.contacts.activities.AttachPhotoActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ContactSelectionActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupBrowserActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupDetailActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.GroupEditorActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.JoinContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.NonPhoneActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.PeopleActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.activities.ShowOrCreateActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.CallContactActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService$Listener.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.AccountFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.list.CustomContactListFilterActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.test.FragmentTestActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.ImportVCardActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.vcard.SelectAccountActivity.onServiceCompleted(Landroid/content/Intent;)V
com.android.contacts.group.GroupDetailFragment$2.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.group.GroupEditorFragment$2.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.editor.SelectAccountDialogFragment.onAccountSelected(Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.list.ContactListFilterControllerImpl.createContactListFilterController(Landroid/content/Context;)Lcom/android/contacts/list/ContactListFilterController;
com.android.contacts.activities.TransactionSafeActivity.onStart()V
com.android.contacts.ContactsActivity.onStart()V
com.android.contacts.activities.AttachPhotoActivity$Listener.onContactLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.getWritableEntityId()J
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.getWritableEntityId()J
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.onClick(Landroid/view/View;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.onClick(Landroid/view/View;)V
com.android.contacts.socialwidget.SocialWidgetProvider$1.onLoadComplete(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.detail.ContactDetailLayoutController.<init>(Landroid/app/Activity;Landroid/os/Bundle;Landroid/app/FragmentManager;Lcom/android/contacts/widget/TransitionAnimationView;Landroid/view/View;Lcom/android/contacts/detail/ContactDetailFragment$Listener;)V
com.android.contacts.activities.ContactDetailActivity$3$1.run()V
com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener$1.run()V
com.android.contacts.detail.ContactLoaderFragment$ContactLoaderFragmentListener.onDetailsLoaded(Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.list.ProviderStatusWatcher.notifyListeners()V
com.android.contacts.activities.AttachPhotoActivity.onResume()V
com.android.contacts.activities.ContactDetailActivity.onResume()V
com.android.contacts.activities.ContactEditorActivity.onResume()V
com.android.contacts.activities.ContactSelectionActivity.onResume()V
com.android.contacts.activities.DialtactsActivity.onResume()V
com.android.contacts.activities.GroupBrowserActivity.onResume()V
com.android.contacts.activities.GroupDetailActivity.onResume()V
com.android.contacts.activities.GroupEditorActivity.onResume()V
com.android.contacts.activities.JoinContactActivity.onResume()V
com.android.contacts.activities.NonPhoneActivity.onResume()V
com.android.contacts.activities.ShowOrCreateActivity.onResume()V
com.android.contacts.CallContactActivity.onResume()V
com.android.contacts.list.AccountFilterActivity.onResume()V
com.android.contacts.list.CustomContactListFilterActivity.onResume()V
com.android.contacts.test.FragmentTestActivity.onResume()V
com.android.contacts.vcard.ImportVCardActivity.onResume()V
com.android.contacts.vcard.SelectAccountActivity.onResume()V
com.android.contacts.activities.ActionBarAdapter.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.ActionBarAdapter.update()V
com.android.contacts.activities.ActionBarAdapter.setCurrentTab(IZ)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler.handlePhotoActivityResult(IILandroid/content/Intent;)Z
com.android.contacts.activities.PeopleActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onFinishAction()V
com.android.contacts.editor.PhotoActionPopup$1.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.ContactSaveService.deliverCallbackOnUiThread(Landroid/content/Intent;)V
com.android.contacts.group.GroupEditorFragment$2.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.editor.SelectAccountDialogFragment.access$000(Lcom/android/contacts/editor/SelectAccountDialogFragment;Lcom/android/contacts/model/AccountWithDataSet;)V
com.android.contacts.activities.AttachPhotoActivity.onStart()V
com.android.contacts.activities.ContactDetailActivity.onStart()V
com.android.contacts.activities.ContactEditorActivity.onStart()V
com.android.contacts.activities.ContactSelectionActivity.onStart()V
com.android.contacts.activities.DialtactsActivity.onStart()V
com.android.contacts.activities.GroupBrowserActivity.onStart()V
com.android.contacts.activities.GroupDetailActivity.onStart()V
com.android.contacts.activities.GroupEditorActivity.onStart()V
com.android.contacts.activities.JoinContactActivity.onStart()V
com.android.contacts.activities.NonPhoneActivity.onStart()V
com.android.contacts.activities.ShowOrCreateActivity.onStart()V
com.android.contacts.CallContactActivity.onStart()V
com.android.contacts.list.AccountFilterActivity.onStart()V
com.android.contacts.test.FragmentTestActivity.onStart()V
com.android.contacts.vcard.ImportVCardActivity.onStart()V
com.android.contacts.vcard.SelectAccountActivity.onStart()V
com.android.contacts.list.CustomContactListFilterActivity.onStart()V
com.android.contacts.activities.AttachPhotoActivity$2.onLoadComplete(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler.access$1600(Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler;)J
com.android.contacts.activities.PhotoSelectionActivity$4.onAnimationEnd(Landroid/animation/Animator;)V
com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener.onRequest(I)V
com.android.contacts.activities.PeopleActivity.createViewsAndFragments(Landroid/os/Bundle;)V
com.android.contacts.detail.ContactLoaderFragment$1.onLoadFinished(Landroid/content/Loader;Lcom/android/contacts/ContactLoader$Result;)V
com.android.contacts.detail.ContactLoaderFragment.loadUri(Landroid/net/Uri;)V
com.android.contacts.list.ProviderStatusWatcher.access$600(Lcom/android/contacts/list/ProviderStatusWatcher;)V
com.android.contacts.activities.ActionBarAdapter.initialize(Landroid/os/Bundle;Lcom/android/contacts/list/ContactsRequest;)V
com.android.contacts.activities.ActionBarAdapter.setSearchMode(Z)V
com.android.contacts.activities.ActionBarAdapter.setCurrentTab(I)V
com.android.contacts.activities.TransactionSafeActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactsActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.OnContactBrowserActionListener.onFinishAction()V
com.android.contacts.ContactSaveService$2.run()V
com.android.contacts.editor.SelectAccountDialogFragment$1.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.activities.AttachPhotoActivity$2.onLoadComplete(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.editor.Editor$EditorListener.onRequest(I)V
com.android.contacts.detail.ContactLoaderFragment$1.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.activities.ContactDetailActivity.onAttachFragment(Landroid/app/Fragment;)V
com.android.contacts.activities.PeopleActivity.setupContactDetailFragment(Landroid/net/Uri;)V
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.onPostExecute(Ljava/lang/Boolean;)V
com.android.contacts.activities.ActionBarAdapter.onClose()Z
com.android.contacts.activities.PeopleActivity.onSearchRequested()Z
com.android.contacts.activities.PeopleActivity.configureFragments(Z)V
com.android.contacts.activities.ActionBarAdapter$MyNavigationListener.onNavigationItemSelected(IJ)Z
com.android.contacts.activities.ActionBarAdapter$MyTabListener.onTabSelected(Landroid/app/ActionBar$Tab;Landroid/app/FragmentTransaction;)V
com.android.contacts.activities.ContactSelectionActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.GroupDetailActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.activities.JoinContactActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.AccountFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.CustomContactListFilterActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.list.ContactBrowseListFragment.finish()V
com.android.contacts.editor.LabeledEditorView.notifyEditorListener()V
com.android.contacts.editor.LabeledEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.PhotoEditorView$1.onClick(Landroid/view/View;)V
com.android.contacts.activities.TransactionSafeActivity.onAttachFragment(Landroid/app/Fragment;)V
com.android.contacts.ContactsActivity.onAttachFragment(Landroid/app/Fragment;)V
com.android.contacts.activities.PeopleActivity.access$700(Lcom/android/contacts/activities/PeopleActivity;Landroid/net/Uri;)V
com.android.contacts.list.ProviderStatusWatcher$LoaderTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.activities.TransactionSafeActivity.onSearchRequested()Z
com.android.contacts.ContactsActivity.onSearchRequested()Z
com.android.contacts.list.ContactEntryListFragment.finish()V
com.android.contacts.list.DefaultContactBrowseListFragment.finish()V
com.android.contacts.editor.EventFieldEditorView.notifyEditorListener()V
com.android.contacts.editor.LabeledEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.PhoneticNameEditorView.notifyEditorListener()V
com.android.contacts.editor.StructuredNameEditorView.notifyEditorListener()V
com.android.contacts.editor.TextFieldsEditorView.notifyEditorListener()V
com.android.contacts.editor.EventFieldEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.PhoneticNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onSelectionChange()V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onViewContactAction(Landroid/net/Uri;)V
com.android.contacts.list.ContactEntryListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.finish()V
com.android.contacts.list.EmailAddressPickerFragment.finish()V
com.android.contacts.list.JoinContactListFragment.finish()V
com.android.contacts.list.PhoneNumberPickerFragment.finish()V
com.android.contacts.list.PostalAddressPickerFragment.finish()V
com.android.contacts.editor.Editor.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.EventFieldEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.StructuredNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.StructuredNameEditorView.onOptionalFieldVisibilityChange()V
com.android.contacts.editor.TextFieldsEditorView$1.onClick(Landroid/view/View;)V
com.android.contacts.list.OnContactBrowserActionListener.onSelectionChange()V
com.android.contacts.list.OnContactBrowserActionListener.onViewContactAction(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onClose()V
com.android.contacts.list.ContactPickerFragment.onClose()V
com.android.contacts.list.DefaultContactBrowseListFragment.onClose()V
com.android.contacts.list.EmailAddressPickerFragment.onClose()V
com.android.contacts.list.JoinContactListFragment.onClose()V
com.android.contacts.list.PhoneNumberPickerFragment.onClose()V
com.android.contacts.list.PostalAddressPickerFragment.onClose()V
com.android.contacts.editor.EventFieldEditorView$2.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.EventFieldEditorView.clearAllFields()V
com.android.contacts.editor.EventFieldEditorView.onLabelRebuilt()V
com.android.contacts.editor.PhoneticNameEditorView.onFieldChanged(Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.editor.TextFieldsEditorView$2.afterTextChanged(Landroid/text/Editable;)V
com.android.contacts.list.ContactBrowseListFragment.checkSelection()V
com.android.contacts.list.ContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener.onDateSet(Lcom/android/contacts/datepicker/DatePicker;III)V
com.android.contacts.editor.LabeledEditorView.onLabelRebuilt()V
com.android.contacts.list.ContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.checkSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.viewContact(Landroid/net/Uri;)V
com.android.contacts.datepicker.DatePickerDialog.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView$3.onClick(Landroid/content/DialogInterface;I)V
com.android.contacts.editor.LabeledEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.PhoneticNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.StructuredNameEditorView.onLabelRebuilt()V
com.android.contacts.editor.TextFieldsEditorView.onLabelRebuilt()V
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.refreshSelectedContactUri()V
com.android.contacts.list.DefaultContactBrowseListFragment.onContactUriQueryFinished(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(IJ)V
com.android.contacts.editor.EventFieldEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.LabeledEditorView$1.onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.editor.PhoneticNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.StructuredNameEditorView.onTypeSelectionChange(I)V
com.android.contacts.editor.TextFieldsEditorView.onTypeSelectionChange(I)V
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.onPostExecute(Ljava/lang/Object;)V
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.DefaultContactBrowseListFragment.refreshSelectedContactUri()V
com.android.contacts.list.ContactEntryListFragment.onItemClick(IJ)V
com.android.contacts.list.ContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.ContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.ContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.ContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;ZZZZ)V
com.android.contacts.list.ContactEntryListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactEntryListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.DefaultContactBrowseListFragment.reloadDataAndSetSelectedUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.restoreSelectedUri(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.selectDefaultContact()V
com.android.contacts.list.DefaultContactBrowseListFragment.selectFirstFoundContactAfterDelay()V
com.android.contacts.list.DefaultContactBrowseListFragment.setSelectedContactUri(Landroid/net/Uri;)V
com.android.contacts.list.ContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.DefaultContactBrowseListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.JoinContactListFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.list.ContactPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.EmailAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.JoinContactListFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PostalAddressPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.PhoneNumberPickerFragment.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactEntryListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.ContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactEntryListFragment.setSearchMode(Z)V
com.android.contacts.list.DefaultContactBrowseListFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragmentForRequest()V
com.android.contacts.list.ContactPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.EmailAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.JoinContactListFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PhoneNumberPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.PostalAddressPickerFragment.onAttach(Landroid/app/Activity;)V
com.android.contacts.list.DefaultContactBrowseListFragment.setFilter(Lcom/android/contacts/list/ContactListFilter;)V
com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.list.ContactEntryListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setSearchMode(Z)V
com.android.contacts.list.EmailAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.list.JoinContactListFragment.setSearchMode(Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setSearchMode(Z)V
com.android.contacts.list.PostalAddressPickerFragment.setSearchMode(Z)V
com.android.contacts.activities.PeopleActivity.configureContactListFragment()V
com.android.contacts.activities.PeopleActivity.onContactListFilterChanged()V
com.android.contacts.list.OnContactBrowserActionListener.onInvalidSelection()V
com.android.contacts.activities.ContactSelectionActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.list.ContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.EmailAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.JoinContactListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PhoneNumberPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.PostalAddressPickerFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.list.ContactListFilterController$ContactListFilterListener.onContactListFilterChanged()V
com.android.contacts.list.ContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.list.DefaultContactBrowseListFragment.setQueryString(Ljava/lang/String;Z)V
com.android.contacts.activities.JoinContactActivity.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.activities.DialtactsActivity$7.onQueryTextChange(Ljava/lang/String;)Z
com.android.contacts.list.ContactListFilterControllerImpl.notifyContactListFilterChanged()V
com.android.contacts.list.DefaultContactBrowseListFragment.notifyInvalidSelection()V
com.android.contacts.activities.PeopleActivity.setQueryTextToFragment(Ljava/lang/String;)V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;ZZ)V
com.android.contacts.list.ContactListFilterControllerImpl.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactListFilterControllerImpl.selectCustomFilter()V
com.android.contacts.list.ContactListFilterController.setContactListFilter(Lcom/android/contacts/list/ContactListFilter;Z)V
com.android.contacts.list.ContactListFilterController.selectCustomFilter()V
com.android.contacts.util.AccountFilterUtil.handleAccountFilterResult(Lcom/android/contacts/list/ContactListFilterController;ILandroid/content/Intent;)V
com.android.contacts.list.DefaultContactBrowseListFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneFavoriteFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.PhoneNumberPickerFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.contacts.list.ContactEntryListFragment.onActivityResult(IILandroid/content/Intent;)V
android.content.ContentService.getMasterSyncAutomatically()Z
android.content.IContentService$Stub$Proxy.getMasterSyncAutomatically()Z
android.content.IContentService$Stub.getMasterSyncAutomatically()Z
android.content.IContentService.getMasterSyncAutomatically()Z
android.content.ContentResolver.getMasterSyncAutomatically()Z
android.app.ContextImpl$ApplicationContentResolver.getMasterSyncAutomatically()Z
android.test.mock.MockContentResolver.getMasterSyncAutomatically()Z
com.android.email.EmailConnectivityManager.isAutoSyncAllowed()Z
com.android.settings.accounts.SyncSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DataUsageSummary.onPrepareOptionsMenu(Landroid/view/Menu;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.getActualState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.requestStateChange(Landroid/content/Context;Z)V
com.android.email.service.AttachmentDownloadService$DownloadSet.processQueue()V
com.android.settings.accounts.AccountPreferenceBase.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.SettingsPreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.getActualState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.onActualStateChange(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.requestStateChange(Landroid/content/Context;Z)V
com.android.email.service.AttachmentDownloadService$DownloadSet.onWatchdogAlarm()V
com.android.email.service.AttachmentDownloadService.run()V
com.android.settings.accounts.AccountSyncSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DeviceInfoSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.net.DataUsageMeteredSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.TetherSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.WirelessSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.onActualStateChange(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.setCurrentState(Landroid/content/Context;I)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.toggleState(Landroid/content/Context;)V
com.android.email.service.AttachmentDownloadService$DownloadSet.access$800(Lcom/android/email/service/AttachmentDownloadService$DownloadSet;)V
com.android.settings.bluetooth.BluetoothSettings.onActivityCreated(Landroid/os/Bundle;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.setCurrentState(Landroid/content/Context;I)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.setCurrentState(Landroid/content/Context;I)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.setCurrentState(Landroid/content/Context;I)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.setCurrentState(Landroid/content/Context;I)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.toggleState(Landroid/content/Context;)V
com.android.email.service.AttachmentDownloadService.watchdogAlarm()V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider.updateButtons(Landroid/widget/RemoteViews;Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.onActualStateChange(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.onPostExecute(Ljava/lang/Boolean;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.onActualStateChange(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.onPostExecute(Ljava/lang/Boolean;)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.onActualStateChange(Landroid/content/Context;Landroid/content/Intent;)V
com.android.email.service.AttachmentDownloadService$Watchdog$1.run()V
com.android.settings.widget.SettingsAppWidgetProvider.buildUpdate(Landroid/content/Context;)Landroid/widget/RemoteViews;
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.onPostExecute(Ljava/lang/Object;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.onPostExecute(Ljava/lang/Object;)V
com.android.settings.widget.SettingsAppWidgetProvider.onUpdate(Landroid/content/Context;Landroid/appwidget/AppWidgetManager;[I)V
com.android.settings.widget.SettingsAppWidgetProvider.updateWidget(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver.onChange(Z)V
com.android.email.activity.setup.AccountSetupNames.access$100()Landroid/net/Uri;
com.android.email.activity.setup.AccountSetupNames$2.doInBackground([Ljava/lang/Void;)Ljava/lang/String;
com.android.email.activity.setup.AccountSetupNames$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.commit()V
com.android.exchange.adapter.AbstractSyncParser.commit()V
com.android.vcard.VCardEntry$PhoneData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$EntryElement.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$InsertOperationConstrutor.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z
com.android.vcard.VCardEntry$EntryElementIterator.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z
com.android.vcard.VCardEntry.iterateAllData(Lcom/android/vcard/VCardEntry$EntryElementIterator;)V
com.android.vcard.VCardEntry.iterateOneList(Ljava/util/List;Lcom/android/vcard/VCardEntry$EntryElementIterator;)V
com.android.vcard.VCardEntry.isIgnorable()Z
com.android.vcard.VCardEntry.toString()Ljava/lang/String;
com.android.vcard.VCardEntry.constructInsertOperations(Landroid/content/ContentResolver;Ljava/util/ArrayList;)Ljava/util/ArrayList;
com.android.contacts.vcard.NotificationImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.vcard.VCardEntryCommitter.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.VCardImportExportListener.onImportParsed(Lcom/android/contacts/vcard/ImportRequest;ILcom/android/vcard/VCardEntry;II)V
com.android.vcard.VCardEntryHandler.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.contacts.vcard.ImportProcessor.onEntryCreated(Lcom/android/vcard/VCardEntry;)V
com.android.vcard.VCardEntryConstructor.onEntryEnded()V
com.android.vcard.VCardInterpreter.onEntryEnded()V
com.android.vcard.VCardParserImpl_V21.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.handleNest()V
com.android.vcard.VCardParserImpl_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V40.parseOneVCard()Z
com.android.vcard.VCardParserImpl_V21.parseItem()Z
com.android.vcard.VCardParserImpl_V30.handleNest()V
com.android.vcard.VCardParserImpl_V40.handleNest()V
com.android.vcard.VCardParserImpl_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V21.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V21.parseItems()V
com.android.vcard.VCardParserImpl_V30.parseItem()Z
com.android.vcard.VCardParserImpl_V40.parseItem()Z
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V30.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser_V40.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParser.parseOne(Ljava/io/InputStream;)V
com.android.vcard.VCardParserImpl_V30.parseItems()V
com.android.vcard.VCardParserImpl_V40.parseItems()V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.constructImportRequest([BLandroid/net/Uri;Ljava/lang/String;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.NfcImportVCardActivity.createImportRequest()Lcom/android/contacts/vcard/ImportRequest;
com.android.vcard.VCardParser.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread.run()V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Lcom/android/contacts/vcard/VCardService;)Lcom/android/contacts/vcard/ImportRequest;
com.android.contacts.vcard.ImportProcessor.readOneVCard(Ljava/io/InputStream;ILjava/lang/String;Lcom/android/vcard/VCardInterpreter;[I)Z
com.android.vcard.VCardParser_V21.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V30.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.vcard.VCardParser_V40.parse(Ljava/io/InputStream;Lcom/android/vcard/VCardInterpreter;)V
com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
com.android.contacts.vcard.NfcImportVCardActivity$ImportTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.vcard.ImportProcessor.runInternal()V
com.android.contacts.vcard.ImportProcessor.run()V
com.android.contacts.vcard.ProcessorBase.run()V
com.android.contacts.list.LegacyContactListAdapter.getPersonUri(I)Landroid/net/Uri;
com.android.contacts.list.ContactPickerFragment.onItemClick(IJ)V
com.android.providers.contacts.ContactsProvider2.insertStatusUpdate(Landroid/content/ContentValues;)J
com.android.providers.contacts.ContactsProvider2.insertInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.providers.contacts.LegacyApiSupport.updateExtensions(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.update(IJLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.updateAll(Landroid/net/Uri;ILandroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.LegacyApiSupport.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.updateInTransaction(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.LegacyApiSupport.updateContactMethods(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.updatePhoto(JLandroid/content/ContentValues;)I
com.android.providers.contacts.LegacyApiSupport.delete(Landroid/net/Uri;IJ)I
com.android.providers.contacts.LegacyApiSupport.delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.deleteInTransaction(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I
com.android.vcard.VCardEntry$EmailData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.dialog.ClearFrequentsDialog$1$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.dialog.ClearFrequentsDialog$1$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.mms.data.Contact.getPhoneUri()Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.launchMultiplePhonePicker()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.launchMultiplePhonePicker()V
com.android.mms.ui.ComposeMessageActivity.onClick(Landroid/view/View;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onClick(Landroid/view/View;)V
com.android.contacts.ContactSaveService.removeMembersFromGroup(Landroid/content/ContentResolver;[JJ)V
com.android.contacts.ContactSaveService.updateGroup(Landroid/content/Intent;)V
com.android.contacts.util.ContactLoaderUtils.ensureIsContactUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.doInBackground([Ljava/lang/Void;)Landroid/net/Uri;
com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.providers.contacts.LegacyApiSupport.updateGroups(JLandroid/content/ContentValues;)I
android.provider.ContactsContract$SyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.vcard.VCardEntry$PhotoData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.model.EntityDelta.buildDiff(Ljava/util/ArrayList;)V
com.android.contacts.model.EntityDeltaList.buildDiff()Ljava/util/ArrayList;
com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask.doInBackground([Lcom/android/contacts/model/EntityDeltaList;)Ljava/lang/Integer;
com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.vcard.VCardEntry$ImData.constructInsertOperation(Ljava/util/List;I)V
com.android.contacts.list.CustomContactListFilterActivity$GroupDelta.buildDiff()Landroid/content/ContentProviderOperation;
com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay.buildDiff(Ljava/util/ArrayList;)V
com.android.contacts.list.CustomContactListFilterActivity$AccountSet.buildDiff()Ljava/util/ArrayList;
com.android.contacts.list.CustomContactListFilterActivity.doSaveAction()V
com.android.contacts.list.CustomContactListFilterActivity.onClick(Landroid/view/View;)V
android.provider.ContactsContract$SyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
com.android.providers.contacts.LegacyApiSupport.findFirstDataRow(JLjava/lang/String;)Landroid/net/Uri;
com.android.providers.contacts.LegacyApiSupport.updatePeople(JLandroid/content/ContentValues;)I
com.android.contacts.ContactSaveService.renameGroup(Landroid/content/Intent;)V
android.provider.ContactsContract$Contacts.getLookupUri(JLjava/lang/String;)Landroid/net/Uri;
android.provider.ContactsContract$Contacts.getLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.provider.ContactsContract$Data.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.provider.ContactsContract$RawContacts.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;
android.widget.QuickContactBadge$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.calendar.event.AttendeesView$PresenceQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.activities.ShowOrCreateActivity.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.lookupContactFromUri(Landroid/net/Uri;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.group.GroupEditorFragment$Member.<init>(JLjava/lang/String;JLjava/lang/String;Ljava/lang/String;)V
com.android.contacts.list.ContactEntryListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.buildUri()Ljava/lang/String;
com.android.calendar.EventInfoFragment.showContactInfo(Lcom/android/calendar/CalendarEventModel$Attendee;Landroid/graphics/Rect;)V
com.android.email.activity.ContactStatusLoader.getContactInfo(Landroid/content/Context;Ljava/lang/String;)Lcom/android/email/activity/ContactStatusLoader$Result;
com.android.contacts.ContactSaveService.createRawContact(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.joinContacts(Landroid/content/Intent;)V
com.android.contacts.quickcontact.QuickContactActivity.onCreate(Landroid/os/Bundle;)V
com.android.contacts.vcard.NfcImportVCardActivity.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.vcard.NotificationImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.queryContactInfoForPhoneNumber(Ljava/lang/String;Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.calllog.ContactInfoHelper.queryContactInfoForSipAddress(Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.group.GroupEditorFragment$3.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.group.GroupEditorFragment$4.onLoadFinished(Landroid/content/Loader;Landroid/database/Cursor;)V
com.android.contacts.list.ContactEntryListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.ContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.EmailAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyContactListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.LegacyPostalAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.PostalAddressListAdapter.getContactUri(ILandroid/database/Cursor;II)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.ContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getContactUri(ILandroid/database/Cursor;)Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.asList([Ljava/lang/String;)Ljava/util/ArrayList;
com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion.addColumnValue(Ljava/util/ArrayList;Ljava/lang/String;)V
com.android.email.activity.ContactStatusLoader.loadInBackground()Lcom/android/email/activity/ContactStatusLoader$Result;
com.android.email.NotificationController.getSenderPhoto(Lcom/android/emailcommon/provider/EmailContent$Message;)Landroid/graphics/Bitmap;
com.android.contacts.vcard.VCardImportExportListener.onImportFinished(Lcom/android/contacts/vcard/ImportRequest;ILandroid/net/Uri;)V
com.android.contacts.util.NotifyingAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.contacts.calllog.ContactInfoHelper.lookupNumber(Ljava/lang/String;Ljava/lang/String;)Lcom/android/contacts/calllog/ContactInfo;
com.android.contacts.group.GroupEditorFragment$3.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.group.GroupEditorFragment$4.onLoadFinished(Landroid/content/Loader;Ljava/lang/Object;)V
com.android.contacts.list.ContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.DefaultContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.EmailAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.JoinContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyContactListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyPhoneNumberListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.LegacyPostalAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.PhoneNumberListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.PostalAddressListAdapter.bindQuickContact(Lcom/android/contacts/list/ContactListItemView;ILandroid/database/Cursor;IIII)V
com.android.contacts.list.DefaultContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getContactUri(I)Landroid/net/Uri;
com.android.contacts.list.DefaultContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.contacts.list.JoinContactListAdapter.getFirstContactUri()Landroid/net/Uri;
com.android.providers.contacts.GlobalSearchSupport.addSearchSuggestionsBasedOnFilter(Landroid/database/MatrixCursor;Landroid/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.email.activity.ContactStatusLoader.loadInBackground()Ljava/lang/Object;
com.android.email.NotificationController.createNewMessageNotification(JJLandroid/database/Cursor;JII)Landroid/app/Notification;
com.android.contacts.CallDetailActivity.getPhoneCallDetailsForUri(Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.queryContactInfo(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.contacts.list.DefaultContactListAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.PhoneNumberListAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.contacts.list.JoinContactListFragment.onItemClick(IJ)V
com.android.providers.contacts.GlobalSearchSupport.handleSearchShortcutRefresh(Landroid/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.GlobalSearchSupport.handleSearchSuggestionsQuery(Landroid/database/sqlite/SQLiteDatabase;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.email.NotificationController$MessageContentObserver.onChange(Z)V
com.android.contacts.CallDetailActivity.access$300(Lcom/android/contacts/CallDetailActivity;Landroid/net/Uri;)Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter.access$300(Lcom/android/contacts/calllog/CallLogAdapter;Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;)Z
com.android.common.widget.CompositeCursorAdapter.bindView(Landroid/view/View;ILandroid/database/Cursor;I)V
com.android.providers.contacts.ContactsProvider2.queryLocal(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;JLandroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.LegacyApiSupport.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Void;)[Lcom/android/contacts/PhoneCallDetails;
com.android.contacts.calllog.CallLogAdapter$QueryThread.run()V
com.android.common.widget.CompositeCursorAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.providers.contacts.ContactsProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.updateData(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.contacts.ContactsProvider2.insertSettings(Landroid/net/Uri;Landroid/content/ContentValues;)J
com.android.providers.contacts.LegacyApiSupport.getContactMethodType(Landroid/net/Uri;)Ljava/lang/String;
com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.calllog.CallLogAdapter.startRequestProcessing()V
com.android.calendar.EmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.contacts.BaseEmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.widget.CompositeCursorAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.DefaultContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.EmailAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.JoinContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyContactListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPostalAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneNumberListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PostalAddressListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.IndexerListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.EmailAddressAdapter.getView(ILandroid/database/Cursor;ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.providers.contacts.ContactsProvider2.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
com.android.providers.contacts.ContactsProvider2.cleanupPhotoStore()V
com.android.providers.contacts.LegacyApiSupport.getType(Landroid/net/Uri;)Ljava/lang/String;
com.android.contacts.calllog.CallLogAdapter.access$100(Lcom/android/contacts/calllog/CallLogAdapter;)V
com.android.contacts.calllog.CallLogAdapter.enqueueRequest(Ljava/lang/String;Ljava/lang/String;Lcom/android/contacts/calllog/ContactInfo;Z)V
com.android.calendar.EmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.common.contacts.BaseEmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactEntryListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.ContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.DefaultContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.EmailAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.JoinContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyContactListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPhoneNumberListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.LegacyPostalAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PhoneNumberListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.list.PostalAddressListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.IndexerListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.email.EmailAddressAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.providers.contacts.ContactsProvider2.deleteData(Ljava/lang/String;[Ljava/lang/String;Z)I
com.android.providers.contacts.ContactsProvider2.deleteData(J[Ljava/lang/String;)I
com.android.providers.contacts.ContactsProvider2.getType(Landroid/net/Uri;)Ljava/lang/String;
com.android.contacts.calllog.CallLogAdapter.bindView(Landroid/view/View;Landroid/database/Cursor;I)V
com.android.contacts.list.PhoneFavoriteMergedAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.calllog.CallLogAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.contacts.calllog.CallLogAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.contacts.calllog.CallLogAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;IZ)V
com.android.common.widget.GroupingListAdapter.bindStandAloneView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.common.widget.GroupingListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.calllog.CallLogAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.providers.contacts.LegacyApiSupport.updateOrganizations(JLandroid/content/ContentValues;)I
com.android.contacts.model.EntityDeltaList.buildSplitContactDiff(Ljava/util/ArrayList;II[I)V
com.android.contacts.model.EntityDeltaList.buildSplitContactDiff(Ljava/util/ArrayList;[I)V
android.provider.Contacts$People.addToGroup(Landroid/content/ContentResolver;JJ)Landroid/net/Uri;
android.provider.Contacts$People.addToGroup(Landroid/content/ContentResolver;JLjava/lang/String;)Landroid/net/Uri;
android.provider.Contacts$People.addToMyContactsGroup(Landroid/content/ContentResolver;J)Landroid/net/Uri;
android.provider.Contacts$People.createPersonInMyContactsGroup(Landroid/content/ContentResolver;Landroid/content/ContentValues;)Landroid/net/Uri;
com.android.phone.SimContacts.actuallyImportOneSimContact(Landroid/database/Cursor;Landroid/content/ContentResolver;Landroid/accounts/Account;)V
com.android.phone.SimContacts.access$100(Landroid/database/Cursor;Landroid/content/ContentResolver;Landroid/accounts/Account;)V
com.android.phone.SimContacts.importOneSimContact(I)V
com.android.phone.SimContacts$ImportAllSimContactsThread.run()V
com.android.phone.SimContacts.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.SimContacts.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
com.android.phone.SimContacts.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.phone.ADNList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.exchange.adapter.ContactsSyncAdapter.cleanup()V
com.android.exchange.adapter.AbstractSyncAdapter.cleanup()V
com.android.contacts.model.EntityDeltaList.beginKeepTogether()Landroid/content/ContentProviderOperation$Builder;
android.provider.Contacts$People.markAsContacted(Landroid/content/ContentResolver;J)V
android.provider.CallLog$Calls.addCall(Lcom/android/internal/telephony/CallerInfo;Landroid/content/Context;Ljava/lang/String;IIJI)Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Lcom/android/phone/CallLogAsync$AddCallArgs;)[Landroid/net/Uri;
com.android.phone.CallLogAsync$AddCallTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.list.PostalAddressListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.PostalAddressPickerFragment.onItemClick(IJ)V
com.android.vcard.VCardEntry$AnniversaryData.constructInsertOperation(Ljava/util/List;I)V
android.provider.Contacts$ContactMethods.addPostalLocation(Landroid/content/Context;JDD)V
com.android.contacts.list.LegacyPhoneNumberListAdapter.getPhoneUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberPickerFragment.onItemClick(IJ)V
com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag.getStreamItemPhotoUri()Landroid/net/Uri;
com.android.exchange.adapter.ContactsSyncAdapter.dirtyContactsWithinDirtyGroups()V
com.android.exchange.adapter.ContactsSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.AbstractSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.contacts.ContactSaveService.setSuperPrimary(Landroid/content/Intent;)V
com.android.contacts.group.GroupBrowseListAdapter.getGroupUriFromId(J)Landroid/net/Uri;
com.android.contacts.group.GroupBrowseListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.contacts.group.GroupBrowseListAdapter.getSelectedGroupPosition()I
com.android.contacts.group.GroupBrowseListAdapter.setCursor(Landroid/database/Cursor;)V
com.android.contacts.group.GroupBrowseListFragment.requestSelectionToScreen()V
com.android.vcard.VCardEntry$NameData.constructInsertOperation(Ljava/util/List;I)V
android.provider.ContactsContract$Contacts.markAsContacted(Landroid/content/ContentResolver;J)V
com.android.contacts.list.ProviderStatusWatcher$2.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.contacts.list.ProviderStatusWatcher$2.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.contacts.ContactSaveService.addMembersToGroup(Landroid/content/ContentResolver;[JJ)V
com.android.contacts.ContactSaveService.createGroup(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity.getContactUriForEmail(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getContactUriForEmail(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.addCallAndContactMenuItems(Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addCallAndContactMenuItems(Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$2700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity$10.onCreateContextMenu(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$2700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/view/ContextMenu;Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;Lcom/android/mms/ui/MessageItem;)V
android.provider.ContactsContract$Directory.notifyDirectoryChange(Landroid/content/ContentResolver;)V
com.android.exchange.adapter.ContactsSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.AbstractSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.ContactsSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.AccountSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.EmailSyncAdapter.setSyncKey(Ljava/lang/String;Z)V
com.android.exchange.adapter.AbstractSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.AccountSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.EmailSyncAdapter.getSyncKey()Ljava/lang/String;
com.android.exchange.adapter.EmailSyncAdapter.sendLocalChanges(Lcom/android/exchange/adapter/Serializer;)Z
com.android.exchange.adapter.EmailSyncAdapter.getEstimate(Ljava/lang/String;)I
com.android.exchange.adapter.EmailSyncAdapter.getAutomaticLookback()V
com.android.contacts.detail.ContactLoaderFragment.getPreAuthorizedUri(Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.detail.ContactLoaderFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.ContactSaveService.clearPrimary(Landroid/content/Intent;)V
com.android.contacts.ContactSaveService.buildJoinContactDiff(Ljava/util/ArrayList;JJ)V
com.android.providers.contacts.LegacyApiSupport.updatePhones(JLandroid/content/ContentValues;)I
android.provider.ContactsContract$ProfileSyncState.newSetOperation(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;
com.android.providers.contacts.LegacyApiSupport.updateLegacyPhotoData(JJLandroid/content/ContentValues;)V
com.android.providers.contacts.LegacyApiSupport.updatePhotoByDataId(JLandroid/content/ContentValues;)I
com.android.vcard.VCardEntry$SipData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$NicknameData.constructInsertOperation(Ljava/util/List;I)V
com.android.common.contacts.DataUsageStatUpdater.update(Ljava/util/Collection;Ljava/util/Collection;Ljava/lang/String;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithAddress(Ljava/util/Collection;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithPhoneNumber(Ljava/util/Collection;)Z
com.android.common.contacts.DataUsageStatUpdater.updateWithRfc822Address(Ljava/util/Collection;)Z
com.android.mail.providers.UIProvider.incrementRecipientsTimesContacted(Landroid/content/Context;Ljava/lang/String;)V
com.android.mms.data.WorkingMessage.updateSendStats(Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage.access$800(Lcom/android/mms/data/WorkingMessage;Lcom/android/mms/data/Conversation;)V
com.android.mms.data.WorkingMessage$2.run()V
com.android.mms.data.WorkingMessage$3.run()V
com.android.vcard.VCardEntry$OrganizationData.constructInsertOperation(Ljava/util/List;I)V
com.android.providers.telephony.SmsProvider.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
android.provider.Contacts$Settings.setSetting(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.contacts.list.EmailAddressListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.EmailAddressPickerFragment.onItemClick(IJ)V
com.android.contacts.list.LegacyPostalAddressListAdapter.getContactMethodUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneNumberListAdapter.getDataUri(I)Landroid/net/Uri;
com.android.contacts.list.PhoneFavoriteFragment.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.contacts.GroupMetaDataLoader.ensureIsGroupUri(Landroid/net/Uri;)Landroid/net/Uri;
com.android.contacts.GroupMetaDataLoader.<init>(Landroid/content/Context;Landroid/net/Uri;)V
com.android.contacts.editor.ContactEditorFragment$5.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupDetailFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupEditorFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.editor.ContactEditorFragment$5.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupDetailFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupEditorFragment$2.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.vcard.VCardEntry$AndroidCustomData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$WebsiteData.constructInsertOperation(Ljava/util/List;I)V
com.android.vcard.VCardEntry$BirthdayData.constructInsertOperation(Ljava/util/List;I)V
com.android.phone.ContactsAsyncHelper$ImageTracker.getPhotoUri()Landroid/net/Uri;
com.android.phone.CallCard.updatePhotoForCallState(Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.displayMainCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.phone.CallCard.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.phone.CallCard.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallCard.updateForegroundCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateNoCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateRingingCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener.onImageLoadComplete(ILandroid/graphics/drawable/Drawable;Landroid/graphics/Bitmap;Ljava/lang/Object;)V
com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener.onQueryComplete(ILjava/lang/Object;Lcom/android/internal/telephony/CallerInfo;)V
com.android.phone.CallCard.updateState(Lcom/android/internal/telephony/CallManager;)V
com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
com.android.phone.InCallScreen.updateIncomingCallWidgetHint(II)V
com.android.phone.InCallScreen.updateScreen()V
com.android.phone.InCallScreen.onResume()V
com.android.phone.InCallScreen.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.showPausePromptDialog(Lcom/android/internal/telephony/Connection;Ljava/lang/String;)V
com.android.phone.InCallScreen.requestUpdateBluetoothIndication()V
com.android.phone.InCallScreen.requestCloseOtaFailureNotice(J)V
com.android.phone.InCallScreen.requestCloseSpcErrorNotice(J)V
com.android.phone.InCallScreen.requestRemoveProviderInfoWithDelay()V
com.android.phone.InCallTouchUi.onGrabbedStateChange(Landroid/view/View;I)V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.syncWithPhoneState()Lcom/android/phone/InCallScreen$SyncWithPhoneStateStatus;
com.android.phone.InCallScreen.access$600(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.handleOtaCallEnd()V
com.android.phone.InCallScreen.access$500(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.handlePostOnDialChars(Landroid/os/AsyncResult;C)V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureNotice(I)V
com.android.phone.OtaUtils.otaShowSpcErrorNotice(I)V
com.android.phone.CallCard.updateCallStateWidgets(Lcom/android/internal/telephony/Call;)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.InCallScreen.updateManageConferencePanelIfNecessary()V
com.android.phone.InCallScreen.requestUpdateScreen()V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.PhoneApp.dismissCallScreen()V
com.android.phone.InCallScreen.access$1000(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;C)V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.OtaUtils.otaShowProgramFailure(I)V
com.android.phone.OtaUtils.onOtaProvisionStatusChanged(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowProperScreen()V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.InCallScreen.onBackPressed()V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.updateAfterRadioTechnologyChange()V
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.PhoneApp.updateInCallScreen()V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowSuccessFailure()V
com.android.phone.PhoneApp.handleOtaspEvent(Landroid/os/Message;)V
com.android.phone.InCallScreen.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.access$400(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.PhoneApp.initForNewRadioTechnology()V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.EmergencyCallHelper.cleanup()V
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.DTMFTwelveKeyDialer.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.phone.PhoneApp.access$1100(Lcom/android/phone/PhoneApp;)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.DTMFTwelveKeyDialer.closeDialer(Z)V
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.DTMFTwelveKeyDialer.clearInCallScreenReference()V
com.android.phone.InCallScreen.closeDialpadInternal(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureDialog()V
com.android.phone.OtaUtils.otaShowProgramSuccessDialog()V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onDestroy()V
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.InCallScreen.onOpenCloseDialpad()V
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.vcard.VCardEntry$PostalData.constructInsertOperation(Ljava/util/List;I)V
android.provider.ContactsContract$ProfileSyncState.set(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V
com.android.providers.contacts.LegacyApiSupport.updateSettings(Landroid/content/ContentValues;)I
com.android.mms.data.Contact.getUri()Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.getContactUriForPhoneNumber(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivity.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationList.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationListItem.updateAvatarView()V
com.android.mms.ui.MessageListItem.updateAvatarView(Ljava/lang/String;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getContactUriForPhoneNumber(Ljava/lang/String;)Landroid/net/Uri;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.mms.ui.ConversationListItem.bind(Landroid/content/Context;Lcom/android/mms/data/Conversation;)V
com.android.mms.ui.ConversationListItem.updateFromView()V
com.android.mms.ui.MessageListItem.bindCommonMessage()V
com.android.mms.ui.MessageListItem.bindNotifInd()V
com.android.mms.ui.ConversationListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.ui.ConversationListItem.access$000(Lcom/android/mms/ui/ConversationListItem;)V
com.android.mms.ui.MessageListItem.access$500(Lcom/android/mms/ui/MessageListItem;)V
com.android.mms.ui.MessageListItem.bind(Lcom/android/mms/ui/MessageItem;ZI)V
com.android.mms.ui.ConversationListItem$1.run()V
com.android.mms.ui.MessageListItem$2.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.MessageListAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.mms.ui.MessageItem$PduLoadedCallback.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.util.ItemLoadedCallback.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Lcom/android/mms/util/ThumbnailManager$ImageLoaded;Ljava/lang/Throwable;)V
com.android.mms.util.PduLoaderManager.getPdu(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.PduLoaderManager$PduTask$1.run()V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;ZLcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager$ThumbnailTask$1.run()V
com.android.mms.ui.MmsThumbnailPresenter$1.onItemLoaded(Ljava/lang/Object;Ljava/lang/Throwable;)V
com.android.mms.ui.MessageItem.<init>(Landroid/content/Context;Ljava/lang/String;Landroid/database/Cursor;Lcom/android/mms/ui/MessageListAdapter$ColumnsMap;Ljava/util/regex/Pattern;)V
com.android.mms.util.ThumbnailManager.getThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.util.ThumbnailManager.getVideoThumbnail(Landroid/net/Uri;Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.MessageListAdapter.getCachedMessageItem(Ljava/lang/String;JLandroid/database/Cursor;)Lcom/android/mms/ui/MessageItem;
com.android.mms.model.ImageModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.model.VideoModel.loadThumbnailBitmap(Lcom/android/mms/util/ItemLoadedCallback;)Lcom/android/mms/util/ItemLoadedFuture;
com.android.mms.ui.ComposeMessageActivity.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.data.WorkingMessage.setAttachment(ILandroid/net/Uri;Z)I
com.android.mms.ui.MmsThumbnailPresenter.presentImageThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/ImageModel;)V
com.android.mms.ui.MmsThumbnailPresenter.presentVideoThumbnail(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/VideoModel;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.getMessageItem(Ljava/lang/String;JZ)Lcom/android/mms/ui/MessageItem;
com.android.mms.ui.ComposeMessageActivity$30.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivity.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivity.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.presentFirstSlide(Lcom/android/mms/ui/SlideViewInterface;Lcom/android/mms/model/SlideModel;)V
com.android.mms.ui.MessageUtils$ResizeImageResultCallback.onResizeResult(Lcom/google/android/mms/pdu/PduPart;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAudio(Landroid/net/Uri;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addImage(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addVideo(Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.MmsThumbnailPresenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.MessageUtils$3$1.run()V
com.android.mms.ui.ComposeMessageActivity$32.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5600(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.addAttachment(Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.ComposeMessageActivity$33.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5700(Lcom/android/mms/ui/ComposeMessageActivity;Landroid/net/Uri;Z)V
com.android.mms.ui.Presenter.present(Lcom/android/mms/util/ItemLoadedCallback;)V
com.android.mms.ui.ComposeMessageActivity$34.run()V
com.android.mms.ui.ComposeMessageActivity$35.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$5800(Lcom/android/mms/ui/ComposeMessageActivity;Ljava/lang/String;Landroid/net/Uri;Z)V
com.android.mms.ui.AttachmentEditor.update(Lcom/android/mms/data/WorkingMessage;)Z
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.createViewFromResource(ILandroid/view/View;I)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivity.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.onRestart()V
com.android.mms.ui.SlideshowEditActivity$SlideListAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.mms.ui.ComposeMessageActivityNoLockScreen.drawTopPanel(Z)V
com.android.mms.ui.ComposeMessageActivity.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivity.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onRestart()V
com.android.mms.ui.ComposeMessageActivity$20.run()V
com.android.mms.ui.ComposeMessageActivity$40.run()V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$4500(Lcom/android/mms/ui/ComposeMessageActivity;Z)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMmsMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.initialize(Landroid/os/Bundle;J)V
com.android.mms.ui.ComposeMessageActivity.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivity.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.editMessageItem(Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivity.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onCreate(Landroid/os/Bundle;)V
com.android.mms.ui.ComposeMessageActivityNoLockScreen.onNewIntent(Landroid/content/Intent;)V
com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.mms.ui.ComposeMessageActivityNoLockScreen.access$800(Lcom/android/mms/ui/ComposeMessageActivity;Lcom/android/mms/ui/MessageItem;)V
com.android.vcard.VCardEntry$NoteData.constructInsertOperation(Ljava/util/List;I)V
com.android.providers.contacts.ContactsProvider2$PipeMonitor.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations.delete(J)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.deleteParser(Lcom/android/exchange/adapter/ContactsSyncAdapter$ContactOperations;)V
com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser.commandsParser()V
com.android.exchange.adapter.AbstractSyncParser.commandsParser()V
com.android.contacts.ContactSaveService.deleteGroup(Landroid/content/Intent;)V
com.android.contacts.GroupMemberLoader.createUri()Landroid/net/Uri;
com.android.contacts.GroupMemberLoader.<init>(Landroid/content/Context;J[Ljava/lang/String;)V
com.android.contacts.GroupMemberLoader.constructLoaderForGroupDetailQuery(Landroid/content/Context;J)Lcom/android/contacts/GroupMemberLoader;
com.android.contacts.GroupMemberLoader.constructLoaderForGroupEditorQuery(Landroid/content/Context;J)Lcom/android/contacts/GroupMemberLoader;
com.android.contacts.group.GroupDetailFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupEditorFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/CursorLoader;
com.android.contacts.group.GroupDetailFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
com.android.contacts.group.GroupEditorFragment$3.onCreateLoader(ILandroid/os/Bundle;)Landroid/content/Loader;
android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder.build()Landroid/net/Uri;
com.android.contacts.editor.AggregationSuggestionEngine.buildAggregationSuggestionUri(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)Landroid/net/Uri;
com.android.contacts.editor.AggregationSuggestionEngine.onNameChange(Lcom/android/contacts/model/EntityDelta$ValuesDelta;)V
com.android.contacts.editor.ContactEditorFragment.acquireAggregationSuggestions(Landroid/content/Context;Lcom/android/contacts/editor/RawContactEditorView;)V
com.android.contacts.editor.ContactEditorFragment.access$300(Lcom/android/contacts/editor/ContactEditorFragment;Landroid/content/Context;Lcom/android/contacts/editor/RawContactEditorView;)V
com.android.contacts.editor.ContactEditorFragment$2.onRequest(I)V
Permission:android.permission.SET_WALLPAPER_HINTS

12 Callers:

com.android.server.WallpaperManagerService.setDimensionHints(II)V
android.app.IWallpaperManager$Stub$Proxy.setDimensionHints(II)V
android.app.IWallpaperManager$Stub.setDimensionHints(II)V
android.app.IWallpaperManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.IWallpaperManager.setDimensionHints(II)V
com.android.server.WallpaperManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.app.WallpaperManager.suggestDesiredDimensions(II)V
com.android.launcher2.Workspace$1.run()V
com.android.launcher2.Workspace.setWallpaperDimension()V
com.android.launcher2.Workspace.setup(Lcom/android/launcher2/DragController;)V
com.android.launcher2.Launcher.setupViews()V
com.android.launcher2.Launcher.onCreate(Landroid/os/Bundle;)V
Permission:android.permission.FLASHLIGHT

6 Callers:

com.android.server.LightsService$1.setFlashlightEnabled(Z)V
android.os.IHardwareService$Stub$Proxy.setFlashlightEnabled(Z)V
android.os.IHardwareService$Stub.setFlashlightEnabled(Z)V
android.os.IHardwareService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.os.IHardwareService.setFlashlightEnabled(Z)V
com.android.server.LightsService$1.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
Permission:android.permission.ACCESS_LOCATION_EXTRA_COMMANDS

7 Callers:

com.android.server.LocationManagerService.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
android.location.ILocationManager$Stub$Proxy.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
android.location.ILocationManager$Stub.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
android.location.ILocationManager.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
android.location.ILocationManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.location.LocationManager.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
com.android.server.LocationManagerService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
Permission:android.permission.SERIAL_PORT

12 Callers:

com.android.server.SerialService.getSerialPorts()[Ljava/lang/String;
android.hardware.ISerialManager$Stub$Proxy.getSerialPorts()[Ljava/lang/String;
android.hardware.ISerialManager$Stub.getSerialPorts()[Ljava/lang/String;
android.hardware.ISerialManager.getSerialPorts()[Ljava/lang/String;
android.hardware.ISerialManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.hardware.SerialManager.getSerialPorts()[Ljava/lang/String;
com.android.server.SerialService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.server.SerialService.openSerialPort(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
android.hardware.ISerialManager$Stub$Proxy.openSerialPort(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
android.hardware.ISerialManager$Stub.openSerialPort(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
android.hardware.ISerialManager.openSerialPort(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
android.hardware.SerialManager.openSerialPort(Ljava/lang/String;I)Landroid/hardware/SerialPort;
Permission:android.permission.READ_CALL_LOG

188 Callers:

com.android.voicedialer.VoiceContact.redialNumber(Landroid/app/Activity;)Ljava/lang/String;
com.android.voicedialer.CommandRecognizerEngine.onRecognitionSuccess(Lcom/android/voicedialer/RecognizerClient;)V
com.android.voicedialer.RecognizerEngine.onRecognitionSuccess(Lcom/android/voicedialer/RecognizerClient;)V
com.android.voicedialer.RecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.CommandRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.PhoneTypeChoiceRecognizerEngine.recognize(Lcom/android/voicedialer/RecognizerClient;Landroid/app/Activity;Ljava/io/File;I)V
com.android.voicedialer.VoiceDialerActivity$3.run()V
com.android.voicedialer.VoiceDialerActivity$4.run()V
com.android.bluetooth.pbap.BluetoothPbapVcardManager.loadCallHistoryList(I)Ljava/util/ArrayList;
com.android.bluetooth.pbap.BluetoothPbapObexServer.sendVcardListingXml(ILjavax/obex/Operation;IILjava/lang/String;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullVcardListing([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/HeaderSet;Ljavax/obex/Operation;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.onGet(Ljavax/obex/Operation;)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendCallLogVcards(ILjavax/obex/Operation;IIZ)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullPhonebook([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/HeaderSet;Ljavax/obex/Operation;Ljava/lang/String;)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.pullVcardEntry([BLcom/android/bluetooth/pbap/BluetoothPbapObexServer$AppParamValue;Ljavax/obex/Operation;Ljava/lang/String;Ljava/lang/String;)I
com.android.contacts.calllog.DefaultVoicemailNotifier$DefaultNewCallsQuery.query()[Lcom/android/contacts/calllog/DefaultVoicemailNotifier$NewCall;
com.android.contacts.calllog.DefaultVoicemailNotifier$NewCallsQuery.query()[Lcom/android/contacts/calllog/DefaultVoicemailNotifier$NewCall;
com.android.contacts.calllog.DefaultVoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.contacts.calllog.CallLogNotificationsService.onHandleIntent(Landroid/content/Intent;)V
com.android.contacts.calllog.VoicemailNotifier.updateNotification(Landroid/net/Uri;)V
com.android.phone.BluetoothAtPhonebook.queryPhonebook(Ljava/lang/String;Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;)Z
com.android.phone.BluetoothAtPhonebook.getPhonebookResult(Ljava/lang/String;Z)Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;
com.android.phone.BluetoothAtPhonebook.processCpbrCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook.access$500(Lcom/android/phone/BluetoothAtPhonebook;Ljava/lang/String;Z)Lcom/android/phone/BluetoothAtPhonebook$PhonebookResult;
com.android.phone.BluetoothAtPhonebook.access$1000(Lcom/android/phone/BluetoothAtPhonebook;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook.handleAccessPermissionResult(Landroid/content/Intent;)V
com.android.phone.BluetoothAtPhonebook$2.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.AtCommandHandler.handleReadCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleTestCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleReadCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleTestCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
android.bluetooth.HeadsetBase$1.run()V
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendVCards(Ljavax/obex/Operation;Ljava/lang/String;ZLjava/lang/String;Z)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendPhonebookOneVcard(Ljavax/obex/Operation;IZLjava/lang/String;I)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.composeAndSendPhonebookVcards(Ljavax/obex/Operation;IIZLjava/lang/String;)I
android.provider.CallLog$Calls.getLastOutgoingCall(Landroid/content/Context;)Ljava/lang/String;
com.android.phone.CallLogAsync$GetLastOutgoingCallTask.doInBackground([Lcom/android/phone/CallLogAsync$GetLastOutgoingCallArgs;)Ljava/lang/String;
com.android.phone.CallLogAsync$GetLastOutgoingCallTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getCallHistorySize(I)I
com.android.bluetooth.pbap.BluetoothPbapVcardManager.getPhonebookSize(I)I
com.android.bluetooth.pbap.BluetoothPbapObexServer.<init>(Landroid/os/Handler;Landroid/content/Context;)V
com.android.bluetooth.pbap.BluetoothPbapService.startObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.access$500(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.parseIntent(Landroid/content/Intent;)V
com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread.run()V
com.android.bluetooth.pbap.BluetoothPbapService.onStartCommand(Landroid/content/Intent;II)I
com.android.bluetooth.pbap.BluetoothPbapService.startRfcommSocketListener()V
com.android.bluetooth.pbap.BluetoothPbapService.access$900(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.stopObexServerSession()V
com.android.bluetooth.pbap.BluetoothPbapService.onCreate()V
com.android.bluetooth.pbap.BluetoothPbapService.access$1100(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.phone.BluetoothAtPhonebook.getLastDialledNumber()Ljava/lang/String;
com.android.phone.BluetoothHandsfree.redial()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.access$6000(Lcom/android/phone/BluetoothHandsfree;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$1.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$7.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$9.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.NotificationMgr.updateNotificationsAtStartup()V
com.android.phone.NotificationMgr.init(Lcom/android/phone/PhoneApp;)Lcom/android/phone/NotificationMgr;
com.android.phone.PhoneApp.onCreate()V
com.android.contacts.calllog.CallLogQueryHandler.fetchCalls(IIZZ)V
com.android.contacts.calllog.CallLogQueryHandler.fetchAllCalls()V
com.android.contacts.calllog.CallLogQueryHandler.fetchVoicemailOnly()V
com.android.contacts.calllog.CallLogFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.contacts.calllog.CallLogFragment.fetchCalls()V
com.android.contacts.calllog.CallLogFragment.startCallsQuery()V
com.android.contacts.calllog.CallLogAdapter$CallFetcher.fetchCalls()V
com.android.contacts.calllog.CallLogFragment.refreshData()V
com.android.contacts.calllog.CallLogAdapter.onContentChanged()V
com.android.contacts.calllog.CallLogFragment.onResume()V
com.android.contacts.calllog.CallLogFragment.setMenuVisibility(Z)V
com.android.common.widget.GroupingListAdapter.onContentChanged()V
com.android.common.widget.GroupingListAdapter$1.onChange(Z)V
com.android.providers.contacts.CallLogProvider.query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
Permission:android.permission.BLUETOOTH

1950 Callers:

android.server.BluetoothAdapterProperties.getAllProperties()V
android.server.BluetoothAdapterProperties.getProperty(Ljava/lang/String;)Ljava/lang/String;
android.server.BluetoothEventLoop.onPropertyChanged([Ljava/lang/String;)V
android.server.BluetoothAdapterProperties.getObjectPath()Ljava/lang/String;
android.server.BluetoothBondState.loadBondState()V
android.server.BluetoothService.getProperty(Ljava/lang/String;Z)Ljava/lang/String;
android.server.BluetoothService.getAddressFromObjectPath(Ljava/lang/String;)Ljava/lang/String;
android.server.BluetoothService.getObjectPathFromAddress(Ljava/lang/String;)Ljava/lang/String;
android.server.BluetoothBondState.initBondState()V
android.server.BluetoothA2dpService.onBluetoothEnable()V
android.server.BluetoothService.getUuids()[Landroid/os/ParcelUuid;
android.server.BluetoothService.isDiscovering()Z
android.server.BluetoothService.getDiscoverableTimeout()I
android.server.BluetoothService.getScanMode()I
android.server.BluetoothService.getAddress()Ljava/lang/String;
android.server.BluetoothService.getKnownDevices()[Ljava/lang/String;
android.server.BluetoothService.getName()Ljava/lang/String;
android.server.BluetoothService.initBluetoothAfterTurningOn()V
android.server.BluetoothService.initProfileState()V
android.server.BluetoothService.setPairable()V
android.server.BluetoothA2dpService.onConnectSinkResult(Ljava/lang/String;Z)V
android.server.BluetoothA2dpService.onSinkPropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothEventLoop.onAgentOutOfBandDataAvailable(Ljava/lang/String;)Z
android.server.BluetoothEventLoop.checkPairingRequestAndGetAddress(Ljava/lang/String;I)Ljava/lang/String;
android.server.BluetoothEventLoop.onAgentAuthorize(Ljava/lang/String;Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onDeviceCreated(Ljava/lang/String;)V
android.server.BluetoothEventLoop.onDeviceDisconnectRequested(Ljava/lang/String;)V
android.server.BluetoothEventLoop.onDevicePropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothEventLoop.onDeviceRemoved(Ljava/lang/String;)V
android.server.BluetoothEventLoop.onDiscoverServicesResult(Ljava/lang/String;Z)V
android.server.BluetoothEventLoop.onInputDeviceConnectionResult(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onInputDevicePropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothEventLoop.onPanDeviceConnectionResult(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onPanDevicePropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothHealthProfileHandler.onHealthDeviceChannelChanged(Ljava/lang/String;Ljava/lang/String;Z)V
android.server.BluetoothHealthProfileHandler.onHealthDevicePropertyChanged(Ljava/lang/String;Ljava/lang/String;)V
android.server.BluetoothService.autoConnect()V
android.server.BluetoothService.dumpAclConnectedDevices(Ljava/io/PrintWriter;)V
android.server.BluetoothA2dpService$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.server.BluetoothA2dpService.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.isConnectSinkFeasible(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.isDisconnectSinkFeasible(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.onBluetoothDisable()V
android.server.BluetoothEventLoop.onCreateDeviceResult(Ljava/lang/String;I)V
android.server.BluetoothHealthProfileHandler.getMainChannelFd(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Landroid/os/ParcelFileDescriptor;
android.server.BluetoothHealthProfileHandler.connectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.server.BluetoothHealthProfileHandler.disconnectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.server.BluetoothInputProfileHandler.connectInputDevice(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothDeviceProfileState;)Z
android.server.BluetoothInputProfileHandler.connectInputDeviceInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothInputProfileHandler.disconnectInputDevice(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothDeviceProfileState;)Z
android.server.BluetoothInputProfileHandler.disconnectInputDeviceInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothPanProfileHandler.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothPanProfileHandler.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothPanProfileHandler.disconnectPanServerDevices()Z
android.server.BluetoothService.removeBondInternal(Ljava/lang/String;)Z
android.server.BluetoothService.setRemoteAlias(Ljava/lang/String;Ljava/lang/String;)Z
android.server.BluetoothService.setTrust(Ljava/lang/String;Z)Z
android.server.BluetoothService.getDeviceServiceChannelForUuid(Ljava/lang/String;Landroid/os/ParcelUuid;)I
android.server.BluetoothService.getRemoteDeviceProperties(Ljava/lang/String;)[Ljava/lang/String;
android.server.BluetoothService.setLinkTimeout(Ljava/lang/String;I)V
android.server.BluetoothA2dpService.access$000(Landroid/server/BluetoothA2dpService;)V
android.server.BluetoothA2dpService.<init>(Landroid/content/Context;Landroid/server/BluetoothService;)V
android.bluetooth.IBluetooth$Stub$Proxy.getUuids()[Landroid/os/ParcelUuid;
android.bluetooth.IBluetooth$Stub.getUuids()[Landroid/os/ParcelUuid;
android.bluetooth.IBluetooth$Stub$Proxy.isDiscovering()Z
android.bluetooth.IBluetooth$Stub.isDiscovering()Z
android.server.BluetoothAdapterStateMachine$BluetoothOn.processMessage(Landroid/os/Message;)Z
android.server.BluetoothService.dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
android.bluetooth.IBluetooth$Stub$Proxy.getDiscoverableTimeout()I
android.bluetooth.IBluetooth$Stub.getDiscoverableTimeout()I
android.bluetooth.IBluetooth$Stub$Proxy.getScanMode()I
android.bluetooth.IBluetooth$Stub.getScanMode()I
android.bluetooth.IBluetooth$Stub$Proxy.getAddress()Ljava/lang/String;
android.bluetooth.IBluetooth$Stub.getAddress()Ljava/lang/String;
android.bluetooth.IBluetooth$Stub$Proxy.getName()Ljava/lang/String;
android.bluetooth.IBluetooth$Stub.getName()Ljava/lang/String;
android.server.BluetoothAdapterStateMachine$PerProcessState.processMessage(Landroid/os/Message;)Z
android.server.BluetoothAdapterStateMachine$Switching.processMessage(Landroid/os/Message;)Z
android.server.BluetoothEventLoop.onDisplayPasskey(Ljava/lang/String;II)V
android.server.BluetoothEventLoop.onRequestOobData(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onRequestPairingConsent(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onRequestPasskeyConfirmation(Ljava/lang/String;II)V
android.server.BluetoothEventLoop.onRequestPasskey(Ljava/lang/String;I)V
android.server.BluetoothEventLoop.onRequestPinCode(Ljava/lang/String;I)V
android.server.BluetoothService.onHealthDeviceChannelChanged(Ljava/lang/String;Ljava/lang/String;Z)V
android.server.BluetoothService.onHealthDevicePropertyChanged(Ljava/lang/String;Ljava/lang/String;)V
android.server.BluetoothService.runBluetooth()V
android.bluetooth.IBluetoothA2dp$Stub$Proxy.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothDeviceProfileState.processCommand(I)Z
android.bluetooth.IBluetoothA2dp$Stub.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothA2dpService.access$100(Landroid/server/BluetoothA2dpService;)V
android.server.BluetoothService.getMainChannelFd(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Landroid/os/ParcelFileDescriptor;
android.server.BluetoothHealthProfileHandler.connectChannelToSource(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.server.BluetoothService.connectChannelToSink(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.server.BluetoothService.disconnectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.server.BluetoothHealthProfileHandler.unregisterAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.server.BluetoothService.connectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.connectInputDeviceInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectInputDeviceInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothPanProfileHandler.setBluetoothTethering(Z)V
android.bluetooth.IBluetooth$Stub$Proxy.setRemoteAlias(Ljava/lang/String;Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.setRemoteAlias(Ljava/lang/String;Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.setTrust(Ljava/lang/String;Z)Z
android.bluetooth.IBluetooth$Stub.setTrust(Ljava/lang/String;Z)Z
android.server.BluetoothService.updateDeviceServiceChannelCache(Ljava/lang/String;)V
android.server.BluetoothDeviceProperties.updateCache(Ljava/lang/String;)Ljava/util/Map;
com.android.server.ServerThread.run()V
android.bluetooth.IBluetooth.getUuids()[Landroid/os/ParcelUuid;
android.bluetooth.IBluetooth$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.IBluetooth.isDiscovering()Z
com.android.internal.util.State.processMessage(Landroid/os/Message;)Z
android.bluetooth.IBluetooth.getDiscoverableTimeout()I
android.bluetooth.IBluetooth.getScanMode()I
android.bluetooth.IBluetooth.getAddress()Ljava/lang/String;
android.bluetooth.IBluetooth.getName()Ljava/lang/String;
android.server.BluetoothEventLoop.onHealthDeviceChannelChanged(Ljava/lang/String;Ljava/lang/String;Z)V
android.server.BluetoothEventLoop.onHealthDevicePropertyChanged(Ljava/lang/String;[Ljava/lang/String;)V
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.enter()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.enter()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.enter()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.enter()V
android.bluetooth.IBluetoothA2dp.connectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.IBluetoothA2dp.disconnectSinkInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp$Stub.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub$Proxy.getMainChannelFd(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Landroid/os/ParcelFileDescriptor;
android.bluetooth.IBluetooth$Stub.getMainChannelFd(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Landroid/os/ParcelFileDescriptor;
android.server.BluetoothService.connectChannelToSource(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.bluetooth.IBluetooth$Stub$Proxy.connectChannelToSink(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.bluetooth.IBluetooth$Stub.connectChannelToSink(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.bluetooth.IBluetooth$Stub$Proxy.disconnectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.bluetooth.IBluetooth$Stub.disconnectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.server.BluetoothService.unregisterAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.bluetooth.IBluetooth$Stub$Proxy.connectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.connectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub$Proxy.disconnectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.disconnectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.disconnectDevices()V
android.bluetooth.IBluetooth$Stub$Proxy.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub$Proxy.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.setBluetoothTethering(Z)V
android.bluetooth.IBluetooth.setRemoteAlias(Ljava/lang/String;Ljava/lang/String;)Z
android.bluetooth.IBluetooth.setTrust(Ljava/lang/String;Z)Z
android.server.BluetoothDeviceProperties.addProperties(Ljava/lang/String;[Ljava/lang/String;)Ljava/util/Map;
android.server.BluetoothDeviceProperties.getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
android.server.BluetoothService.getRemoteServiceChannel(Ljava/lang/String;Landroid/os/ParcelUuid;)I
android.server.BluetoothService.updateRemoteDevicePropertiesCache(Ljava/lang/String;)V
android.bluetooth.BluetoothAdapter.getUuids()[Landroid/os/ParcelUuid;
android.server.BluetoothService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.BluetoothAdapter.isDiscovering()Z
android.net.wifi.SupplicantStateTracker$DisconnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$DormantState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$InactiveState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$ScanState.processMessage(Landroid/os/Message;)Z
android.net.wifi.SupplicantStateTracker$UninitializedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiStateMachine$InitialState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.processMessage(Landroid/os/Message;)Z
android.net.wifi.WifiWatchdogStateMachine$OnlineState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.IState.processMessage(Landroid/os/Message;)Z
com.android.internal.util.StateMachine$SmHandler.processMsg(Landroid/os/Message;)V
android.bluetooth.BluetoothAdapter.getDiscoverableTimeout()I
android.bluetooth.BluetoothAdapter.getScanMode()I
android.bluetooth.BluetoothAdapter.getAddress()Ljava/lang/String;
android.bluetooth.BluetoothAdapter.getName()Ljava/lang/String;
com.android.internal.util.State.enter()V
android.server.BluetoothA2dpService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.IBluetoothA2dp.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothA2dp.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothA2dp.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothA2dp.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth.getMainChannelFd(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Landroid/os/ParcelFileDescriptor;
android.bluetooth.IBluetooth$Stub$Proxy.connectChannelToSource(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.bluetooth.IBluetooth$Stub.connectChannelToSource(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.bluetooth.IBluetooth.connectChannelToSink(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.bluetooth.IBluetooth.disconnectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.bluetooth.IBluetooth$Stub$Proxy.unregisterAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.bluetooth.IBluetooth$Stub.unregisterAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.bluetooth.IBluetooth.connectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth.disconnectInputDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth.connectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth.disconnectPanDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth$Stub$Proxy.setBluetoothTethering(Z)V
android.bluetooth.IBluetooth$Stub.setBluetoothTethering(Z)V
android.bluetooth.BluetoothDevice.setAlias(Ljava/lang/String;)Z
android.bluetooth.BluetoothDevice.setTrust(Z)Z
android.server.BluetoothEventLoop.addDevice(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothService.getUuidFromCache(Ljava/lang/String;)[Landroid/os/ParcelUuid;
android.server.BluetoothService.getTrustState(Ljava/lang/String;)Z
android.server.BluetoothService.getRemoteClass(Ljava/lang/String;)I
android.server.BluetoothService.getRemoteAlias(Ljava/lang/String;)Ljava/lang/String;
android.server.BluetoothService.getRemoteName(Ljava/lang/String;)Ljava/lang/String;
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteServiceChannel(Ljava/lang/String;Landroid/os/ParcelUuid;)I
android.bluetooth.IBluetooth$Stub.getRemoteServiceChannel(Ljava/lang/String;Landroid/os/ParcelUuid;)I
com.android.phone.BluetoothHeadsetService.getSdpRecordsAndConnect(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.LocalBluetoothAdapter.getUuids()[Landroid/os/ParcelUuid;
com.android.settings.bluetooth.LocalBluetoothAdapter.isDiscovering()Z
com.android.settings.bluetooth.LocalBluetoothAdapter.startScanning(Z)V
com.android.settings.bluetooth.LocalBluetoothAdapter.stopScanning()V
com.android.settings.bluetooth.LocalBluetoothAdapter.getScanMode()I
com.android.nfc.handover.HandoverManager.createBluetoothOobDataRecord()Landroid/nfc/NdefRecord;
com.android.settings.deviceinfo.Status.setBtStatus()V
com.android.settings.bluetooth.LocalBluetoothAdapter.getName()Ljava/lang/String;
android.net.DhcpStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.enter()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.enter()V
android.net.wifi.WifiApConfigStore$DefaultState.enter()V
android.net.wifi.WifiApConfigStore$InactiveState.enter()V
android.net.wifi.WifiStateMachine$DefaultState.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.enter()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.enter()V
com.android.internal.telephony.DataConnection$DcActivatingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.enter()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.enter()V
com.android.internal.util.IState.enter()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.enter()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.enter()V
com.android.internal.util.StateMachine$SmHandler.invokeEnterMethods(I)V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.enter()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.enter()V
com.android.server.NsdService$NsdStateMachine$DefaultState.enter()V
android.bluetooth.BluetoothA2dp.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothA2dp.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree.audioOff()V
com.android.phone.BluetoothHandsfree.audioOn()Z
android.bluetooth.BluetoothHealth.getMainChannelFd(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Landroid/os/ParcelFileDescriptor;
android.bluetooth.IBluetooth.connectChannelToSource(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.bluetooth.BluetoothHealth.connectChannelToSink(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.bluetooth.BluetoothHealth.disconnectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
android.bluetooth.IBluetooth.unregisterAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.bluetooth.BluetoothInputDevice.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothInputDevice.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothPan.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothPan.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetooth.setBluetoothTethering(Z)V
com.android.settings.bluetooth.CachedBluetoothDevice.setName(Ljava/lang/String;)V
com.android.bluetooth.pbap.BluetoothPbapService.parseIntent(Landroid/content/Intent;)V
com.android.phone.BluetoothAtPhonebook.handleAccessPermissionResult(Landroid/content/Intent;)V
android.server.BluetoothEventLoop.onDeviceFound(Ljava/lang/String;[Ljava/lang/String;)V
android.server.BluetoothService.getRemoteUuids(Ljava/lang/String;)[Landroid/os/ParcelUuid;
android.server.BluetoothService.sendUuidIntent(Ljava/lang/String;)V
android.bluetooth.IBluetooth$Stub$Proxy.getTrustState(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.getTrustState(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteClass(Ljava/lang/String;)I
android.bluetooth.IBluetooth$Stub.getRemoteClass(Ljava/lang/String;)I
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteAlias(Ljava/lang/String;)Ljava/lang/String;
android.bluetooth.IBluetooth$Stub.getRemoteAlias(Ljava/lang/String;)Ljava/lang/String;
com.android.server.input.InputManagerService.getDeviceAlias(Ljava/lang/String;)Ljava/lang/String;
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteName(Ljava/lang/String;)Ljava/lang/String;
android.bluetooth.IBluetooth$Stub.getRemoteName(Ljava/lang/String;)Ljava/lang/String;
android.server.BluetoothBondState.isAutoPairingBlacklisted(Ljava/lang/String;)Z
android.server.BluetoothService.dumpKnownDevices(Ljava/io/PrintWriter;)V
android.bluetooth.IBluetooth.getRemoteServiceChannel(Ljava/lang/String;Landroid/os/ParcelUuid;)I
com.android.phone.BluetoothHeadsetService.access$1500(Lcom/android/phone/BluetoothHeadsetService;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDevice.updateProfiles()Z
com.android.settings.bluetooth.LocalBluetoothProfileManager.<init>(Landroid/content/Context;Lcom/android/settings/bluetooth/LocalBluetoothAdapter;Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;Lcom/android/settings/bluetooth/BluetoothEventManager;)V
com.android.settings.bluetooth.LocalBluetoothProfileManager.setBluetoothStateOn()V
com.android.settings.bluetooth.BluetoothSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.CachedBluetoothDevice.startPairing()Z
com.android.settings.bluetooth.DeviceListPreferenceFragment.onResume()V
com.android.settings.bluetooth.LocalBluetoothPreferences.shouldShowDialogInForeground(Landroid/content/Context;Ljava/lang/String;)Z
com.android.settings.bluetooth.BluetoothSettings.startScanning()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DevicePickerFragment.onBluetoothStateChanged(I)V
com.android.settings.bluetooth.DevicePickerFragment.onResume()V
com.android.settings.bluetooth.BluetoothSettings.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.removeAllDevices()V
com.android.settings.bluetooth.DevicePickerFragment.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.resume()V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.setNumberOfPairedDevices(I)V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.updateCountdownSummary()V
com.android.nfc.handover.HandoverManager.createHandoverRequestMessage()Landroid/nfc/NdefMessage;
com.android.nfc.handover.HandoverManager.createHandoverSelectMessage(Z)Landroid/nfc/NdefMessage;
com.android.settings.deviceinfo.Status.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothNameDialogFragment.onCreateDialog(Landroid/os/Bundle;)Landroid/app/Dialog;
com.android.settings.bluetooth.BluetoothNameDialogFragment.updateDeviceName()V
com.android.settings.bluetooth.BluetoothSettings$1.updateDeviceName()V
com.android.settings.bluetooth.BluetoothSettings.updateContent(IZ)V
com.android.internal.util.StateMachine$SmHandler.performTransitions()V
com.android.nfc.handover.BluetoothHeadsetHandover.nextStepConnect()V
com.android.settings.bluetooth.A2dpProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.nfc.handover.BluetoothHeadsetHandover.nextStepDisconnect()V
com.android.settings.bluetooth.A2dpProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree$26.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.headsetButtonPress()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.handlePreciseCallStateChange(ZLcom/android/internal/telephony/Connection;)V
com.android.phone.BluetoothHandsfree.stopVoiceRecognition()Z
com.android.phone.BluetoothHandsfree.terminateScoUsingVirtualVoiceCall()Z
com.android.phone.BluetoothHandsfree$DebugThread.run()V
com.android.phone.BluetoothHandsfree.disconnectHeadset()V
com.android.phone.BluetoothHandsfree.onBluetoothDisabled()V
com.android.phone.BluetoothHandsfree.userWantsAudioOff()V
com.android.phone.CallNotifier.resetAudioStateAfterDisconnect()V
com.android.phone.BluetoothHandsfree$SignalScoCloseThread.run()V
com.android.phone.BluetoothHandsfree$16.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.initiateScoUsingVirtualVoiceCall()Z
com.android.phone.BluetoothHandsfree.startVoiceRecognition()Z
com.android.phone.BluetoothHandsfree.connectHeadset(Landroid/bluetooth/HeadsetBase;I)V
com.android.phone.BluetoothHandsfree.userWantsAudioOn()V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.scoClosed()V
android.bluetooth.BluetoothHealth.connectChannelToSource(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
android.bluetooth.BluetoothHealth.unregisterAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
com.android.settings.bluetooth.HidProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.HidProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.PanProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothTetheringDataTracker.teardown()Z
com.android.settings.bluetooth.PanProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothPan.setBluetoothTethering(Z)V
com.android.settings.bluetooth.BluetoothEventManager$DeviceFoundHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
com.android.bluetooth.pbap.BluetoothPbapService.onStartCommand(Landroid/content/Intent;II)I
com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteUuids(Ljava/lang/String;)[Landroid/os/ParcelUuid;
android.bluetooth.IBluetooth$Stub.getRemoteUuids(Ljava/lang/String;)[Landroid/os/ParcelUuid;
android.server.BluetoothA2dpService.isSinkDevice(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.fetchRemoteUuids(Ljava/lang/String;Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothCallback;)Z
android.bluetooth.IBluetooth.getTrustState(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.getRemoteClass(Ljava/lang/String;)I
android.bluetooth.IBluetooth.getRemoteAlias(Ljava/lang/String;)Ljava/lang/String;
android.bluetooth.IBluetooth.getRemoteName(Ljava/lang/String;)Ljava/lang/String;
android.server.BluetoothService.attemptAutoPair(Ljava/lang/String;)Z
android.bluetooth.BluetoothDevice.getServiceChannel(Landroid/os/ParcelUuid;)I
com.android.phone.BluetoothHeadsetService$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.BluetoothHeadsetService$6.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.CachedBluetoothDevice.connectWithoutResettingTimer(Z)V
com.android.settings.bluetooth.CachedBluetoothDevice.fillData()V
com.android.settings.bluetooth.CachedBluetoothDevice.onUuidChanged()V
com.android.settings.bluetooth.LocalBluetoothManager.<init>(Lcom/android/settings/bluetooth/LocalBluetoothAdapter;Landroid/content/Context;)V
com.android.settings.bluetooth.LocalBluetoothAdapter.setBluetoothStateInt(I)V
com.android.settings.SettingsPreferenceFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.BluetoothDevicePreference.pair()V
com.android.settings.bluetooth.CachedBluetoothDevice.ensurePaired()Z
com.android.settings.bluetooth.BluetoothSettings.onResume()V
com.android.settings.SettingsPreferenceFragment.onResume()V
com.android.settings.bluetooth.BluetoothPairingRequest.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.bluetooth.BluetoothPermissionRequest.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.bluetooth.BluetoothSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.bluetooth.BluetoothSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DevicePickerFragment.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.bluetooth.DeviceListPreferenceFragment.onBluetoothStateChanged(I)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onDevicePreferenceClick(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
com.android.settings.bluetooth.BluetoothSettings.removeAllDevices()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onPause()V
com.android.settings.bluetooth.DevicePickerFragment.removeAllDevices()V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.access$000(Lcom/android/settings/bluetooth/BluetoothDiscoverableEnabler;)V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.handleModeChanged(I)V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.setEnabled(Z)V
com.android.nfc.P2pLinkManager.doSnepProtocol(Lcom/android/nfc/handover/HandoverManager;Landroid/nfc/NdefMessage;[Landroid/net/Uri;)I
com.android.nfc.handover.HandoverManager.tryHandoverRequest(Landroid/nfc/NdefMessage;)Landroid/nfc/NdefMessage;
com.android.settings.bluetooth.BluetoothNameDialogFragment$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.bluetooth.BluetoothSettings$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.bluetooth.BluetoothSettings.onBluetoothStateChanged(I)V
com.android.settings.bluetooth.BluetoothSettings.onDeviceBondStateChanged(Lcom/android/settings/bluetooth/CachedBluetoothDevice;I)V
com.android.nfc.handover.BluetoothHeadsetHandover.handleIntent(Landroid/content/Intent;)V
com.android.nfc.handover.BluetoothHeadsetHandover.nextStep()V
com.android.settings.bluetooth.LocalBluetoothProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.LocalBluetoothProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.AtCommandHandler.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.access$1800(Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState;ZLcom/android/internal/telephony/Connection;)V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.<init>(Lcom/android/phone/BluetoothHandsfree;)V
com.android.phone.BluetoothHeadsetService$6.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree$4.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.redial()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHeadsetService$6.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree.startDebug()V
com.android.phone.BluetoothHeadsetService.setState(Landroid/bluetooth/BluetoothDevice;I)V
com.android.phone.BluetoothHeadsetService.onDestroy()V
com.android.phone.InCallScreen.disconnectBluetoothAudio()V
com.android.phone.CallNotifier.access$1000(Lcom/android/phone/CallNotifier;)V
com.android.phone.CallNotifier.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread.connectSco()V
com.android.phone.BluetoothHandsfree$ScoSocketConnectThread.connectSco()V
android.bluetooth.AtCommandHandler.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHeadsetService$6.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen.connectBluetoothAudio()V
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.access$4300(Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState;)V
android.net.NetworkStateTracker.teardown()Z
com.android.settings.TetherSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.TetherSettings$TetherChangeReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.TetherSettings.startTethering()V
com.android.settings.bluetooth.BluetoothEventManager$Handler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
android.bluetooth.IBluetooth.getRemoteUuids(Ljava/lang/String;)[Landroid/os/ParcelUuid;
android.bluetooth.IBluetooth$Stub$Proxy.fetchRemoteUuids(Ljava/lang/String;Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothCallback;)Z
android.bluetooth.IBluetooth$Stub.fetchRemoteUuids(Ljava/lang/String;Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothCallback;)Z
android.bluetooth.BluetoothDevice.getTrustState()Z
android.bluetooth.BluetoothDevice.getBluetoothClass()Landroid/bluetooth/BluetoothClass;
android.bluetooth.BluetoothDevice.getAlias()Ljava/lang/String;
android.bluetooth.BluetoothDevice.getName()Ljava/lang/String;
com.android.bluetooth.opp.BluetoothOppTransfer$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.bluetooth.opp.BluetoothOppTransfer.doOpushSdp()V
android.bluetooth.IBluetoothHeadset$Stub$Proxy.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.CachedBluetoothDevice.connect(Z)V
com.android.settings.bluetooth.CachedBluetoothDevice.<init>(Landroid/content/Context;Lcom/android/settings/bluetooth/LocalBluetoothAdapter;Lcom/android/settings/bluetooth/LocalBluetoothProfileManager;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onUuidChanged(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.LocalBluetoothManager.getInstance(Landroid/content/Context;)Lcom/android/settings/bluetooth/LocalBluetoothManager;
com.android.settings.bluetooth.BluetoothEventManager$AdapterStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.LocalBluetoothAdapter.syncBluetoothState()Z
com.android.settings.bluetooth.LocalBluetoothAdapter.setBluetoothEnabled(Z)V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.AccessibilitySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.accounts.AccountPreferenceBase.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.accounts.SyncSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.ApplicationSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.DevicePickerFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DateTimeSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DeviceInfoSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.deviceinfo.UsbSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DisplaySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DockSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.DreamSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.SpellCheckersSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.inputmethod.UserDictionaryList.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.LocationSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.net.DataUsageMeteredSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.PrivacySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.SecuritySettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.SoundSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.TetherSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.tts.TextToSpeechSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.tts.TtsEngineSettingsFragment.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.vpn2.VpnSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.WallpaperTypeSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.wifi.AdvancedWifiSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.wifi.WifiSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.WirelessSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.BluetoothDevicePreference.onClicked()V
com.android.settings.bluetooth.CachedBluetoothDevice.connectAutoConnectableProfiles()V
com.android.settings.bluetooth.CachedBluetoothDevice.connectInt(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.AccessibilitySettings.onResume()V
com.android.settings.accounts.AccountPreferenceBase.onResume()V
com.android.settings.bluetooth.DeviceProfilesSettings.onResume()V
com.android.settings.DateTimeSettings.onResume()V
com.android.settings.deviceinfo.Memory.onResume()V
com.android.settings.deviceinfo.UsbSettings.onResume()V
com.android.settings.DisplaySettings.onResume()V
com.android.settings.DockSettings.onResume()V
com.android.settings.DreamSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onResume()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onResume()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onResume()V
com.android.settings.inputmethod.SpellCheckersSettings.onResume()V
com.android.settings.inputmethod.UserDictionaryList.onResume()V
com.android.settings.LocationSettings.onResume()V
com.android.settings.PrivacySettings.onResume()V
com.android.settings.SecuritySettings.onResume()V
com.android.settings.SoundSettings.onResume()V
com.android.settings.users.UserDetailsSettings.onResume()V
com.android.settings.users.UserSettings.onResume()V
com.android.settings.vpn2.VpnSettings.onResume()V
com.android.settings.wifi.AdvancedWifiSettings.onResume()V
com.android.settings.wifi.p2p.WifiP2pSettings.onResume()V
com.android.settings.wifi.WifiSettings.onResume()V
com.android.settings.WirelessSettings.onResume()V
com.android.settings.SettingsPreferenceFragment.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.bluetooth.BluetoothCallback.onBluetoothStateChanged(I)V
com.android.settings.bluetooth.BluetoothSettings.onPause()V
com.android.settings.bluetooth.DevicePickerFragment.onPause()V
com.android.settings.SettingsPreferenceFragment.onPause()V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler$2.run()V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.onPreferenceClick(Landroid/preference/Preference;)Z
com.android.settings.bluetooth.BluetoothDiscoverableEnabler.setDiscoverableTimeout(I)V
com.android.nfc.P2pLinkManager$SendTask.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.nfc.P2pLinkManager$2.doGet(ILandroid/nfc/NdefMessage;)Lcom/android/nfc/snep/SnepMessage;
com.android.nfc.handover.BluetoothHeadsetHandover$2.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.nfc.handover.BluetoothHeadsetHandover.start()V
com.android.settings.bluetooth.CachedBluetoothDevice.disconnect(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
android.bluetooth.AtParser.process(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.AtCommandHandler.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$BluetoothPhoneState.<init>(Lcom/android/phone/BluetoothHandsfree;Lcom/android/phone/BluetoothHandsfree$1;)V
android.bluetooth.IBluetoothHeadset$Stub$Proxy.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.AtCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.access$6000(Lcom/android/phone/BluetoothHandsfree;)Landroid/bluetooth/AtCommandResult;
android.bluetooth.IBluetoothHeadset$Stub$Proxy.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService.access$2000(Lcom/android/phone/BluetoothHeadsetService;Landroid/bluetooth/BluetoothDevice;I)V
com.android.phone.InCallScreen.switchInCallAudio(Lcom/android/phone/InCallScreen$InCallAudioMode;)V
com.android.phone.InCallScreen.toggleBluetooth()V
com.android.phone.InCallScreen.toggleSpeaker()V
com.android.phone.OtaUtils.setSpeaker(Z)V
com.android.phone.CallNotifier$InCallTonePlayer.run()V
com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread.run()V
com.android.phone.BluetoothHandsfree$ScoSocketConnectThread.run()V
com.android.phone.BluetoothHandsfree$10.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleTestCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleTestCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.IBluetoothHeadset$Stub$Proxy.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.server.ConnectivityService.teardown(Landroid/net/NetworkStateTracker;)Z
com.android.server.ConnectivityService.stopUsingNetworkFeature(Lcom/android/server/ConnectivityService$FeatureUser;Z)I
com.android.settings.TetherSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.startProvisioningIfNecessary(I)V
com.android.settings.bluetooth.BluetoothEventManager$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.BluetoothDevice.getUuids()[Landroid/os/ParcelUuid;
android.bluetooth.IBluetooth.fetchRemoteUuids(Ljava/lang/String;Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothCallback;)Z
com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread.run()V
com.android.phone.BluetoothAtPhonebook.checkAccessPermission()Z
android.media.AudioService$AudioServiceBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.musicfx.ActivityMusic$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.bluetooth.BluetoothDeviceFilter$ClassUuidFilter.matches(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.CachedBluetoothDevice.fetchBtClass()V
android.bluetooth.BluetoothDevice.getAliasName()Ljava/lang/String;
com.android.bluetooth.opp.BluetoothOppManager.getDeviceName(Landroid/bluetooth/BluetoothDevice;)Ljava/lang/String;
com.android.bluetooth.opp.BluetoothOppTransfer$SocketConnectThread.run()V
com.android.nfc.handover.ConfirmConnectActivity.onCreate(Landroid/os/Bundle;)V
com.android.phone.BluetoothHandsfree.configAudioParameters()V
com.android.bluetooth.opp.BluetoothOppTransfer.startConnectSession()V
android.bluetooth.IBluetoothHeadset.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.bluetooth.CachedBluetoothDevice.onBondingDockConnect()V
com.android.settings.bluetooth.CachedBluetoothDevice.onBondingStateChanged(I)V
com.android.settings.bluetooth.DockService.applyBtSettings(Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.bluetooth.DockService.connectIfEnabled(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.addDevice(Lcom/android/settings/bluetooth/LocalBluetoothAdapter;Lcom/android/settings/bluetooth/LocalBluetoothProfileManager;Landroid/bluetooth/BluetoothDevice;)Lcom/android/settings/bluetooth/CachedBluetoothDevice;
com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEnabler.<init>(Landroid/content/Context;Landroid/widget/Switch;)V
com.android.settings.bluetooth.BluetoothNameDialogFragment.<init>()V
com.android.settings.bluetooth.BluetoothPairingDialog.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothPermissionActivity.savePhonebookPermissionChoice(I)V
com.android.settings.bluetooth.BluetoothPermissionRequest.checkUserChoice()Z
com.android.settings.bluetooth.BluetoothVisibilityTimeoutFragment.<init>()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DockService.onCreate()V
com.android.settings.bluetooth.RequestPermissionActivity.parseIntent()Z
com.android.settings.bluetooth.RequestPermissionHelperActivity.parseIntent()Z
com.android.settings.bluetooth.Utils.showError(Landroid/content/Context;Ljava/lang/String;I)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.getActualState(Landroid/content/Context;)I
com.android.settings.bluetooth.LocalBluetoothAdapter.getBluetoothState()I
com.android.settings.bluetooth.BluetoothEnabler.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
com.android.settings.accounts.AccountSyncSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.accounts.ManageAccountsSettings.onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)V
com.android.settings.bluetooth.CachedBluetoothDevice.connectProfile(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.accounts.AccountSyncSettings.onResume()V
com.android.settings.accounts.ManageAccountsSettings.onResume()V
com.android.settings.accounts.SyncSettings.onResume()V
com.android.settings.deviceinfo.Memory.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.users.UserDetailsSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.users.UserSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.wifi.p2p.WifiP2pSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.wifi.WifiSettings.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.AccessibilitySettings.onPause()V
com.android.settings.accounts.AccountPreferenceBase.onPause()V
com.android.settings.bluetooth.DeviceProfilesSettings.onPause()V
com.android.settings.DateTimeSettings.onPause()V
com.android.settings.deviceinfo.Memory.onPause()V
com.android.settings.deviceinfo.UsbSettings.onPause()V
com.android.settings.DisplaySettings.onPause()V
com.android.settings.DockSettings.onPause()V
com.android.settings.DreamSettings.onPause()V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onPause()V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onPause()V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onPause()V
com.android.settings.inputmethod.SpellCheckersSettings.onPause()V
com.android.settings.tts.TextToSpeechSettings.onPause()V
com.android.settings.vpn2.VpnSettings.onPause()V
com.android.settings.wifi.p2p.WifiP2pSettings.onPause()V
com.android.settings.wifi.WifiSettings.onPause()V
com.android.settings.WirelessSettings.onPause()V
com.android.settings.bluetooth.BluetoothVisibilityTimeoutFragment.onClick(Landroid/content/DialogInterface;I)V
com.android.nfc.P2pLinkManager$SendTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.nfc.snep.SnepServer$Callback.doGet(ILandroid/nfc/NdefMessage;)Lcom/android/nfc/snep/SnepMessage;
com.android.nfc.handover.HandoverManager.tryHandover(Landroid/nfc/NdefMessage;)Z
com.android.settings.bluetooth.CachedBluetoothDevice.disconnect()V
com.android.settings.bluetooth.DeviceProfilesSettings$1.onClick(Landroid/content/DialogInterface;I)V
android.bluetooth.HeadsetBase.handleInput(Ljava/lang/String;)V
com.android.phone.BluetoothAtPhonebook$1.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$3.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$4.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleActionCommand()Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree.<init>(Landroid/content/Context;Lcom/android/internal/telephony/CallManager;)V
android.bluetooth.IBluetoothHeadset.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothAtPhonebook$1.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothAtPhonebook$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$11.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$12.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$13.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$14.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$15.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$16.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$17.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$18.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$19.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$20.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$21.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$22.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$23.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$24.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$25.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$26.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$27.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$28.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$29.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$2.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$30.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$5.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$6.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$7.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$8.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$9.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.BluetoothHandsfree$10.handleActionCommand()Landroid/bluetooth/AtCommandResult;
android.bluetooth.IBluetoothHeadset.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallTouchUi.onMenuItemClick(Landroid/view/MenuItem;)Z
com.android.phone.InCallTouchUi.handleAudioButtonClick()V
com.android.phone.OtaUtils.cleanOtaScreen(Z)V
com.android.phone.OtaUtils.onClickOtaEndButton()V
com.android.phone.OtaUtils.onClickOtaSpeakerButton()V
com.android.phone.CallNotifier.onNewRingingConnection(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.CallNotifier.onRingbackTone(Landroid/os/AsyncResult;)V
com.android.phone.BluetoothHandsfree.onBluetoothEnabled()V
com.android.phone.BluetoothHandsfree.connectScoThread()V
android.bluetooth.IBluetoothHeadset.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.server.ConnectivityService.enforcePreference()V
com.android.server.ConnectivityService.handleConnect(Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService.access$200(Lcom/android/server/ConnectivityService;Lcom/android/server/ConnectivityService$FeatureUser;Z)I
com.android.server.ConnectivityService.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.settings.SettingsPreferenceFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.TetherSettings.onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)Z
android.bluetooth.BluetoothA2dp.shouldSendVolumeKeys(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()Z
android.bluetooth.BluetoothSocket$SdpHelper.doSdp()I
com.android.bluetooth.pbap.BluetoothPbapService.startRfcommSocketListener()V
com.android.phone.BluetoothAtPhonebook.access$900(Lcom/android/phone/BluetoothAtPhonebook;)Z
com.android.settings.bluetooth.BluetoothDeviceFilter$AudioFilter.matches(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.BluetoothDeviceFilter$Filter.matches(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.BluetoothDeviceFilter$NapFilter.matches(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.BluetoothDeviceFilter$PanuFilter.matches(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.BluetoothDeviceFilter$TransferFilter.matches(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.CachedBluetoothDevice.refreshBtClass()V
android.media.AudioService.onSetA2dpConnectionState(Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.bluetooth.BluetoothPermissionActivity.createConnectionDisplayText()Ljava/lang/String;
com.android.settings.bluetooth.BluetoothPermissionActivity.createPhonebookDisplayText()Ljava/lang/String;
com.android.settings.bluetooth.CachedBluetoothDeviceManager.getName(Landroid/bluetooth/BluetoothDevice;)Ljava/lang/String;
com.android.settings.bluetooth.CachedBluetoothDevice.fetchName()V
com.android.bluetooth.opp.BluetoothOppReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.bluetooth.opp.BluetoothOppTransferActivity.onClick(Landroid/content/DialogInterface;I)V
com.android.bluetooth.opp.BluetoothOppTransferAdapter.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
com.android.bluetooth.opp.BluetoothOppUtility.queryRecord(Landroid/content/Context;Landroid/net/Uri;)Lcom/android/bluetooth/opp/BluetoothOppTransferInfo;
com.android.bluetooth.opp.BluetoothOppTransfer.start()V
android.bluetooth.BluetoothHeadset.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DockService.access$700(Lcom/android/settings/bluetooth/DockService;Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.bluetooth.DockService.handleBluetoothStateOn(I)V
com.android.settings.bluetooth.DockService.handleDocked(Landroid/bluetooth/BluetoothDevice;II)V
com.android.settings.bluetooth.BluetoothEventManager.readPairedDevices()Z
com.android.settings.bluetooth.DockService.getCachedBluetoothDevice(Landroid/bluetooth/BluetoothDevice;)Lcom/android/settings/bluetooth/CachedBluetoothDevice;
com.android.settings.bluetooth.HeadsetProfile$HeadsetServiceListener.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
com.android.settings.bluetooth.LocalBluetoothProfileManager$StateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothSettings.addPreferencesForActivity()V
com.android.settings.Settings$HeaderAdapter.<init>(Landroid/content/Context;Ljava/util/List;Lcom/android/settings/accounts/AuthenticatorHelper;)V
com.android.internal.app.AlertActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothPermissionActivity.onNegative()V
com.android.settings.bluetooth.BluetoothPermissionActivity.onPositive()V
com.android.settings.bluetooth.BluetoothSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.DevicePickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.SettingsPreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.RequestPermissionActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.RequestPermissionHelperActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler.showUnbondMessage(Landroid/content/Context;Ljava/lang/String;I)V
com.android.settings.bluetooth.BluetoothEventManager$PairingCancelHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.Utils.showConnectingError(Landroid/content/Context;Ljava/lang/String;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.getActualState(Landroid/content/Context;)I
com.android.settings.bluetooth.BluetoothEnabler.resume()V
com.android.settings.bluetooth.BluetoothEnabler.setSwitch(Landroid/widget/Switch;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.onDeviceAdded(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.RequestPermissionHelperActivity.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
com.android.settings.bluetooth.DeviceProfilesSettings.onProfileClicked(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.DockService.handleUnexpectedDisconnect(Landroid/bluetooth/BluetoothDevice;Lcom/android/settings/bluetooth/LocalBluetoothProfile;I)V
com.android.settings.accounts.AccountSyncSettings.onPause()V
com.android.settings.accounts.ManageAccountsSettings.onPause()V
com.android.settings.accounts.SyncSettings.onPause()V
com.android.nfc.snep.SnepServer.handleRequest(Lcom/android/nfc/snep/SnepMessenger;Lcom/android/nfc/snep/SnepServer$Callback;)Z
com.android.nfc.NfcDispatcher.dispatchTag(Landroid/nfc/Tag;)Z
com.android.settings.bluetooth.BluetoothDevicePreference$1.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.CachedBluetoothDevice.unpair()V
com.android.settings.bluetooth.DockService.handleUndocked(Landroid/bluetooth/BluetoothDevice;)V
android.bluetooth.HeadsetBase$1.run()V
com.android.phone.BluetoothHandsfree.init(Landroid/content/Context;Lcom/android/internal/telephony/CallManager;)Lcom/android/phone/BluetoothHandsfree;
android.bluetooth.BluetoothHeadset.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallTouchUi.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.checkOtaspStateOnResume()Z
com.android.phone.InCallScreen.onStop()V
com.android.phone.InCallScreen.setInCallScreenMode(Lcom/android/phone/InCallUiState$InCallScreenMode;)V
com.android.phone.PhoneApp.clearOtaState()V
com.android.phone.OtaUtils.onClickHandler(I)V
com.android.phone.CallNotifier.onUnknownConnectionAppeared(Landroid/os/AsyncResult;)V
com.android.phone.BluetoothHeadsetService.onStart(Landroid/content/Intent;I)V
com.android.phone.BluetoothHandsfree.access$3200(Lcom/android/phone/BluetoothHandsfree;)V
android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.server.ConnectivityService.handleSetNetworkPreference(I)V
com.android.server.ConnectivityService.access$1100(Lcom/android/server/ConnectivityService;Landroid/net/NetworkInfo;)V
com.android.server.ConnectivityService$FeatureUser.binderDied()V
com.android.server.ConnectivityService$FeatureUser.expire()V
android.net.IConnectivityManager$Stub$Proxy.stopUsingNetworkFeature(ILjava/lang/String;)I
android.net.IConnectivityManager$Stub.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.LocationSettings.onActivityResult(IILandroid/content/Intent;)V
com.android.settings.SecuritySettings.onActivityResult(IILandroid/content/Intent;)V
com.android.phone.BluetoothHeadsetService$RfcommConnectThread.run()V
android.bluetooth.BluetoothSocket.connect()V
com.android.bluetooth.pbap.BluetoothPbapService.access$900(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.bluetooth.pbap.BluetoothPbapService.stopObexServerSession()V
com.android.phone.BluetoothAtPhonebook$3.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onBtClassChanged(Landroid/bluetooth/BluetoothDevice;)V
android.media.AudioService.access$6200(Landroid/media/AudioService;Landroid/bluetooth/BluetoothDevice;I)V
com.android.settings.bluetooth.BluetoothPermissionActivity.createConnectionDialogView()Landroid/view/View;
com.android.settings.bluetooth.BluetoothPermissionActivity.createPhonebookDialogView()Landroid/view/View;
com.android.settings.bluetooth.BluetoothPairingDialog.createView(Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;)Landroid/view/View;
com.android.settings.bluetooth.BluetoothPairingDialog.createUserEntryDialog(Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;)V
com.android.settings.bluetooth.CachedBluetoothDevice.refreshName()V
com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppTransferActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppTransferActivity.updateProgressbar()V
com.android.bluetooth.opp.BluetoothOppTransferHistory.openCompleteTransfer()V
com.android.bluetooth.opp.BluetoothOppService.insertShare(Landroid/database/Cursor;I)V
com.android.bluetooth.opp.BluetoothOppService.removeBatch(Lcom/android/bluetooth/opp/BluetoothOppBatch;)V
com.android.settings.bluetooth.DockService$5.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.DockService.handleBtStateChange(Landroid/content/Intent;I)V
com.android.settings.bluetooth.DockService.msgTypeDocked(Landroid/bluetooth/BluetoothDevice;II)Z
com.android.settings.bluetooth.DockService.access$200(Lcom/android/settings/bluetooth/DockService;Landroid/bluetooth/BluetoothDevice;II)V
com.android.settings.bluetooth.LocalBluetoothProfileManager$PanStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.addPreferencesForActivity()V
com.android.settings.Settings.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.bluetooth.opp.BluetoothOppBtEnableActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppBtEnablingActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppBtErrorActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.pbap.BluetoothPbapActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.ExternalMediaFormatActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.NetInitiatedActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.ResolverActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.musicfx.ControlPanelPicker.onCreate(Landroid/os/Bundle;)V
com.android.providers.media.RingtonePickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.ActivityPicker.onCreate(Landroid/os/Bundle;)V
com.android.settings.AllowBindAppWidgetActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothPermissionActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.SettingsSafetyLegalActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbAccessoryUriActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbConfirmActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbPermissionActivity.onCreate(Landroid/os/Bundle;)V
com.android.vpndialogs.ConfirmDialog.onCreate(Landroid/os/Bundle;)V
com.android.vpndialogs.ManageDialog.onCreate(Landroid/os/Bundle;)V
com.android.settings.bluetooth.BluetoothPermissionActivity.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.AccessibilitySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountPreferenceBase.onCreate(Landroid/os/Bundle;)V
com.android.settings.ApplicationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.DateTimeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.Memory.onCreate(Landroid/os/Bundle;)V
com.android.settings.DeviceInfoSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.deviceinfo.UsbSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DisplaySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DockSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.DreamSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndLanguageSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.InputMethodAndSubtypeEnabler.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.KeyboardLayoutPickerFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.SpellCheckersSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.inputmethod.UserDictionaryList.onCreate(Landroid/os/Bundle;)V
com.android.settings.LocationSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.net.DataUsageMeteredSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.PrivacySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SecuritySettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.SoundSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.TetherSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TextToSpeechSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.tts.TtsEngineSettingsFragment.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserDetailsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.users.UserSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.vpn2.VpnSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WallpaperTypeSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.AdvancedWifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.p2p.WifiP2pSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.wifi.WifiSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.WirelessSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.Settings$HeaderAdapter.resume()V
com.android.settings.Settings$HeaderAdapter.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
com.android.settings.bluetooth.BluetoothCallback.onDeviceAdded(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.BluetoothSettings.onDeviceAdded(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.DeviceListPreferenceFragment.addCachedDevices()V
com.android.settings.bluetooth.DevicePickerFragment.onDeviceAdded(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.DockService.onStartCommand(Landroid/content/Intent;II)I
com.android.nfc.snep.SnepServer$ConnectionThread.run()V
com.android.nfc.NfcService$NfcAdapterService.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.NfcService$NfcServiceHandler.dispatchTagEndpoint(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.NfcService.sendMessage(ILjava/lang/Object;)V
com.android.settings.bluetooth.DeviceProfilesSettings.unpairDevice()V
com.android.settings.bluetooth.DockService.msgTypeUndockedPermanent(Landroid/bluetooth/BluetoothDevice;I)Z
com.android.phone.PhoneApp.onCreate()V
android.media.AudioService$2.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
android.media.AudioService.disconnectBluetoothSco(I)V
com.android.voicedialer.VoiceDialerActivity.onDestroy()V
android.media.AudioService$ScoClient.requestScoState(I)V
android.bluetooth.IBluetoothHeadset.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen.onResume()V
com.android.phone.InCallScreen.endInCallScreenSession(Z)V
com.android.phone.InCallScreen.handleOnscreenButtonClick(I)V
com.android.phone.InCallScreen.handleOtaCallEnd()V
com.android.phone.InCallScreen.internalResolveIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.onBackPressed()V
com.android.phone.InCallScreen.onClick(Landroid/view/View;)V
com.android.phone.InCallScreen.onDisconnect(Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.resetInCallScreenMode()V
com.android.phone.InCallScreen.updateManageConferencePanelIfNecessary()V
com.android.phone.CallNotifier.ignoreAllIncomingCalls(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.doReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.initForNewRadioTechnology()V
com.android.voicedialer.VoiceDialerActivity.updateBluetoothParameters(Z)V
android.bluetooth.BluetoothDeviceProfileState.handleIncomingConnection(IZ)Z
com.android.server.ConnectivityService.access$1800(Lcom/android/server/ConnectivityService;I)V
com.android.server.ConnectivityService$FeatureUser.<init>(Lcom/android/server/ConnectivityService;ILjava/lang/String;Landroid/os/IBinder;)V
com.android.server.ConnectivityService.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I
android.net.IConnectivityManager$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.bluetooth.pbap.BluetoothPbapService.onCreate()V
com.android.bluetooth.pbap.BluetoothPbapService.access$1100(Lcom/android/bluetooth/pbap/BluetoothPbapService;)V
com.android.settings.bluetooth.BluetoothEventManager$ClassChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothPermissionActivity.showConnectionDialog()V
com.android.settings.bluetooth.BluetoothPermissionActivity.showPhonebookDialog()V
com.android.settings.bluetooth.BluetoothPairingDialog.createConfirmationDialog(Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;)V
com.android.settings.bluetooth.BluetoothPairingDialog.createConsentDialog(Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;)V
com.android.settings.bluetooth.BluetoothPairingDialog.createDisplayPasskeyOrPinDialog(Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;)V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onDeviceNameUpdated(Landroid/bluetooth/BluetoothDevice;)V
com.android.bluetooth.opp.BluetoothOppTransferActivity.createView()Landroid/view/View;
com.android.bluetooth.opp.BluetoothOppTransferActivity.access$100(Lcom/android/bluetooth/opp/BluetoothOppTransferActivity;)V
com.android.bluetooth.opp.BluetoothOppTransferHistory.onContextItemSelected(Landroid/view/MenuItem;)Z
com.android.bluetooth.opp.BluetoothOppTransferHistory.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.bluetooth.opp.BluetoothOppService.access$1800(Lcom/android/bluetooth/opp/BluetoothOppService;Landroid/database/Cursor;I)V
com.android.bluetooth.opp.BluetoothOppService.deleteShare(I)V
com.android.bluetooth.opp.BluetoothOppService.updateShare(Landroid/database/Cursor;IZ)V
com.android.settings.bluetooth.DockService.processMessage(Landroid/os/Message;)V
com.android.settings.bluetooth.DockService$1.run()V
com.android.settings.Settings$AccessibilitySettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$AccountSyncSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$AdvancedWifiSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$AndroidBeamSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$ApplicationSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$BluetoothSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$CryptKeeperSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$DataUsageSummaryActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$DateTimeSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$DevelopmentSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$DeviceAdminSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$DeviceInfoSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$DisplaySettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$DockSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$InputMethodAndLanguageSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$KeyboardLayoutPickerActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$LocalePickerActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$LocationSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$ManageAccountsSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$ManageApplicationsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$PowerUsageSummaryActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$PrivacySettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$RunningServicesActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$SecuritySettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$SoundSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$SpellCheckersSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$StorageSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$StorageUseActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$TetherSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$TextToSpeechSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$UserDictionarySettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$VpnSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$WifiP2pSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$WifiSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.Settings$WirelessSettingsActivity.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.settings.SubSettings.setListAdapter(Landroid/widget/ListAdapter;)V
com.android.internal.app.ChooserActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.internal.app.ChooserActivity.onCreate(Landroid/os/Bundle;)V
com.android.internal.app.ResolverActivity.onCreate(Landroid/os/Bundle;)V
com.android.nfc.TechListChooserActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.nfc.TechListChooserActivity.onCreate(Landroid/os/Bundle;)V
com.android.systemui.usb.UsbResolverActivity.onCreate(Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/CharSequence;[Landroid/content/Intent;Ljava/util/List;Z)V
com.android.systemui.usb.UsbResolverActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.AppWidgetPickActivity.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.AccountSyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.ManageAccountsSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.accounts.SyncSettings.onCreate(Landroid/os/Bundle;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$StateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.getTriState(Landroid/content/Context;)I
com.android.settings.Settings.onResume()V
com.android.settings.bluetooth.BluetoothEventManager.dispatchDeviceAdded(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.BluetoothSettings.addCachedDevices()V
com.android.settings.bluetooth.DevicePickerFragment.addCachedDevices()V
com.android.nfc.snep.SnepServer$ServerThread.run()V
android.nfc.INfcAdapter$Stub$Proxy.dispatch(Landroid/nfc/Tag;)V
android.nfc.INfcAdapter$Stub.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.NfcService.onCardEmulationAidSelected([B)V
com.android.nfc.NfcService.onCardEmulationDeselected()V
com.android.nfc.NfcService.onLlcpLinkActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.NfcService.onLlcpLinkDeactivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.NfcService.onRemoteEndpointDiscovered(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.NfcService.onRemoteFieldActivated()V
com.android.nfc.NfcService.onRemoteFieldDeactivated()V
com.android.nfc.NfcService.onSeApduReceived([B)V
com.android.nfc.NfcService.onSeEmvCardRemoval()V
com.android.nfc.NfcService.onSeMifareAccess([B)V
com.android.nfc.NfcService.sendMockNdefTag(Landroid/nfc/NdefMessage;)V
com.android.settings.bluetooth.DeviceProfilesSettings.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
android.media.AudioService.access$1300(Landroid/media/AudioService;I)V
android.media.AudioService.setMode(ILandroid/os/IBinder;)V
android.media.AudioService$ScoClient.clearCount(Z)V
android.media.AudioService$ScoClient.decCount()V
android.media.AudioService$ScoClient.incCount()V
android.bluetooth.BluetoothHeadset.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.InCallScreen.bailOutAfterErrorDialog()V
com.android.phone.InCallScreen.endInCallScreenSession()V
com.android.phone.InCallTouchUi.onTrigger(Landroid/view/View;I)V
com.android.phone.PhoneApp.dismissCallScreen()V
com.android.phone.InCallScreen.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.onNewIntent(Landroid/content/Intent;)V
com.android.phone.InCallScreen.access$500(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.InCallScreen.updateAfterRadioTechnologyChange()V
com.android.phone.PhoneApp.clearInCallScreenMode()V
com.android.phone.InCallScreen.updateScreen()V
com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.PhoneApp.access$1100(Lcom/android/phone/PhoneApp;)V
com.android.voicedialer.VoiceDialerActivity.access$2200(Lcom/android/voicedialer/VoiceDialerActivity;Z)V
android.bluetooth.BluetoothDeviceProfileState.access$6700(Landroid/bluetooth/BluetoothDeviceProfileState;IZ)Z
android.bluetooth.BluetoothDeviceProfileState.processIncomingConnectCommand(I)V
com.android.server.ConnectivityService.setNetworkPreference(I)V
android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.IConnectivityManager$Stub.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
android.net.ConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOffUpstreamMobileConnection()Z
com.android.server.ConnectivityService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.settings.bluetooth.BluetoothEventManager$NameChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.bluetooth.opp.BluetoothOppTransferActivity.setUpDialog()V
com.android.bluetooth.opp.BluetoothOppTransferActivity$BluetoothTransferContentObserver.onChange(Z)V
com.android.bluetooth.opp.BluetoothOppService$UpdateThread.run()V
com.android.bluetooth.opp.BluetoothOppService.access$1700(Lcom/android/bluetooth/opp/BluetoothOppService;I)V
com.android.bluetooth.opp.BluetoothOppService.access$2200(Lcom/android/bluetooth/opp/BluetoothOppService;Landroid/database/Cursor;IZ)V
com.android.settings.bluetooth.DockService.access$100(Lcom/android/settings/bluetooth/DockService;Landroid/os/Message;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider.updateButtons(Landroid/widget/RemoteViews;Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.setImageViewResources(Landroid/content/Context;Landroid/widget/RemoteViews;)V
com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.widget.SettingsAppWidgetProvider.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker.toggleState(Landroid/content/Context;)V
com.android.settings.Settings$AccessibilitySettingsActivity.onResume()V
com.android.settings.Settings$AccountSyncSettingsActivity.onResume()V
com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity.onResume()V
com.android.settings.Settings$AdvancedWifiSettingsActivity.onResume()V
com.android.settings.Settings$AndroidBeamSettingsActivity.onResume()V
com.android.settings.Settings$ApplicationSettingsActivity.onResume()V
com.android.settings.Settings$BluetoothSettingsActivity.onResume()V
com.android.settings.Settings$CryptKeeperSettingsActivity.onResume()V
com.android.settings.Settings$DataUsageSummaryActivity.onResume()V
com.android.settings.Settings$DateTimeSettingsActivity.onResume()V
com.android.settings.Settings$DevelopmentSettingsActivity.onResume()V
com.android.settings.Settings$DeviceAdminSettingsActivity.onResume()V
com.android.settings.Settings$DeviceInfoSettingsActivity.onResume()V
com.android.settings.Settings$DisplaySettingsActivity.onResume()V
com.android.settings.Settings$DockSettingsActivity.onResume()V
com.android.settings.Settings$InputMethodAndLanguageSettingsActivity.onResume()V
com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity.onResume()V
com.android.settings.Settings$KeyboardLayoutPickerActivity.onResume()V
com.android.settings.Settings$LocalePickerActivity.onResume()V
com.android.settings.Settings$LocationSettingsActivity.onResume()V
com.android.settings.Settings$ManageAccountsSettingsActivity.onResume()V
com.android.settings.Settings$ManageApplicationsActivity.onResume()V
com.android.settings.Settings$PowerUsageSummaryActivity.onResume()V
com.android.settings.Settings$PrivacySettingsActivity.onResume()V
com.android.settings.Settings$RunningServicesActivity.onResume()V
com.android.settings.Settings$SecuritySettingsActivity.onResume()V
com.android.settings.Settings$SoundSettingsActivity.onResume()V
com.android.settings.Settings$SpellCheckersSettingsActivity.onResume()V
com.android.settings.Settings$StorageSettingsActivity.onResume()V
com.android.settings.Settings$StorageUseActivity.onResume()V
com.android.settings.Settings$TetherSettingsActivity.onResume()V
com.android.settings.Settings$TextToSpeechSettingsActivity.onResume()V
com.android.settings.Settings$UserDictionarySettingsActivity.onResume()V
com.android.settings.Settings$VpnSettingsActivity.onResume()V
com.android.settings.Settings$WifiP2pSettingsActivity.onResume()V
com.android.settings.Settings$WifiSettingsActivity.onResume()V
com.android.settings.Settings$WirelessSettingsActivity.onResume()V
com.android.settings.SubSettings.onResume()V
com.android.settings.bluetooth.BluetoothEventManager.access$1400(Lcom/android/settings/bluetooth/BluetoothEventManager;Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.BluetoothSettings.addDeviceCategory(Landroid/preference/PreferenceGroup;ILcom/android/settings/bluetooth/BluetoothDeviceFilter$Filter;)V
com.android.nfc.snep.SnepServer.start()V
android.nfc.INfcAdapter$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.INfcAdapter.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.DeviceHost$DeviceHostListener.onCardEmulationAidSelected([B)V
com.android.nfc.DeviceHost$DeviceHostListener.onCardEmulationDeselected()V
com.android.nfc.DeviceHost$DeviceHostListener.onLlcpLinkActivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onLlcpLinkDeactivated(Lcom/android/nfc/DeviceHost$NfcDepEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteEndpointDiscovered(Lcom/android/nfc/DeviceHost$TagEndpoint;)V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteFieldActivated()V
com.android.nfc.DeviceHost$DeviceHostListener.onRemoteFieldDeactivated()V
com.android.nfc.DeviceHost$DeviceHostListener.onSeApduReceived([B)V
com.android.nfc.DeviceHost$DeviceHostListener.onSeEmvCardRemoval()V
com.android.nfc.DeviceHost$DeviceHostListener.onSeMifareAccess([B)V
android.media.AudioService$SetModeDeathHandler.binderDied()V
android.media.IAudioService$Stub$Proxy.setMode(ILandroid/os/IBinder;)V
android.media.IAudioService$Stub.setMode(ILandroid/os/IBinder;)V
android.media.AudioService$ScoClient.binderDied()V
android.media.AudioService.clearAllScoClients(IZ)V
android.media.AudioService.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.AudioService.startBluetoothSco(Landroid/os/IBinder;)V
com.android.phone.InCallScreen.access$2300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.addVoiceMailNumberPanel()V
com.android.phone.InCallScreen.delayedCleanupAfterDisconnect()V
com.android.phone.InCallScreen.dontAddVoiceMailNumber()V
com.android.phone.InCallScreen.onMMICancel()V
com.android.phone.InCallScreen.onMMIComplete(Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.InCallScreen.onPause()V
com.android.phone.OtaUtils.otaShowHome()V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onTrigger(Landroid/view/View;I)V
com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.phone.InCallScreen.syncWithPhoneState()Lcom/android/phone/InCallScreen$SyncWithPhoneStateStatus;
com.android.phone.InCallScreen.access$600(Lcom/android/phone/InCallScreen;)V
com.android.phone.PhoneApp$PhoneAppBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.voicedialer.VoiceDialerActivity$1.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
com.android.voicedialer.VoiceDialerActivity$VoiceDialerBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.processMessage(Landroid/os/Message;)Z
android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(I)V
android.net.IConnectivityManager$Stub.setNetworkPreference(I)V
android.net.IConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I
com.android.development.Connectivity$3.onClick(Landroid/view/View;)V
com.android.mms.transaction.TransactionService.endMmsConnectivity()V
com.android.server.location.GpsLocationProvider.reportAGpsStatus(III)V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOffUpstreamMobileConnection()Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOffUpstreamMobileConnection()Z
com.android.bluetooth.opp.BluetoothOppService.updateFromProvider()V
com.android.settings.widget.SettingsAppWidgetProvider.buildUpdate(Landroid/content/Context;)Landroid/widget/RemoteViews;
com.android.nfc.P2pLinkManager.enableDisable(ZZ)V
com.android.nfc.NfcService$NfcAdapterService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.nfc.NfcAdapter.dispatch(Landroid/nfc/Tag;)V
com.android.nfc.nxp.NativeNfcManager.notifyTransactionListeners([B)V
com.android.nfc.nxp.NativeNfcManager.notifyTargetDeselected()V
com.android.nfc.nxp.NativeNfcManager.notifyLlcpLinkActivation(Lcom/android/nfc/nxp/NativeP2pDevice;)V
com.android.nfc.nxp.NativeNfcManager.notifyLlcpLinkDeactivated(Lcom/android/nfc/nxp/NativeP2pDevice;)V
com.android.nfc.nxp.NativeNfcManager.notifyNdefMessageListeners(Lcom/android/nfc/nxp/NativeNfcTag;)V
com.android.nfc.nxp.NativeNfcManager.notifySeFieldActivated()V
com.android.nfc.nxp.NativeNfcManager.notifySeFieldDeactivated()V
com.android.nfc.nxp.NativeNfcManager.notifySeApduReceived([B)V
com.android.nfc.nxp.NativeNfcManager.notifySeEmvCardRemoval()V
com.android.nfc.nxp.NativeNfcManager.notifySeMifareAccess([B)V
android.media.IAudioService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.IAudioService.setMode(ILandroid/os/IBinder;)V
android.media.AudioService.resetBluetoothSco()V
android.media.IAudioService$Stub$Proxy.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub$Proxy.startBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService$Stub.startBluetoothSco(Landroid/os/IBinder;)V
com.android.phone.InCallScreen$12.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$13.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.InCallScreen.access$1100(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1300(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$1200(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$800(Lcom/android/phone/InCallScreen;)V
com.android.phone.InCallScreen.access$900(Lcom/android/phone/InCallScreen;Lcom/android/internal/telephony/MmiCode;)V
com.android.phone.OtaUtils.onClickOtaActivateNextButton()V
com.android.phone.OtaUtils.otaShowActivateScreen()V
com.android.internal.widget.multiwaveview.GlowPadView.dispatchTriggerEvent(I)V
com.android.phone.InCallScreen.showPausePromptDialog(Lcom/android/internal/telephony/Connection;Ljava/lang/String;)V
com.android.phone.InCallScreen.requestUpdateScreen()V
com.android.phone.InCallScreen.requestUpdateBluetoothIndication()V
com.android.phone.InCallScreen.requestCloseOtaFailureNotice(J)V
com.android.phone.InCallScreen.requestCloseSpcErrorNotice(J)V
com.android.phone.InCallScreen.requestRemoveProviderInfoWithDelay()V
android.net.IConnectivityManager.setNetworkPreference(I)V
android.net.ConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;)I
com.android.mms.transaction.TransactionService$ServiceHandler.processPendingTransaction(Lcom/android/mms/transaction/Transaction;Lcom/android/mms/transaction/TransactionSettings;)V
com.android.mms.transaction.TransactionService.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService$ServiceHandler.processTransaction(Lcom/android/mms/transaction/Transaction;)Z
com.android.mms.transaction.TransactionService.onStartCommand(Landroid/content/Intent;II)I
com.android.mms.transaction.TransactionService.launchTransaction(ILcom/android/mms/transaction/TransactionBundle;Z)V
com.android.mms.transaction.TransactionService.onDestroy()V
com.android.mms.transaction.TransactionService.renewMmsConnectivity()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.turnOnUpstreamMobileConnection(I)Z
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.chooseUpstreamType(Z)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.exit()V
com.android.bluetooth.opp.BluetoothOppService.onStartCommand(Landroid/content/Intent;II)I
com.android.bluetooth.opp.BluetoothOppService.access$000(Lcom/android/bluetooth/opp/BluetoothOppService;)V
com.android.bluetooth.opp.BluetoothOppService.onCreate()V
com.android.settings.widget.SettingsAppWidgetProvider.onUpdate(Landroid/content/Context;Landroid/appwidget/AppWidgetManager;[I)V
com.android.settings.widget.SettingsAppWidgetProvider.updateWidget(Landroid/content/Context;)V
com.android.nfc.NfcService$EnableDisableTask.disableInternal()Z
com.android.nfc.NfcService$EnableDisableTask.enableInternal()Z
com.android.nfc.NfcService$NfcAdapterService.disableNdefPush()Z
com.android.nfc.NfcService$NfcAdapterService.enableNdefPush()Z
android.media.AudioService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.media.AudioManager.setMode(I)V
android.media.AudioService.access$5900(Landroid/media/AudioService;)V
android.media.IAudioService.stopBluetoothSco(Landroid/os/IBinder;)V
android.media.IAudioService.startBluetoothSco(Landroid/os/IBinder;)V
com.android.phone.InCallScreen$14.onClick(Landroid/content/DialogInterface;I)V
com.android.phone.InCallScreen$15.onCancel(Landroid/content/DialogInterface;)V
com.android.phone.OtaUtils.onClickOtaTryAgainButton()V
com.android.phone.OtaUtils.onOtaCloseFailureNotice()V
com.android.phone.OtaUtils.otaShowProperScreen()V
com.android.internal.widget.multiwaveview.GlowPadView.doFinish()V
com.android.phone.InCallScreen.handlePostOnDialChars(Landroid/os/AsyncResult;C)V
com.android.phone.InCallScreen.onPhoneStateChanged(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaPerformActivation()V
com.android.phone.PhoneApp.updateInCallScreen()V
com.android.phone.PhoneApp.updateBluetoothIndication(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureNotice(I)V
com.android.phone.OtaUtils.otaShowSpcErrorNotice(I)V
com.android.phone.CallCard.updateCallStateWidgets(Lcom/android/internal/telephony/Call;)V
android.net.ConnectivityManager.setNetworkPreference(I)V
com.android.commands.svc.DataCommand.run([Ljava/lang/String;)V
com.android.commands.svc.WifiCommand.run([Ljava/lang/String;)V
com.android.development.Connectivity.onCrash()V
com.android.mms.transaction.TransactionService.beginMmsConnectivity()I
com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V
com.android.mms.transaction.TransactionService.onNewIntent(Landroid/content/Intent;I)V
com.android.mms.transaction.TransactionService.access$200(Lcom/android/mms/transaction/TransactionService;)V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.processMessage(Landroid/os/Message;)Z
com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState.enter()V
com.android.internal.util.State.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.exit()V
com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver.onChange(Z)V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.onPostExecute(Ljava/lang/Boolean;)V
com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver.onChange(Z)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.onPostExecute(Ljava/lang/Boolean;)V
com.android.nfc.NfcService$EnableDisableTask.doInBackground([Ljava/lang/Integer;)Ljava/lang/Void;
com.android.nfc.NfcService$EnableDisableTask.executeEeWipe()V
android.nfc.INfcAdapter$Stub$Proxy.disableNdefPush()Z
android.nfc.INfcAdapter$Stub.disableNdefPush()Z
android.nfc.INfcAdapter$Stub$Proxy.enableNdefPush()Z
android.nfc.INfcAdapter$Stub.enableNdefPush()Z
com.android.internal.telephony.CallManager.setAudioMode()V
android.media.AudioManager.stopBluetoothSco()V
android.media.AudioManager.startBluetoothSco()V
com.android.phone.InCallScreen.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.switchToState(IFF)V
com.android.phone.InCallScreen.access$1000(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;C)V
com.android.phone.InCallScreen.access$400(Lcom/android/phone/InCallScreen;Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.onClickOtaActivateButton()V
com.android.phone.EmergencyCallHelper.cleanup()V
com.android.phone.PhoneApp$MediaButtonBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.phone.CallController.placeCallInternal(Landroid/content/Intent;)Lcom/android/phone/Constants$CallStatusCode;
com.android.phone.CallNotifier.onCdmaCallWaiting(Landroid/os/AsyncResult;)V
com.android.phone.OtaUtils.otaShowProgramFailure(I)V
com.android.phone.OtaUtils.onOtaProvisionStatusChanged(Landroid/os/AsyncResult;)V
com.android.phone.CallCard.displayMainCallStatus(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)V
com.android.commands.svc.Svc$Command.run([Ljava/lang/String;)V
com.android.development.Connectivity.access$2600(Lcom/android/development/Connectivity;)V
com.android.mms.transaction.Observable.notifyObservers()V
com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState.processMessage(Landroid/os/Message;)Z
android.bluetooth.BluetoothDeviceProfileState$BondedDevice.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$IncomingHid.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree.exit()V
android.bluetooth.BluetoothDeviceProfileState$OutgoingHid.exit()V
android.bluetooth.BluetoothProfileState$PendingCommandState.exit()V
android.bluetooth.BluetoothProfileState$StableState.exit()V
android.net.DhcpStateMachine$DefaultState.exit()V
android.net.DhcpStateMachine$RunningState.exit()V
android.net.DhcpStateMachine$StoppedState.exit()V
android.net.DhcpStateMachine$WaitBeforeStartState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState.exit()V
android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState.exit()V
android.net.wifi.SupplicantStateTracker$CompletedState.exit()V
android.net.wifi.SupplicantStateTracker$DefaultState.exit()V
android.net.wifi.SupplicantStateTracker$DisconnectedState.exit()V
android.net.wifi.SupplicantStateTracker$DormantState.exit()V
android.net.wifi.SupplicantStateTracker$HandshakeState.exit()V
android.net.wifi.SupplicantStateTracker$InactiveState.exit()V
android.net.wifi.SupplicantStateTracker$ScanState.exit()V
android.net.wifi.SupplicantStateTracker$UninitializedState.exit()V
android.net.wifi.WifiApConfigStore$ActiveState.exit()V
android.net.wifi.WifiApConfigStore$DefaultState.exit()V
android.net.wifi.WifiApConfigStore$InactiveState.exit()V
android.net.wifi.WifiStateMachine$ConnectModeState.exit()V
android.net.wifi.WifiStateMachine$DefaultState.exit()V
android.net.wifi.WifiStateMachine$DisconnectingState.exit()V
android.net.wifi.WifiStateMachine$DriverFailedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadedState.exit()V
android.net.wifi.WifiStateMachine$DriverLoadingState.exit()V
android.net.wifi.WifiStateMachine$DriverStartingState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppedState.exit()V
android.net.wifi.WifiStateMachine$DriverStoppingState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadedState.exit()V
android.net.wifi.WifiStateMachine$DriverUnloadingState.exit()V
android.net.wifi.WifiStateMachine$InitialState.exit()V
android.net.wifi.WifiStateMachine$ObtainingIpState.exit()V
android.net.wifi.WifiStateMachine$ScanModeState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartedState.exit()V
android.net.wifi.WifiStateMachine$SoftApStartingState.exit()V
android.net.wifi.WifiStateMachine$SoftApStoppingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStartingState.exit()V
android.net.wifi.WifiStateMachine$SupplicantStoppingState.exit()V
android.net.wifi.WifiStateMachine$TetheredState.exit()V
android.net.wifi.WifiStateMachine$TetheringState.exit()V
android.net.wifi.WifiStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$ConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$DefaultState.exit()V
android.net.wifi.WifiWatchdogStateMachine$NotConnectedState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineState.exit()V
android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState.exit()V
android.net.wifi.WifiWatchdogStateMachine$RssiMonitoringState.exit()V
android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WalledGardenCheckState.exit()V
android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState.exit()V
android.server.BluetoothAdapterStateMachine$BluetoothOn.exit()V
android.server.BluetoothAdapterStateMachine$HotOff.exit()V
android.server.BluetoothAdapterStateMachine$PerProcessState.exit()V
android.server.BluetoothAdapterStateMachine$PowerOff.exit()V
android.server.BluetoothAdapterStateMachine$Switching.exit()V
android.server.BluetoothAdapterStateMachine$WarmUp.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.exit()V
com.android.internal.telephony.cat.RilMessageDecoder$StateStart.exit()V
com.android.internal.telephony.DataConnection$DcActivatingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectingState.exit()V
com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.exit()V
com.android.internal.util.IState.exit()V
com.android.internal.util.StateMachine$SmHandler$HaltingState.exit()V
com.android.internal.util.StateMachine$SmHandler$QuittingState.exit()V
com.android.internal.util.StateMachine$SmHandler.invokeExitMethods(Lcom/android/internal/util/StateMachine$SmHandler$StateInfo;)V
com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState.exit()V
com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$InitialState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState.exit()V
com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState.exit()V
com.android.server.NsdService$NsdStateMachine$DefaultState.exit()V
com.android.server.NsdService$NsdStateMachine$DisabledState.exit()V
com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1.onPostExecute(Ljava/lang/Object;)V
com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1.onPostExecute(Ljava/lang/Object;)V
com.android.nfc.NfcService$EnableDisableTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.nfc.INfcAdapter.disableNdefPush()Z
android.nfc.INfcAdapter.enableNdefPush()Z
com.android.phone.PhoneUtils.setAudioMode(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.DTMFTwelveKeyDialer.onDialerClose(Z)V
com.android.internal.widget.multiwaveview.GlowPadView.trySwitchToFirstTouchState(FF)Z
com.android.internal.widget.multiwaveview.GlowPadView.access$300(Lcom/android/internal/widget/multiwaveview/GlowPadView;IFF)V
com.android.internal.widget.multiwaveview.GlowPadView.handleCancel(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleDown(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleMove(Landroid/view/MotionEvent;)V
com.android.internal.widget.multiwaveview.GlowPadView.handleUp(Landroid/view/MotionEvent;)V
com.android.phone.EmergencyCallHelper.onDisconnect(Landroid/os/Message;)V
com.android.phone.EmergencyCallHelper.onRetryTimeout()V
com.android.phone.EmergencyCallHelper.scheduleRetryOrBailOut()V
com.android.phone.EmergencyCallHelper.startSequenceInternal(Landroid/os/Message;)V
com.android.phone.CallController.placeCall(Landroid/content/Intent;)V
com.android.phone.OtaUtils.otaShowSuccessFailure()V
com.android.phone.PhoneApp.handleOtaspEvent(Landroid/os/Message;)V
com.android.phone.CallCard.updateForegroundCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateNoCall(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.CallCard.updateRingingCall(Lcom/android/internal/telephony/CallManager;)V
com.android.commands.svc.Svc.main([Ljava/lang/String;)V
com.android.mms.transaction.NotificationTransaction.notifyObservers()V
com.android.mms.transaction.ReadRecTransaction.notifyObservers()V
com.android.mms.transaction.RetrieveTransaction.notifyObservers()V
com.android.mms.transaction.SendTransaction.notifyObservers()V
com.android.mms.transaction.Transaction.notifyObservers()V
android.nfc.NfcAdapter.disableNdefPush()Z
android.nfc.NfcAdapter.enableNdefPush()Z
com.android.phone.PhoneUtils.setAudioMode()V
com.android.phone.PhoneUtils.switchHoldingAndActive(Lcom/android/internal/telephony/Call;)V
com.android.phone.DTMFTwelveKeyDialer.closeDialer(Z)V
com.android.internal.widget.multiwaveview.GlowPadView$1.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView$2.onAnimationEnd(Landroid/animation/Animator;)V
com.android.internal.widget.multiwaveview.GlowPadView.onTouchEvent(Landroid/view/MotionEvent;)Z
com.android.phone.EmergencyCallHelper.startEmergencyCallFromAirplaneModeSequence(Ljava/lang/String;)V
com.android.phone.EmergencyCallHelper.startRetryTimer()V
com.android.phone.EmergencyCallHelper.placeEmergencyCall()V
com.android.phone.OutgoingCallBroadcaster.processIntent(Landroid/content/Intent;)V
com.android.phone.SipCallOptionHandler$1.run()V
com.android.phone.CallCard.updateState(Lcom/android/internal/telephony/CallManager;)V
com.android.mms.transaction.NotificationTransaction.run()V
com.android.mms.transaction.ReadRecTransaction.process()V
com.android.mms.transaction.RetrieveTransaction.run()V
com.android.mms.transaction.SendTransaction.run()V
com.android.settings.nfc.AndroidBeam.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.phone.PhoneUtils.answerCall(Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.placeCall(Landroid/content/Context;Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/net/Uri;ZLandroid/net/Uri;)I
com.android.phone.Ringer.stopRing()V
com.android.phone.BluetoothHandsfree$16.handleSetCommand([Ljava/lang/Object;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.handleCallKey()Z
com.android.phone.InCallScreen.internalSwapCalls()V
com.android.phone.InCallScreen.onHoldClick()V
com.android.phone.PhoneUtils.mergeCalls(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.PhoneUtils.sendEmptyFlash(Lcom/android/internal/telephony/Phone;)V
com.android.phone.DTMFTwelveKeyDialer.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.DTMFTwelveKeyDialer.clearInCallScreenReference()V
com.android.phone.InCallScreen.closeDialpadInternal(Z)V
com.android.phone.OtaUtils.otaShowProgramFailureDialog()V
com.android.phone.OtaUtils.otaShowProgramSuccessDialog()V
com.android.internal.widget.multiwaveview.GlowPadView.onHoverEvent(Landroid/view/MotionEvent;)Z
com.android.phone.EmergencyCallHelper.onServiceStateChanged(Landroid/os/Message;)V
com.android.phone.OutgoingCallBroadcaster.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.updateIncomingCallWidgetHint(II)V
com.android.mms.transaction.Transaction.process()V
com.android.phone.BluetoothHandsfree$3.handleBasicCommand(Ljava/lang/String;)Landroid/bluetooth/AtCommandResult;
com.android.phone.InCallScreen.internalAnswerCall()V
com.android.phone.PhoneInterfaceManager.answerRingingCallInternal()V
com.android.phone.PhoneUtils.answerAndEndActive(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.answerAndEndHolding(Lcom/android/internal/telephony/CallManager;Lcom/android/internal/telephony/Call;)Z
com.android.phone.PhoneUtils.handleHeadsetHook(Lcom/android/internal/telephony/Phone;Landroid/view/KeyEvent;)Z
com.android.phone.OtaUtils.startNonInteractiveOtasp(Landroid/content/Context;)I
com.android.phone.CallNotifier.silenceRinger()V
com.android.phone.InCallScreen.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.phone.PhoneUtils.mergeCalls()V
com.android.phone.DTMFTwelveKeyDialerView.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
com.android.phone.InCallScreen.onDestroy()V
com.android.phone.InCallScreen.onOpenCloseDialpad()V
com.android.phone.InCallTouchUi.onGrabbedStateChange(Landroid/view/View;I)V
com.android.phone.PhoneInterfaceManager.access$000(Lcom/android/phone/PhoneInterfaceManager;)V
com.android.phone.InCallScreen.internalAnswerAndEnd()V
com.android.phone.InCallScreenShowActivation.onCreate(Landroid/os/Bundle;)V
com.android.phone.InCallScreen.internalSilenceRinger()V
com.android.phone.PhoneInterfaceManager.silenceRingerInternal()V
com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener.onGrabbedStateChange(Landroid/view/View;I)V
com.android.phone.InCallScreen.internalRespondViaSms()V
com.android.phone.PhoneInterfaceManager.access$100(Lcom/android/phone/PhoneInterfaceManager;)V
com.android.internal.widget.multiwaveview.GlowPadView.setGrabbedState(I)V
android.server.BluetoothService.isEnabled()Z
android.bluetooth.IBluetooth$Stub$Proxy.isEnabled()Z
android.bluetooth.IBluetooth$Stub.isEnabled()Z
android.bluetooth.IBluetooth.isEnabled()Z
android.bluetooth.BluetoothAdapter.isEnabled()Z
com.android.bluetooth.opp.BluetoothOppManager.isEnabled()Z
com.android.bluetooth.opp.BluetoothOppService.startListener()V
com.android.bluetooth.opp.BluetoothOppTransferHistory.updateNotificationWhenBtDisabled()V
com.android.bluetooth.pbap.BluetoothPbapReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.nfc.handover.HandoverManager$HandoverPowerManager.isBluetoothEnabled()Z
com.android.settings.bluetooth.LocalBluetoothAdapter.isEnabled()Z
com.android.bluetooth.opp.BluetoothOppLauncherActivity.onCreate(Landroid/os/Bundle;)V
com.android.bluetooth.opp.BluetoothOppTransferHistory.clearAllDownloads()V
com.android.nfc.handover.BluetoothOppHandover.start()V
com.android.bluetooth.opp.BluetoothOppTransferHistory.access$000(Lcom/android/bluetooth/opp/BluetoothOppTransferHistory;)V
com.android.nfc.handover.HandoverManager.doHandoverUri([Landroid/net/Uri;Landroid/nfc/NdefMessage;)V
com.android.bluetooth.opp.BluetoothOppTransferHistory$1.onClick(Landroid/content/DialogInterface;I)V
android.server.BluetoothService.getBluetoothState()I
android.bluetooth.IBluetooth$Stub$Proxy.getBluetoothState()I
android.bluetooth.IBluetooth$Stub.getBluetoothState()I
android.bluetooth.IBluetooth.getBluetoothState()I
android.bluetooth.BluetoothAdapter.getState()I
com.android.server.pm.ShutdownThread$5.run()V
android.bluetooth.BluetoothA2dp.isEnabled()Z
android.bluetooth.BluetoothAdapter.readOutOfBandData()Landroid/util/Pair;
android.bluetooth.BluetoothAdapter.cancelDiscovery()Z
android.bluetooth.BluetoothAdapter.setName(Ljava/lang/String;)Z
android.bluetooth.BluetoothAdapter.setScanMode(II)Z
android.bluetooth.BluetoothAdapter.setScanMode(I)Z
android.bluetooth.BluetoothAdapter.startDiscovery()Z
android.bluetooth.BluetoothAdapter.getConnectionState()I
android.bluetooth.BluetoothAdapter.getProfileConnectionState(I)I
android.bluetooth.BluetoothAdapter.getBondedDevices()Ljava/util/Set;
android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(I)V
android.bluetooth.BluetoothHeadset.isDisabled()Z
android.bluetooth.BluetoothHeadset.isEnabled()Z
android.bluetooth.BluetoothHealth.isEnabled()Z
android.bluetooth.BluetoothInputDevice.isEnabled()Z
android.bluetooth.BluetoothPan.isEnabled()Z
com.android.settings.bluetooth.LocalBluetoothAdapter.getState()I
com.android.settings.TetherSettings.updateBluetoothState([Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.systemui.statusbar.phone.PhoneStatusBarPolicy.<init>(Landroid/content/Context;)V
com.android.systemui.statusbar.policy.BluetoothController.<init>(Landroid/content/Context;)V
android.bluetooth.BluetoothA2dp.isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothA2dp.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.BluetoothA2dp.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothA2dp.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothA2dp.getConnectedDevices()Ljava/util/List;
android.bluetooth.BluetoothA2dp.getDevicesMatchingConnectionStates([I)Ljava/util/List;
com.android.settings.bluetooth.LocalBluetoothAdapter.cancelDiscovery()V
com.android.settings.bluetooth.LocalBluetoothAdapter.setName(Ljava/lang/String;)V
com.android.settings.bluetooth.LocalBluetoothAdapter.setScanMode(II)Z
com.android.settings.bluetooth.LocalBluetoothAdapter.setScanMode(I)V
android.server.BluetoothService.dumpProfileState(Ljava/io/PrintWriter;)V
android.server.BluetoothA2dpService.adjustOtherSinkPriorities(Landroid/bluetooth/BluetoothDevice;)V
com.android.phone.BluetoothHeadsetService.adjustOtherHeadsetPriorities(Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.LocalBluetoothAdapter.getBondedDevices()Ljava/util/Set;
com.android.settings.bluetooth.LocalBluetoothAdapter.setDiscoverableTimeout(I)V
android.bluetooth.BluetoothHeadset.setAudioState(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.BluetoothHeadset.getAudioState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothHeadset.cancelConnectThread()Z
android.bluetooth.BluetoothHeadset.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothHeadset.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.BluetoothHeadset.getBatteryUsageHint(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothHeadset.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothHeadset.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothHeadset.getConnectedDevices()Ljava/util/List;
android.bluetooth.BluetoothHeadset.getDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.BluetoothHealth.registerAppConfiguration(Ljava/lang/String;IIILandroid/bluetooth/BluetoothHealthCallback;)Z
android.bluetooth.BluetoothHealth.registerSinkAppConfiguration(Ljava/lang/String;ILandroid/bluetooth/BluetoothHealthCallback;)Z
android.bluetooth.BluetoothHealth.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothHealth.getConnectedDevices()Ljava/util/List;
android.bluetooth.BluetoothHealth.getDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.BluetoothInputDevice.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
android.bluetooth.BluetoothInputDevice.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothInputDevice.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothInputDevice.getConnectedDevices()Ljava/util/List;
android.bluetooth.BluetoothInputDevice.getDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.BluetoothPan.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothPan.getConnectedDevices()Ljava/util/List;
android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates([I)Ljava/util/List;
com.android.settings.TetherSettings.updateState([Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.systemui.statusbar.phone.PhoneStatusBar.start()V
com.android.systemui.statusbar.tablet.TabletStatusBar.makeStatusBarView()Landroid/view/View;
com.android.settings.bluetooth.A2dpProfile.isA2dpPlaying()Z
android.server.BluetoothBondState.setProfilePriorities(Ljava/lang/String;I)V
com.android.settings.bluetooth.A2dpProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
com.android.settings.bluetooth.A2dpProfile.getConnectionStatus(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.A2dpProfile.getSummaryResourceForDevice(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.A2dpProfile.isPreferred(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.A2dpProfile.getPreferred(Landroid/bluetooth/BluetoothDevice;)I
android.server.BluetoothEventLoop.isOtherSinkInNonDisconnectedState(Ljava/lang/String;)Z
com.android.settings.bluetooth.A2dpProfile.getConnectedDevices()Ljava/util/List;
com.android.settings.bluetooth.BluetoothNameDialogFragment.setDeviceName(Ljava/lang/String;)V
com.android.settings.bluetooth.RequestPermissionActivity.proceedAndFinish()V
android.server.BluetoothA2dpService.handleSinkStateChange(Landroid/bluetooth/BluetoothDevice;II)V
com.android.settings.bluetooth.DockService.hasOtherConnectedDevices(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHandsfree$1.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
com.android.phone.BluetoothHandsfree.setAudioState(ILandroid/bluetooth/BluetoothDevice;)V
android.media.AudioService.checkScoAudioState()V
com.android.phone.BluetoothHandsfree.getAudioState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothDeviceProfileState.cancelCommand(I)V
com.android.settings.bluetooth.HeadsetProfile.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.HeadsetProfile.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.server.BluetoothService.dumpHeadsetService(Ljava/io/PrintWriter;)V
com.android.settings.bluetooth.HeadsetProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
com.android.internal.os.BatteryStatsImpl.getCurrentBluetoothPingCount()I
android.server.BluetoothService.dumpHeadsetConnectionState(Ljava/io/PrintWriter;Landroid/bluetooth/BluetoothDevice;)V
com.android.phone.InCallScreen.dumpBluetoothState()V
com.android.settings.bluetooth.HeadsetProfile.getConnectionStatus(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.HeadsetProfile.getSummaryResourceForDevice(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.BluetoothDeviceProfileState.handleConnectionOfOtherProfiles(I)V
android.server.BluetoothService.notifyIncomingA2dpConnection(Ljava/lang/String;Z)Z
com.android.settings.bluetooth.HeadsetProfile.isPreferred(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.HeadsetProfile.getPreferred(Landroid/bluetooth/BluetoothDevice;)I
com.android.phone.InCallScreen.isBluetoothAvailable()Z
com.android.settings.bluetooth.HidProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
android.server.BluetoothService.dumpInputDeviceProfile(Ljava/io/PrintWriter;)V
com.android.settings.bluetooth.HidProfile.getConnectionStatus(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.HidProfile.getSummaryResourceForDevice(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.HidProfile.isPreferred(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.HidProfile.getPreferred(Landroid/bluetooth/BluetoothDevice;)I
android.server.BluetoothService.dumpPanProfile(Ljava/io/PrintWriter;)V
com.android.settings.bluetooth.PanProfile.getConnectionStatus(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.PanProfile.getSummaryResourceForDevice(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.TetherSettings.access$100(Lcom/android/settings/TetherSettings;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V
com.android.settings.TetherSettings.updateState()V
com.android.systemui.statusbar.BaseStatusBar.start()V
com.android.systemui.SystemUI.start()V
com.android.systemui.statusbar.tablet.TabletStatusBar.addStatusBarWindow()V
android.server.BluetoothBondState.setBondState(Ljava/lang/String;II)V
com.android.settings.bluetooth.LocalBluetoothProfile.setPreferred(Landroid/bluetooth/BluetoothDevice;Z)V
com.android.settings.bluetooth.LocalBluetoothProfile.getConnectionStatus(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.LocalBluetoothProfile.getSummaryResourceForDevice(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.LocalBluetoothProfile.isPreferred(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.LocalBluetoothProfile.getPreferred(Landroid/bluetooth/BluetoothDevice;)I
com.android.settings.bluetooth.BluetoothNameDialogFragment.access$000(Lcom/android/settings/bluetooth/BluetoothNameDialogFragment;Ljava/lang/String;)V
com.android.settings.bluetooth.RequestPermissionActivity.access$200(Lcom/android/settings/bluetooth/RequestPermissionActivity;)V
com.android.settings.bluetooth.RequestPermissionActivity.onClick(Landroid/content/DialogInterface;I)V
android.server.BluetoothA2dpService.access$300(Landroid/server/BluetoothA2dpService;Landroid/bluetooth/BluetoothDevice;II)V
com.android.phone.BluetoothHandsfree.access$800(Lcom/android/phone/BluetoothHandsfree;ILandroid/bluetooth/BluetoothDevice;)V
com.android.phone.BluetoothHandsfree.closeConnectedSco()V
android.media.AudioService.access$2200(Landroid/media/AudioService;)V
com.android.phone.BluetoothHandsfree.access$4800(Lcom/android/phone/BluetoothHandsfree;Landroid/bluetooth/BluetoothDevice;)I
com.android.internal.os.BatteryStatsImpl.getBluetoothPingCount()I
com.android.internal.os.BatteryStatsImpl.doUnplugLocked(JJ)V
com.android.internal.os.BatteryStatsImpl.setBtHeadset(Landroid/bluetooth/BluetoothHeadset;)V
com.android.phone.InCallControlState.update()V
com.android.settings.TetherSettings.access$300(Lcom/android/settings/TetherSettings;)V
com.android.settings.TetherSettings.onStart()V
com.android.systemui.statusbar.tablet.TabletStatusBar.start()V
com.android.systemui.SystemUIService.onCreate()V
com.android.systemui.statusbar.tablet.TabletStatusBar.createAndAddWindows()V
android.server.BluetoothBondState.setBondState(Ljava/lang/String;I)V
android.server.BluetoothService.cancelBondProcess(Ljava/lang/String;)Z
android.server.BluetoothService.cancelPairingUserInput(Ljava/lang/String;)Z
android.server.BluetoothService.setBondState(Ljava/lang/String;II)Z
android.server.BluetoothService.finishDisable()V
com.android.settings.bluetooth.CachedBluetoothDevice.getProfileConnectionState(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)I
com.android.settings.bluetooth.DeviceProfilesSettings.refreshProfilePreference(Landroid/preference/CheckBoxPreference;Lcom/android/settings/bluetooth/LocalBluetoothProfile;)V
com.android.settings.bluetooth.BluetoothDevicePreference.getConnectionSummary()I
com.android.settings.bluetooth.DeviceProfilesSettings.getAutoConnect(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)Z
com.android.settings.bluetooth.DockService.initBtSettings(Landroid/bluetooth/BluetoothDevice;IZ)[Ljava/lang/CharSequence;
com.android.settings.bluetooth.BluetoothNameDialogFragment$2.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.BluetoothNameDialogFragment$3.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
com.android.settings.bluetooth.RequestPermissionActivity$1.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.settings.bluetooth.RequestPermissionActivity.createDialog()V
com.android.phone.BluetoothHandsfree$ScoSocketConnectThread.failedScoConnect()V
com.android.phone.BluetoothHandsfree.access$1300(Lcom/android/phone/BluetoothHandsfree;)V
com.android.internal.os.BatteryStatsImpl.doPlugLocked(JJ)V
com.android.internal.os.BatteryStatsImpl.writeToParcelLocked(Landroid/os/Parcel;ZI)V
com.android.settings.fuelgauge.PowerUsageSummary.addBluetoothUsage(J)V
com.android.internal.os.BatteryStatsImpl.setOnBatteryLocked(ZII)V
com.android.server.am.BatteryStatsService$1.onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
com.android.server.am.BatteryStatsService.noteBluetoothOn()V
com.android.phone.InCallScreen.getUpdatedInCallControlState()Lcom/android/phone/InCallControlState;
com.android.settings.SettingsPreferenceFragment.onStart()V
com.android.systemui.statusbar.BaseStatusBar.createAndAddWindows()V
android.server.BluetoothService.createBond(Ljava/lang/String;)Z
android.server.BluetoothService.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth$Stub$Proxy.cancelBondProcess(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.cancelBondProcess(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.cancelPairingUserInput(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.cancelPairingUserInput(Ljava/lang/String;)Z
android.server.BluetoothService.setBondState(Ljava/lang/String;I)Z
android.server.BluetoothService.onCreatePairedDeviceResult(Ljava/lang/String;I)V
android.server.BluetoothService.pairingAttempt(Ljava/lang/String;I)V
android.server.BluetoothAdapterStateMachine.finishSwitchingOff()V
com.android.settings.bluetooth.CachedBluetoothDevice.isBusy()Z
com.android.settings.bluetooth.CachedBluetoothDevice.isConnectedProfile(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)Z
com.android.settings.bluetooth.CachedBluetoothDevice.isConnected()Z
com.android.settings.bluetooth.DeviceProfilesSettings.createProfilePreference(Lcom/android/settings/bluetooth/LocalBluetoothProfile;)Landroid/preference/CheckBoxPreference;
com.android.settings.bluetooth.DeviceProfilesSettings.refreshProfiles()V
com.android.settings.bluetooth.BluetoothDevicePreference.onDeviceAttributesChanged()V
com.android.settings.bluetooth.DockService.createDialog(Landroid/bluetooth/BluetoothDevice;II)V
com.android.phone.BluetoothHandsfree$ScoSocketConnectThread.<init>(Lcom/android/phone/BluetoothHandsfree;Landroid/bluetooth/BluetoothDevice;)V
com.android.phone.BluetoothHandsfree$ScoSocketConnectThread.shutdown()V
com.android.phone.BluetoothHandsfree$SignalScoCloseThread.shutdown()V
com.android.internal.os.BatteryStatsImpl.writeToParcel(Landroid/os/Parcel;I)V
com.android.internal.os.BatteryStatsImpl.writeToParcelWithoutUids(Landroid/os/Parcel;I)V
com.android.settings.fuelgauge.PowerUsageSummary.processMiscUsage()V
com.android.internal.os.BatteryStatsImpl.setBatteryState(IIIIII)V
com.android.internal.os.BatteryStatsImpl.setOnBattery(ZII)V
com.android.internal.app.IBatteryStats$Stub$Proxy.noteBluetoothOn()V
com.android.internal.app.IBatteryStats$Stub.noteBluetoothOn()V
com.android.phone.InCallTouchUi.showAudioModePopup()V
com.android.phone.InCallTouchUi.updateInCallControls(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.PhoneApp.updateProximitySensorMode(Lcom/android/internal/telephony/Phone$State;)V
com.android.settings.LocationSettings.onStart()V
android.bluetooth.IBluetooth$Stub$Proxy.createBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.createBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth$Stub.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.IBluetooth.cancelBondProcess(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.cancelPairingUserInput(Ljava/lang/String;)Z
android.server.BluetoothEventLoop.onCreatePairedDeviceResult(Ljava/lang/String;I)V
android.server.BluetoothAdapterStateMachine.access$5300(Landroid/server/BluetoothAdapterStateMachine;)V
com.android.settings.bluetooth.CachedBluetoothDevice.compareTo(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)I
com.android.settings.bluetooth.DeviceProfilesSettings.addPreferencesForProfiles()V
com.android.settings.bluetooth.DeviceProfilesSettings.refresh()V
com.android.settings.bluetooth.BluetoothDevicePreference.<init>(Landroid/content/Context;Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDevice$Callback.onDeviceAttributesChanged()V
com.android.server.am.BatteryStatsService.getStatistics()[B
com.android.settings.fuelgauge.PowerUsageSummary.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
com.android.settings.fuelgauge.PowerUsageSummary.refreshStats()V
com.android.server.am.BatteryStatsService.setBatteryState(IIIIII)V
com.android.internal.app.IBatteryStats$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.internal.app.IBatteryStats.noteBluetoothOn()V
com.android.phone.InCallTouchUi.refreshAudioModePopup()V
com.android.phone.InCallTouchUi.access$300(Lcom/android/phone/InCallTouchUi;Lcom/android/internal/telephony/CallManager;)V
com.android.phone.InCallTouchUi.updateState(Lcom/android/internal/telephony/CallManager;)V
com.android.phone.PhoneApp.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.phone.PhoneApp.orientationChanged(I)V
com.android.phone.PhoneApp.setBeginningCall(Z)V
com.android.phone.PhoneApp.updatePhoneState(Lcom/android/internal/telephony/Phone$State;)V
com.android.phone.PhoneUtils.turnOnSpeaker(Landroid/content/Context;ZZ)V
android.bluetooth.IBluetooth.createBond(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.createBondOutOfBand(Ljava/lang/String;[B[B)Z
android.bluetooth.BluetoothDevice.cancelBondProcess()Z
android.bluetooth.BluetoothDevice.cancelPairingUserInput()Z
com.android.settings.bluetooth.BluetoothDevicePreference.compareTo(Landroid/preference/Preference;)I
com.android.settings.bluetooth.CachedBluetoothDevice.compareTo(Ljava/lang/Object;)I
com.android.settings.bluetooth.DeviceProfilesSettings.onDeviceAttributesChanged()V
com.android.settings.bluetooth.DeviceListPreferenceFragment.createDevicePreference(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDevice.dispatchAttributesChanged()V
com.android.internal.app.IBatteryStats$Stub$Proxy.getStatistics()[B
com.android.internal.app.IBatteryStats$Stub.getStatistics()[B
com.android.settings.fuelgauge.PowerUsageSummary.onOptionsItemSelected(Landroid/view/MenuItem;)Z
com.android.settings.fuelgauge.PowerUsageSummary.onResume()V
com.android.internal.app.IBatteryStats$Stub$Proxy.setBatteryState(IIIIII)V
com.android.internal.app.IBatteryStats$Stub.setBatteryState(IIIIII)V
com.android.server.am.BatteryStatsService.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.phone.InCallTouchUi$2.onAnimationStart(Landroid/animation/Animator;)V
com.android.phone.InCallScreen.updateInCallTouchUi()V
com.android.phone.AccelerometerListener$OrientationListener.orientationChanged(I)V
com.android.phone.PhoneUtils.activateSpeakerIfDocked(Lcom/android/internal/telephony/Phone;)Z
com.android.phone.PhoneUtils.restoreSpeakerMode(Landroid/content/Context;)V
android.bluetooth.BluetoothDevice.createBond()Z
android.bluetooth.BluetoothDevice.createBondOutOfBand([B[B)Z
com.android.settings.bluetooth.BluetoothPairingDialog.onCancel()V
com.android.settings.bluetooth.BluetoothDevicePreference.compareTo(Ljava/lang/Object;)I
com.android.settings.bluetooth.BluetoothSettings.createDevicePreference(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.DevicePickerFragment.createDevicePreference(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDevice.refresh()V
com.android.settings.bluetooth.CachedBluetoothDevice.setBtClass(Landroid/bluetooth/BluetoothClass;)V
com.android.settings.bluetooth.CachedBluetoothDevice.setRssi(S)V
com.android.settings.bluetooth.CachedBluetoothDevice.setVisible(Z)V
com.android.internal.app.IBatteryStats.getStatistics()[B
com.android.internal.app.IBatteryStats.setBatteryState(IIIIII)V
com.android.phone.InCallScreen.onDialerOpen(Z)V
com.android.phone.AccelerometerListener.setOrientation(I)V
com.android.nfc.handover.BluetoothHeadsetHandover.startBonding()V
com.android.settings.bluetooth.BluetoothPairingDialog.onKeyDown(ILandroid/view/KeyEvent;)Z
com.android.settings.bluetooth.BluetoothPairingDialog.onClick(Landroid/content/DialogInterface;I)V
com.android.settings.bluetooth.BluetoothEventManager$DockEventHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onDeviceDisappeared(Lcom/android/settings/bluetooth/CachedBluetoothDevice;)Z
com.android.settings.bluetooth.CachedBluetoothDeviceManager.onScanningStateChanged(Z)V
com.android.settings.fuelgauge.PowerUsageSummary.load()V
com.android.server.BatteryService.processValues()V
com.android.phone.DTMFTwelveKeyDialer.onDialerOpen(Z)V
com.android.phone.AccelerometerListener.onSensorEvent(DDD)V
com.android.settings.bluetooth.BluetoothEventManager$DeviceDisappearedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.settings.bluetooth.BluetoothEventManager$ScanningStateChangedHandler.onReceive(Landroid/content/Context;Landroid/content/Intent;Landroid/bluetooth/BluetoothDevice;)V
com.android.server.BatteryService.update()V
com.android.phone.DTMFTwelveKeyDialer.openDialer(Z)V
com.android.phone.AccelerometerListener.access$000(Lcom/android/phone/AccelerometerListener;DDD)V
com.android.server.BatteryService.access$000(Lcom/android/server/BatteryService;)V
com.android.server.BatteryService.<init>(Landroid/content/Context;Lcom/android/server/LightsService;)V
com.android.phone.InCallScreen.openDialpadInternal(Z)V
com.android.phone.AccelerometerListener$1.onSensorChanged(Landroid/hardware/SensorEvent;)V
com.android.server.BatteryService$1.onUEvent(Landroid/os/UEventObserver$UEvent;)V
com.android.server.BatteryService$2.onUEvent(Landroid/os/UEventObserver$UEvent;)V
android.server.BluetoothService.setPropertyString(Ljava/lang/String;Ljava/lang/String;)Z
android.server.BluetoothService.setName(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.setName(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.setName(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.setName(Ljava/lang/String;)Z
android.server.BluetoothService.setPropertyInteger(Ljava/lang/String;I)Z
android.server.BluetoothService.setDiscoverableTimeout(I)Z
android.bluetooth.IBluetooth$Stub$Proxy.setDiscoverableTimeout(I)Z
android.bluetooth.IBluetooth$Stub.setDiscoverableTimeout(I)Z
android.bluetooth.IBluetooth.setDiscoverableTimeout(I)Z
android.server.BluetoothService.setPropertyBoolean(Ljava/lang/String;Z)Z
android.server.BluetoothService.setScanMode(II)Z
android.bluetooth.IBluetooth$Stub$Proxy.setScanMode(II)Z
android.bluetooth.IBluetooth$Stub.setScanMode(II)Z
android.bluetooth.IBluetooth.setScanMode(II)Z
android.server.BluetoothService.readOutOfBandData()[B
android.bluetooth.IBluetooth$Stub$Proxy.readOutOfBandData()[B
android.bluetooth.IBluetooth$Stub.readOutOfBandData()[B
android.bluetooth.IBluetooth.readOutOfBandData()[B
android.server.BluetoothService.listBonds()[Ljava/lang/String;
android.bluetooth.IBluetooth$Stub$Proxy.listBonds()[Ljava/lang/String;
android.bluetooth.IBluetooth$Stub.listBonds()[Ljava/lang/String;
android.bluetooth.IBluetooth.listBonds()[Ljava/lang/String;
android.server.BluetoothService.getBondState(Ljava/lang/String;)I
android.bluetooth.IBluetooth$Stub$Proxy.getBondState(Ljava/lang/String;)I
android.bluetooth.IBluetooth$Stub.getBondState(Ljava/lang/String;)I
android.server.BluetoothService.connectHeadset(Ljava/lang/String;)Z
android.server.BluetoothService.connectSink(Ljava/lang/String;)Z
android.server.BluetoothService.disconnectHeadset(Ljava/lang/String;)Z
android.server.BluetoothService.disconnectSink(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.getBondState(Ljava/lang/String;)I
android.bluetooth.IBluetooth$Stub$Proxy.connectHeadset(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.connectHeadset(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub$Proxy.disconnectHeadset(Ljava/lang/String;)Z
android.bluetooth.IBluetooth$Stub.disconnectHeadset(Ljava/lang/String;)Z
android.bluetooth.BluetoothDevice.getBondState()I
android.bluetooth.IBluetooth.connectHeadset(Ljava/lang/String;)Z
android.bluetooth.IBluetooth.disconnectHeadset(Ljava/lang/String;)Z
com.android.settings.bluetooth.BluetoothDeviceFilter$BondedDeviceFilter.matches(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.BluetoothDeviceFilter$UnbondedDeviceFilter.matches(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.CachedBluetoothDevice.getBondState()I
com.android.phone.BluetoothHeadsetService$6.connect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.BluetoothDevicePreference.onBindView(Landroid/view/View;)V
com.android.settings.bluetooth.BluetoothSettings.initDevicePreference(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
android.bluetooth.IBluetoothHeadset$Stub$Proxy.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.DeviceListPreferenceFragment.initDevicePreference(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
android.bluetooth.IBluetoothHeadset.connect(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.disconnect(Landroid/bluetooth/BluetoothDevice;)Z
com.android.settings.bluetooth.DevicePickerFragment.initDevicePreference(Lcom/android/settings/bluetooth/BluetoothDevicePreference;)V
android.server.BluetoothService.addRfcommServiceRecord(Ljava/lang/String;Landroid/os/ParcelUuid;ILandroid/os/IBinder;)I
android.bluetooth.IBluetooth$Stub$Proxy.addRfcommServiceRecord(Ljava/lang/String;Landroid/os/ParcelUuid;ILandroid/os/IBinder;)I
android.bluetooth.IBluetooth$Stub.addRfcommServiceRecord(Ljava/lang/String;Landroid/os/ParcelUuid;ILandroid/os/IBinder;)I
android.bluetooth.IBluetooth.addRfcommServiceRecord(Ljava/lang/String;Landroid/os/ParcelUuid;ILandroid/os/IBinder;)I
android.bluetooth.BluetoothAdapter.createNewRfcommSocketAndRecord(Ljava/lang/String;Ljava/util/UUID;ZZ)Landroid/bluetooth/BluetoothServerSocket;
android.bluetooth.BluetoothAdapter.listenUsingEncryptedRfcommWithServiceRecord(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;
android.server.BluetoothService.removeServiceRecord(I)V
android.bluetooth.IBluetooth$Stub$Proxy.removeServiceRecord(I)V
android.bluetooth.IBluetooth$Stub.removeServiceRecord(I)V
android.bluetooth.IBluetooth.removeServiceRecord(I)V
android.server.BluetoothService.changeApplicationBluetoothState(ZLandroid/bluetooth/IBluetoothStateChangeCallback;Landroid/os/IBinder;)Z
android.bluetooth.IBluetooth$Stub$Proxy.changeApplicationBluetoothState(ZLandroid/bluetooth/IBluetoothStateChangeCallback;Landroid/os/IBinder;)Z
android.bluetooth.IBluetooth$Stub.changeApplicationBluetoothState(ZLandroid/bluetooth/IBluetoothStateChangeCallback;Landroid/os/IBinder;)Z
android.bluetooth.IBluetooth.changeApplicationBluetoothState(ZLandroid/bluetooth/IBluetoothStateChangeCallback;Landroid/os/IBinder;)Z
android.bluetooth.BluetoothAdapter.changeApplicationBluetoothState(ZLandroid/bluetooth/BluetoothAdapter$BluetoothStateChangeCallback;)Z
android.server.BluetoothService.isTetheringOn()Z
android.bluetooth.IBluetooth$Stub$Proxy.isTetheringOn()Z
android.bluetooth.IBluetooth$Stub.isTetheringOn()Z
android.bluetooth.IBluetooth.isTetheringOn()Z
android.bluetooth.BluetoothPan.isTetheringOn()Z
android.server.BluetoothService.getPanDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth$Stub$Proxy.getPanDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth$Stub.getPanDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth.getPanDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.server.BluetoothService.getConnectedPanDevices()Ljava/util/List;
android.bluetooth.IBluetooth$Stub$Proxy.getConnectedPanDevices()Ljava/util/List;
android.bluetooth.IBluetooth$Stub.getConnectedPanDevices()Ljava/util/List;
android.bluetooth.IBluetooth.getConnectedPanDevices()Ljava/util/List;
android.server.BluetoothService.getPanDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetooth$Stub$Proxy.getPanDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetooth$Stub.getPanDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetooth.getPanDevicesMatchingConnectionStates([I)Ljava/util/List;
android.server.BluetoothService.getInputDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth$Stub$Proxy.getInputDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth$Stub.getInputDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth.getInputDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.server.BluetoothService.getConnectedInputDevices()Ljava/util/List;
android.bluetooth.IBluetooth$Stub$Proxy.getConnectedInputDevices()Ljava/util/List;
android.bluetooth.IBluetooth$Stub.getConnectedInputDevices()Ljava/util/List;
android.bluetooth.IBluetooth.getConnectedInputDevices()Ljava/util/List;
android.server.BluetoothService.getInputDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetooth$Stub$Proxy.getInputDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetooth$Stub.getInputDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetooth.getInputDevicesMatchingConnectionStates([I)Ljava/util/List;
android.server.BluetoothService.getInputDevicePriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth$Stub$Proxy.getInputDevicePriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth$Stub.getInputDevicePriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth.getInputDevicePriority(Landroid/bluetooth/BluetoothDevice;)I
android.server.BluetoothService.registerAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;Landroid/bluetooth/IBluetoothHealthCallback;)Z
android.bluetooth.IBluetooth$Stub$Proxy.registerAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;Landroid/bluetooth/IBluetoothHealthCallback;)Z
android.bluetooth.IBluetooth$Stub.registerAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;Landroid/bluetooth/IBluetoothHealthCallback;)Z
android.bluetooth.IBluetooth.registerAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;Landroid/bluetooth/IBluetoothHealthCallback;)Z
android.server.BluetoothService.getHealthDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth$Stub$Proxy.getHealthDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth$Stub.getHealthDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth.getHealthDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.server.BluetoothService.getConnectedHealthDevices()Ljava/util/List;
android.bluetooth.IBluetooth$Stub$Proxy.getConnectedHealthDevices()Ljava/util/List;
android.bluetooth.IBluetooth$Stub.getConnectedHealthDevices()Ljava/util/List;
android.bluetooth.IBluetooth.getConnectedHealthDevices()Ljava/util/List;
android.server.BluetoothService.getHealthDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetooth$Stub$Proxy.getHealthDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetooth$Stub.getHealthDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetooth.getHealthDevicesMatchingConnectionStates([I)Ljava/util/List;
android.server.BluetoothService.getProfileConnectionState(I)I
android.bluetooth.IBluetooth$Stub$Proxy.getProfileConnectionState(I)I
android.bluetooth.IBluetooth$Stub.getProfileConnectionState(I)I
android.bluetooth.IBluetooth.getProfileConnectionState(I)I
android.server.BluetoothA2dpService.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothA2dp$Stub.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.server.BluetoothA2dpService.getDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetoothA2dp.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetoothA2dp$Stub.getDevicesMatchingConnectionStates([I)Ljava/util/List;
android.server.BluetoothA2dpService.getConnectedDevices()Ljava/util/List;
android.bluetooth.IBluetoothA2dp.getDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getConnectedDevices()Ljava/util/List;
android.bluetooth.IBluetoothA2dp$Stub.getConnectedDevices()Ljava/util/List;
android.bluetooth.IBluetoothA2dp.getConnectedDevices()Ljava/util/List;
android.server.BluetoothA2dpService.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothA2dp$Stub.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.server.BluetoothService.notifyIncomingConnection(Ljava/lang/String;Z)Z
android.bluetooth.IBluetoothA2dp.getPriority(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetooth$Stub$Proxy.notifyIncomingConnection(Ljava/lang/String;Z)Z
android.bluetooth.IBluetooth$Stub.notifyIncomingConnection(Ljava/lang/String;Z)Z
android.bluetooth.IBluetooth.notifyIncomingConnection(Ljava/lang/String;Z)Z
com.android.bluetooth.pbap.BluetoothPbapService$2.getState()I
android.bluetooth.IBluetoothPbap$Stub$Proxy.getState()I
android.bluetooth.IBluetoothPbap$Stub.getState()I
android.bluetooth.IBluetoothPbap.getState()I
android.bluetooth.IBluetoothPbap$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.bluetooth.BluetoothPbap.getState()I
com.android.bluetooth.pbap.BluetoothPbapService$2.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
com.android.bluetooth.pbap.BluetoothPbapService$2.getClient()Landroid/bluetooth/BluetoothDevice;
android.bluetooth.IBluetoothPbap$Stub$Proxy.getClient()Landroid/bluetooth/BluetoothDevice;
android.bluetooth.IBluetoothPbap$Stub.getClient()Landroid/bluetooth/BluetoothDevice;
android.bluetooth.IBluetoothPbap.getClient()Landroid/bluetooth/BluetoothDevice;
android.bluetooth.BluetoothPbap.getClient()Landroid/bluetooth/BluetoothDevice;
com.android.bluetooth.pbap.BluetoothPbapService$2.isConnected(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothPbap$Stub$Proxy.isConnected(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothPbap$Stub.isConnected(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothPbap.isConnected(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.BluetoothPbap.isConnected(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothHeadset$Stub.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
com.android.phone.BluetoothHeadsetService$6.getDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetoothHeadset.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetoothHeadset$Stub.getDevicesMatchingConnectionStates([I)Ljava/util/List;
com.android.phone.BluetoothHeadsetService$6.getConnectedDevices()Ljava/util/List;
android.bluetooth.IBluetoothHeadset.getDevicesMatchingConnectionStates([I)Ljava/util/List;
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getConnectedDevices()Ljava/util/List;
android.bluetooth.IBluetoothHeadset$Stub.getConnectedDevices()Ljava/util/List;
android.bluetooth.IBluetoothHeadset.getConnectedDevices()Ljava/util/List;
com.android.phone.BluetoothHeadsetService$6.isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub$Proxy.isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset$Stub.isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z
android.bluetooth.IBluetoothHeadset.isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z
com.android.phone.BluetoothHeadsetService$6.getBatteryUsageHint(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getBatteryUsageHint(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothHeadset$Stub.getBatteryUsageHint(Landroid/bluetooth/BluetoothDevice;)I
android.bluetooth.IBluetoothHeadset.getBatteryUsageHint(Landroid/bluetooth/BluetoothDevice;)I
com.android.server.input.InputManagerService.systemReady(Landroid/server/BluetoothService;)V
com.android.server.ServerThread$1.run()V
android.bluetooth.BluetoothSocket.initSocketFromFdNative(I)V
android.bluetooth.BluetoothSocket.<init>(IIZZLandroid/bluetooth/BluetoothDevice;ILandroid/os/ParcelUuid;)V
android.bluetooth.BluetoothDevice.createInsecureRfcommSocket(I)Landroid/bluetooth/BluetoothSocket;
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;
android.bluetooth.BluetoothDevice.createRfcommSocket(I)Landroid/bluetooth/BluetoothSocket;
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;
android.bluetooth.BluetoothDevice.createScoSocket()Landroid/bluetooth/BluetoothSocket;
android.bluetooth.BluetoothServerSocket.<init>(IZZI)V
android.bluetooth.BluetoothSocket.<init>(IIZZLjava/lang/String;I)V
android.bluetooth.BluetoothAdapter.listenUsingEncryptedRfcommOn(I)Landroid/bluetooth/BluetoothServerSocket;
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommOn(I)Landroid/bluetooth/BluetoothServerSocket;
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(I)Landroid/bluetooth/BluetoothServerSocket;
android.bluetooth.BluetoothAdapter.listenUsingScoOn()Landroid/bluetooth/BluetoothServerSocket;
com.android.bluetooth.pbap.BluetoothPbapService.initSocket()Z
com.android.bluetooth.opp.BluetoothOppRfcommListener$1.run()V
com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread.<init>(Lcom/android/phone/BluetoothHandsfree;)V
android.bluetooth.BluetoothSocket.initSocketNative()V
Permission:android.permission.RECORD_AUDIO

440 Callers:

android.speech.RecognitionService.checkPermissions(Landroid/speech/IRecognitionListener;)Z
android.speech.RecognitionService.access$700(Landroid/speech/RecognitionService;Landroid/speech/IRecognitionListener;)Z
android.speech.RecognitionService$RecognitionServiceBinder.cancel(Landroid/speech/IRecognitionListener;)V
android.speech.RecognitionService$RecognitionServiceBinder.startListening(Landroid/content/Intent;Landroid/speech/IRecognitionListener;)V
android.speech.RecognitionService$RecognitionServiceBinder.stopListening(Landroid/speech/IRecognitionListener;)V
android.speech.IRecognitionService$Stub$Proxy.cancel(Landroid/speech/IRecognitionListener;)V
android.speech.IRecognitionService$Stub.cancel(Landroid/speech/IRecognitionListener;)V
android.speech.IRecognitionService$Stub$Proxy.startListening(Landroid/content/Intent;Landroid/speech/IRecognitionListener;)V
android.speech.IRecognitionService$Stub.startListening(Landroid/content/Intent;Landroid/speech/IRecognitionListener;)V
android.speech.IRecognitionService$Stub$Proxy.stopListening(Landroid/speech/IRecognitionListener;)V
android.speech.IRecognitionService$Stub.stopListening(Landroid/speech/IRecognitionListener;)V
android.speech.IRecognitionService$Stub.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.speech.IRecognitionService.cancel(Landroid/speech/IRecognitionListener;)V
android.speech.IRecognitionService.startListening(Landroid/content/Intent;Landroid/speech/IRecognitionListener;)V
android.speech.IRecognitionService.stopListening(Landroid/speech/IRecognitionListener;)V
android.speech.RecognitionService$RecognitionServiceBinder.onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
android.speech.SpeechRecognizer.handleCancelMessage()V
android.speech.SpeechRecognizer.handleStartListening(Landroid/content/Intent;)V
android.speech.SpeechRecognizer.handleStopMessage()V
android.speech.SpeechRecognizer.access$200(Landroid/speech/SpeechRecognizer;)V
android.speech.SpeechRecognizer.access$000(Landroid/speech/SpeechRecognizer;Landroid/content/Intent;)V
android.speech.SpeechRecognizer.access$100(Landroid/speech/SpeechRecognizer;)V
android.speech.SpeechRecognizer.putMessage(Landroid/os/Message;)V
android.speech.SpeechRecognizer.cancel()V
android.speech.SpeechRecognizer.setRecognitionListener(Landroid/speech/RecognitionListener;)V
android.speech.SpeechRecognizer.startListening(Landroid/content/Intent;)V
android.speech.SpeechRecognizer.stopListening()V
android.media.AudioRecord.<init>(IIIII)V
android.media.MediaRecorder.setAudioSource(I)V
android.filterpacks.videosink.MediaEncoderFilter.updateMediaRecorderParams()V
com.android.camera.VideoCamera.initializeRecorder()V
com.android.soundrecorder.Recorder.startRecording(ILjava/lang/String;Landroid/content/Context;)V
android.filterpacks.videosink.MediaEncoderFilter.startRecording(Landroid/filterfw/core/FilterContext;)V
com.android.camera.VideoCamera.startVideoRecording()V
com.android.soundrecorder.SoundRecorder.onClick(Landroid/view/View;)V
android.filterpacks.videosink.MediaEncoderFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.process(Landroid/filterfw/core/FilterContext;)V
com.android.camera.VideoCamera.onShutterButtonClick()V
android.filterfw.core.Filter.open(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.process(Landroid/filterfw/core/FilterContext;)V
com.android.camera.ShutterButton$OnShutterButtonListener.onShutterButtonClick()V
android.filterfw.core.Filter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.CallbackFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.open(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.open(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.Filter.performProcess(Landroid/filterfw/core/FilterContext;)V
com.android.camera.ShutterButton.performClick()Z
android.filterpacks.base.CallbackFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceRenderFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceTargetFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.CameraSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureSource.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureTarget.performOpen(Landroid/filterfw/core/FilterContext;)V
android.filterfw.core.FilterFunction.execute(Landroid/filterfw/core/KeyValueMap;)Landroid/filterfw/core/Frame;
android.filterfw.core.SyncRunner.processFilterNode(Landroid/filterfw/core/Filter;)V
android.filterpacks.base.CallbackFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameBranch.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameFetch.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.FrameStore.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.GLTextureTarget.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.InputStreamSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.NullFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.ObjectSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.OutputStreamTarget.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.base.RetargetFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AlphaBlendFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.AutoFixFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapOverlayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BitmapSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlackWhiteFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BlendFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.BrightnessFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ColorTemperatureFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ContrastFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CropRectFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.CrossProcessFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DocumentaryFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawOverlayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DrawRectFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.DuotoneFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FillLightFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FisheyeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FixedRotationFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.FlipFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.GrainFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageCombineFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageEncoder.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageSlicer.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ImageStitcher.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.Invert.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.LomoishFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.NegativeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.PosterizeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RedEyeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ResizeFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.RotateFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SaturateFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SepiaFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SharpenFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.SimpleImageFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.StraightenFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.TintFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToGrayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToPackedGrayFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBAFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.ToRGBFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.imageproc.VignetteFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.numeric.SinWaveFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.performance.ThroughputFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringLogger.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.StringSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.text.ToUpperCase.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceRenderFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.ui.SurfaceTargetFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videoproc.BackDropperFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosink.MediaEncoderFilter.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.CameraSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.MediaSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureSource.performProcess(Landroid/filterfw/core/FilterContext;)V
android.filterpacks.videosrc.SurfaceTextureTarget.performProcess(Landroid/filterfw/core/FilterContext;)V
com.android.camera.VideoCamera.onKeyDown(ILandroid/view/KeyEvent;)Z
android.filterfw.core.FilterFunction.executeWithArgList([Ljava/lang/Object;)Landroid/filterfw/core/Frame;
android.filterfw.core.SyncRunner.performStep()Z
android.media.effect.SingleFilterEffect.apply(IIII)V
android.media.effect.SizeChangeEffect.apply(IIII)V
android.filterfw.core.AsyncRunner$AsyncRunnerTask.doInBackground([Landroid/filterfw/core/SyncRunner;)Landroid/filterfw/core/AsyncRunner$RunnerResult;
android.filterfw.core.SyncRunner.step()I
android.filterfw.core.SyncRunner.run()V
android.media.effect.effects.AutoFixEffect.apply(IIII)V
android.media.effect.effects.BitmapOverlayEffect.apply(IIII)V
android.media.effect.effects.BlackWhiteEffect.apply(IIII)V
android.media.effect.effects.BrightnessEffect.apply(IIII)V
android.media.effect.effects.ColorTemperatureEffect.apply(IIII)V
android.media.effect.effects.ContrastEffect.apply(IIII)V
android.media.effect.effects.CrossProcessEffect.apply(IIII)V
android.media.effect.effects.DocumentaryEffect.apply(IIII)V
android.media.effect.effects.DuotoneEffect.apply(IIII)V
android.media.effect.effects.FillLightEffect.apply(IIII)V
android.media.effect.effects.FisheyeEffect.apply(IIII)V
android.media.effect.effects.FlipEffect.apply(IIII)V
android.media.effect.effects.GrainEffect.apply(IIII)V
android.media.effect.effects.GrayscaleEffect.apply(IIII)V
android.media.effect.effects.LomoishEffect.apply(IIII)V
android.media.effect.effects.NegativeEffect.apply(IIII)V
android.media.effect.effects.PosterizeEffect.apply(IIII)V
android.media.effect.effects.RedEyeEffect.apply(IIII)V
android.media.effect.effects.SaturateEffect.apply(IIII)V
android.media.effect.effects.SepiaEffect.apply(IIII)V
android.media.effect.effects.SharpenEffect.apply(IIII)V
android.media.effect.effects.StraightenEffect.apply(IIII)V
android.media.effect.effects.TintEffect.apply(IIII)V
android.media.effect.effects.VignetteEffect.apply(IIII)V
android.media.effect.effects.CropEffect.apply(IIII)V
android.media.effect.effects.RotateEffect.apply(IIII)V
android.filterfw.core.AsyncRunner$AsyncRunnerTask.doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
android.filterfw.core.GraphRunner.run()V
android.media.effect.FilterGraphEffect.apply(IIII)V
com.android.camera.EffectsRecorder$4.onRunnerDone(I)V
com.android.camera.EffectsRecorder.startPreview()V
android.media.effect.effects.BackDropperEffect.apply(IIII)V
com.android.camera.EffectsRecorder.setPreviewSurfaceTexture(Landroid/graphics/SurfaceTexture;II)V
com.android.camera.EffectsRecorder.startRecording()V
com.android.camera.VideoCamera.startPreview()V
com.android.camera.VideoCamera.initializeEffectsPreview()V
com.android.camera.VideoCamera.setPreviewTexture()V
com.android.camera.VideoCamera.access$600(Lcom/android/camera/VideoCamera;)V
com.android.camera.VideoCamera.checkQualityAndStartPreview()V
com.android.camera.VideoCamera.onResume()V
com.android.camera.VideoCamera.onSharedPreferenceChanged()V
com.android.camera.VideoCamera.switchCamera()V
com.android.camera.VideoCamera$1.run()V
com.android.camera.VideoCamera.keepScreenOnAwhile()V
com.android.camera.VideoCamera.updateRecordingTime()V
com.android.camera.VideoCamera.updateEffectSelection()Z
com.android.camera.VideoCamera.onEffectsUpdate(II)V
com.android.camera.ActivityBase.onResume()V
com.android.gallery3d.app.AbstractGalleryActivity.onResume()V
com.android.camera.CameraPreference$OnPreferenceChangedListener.onSharedPreferenceChanged()V
com.android.camera.VideoCamera.onCancelBgTraining(Landroid/view/View;)V
com.android.camera.VideoCamera.restorePreferences()V
com.android.camera.VideoCamera.access$1000(Lcom/android/camera/VideoCamera;)V
com.android.camera.VideoCamera.stopVideoRecording()Z
com.android.camera.VideoCamera.onUserInteraction()V
com.android.camera.VideoCamera.access$200(Lcom/android/camera/VideoCamera;)V
com.android.camera.EffectsRecorder$EffectsListener.onEffectsUpdate(II)V
com.android.camera.Camera.onResume()V
com.android.camera.PanoramaActivity.onResume()V
com.android.gallery3d.app.AlbumPicker.onResume()V
com.android.gallery3d.app.CropImage.onResume()V
com.android.gallery3d.app.DialogPicker.onResume()V
com.android.gallery3d.app.Gallery.onResume()V
com.android.gallery3d.app.PickerActivity.onResume()V
com.android.camera.ui.IndicatorControl.onSettingChanged()V
com.android.camera.VideoCamera.access$2100(Lcom/android/camera/VideoCamera;)V
com.android.camera.VideoCamera.onPreviewTextureCopied()V
com.android.camera.VideoCamera.initializeVideoSnapshot()V
com.android.camera.VideoCamera.access$1200(Lcom/android/camera/VideoCamera;)Z
com.android.camera.VideoCamera.onError(Landroid/media/MediaRecorder;II)V
com.android.camera.VideoCamera.onReviewCancelClicked(Landroid/view/View;)V
com.android.camera.VideoCamera.onStopVideoRecording()V
com.android.gallery3d.app.AbstractGalleryActivity.onUserInteraction()V
com.android.camera.EffectsRecorder$5.run()V
com.android.camera.ui.IndicatorButton$Listener.onSettingChanged()V
com.android.camera.ui.IndicatorControlBarContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlBar.onSettingChanged()V
com.android.camera.ui.IndicatorControlContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlWheelContainer.onSettingChanged()V
com.android.camera.ui.IndicatorControlWheel.onSettingChanged()V
com.android.camera.ui.OtherSettingsPopup$Listener.onSettingChanged()V
com.android.camera.ui.SecondLevelIndicatorControlBar.onSettingChanged()V
com.android.camera.VideoCamera$3.run()V
com.android.camera.ActivityBase.onPreviewTextureCopied()V
com.android.camera.VideoCamera.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.camera.VideoCamera.onCreate(Landroid/os/Bundle;)V
com.android.camera.VideoCamera$MyBroadcastReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.camera.VideoCamera.onBackPressed()V
com.android.camera.VideoCamera.onInfo(Landroid/media/MediaRecorder;II)V
com.android.camera.VideoCamera.onPause()V
com.android.camera.ui.IndicatorButton.onSettingChanged()V
com.android.camera.ui.OtherSettingsPopup.onSettingChanged()V
com.android.camera.ActivityBase$MyAppBridge.onPreviewTextureCopied()V
com.android.camera.PanoramaActivity.onPreviewTextureCopied()V
com.android.gallery3d.app.AbstractGalleryActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.camera.ActivityBase.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AbstractGalleryActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.AbstractGalleryActivity.onBackPressed()V
com.android.camera.ActivityBase.onPause()V
com.android.gallery3d.app.AbstractGalleryActivity.onPause()V
com.android.camera.ui.BasicSettingPopup$Listener.onSettingChanged()V
com.android.camera.ui.EffectSettingPopup$Listener.onSettingChanged()V
com.android.camera.ui.InLineSettingItem$Listener.onSettingChanged()V
com.android.camera.CameraScreenNail$Listener.onPreviewTextureCopied()V
com.android.camera.ActivityBase.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.AlbumPicker.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.CropImage.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.DialogPicker.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.Gallery.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.PickerActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.camera.Camera.onCreate(Landroid/os/Bundle;)V
com.android.camera.PanoramaActivity.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.CropImage.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.Gallery.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.PickerActivity.onCreate(Landroid/os/Bundle;)V
com.android.camera.ActivityBase.onBackPressed()V
com.android.gallery3d.app.AlbumPicker.onBackPressed()V
com.android.gallery3d.app.DialogPicker.onBackPressed()V
com.android.gallery3d.app.Gallery.onBackPressed()V
com.android.gallery3d.app.PickerActivity.onBackPressed()V
com.android.camera.Camera.onPause()V
com.android.camera.PanoramaActivity.onPause()V
com.android.gallery3d.app.AlbumPicker.onPause()V
com.android.gallery3d.app.CropImage.onPause()V
com.android.gallery3d.app.DialogPicker.onPause()V
com.android.gallery3d.app.Gallery.onPause()V
com.android.gallery3d.app.PickerActivity.onPause()V
com.android.camera.ui.BasicSettingPopup.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.camera.ui.EffectSettingPopup.onClick(Landroid/view/View;)V
com.android.camera.ui.EffectSettingPopup.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
com.android.camera.ui.InLineSettingItem.changeIndex(I)Z
com.android.camera.CameraScreenNail.draw(Lcom/android/gallery3d/ui/GLCanvas;IIII)V
com.android.camera.Camera.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.camera.PanoramaActivity.onConfigurationChanged(Landroid/content/res/Configuration;)V
com.android.gallery3d.app.AlbumPicker.onCreate(Landroid/os/Bundle;)V
com.android.gallery3d.app.DialogPicker.onCreate(Landroid/os/Bundle;)V
com.android.camera.Camera.onBackPressed()V
com.android.camera.PanoramaActivity.onBackPressed()V
com.android.camera.ui.InLineSettingKnob.changeIndex(I)Z
com.android.camera.ui.InLineSettingRestore.changeIndex(I)Z
com.android.camera.ui.InLineSettingSwitch.changeIndex(I)Z
com.android.gallery3d.ui.SurfaceTextureScreenNail.draw(Lcom/android/gallery3d/ui/GLCanvas;IIII)V
com.android.camera.ui.InLineSettingKnob$1.run()V
com.android.camera.ui.InLineSettingKnob$2.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.camera.ui.InLineSettingKnob$3.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
com.android.camera.ui.InLineSettingSwitch$1.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
com.android.camera.CameraScreenNail.directDraw(Lcom/android/gallery3d/ui/GLCanvas;IIII)V
com.android.gallery3d.ui.ScreenNail.draw(Lcom/android/gallery3d/ui/GLCanvas;IIII)V
com.android.camera.CaptureAnimManager.drawAnimation(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/camera/CameraScreenNail;Lcom/android/gallery3d/ui/RawTexture;)Z
com.android.camera.SwitchAnimManager.drawAnimation(Lcom/android/gallery3d/ui/GLCanvas;IIIILcom/android/camera/CameraScreenNail;Lcom/android/gallery3d/ui/RawTexture;)Z
com.android.gallery3d.ui.PhotoView.buildFallbackEffect(Lcom/android/gallery3d/ui/GLView;Lcom/android/gallery3d/ui/GLCanvas;)Lcom/android/gallery3d/ui/PhotoFallbackEffect;
com.android.gallery3d.ui.PhotoView$ScreenNailPicture.draw(Lcom/android/gallery3d/ui/GLCanvas;Landroid/graphics/Rect;)V
com.android.gallery3d.ui.TileImageView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.PhotoPage$PreparePhotoFallback.onGLIdle(Lcom/android/gallery3d/ui/GLCanvas;Z)Z
com.android.gallery3d.ui.PhotoView$Picture.draw(Lcom/android/gallery3d/ui/GLCanvas;Landroid/graphics/Rect;)V
com.android.gallery3d.ui.GLView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.GLRoot$OnGLIdleListener.onGLIdle(Lcom/android/gallery3d/ui/GLCanvas;Z)Z
com.android.gallery3d.ui.PhotoView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.AlbumPage$2.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.AlbumSetPage$1.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.ManageCachePage$1.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.PhotoPage$1.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.app.SlideshowPage$1.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.CropView$FaceHighlightView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.CropView$HighlightRectangle.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.CropView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.EdgeView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.GLRootView.onDrawFrameLocked(Ljavax/microedition/khronos/opengles/GL10;)V
com.android.gallery3d.ui.GLView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.ScrollBarView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.SlotView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.UndoBarView.render(Lcom/android/gallery3d/ui/GLCanvas;)V
com.android.gallery3d.ui.GLRootView$IdleRunner.run()V
com.android.gallery3d.ui.GLRootView.onDrawFrame(Ljavax/microedition/khronos/opengles/GL10;)V
com.android.gallery3d.app.AlbumPage$2.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.AlbumSetPage$1.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.ManageCachePage$1.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.PhotoPage$1.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.app.SlideshowPage$1.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$FaceHighlightView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView$HighlightRectangle.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.CropView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.EdgeView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.ScrollBarView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlideshowView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.SlotView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.TileImageView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.UndoBarView.renderChild(Lcom/android/gallery3d/ui/GLCanvas;Lcom/android/gallery3d/ui/GLView;)V
com.android.gallery3d.ui.PhotoView$FullPicture.drawTileView(Lcom/android/gallery3d/ui/GLCanvas;Landroid/graphics/Rect;)V
com.android.gallery3d.ui.PhotoView$FullPicture.draw(Lcom/android/gallery3d/ui/GLCanvas;Landroid/graphics/Rect;)V
